Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_beta_divergence", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_hastie_10_2", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "faq", "getting_started", "glossary", "governance", "inspection", "install", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_beta_divergence.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_hastie_10_2.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_hist_gradient_boosting.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.metaestimators.if_delegate_has_method.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Beta-divergence loss functions", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Ensemble methods", "Discrete versus Real AdaBoost", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping of Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Gaussian process regression (GPR) on Mauna Loa CO2 data", "Gaussian process regression (GPR) with noise-level estimation", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "Lasso and Elastic Net for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Plot Ridge coefficients as a function of the L2 regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multioutput methods", "Classifier Chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "SVM-Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensemble methods", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_hist_gradient_boosting", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.if_delegate_has_method", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.0"], "terms": {"thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 411, 412, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 465, 467, 468, 471, 474, 475, 476, 477, 479, 480, 481, 483, 486, 487, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 684, 685, 687, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 713, 714, 715, 716, 717, 718, 719, 720, 725, 731, 732, 733, 734, 735, 736, 738, 739, 740, 742, 745, 746, 751, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 895, 896, 901, 902, 904, 906, 907, 912, 914, 919, 920, 922, 925, 927, 928, 931, 932, 941, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 983, 986, 987, 988, 989, 990, 991, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "wa": [0, 4, 8, 13, 16, 40, 69, 70, 79, 85, 91, 126, 129, 158, 166, 172, 221, 247, 250, 252, 254, 256, 262, 263, 276, 294, 306, 307, 311, 316, 317, 339, 341, 348, 350, 354, 362, 364, 365, 367, 370, 371, 379, 382, 385, 387, 388, 391, 394, 395, 399, 403, 420, 421, 425, 429, 433, 436, 439, 448, 453, 493, 501, 513, 514, 516, 518, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 545, 546, 547, 548, 563, 564, 566, 568, 569, 580, 605, 608, 619, 628, 629, 632, 633, 634, 636, 642, 643, 654, 663, 664, 745, 772, 773, 774, 777, 778, 788, 799, 801, 813, 823, 849, 850, 868, 872, 878, 879, 881, 883, 884, 885, 886, 906, 907, 945, 946, 947, 956, 957, 960, 963, 967, 970, 973, 977, 983, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "start": [0, 4, 7, 10, 12, 26, 53, 57, 63, 66, 73, 85, 98, 109, 115, 120, 122, 143, 146, 154, 156, 167, 172, 176, 177, 185, 196, 197, 198, 204, 214, 217, 221, 230, 244, 256, 264, 276, 310, 315, 339, 348, 350, 354, 355, 356, 357, 360, 367, 368, 371, 372, 377, 379, 382, 388, 391, 395, 396, 400, 401, 403, 420, 422, 429, 433, 435, 511, 516, 588, 595, 610, 623, 631, 637, 644, 646, 654, 655, 656, 668, 672, 758, 759, 772, 773, 774, 777, 778, 788, 818, 819, 820, 822, 824, 832, 917, 941, 946, 953, 956, 961, 962, 971, 978, 981, 983, 991, 992, 1001, 1003, 1006, 1008, 1010, 1011, 1012, 1013], "2007": [0, 38, 184, 362, 391, 400, 420, 431, 433, 439, 441, 544, 634, 669, 695, 711, 714, 735, 736, 770, 949, 953, 955, 957], "googl": [0, 17, 377, 391, 422, 976, 988, 998], "summer": [0, 4, 48, 998], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 361, 365, 366, 369, 370, 375, 377, 379, 380, 382, 385, 387, 390, 391, 398, 399, 422, 423, 426, 428, 438, 474, 504, 508, 509, 515, 516, 520, 521, 523, 524, 526, 544, 550, 557, 559, 560, 563, 564, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 660, 661, 663, 664, 806, 843, 850, 925, 954, 958, 967, 969, 971, 972, 977, 978, 980, 981, 984, 992, 998, 1000, 1001], "david": [0, 2, 37, 56, 80, 175, 198, 257, 259, 339, 340, 341, 362, 391, 398, 401, 441, 510, 514, 545, 546, 600, 601, 606, 702, 772, 872, 947, 953, 961, 970, 981, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "cournapeau": [0, 2, 998, 1001], "later": [0, 11, 53, 115, 123, 149, 167, 172, 175, 289, 341, 350, 372, 377, 378, 382, 385, 822, 845, 846, 854, 856, 967, 987, 992, 1001, 1004, 1006, 1010], "year": [0, 4, 132, 146, 154, 166, 167, 196, 197, 214, 364, 366, 377, 395, 399, 401, 776, 781, 783, 855, 953, 957, 978, 981, 990], "matthieu": [0, 2, 998, 1002, 1013], "brucher": [0, 2, 998], "work": [0, 4, 9, 17, 27, 32, 44, 45, 48, 52, 66, 77, 84, 112, 113, 119, 132, 146, 153, 155, 156, 157, 158, 166, 167, 185, 188, 205, 213, 241, 243, 254, 282, 283, 307, 309, 310, 328, 331, 340, 341, 345, 350, 355, 356, 357, 361, 362, 365, 367, 368, 369, 370, 371, 372, 374, 378, 379, 380, 382, 387, 388, 389, 391, 392, 393, 396, 398, 399, 400, 403, 404, 405, 406, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 439, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 486, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 673, 686, 719, 751, 755, 756, 757, 758, 765, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 912, 916, 946, 947, 949, 951, 952, 953, 954, 956, 957, 959, 960, 963, 964, 967, 970, 971, 977, 978, 981, 983, 984, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "part": [0, 31, 36, 60, 67, 70, 81, 113, 118, 122, 127, 135, 136, 137, 138, 143, 154, 164, 175, 244, 251, 253, 270, 292, 300, 341, 356, 362, 364, 367, 368, 372, 374, 378, 379, 382, 391, 395, 396, 398, 399, 401, 428, 471, 472, 473, 499, 509, 515, 520, 552, 562, 563, 564, 591, 603, 768, 841, 858, 860, 861, 862, 863, 864, 865, 866, 946, 947, 949, 954, 958, 976, 977, 978, 979, 981, 985, 992, 994, 998, 1006, 1007, 1009, 1011, 1013], "hi": [0, 392, 957, 992], "thesi": [0, 364, 391, 398], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 25, 26, 27, 37, 39, 48, 49, 53, 56, 57, 59, 65, 66, 70, 73, 74, 77, 79, 80, 81, 85, 88, 95, 97, 100, 103, 104, 109, 113, 115, 116, 117, 118, 119, 122, 124, 125, 126, 127, 129, 132, 142, 143, 145, 146, 149, 153, 154, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 184, 185, 187, 191, 196, 197, 198, 199, 200, 201, 204, 213, 214, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 238, 244, 246, 250, 252, 253, 254, 256, 257, 258, 259, 261, 262, 265, 266, 268, 270, 271, 274, 276, 282, 283, 285, 295, 298, 299, 300, 303, 306, 307, 308, 310, 311, 316, 318, 326, 334, 339, 340, 341, 344, 348, 350, 354, 355, 356, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 408, 417, 420, 421, 422, 423, 424, 426, 427, 428, 431, 441, 442, 443, 448, 451, 454, 471, 474, 481, 486, 487, 489, 501, 512, 514, 516, 518, 519, 520, 522, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 580, 584, 587, 588, 589, 608, 610, 611, 612, 614, 621, 622, 623, 625, 626, 627, 629, 631, 633, 636, 637, 639, 641, 643, 644, 646, 647, 652, 653, 654, 657, 658, 662, 663, 664, 674, 677, 681, 690, 696, 698, 703, 705, 706, 711, 712, 715, 717, 719, 731, 733, 734, 758, 760, 762, 765, 769, 771, 772, 773, 774, 777, 778, 780, 788, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 833, 841, 843, 849, 850, 854, 855, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 880, 883, 885, 890, 894, 896, 912, 925, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 978, 980, 981, 983, 990, 991, 992, 995, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "2010": [0, 47, 66, 78, 167, 261, 262, 388, 391, 393, 395, 396, 454, 514, 682, 686, 697, 698, 717, 801, 833, 834, 949, 953, 957, 961, 971, 976, 998], "fabian": [0, 2, 183, 201, 218, 288, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007], "pedregosa": [0, 2, 183, 201, 218, 288, 998, 999, 1000, 1001, 1002, 1004], "gael": [0, 1, 12, 32, 39, 40, 46, 52, 53, 65, 66, 81, 97, 101, 185, 186, 218, 230, 243, 976, 978, 981, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "varoquaux": [0, 1, 12, 31, 32, 39, 40, 45, 46, 51, 52, 53, 65, 66, 72, 81, 88, 89, 97, 101, 102, 179, 185, 186, 193, 194, 218, 220, 228, 230, 243, 300, 330, 331, 380, 976, 981, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "alexandr": [0, 1, 2, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 380, 981, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "gramfort": [0, 1, 24, 25, 30, 42, 47, 54, 66, 95, 97, 103, 181, 183, 184, 185, 187, 189, 190, 225, 228, 262, 269, 288, 380, 981, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "vincent": [0, 2, 47, 66, 152, 156, 981, 998, 1000, 1002, 1003, 1005, 1008, 1013], "michel": [0, 2, 47, 66, 998, 1000, 1001, 1003, 1005, 1012, 1013], "inria": [0, 5, 9, 30, 37, 52, 54, 56, 74, 81, 155, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 334, 339, 340, 341, 636, 975, 998], "took": [0, 42, 264], "leadership": 0, "made": [0, 69, 80, 88, 100, 132, 156, 167, 196, 214, 247, 260, 307, 326, 345, 354, 362, 364, 367, 370, 379, 380, 391, 399, 403, 423, 426, 428, 438, 474, 481, 566, 567, 569, 608, 609, 634, 643, 663, 664, 712, 760, 774, 777, 778, 788, 792, 793, 794, 813, 816, 817, 958, 963, 973, 981, 989, 991, 998, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1011, 1012], "first": [0, 4, 5, 7, 8, 11, 17, 25, 26, 30, 31, 32, 39, 55, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 79, 84, 85, 88, 89, 90, 100, 104, 111, 115, 116, 117, 118, 119, 121, 123, 126, 129, 130, 131, 132, 142, 143, 146, 149, 150, 151, 154, 155, 156, 157, 162, 166, 167, 169, 172, 175, 177, 179, 185, 192, 193, 194, 197, 198, 204, 205, 210, 218, 221, 229, 230, 232, 233, 235, 237, 238, 243, 247, 251, 256, 258, 259, 263, 265, 267, 268, 274, 278, 279, 281, 285, 286, 287, 292, 294, 298, 300, 303, 307, 308, 315, 318, 322, 323, 326, 328, 339, 340, 341, 344, 345, 348, 350, 355, 356, 361, 362, 364, 365, 366, 368, 370, 371, 372, 374, 377, 379, 388, 389, 391, 394, 395, 396, 398, 399, 400, 401, 403, 423, 426, 429, 438, 439, 443, 451, 461, 465, 466, 468, 469, 470, 472, 475, 478, 480, 482, 486, 487, 488, 506, 511, 512, 516, 519, 531, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 560, 562, 566, 567, 568, 569, 571, 588, 589, 595, 599, 602, 609, 610, 611, 612, 624, 630, 637, 644, 646, 652, 654, 666, 673, 676, 677, 678, 680, 690, 694, 713, 740, 741, 759, 769, 772, 773, 777, 778, 779, 781, 786, 788, 795, 804, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 841, 849, 853, 854, 855, 857, 864, 865, 877, 880, 883, 884, 885, 886, 888, 890, 895, 896, 897, 914, 916, 920, 928, 931, 943, 946, 947, 951, 952, 953, 954, 956, 957, 958, 959, 960, 964, 967, 968, 971, 972, 973, 981, 983, 989, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "public": [0, 78, 361, 367, 368, 370, 371, 377, 378, 379, 380, 395, 398, 642, 649, 663, 664, 670, 953, 961, 998, 1003, 1004, 1009, 1010, 1011], "releas": [0, 312, 355, 357, 365, 367, 369, 374, 377, 379, 399, 423, 426, 443, 446, 468, 469, 474, 479, 482, 490, 493, 502, 516, 539, 540, 542, 543, 545, 577, 580, 606, 608, 612, 618, 624, 626, 630, 636, 647, 658, 666, 695, 725, 765, 774, 777, 778, 788, 802, 818, 820, 837, 841, 846, 849, 850, 851, 855, 856, 872, 873, 875, 880, 884, 907, 925, 973, 975, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "februari": [0, 393, 452, 957, 999, 1003], "1st": [0, 4, 59, 89, 157, 197, 303, 854, 855], "sinc": [0, 4, 5, 11, 25, 27, 37, 49, 53, 65, 69, 70, 71, 96, 119, 135, 143, 146, 149, 154, 166, 167, 172, 178, 196, 198, 213, 226, 230, 231, 243, 246, 252, 256, 258, 259, 265, 266, 276, 278, 309, 310, 319, 323, 326, 334, 339, 340, 341, 350, 355, 362, 365, 367, 368, 370, 371, 372, 374, 377, 378, 379, 382, 391, 392, 393, 394, 395, 396, 398, 399, 401, 403, 408, 417, 419, 421, 425, 429, 432, 435, 448, 474, 511, 514, 515, 516, 517, 518, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 566, 567, 569, 580, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 616, 626, 628, 629, 632, 633, 634, 636, 637, 642, 643, 644, 646, 647, 649, 652, 653, 654, 657, 658, 670, 677, 685, 687, 712, 745, 766, 777, 778, 804, 805, 806, 807, 811, 812, 813, 814, 815, 818, 823, 826, 833, 834, 841, 849, 865, 866, 870, 871, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 906, 909, 912, 920, 946, 949, 950, 951, 953, 954, 958, 959, 960, 961, 963, 965, 967, 971, 972, 973, 981, 983, 992, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "sever": [0, 4, 9, 12, 25, 31, 37, 55, 56, 60, 73, 90, 113, 120, 127, 129, 132, 143, 149, 154, 155, 164, 166, 172, 185, 196, 216, 217, 223, 229, 243, 251, 256, 261, 278, 293, 298, 309, 339, 340, 354, 361, 362, 364, 367, 368, 371, 377, 379, 388, 390, 391, 392, 395, 397, 398, 399, 401, 426, 428, 443, 465, 477, 486, 487, 516, 533, 534, 537, 538, 541, 542, 543, 548, 566, 567, 569, 588, 623, 624, 630, 666, 667, 668, 669, 670, 671, 772, 773, 774, 777, 778, 788, 804, 805, 811, 812, 813, 814, 815, 835, 836, 843, 859, 883, 884, 885, 886, 898, 925, 946, 949, 954, 957, 958, 960, 965, 967, 971, 973, 974, 976, 977, 980, 981, 983, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1011], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 24, 25, 26, 27, 37, 39, 42, 45, 46, 47, 50, 53, 56, 59, 61, 63, 64, 69, 70, 77, 79, 84, 85, 88, 90, 91, 100, 102, 110, 116, 118, 119, 120, 122, 142, 143, 146, 149, 150, 154, 155, 156, 162, 166, 167, 168, 169, 172, 175, 196, 197, 198, 214, 221, 225, 227, 232, 234, 235, 242, 243, 244, 246, 250, 256, 257, 259, 262, 263, 270, 278, 282, 283, 298, 303, 306, 308, 309, 315, 316, 317, 323, 329, 331, 339, 340, 348, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 470, 472, 473, 474, 486, 487, 492, 501, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 668, 669, 670, 677, 682, 683, 690, 693, 698, 703, 708, 713, 719, 733, 734, 735, 736, 759, 762, 763, 767, 770, 772, 773, 774, 777, 778, 779, 780, 785, 788, 792, 797, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 895, 897, 899, 901, 912, 932, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 977, 978, 981, 983, 984, 987, 988, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "appear": [0, 8, 46, 48, 113, 166, 251, 253, 254, 282, 283, 292, 294, 299, 315, 339, 340, 341, 362, 365, 367, 371, 379, 393, 396, 466, 467, 533, 545, 546, 556, 588, 605, 606, 608, 675, 680, 690, 694, 696, 766, 775, 792, 811, 812, 813, 814, 815, 877, 880, 914, 953, 959, 963, 998, 1006, 1010, 1011], "follow": [0, 4, 7, 19, 26, 32, 37, 45, 54, 56, 62, 66, 70, 71, 91, 95, 105, 110, 113, 122, 126, 141, 154, 161, 166, 167, 168, 175, 177, 184, 185, 194, 196, 197, 211, 214, 226, 232, 234, 247, 256, 265, 266, 298, 306, 307, 309, 310, 311, 323, 334, 339, 340, 341, 344, 348, 350, 354, 355, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 411, 413, 421, 423, 425, 426, 427, 428, 432, 440, 442, 443, 444, 447, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 493, 512, 516, 518, 519, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 609, 611, 612, 624, 630, 636, 637, 648, 649, 658, 670, 672, 677, 683, 687, 691, 696, 793, 813, 818, 819, 820, 822, 824, 826, 827, 828, 835, 839, 840, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 873, 875, 876, 883, 884, 885, 886, 890, 891, 911, 925, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 976, 977, 978, 983, 992, 995, 998, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 172, 174, 175, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 229, 230, 231, 232, 234, 236, 238, 241, 242, 243, 245, 246, 247, 251, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 317, 318, 319, 322, 323, 325, 326, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 345, 346, 348, 350, 355, 356, 361, 362, 364, 365, 367, 368, 370, 371, 372, 377, 378, 379, 382, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 441, 443, 445, 446, 448, 449, 450, 451, 453, 454, 455, 460, 461, 462, 463, 471, 472, 474, 475, 482, 483, 484, 485, 488, 490, 494, 495, 496, 497, 503, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 554, 559, 561, 562, 565, 571, 572, 580, 581, 585, 586, 588, 590, 595, 605, 606, 607, 608, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 670, 671, 672, 677, 681, 682, 683, 687, 691, 694, 695, 699, 700, 701, 703, 705, 708, 711, 712, 713, 714, 718, 720, 721, 722, 723, 725, 727, 728, 729, 730, 731, 733, 734, 745, 746, 752, 758, 760, 762, 763, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 840, 841, 842, 847, 848, 849, 850, 851, 852, 854, 855, 856, 863, 867, 868, 869, 870, 871, 872, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 901, 906, 910, 911, 912, 914, 915, 916, 917, 920, 922, 923, 925, 931, 946, 947, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 963, 964, 967, 968, 970, 972, 973, 975, 976, 983, 984, 987, 988, 990, 991, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1010, 1011, 1013], "month": [0, 4, 154, 167, 362, 367, 370, 380, 998], "cycl": [0, 4, 42, 44, 50, 61, 95, 181, 242, 247, 263, 265, 309, 310, 367, 370, 390, 396, 556, 558, 605, 777, 778, 891, 946, 947, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "thrive": [0, 367], "intern": [0, 26, 70, 81, 100, 123, 135, 150, 161, 196, 276, 278, 316, 341, 350, 355, 362, 364, 368, 372, 375, 377, 379, 385, 388, 391, 395, 396, 398, 399, 401, 402, 417, 419, 424, 444, 447, 489, 512, 513, 515, 524, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 571, 572, 588, 589, 618, 621, 624, 630, 646, 654, 656, 674, 686, 708, 711, 735, 736, 760, 816, 817, 832, 833, 834, 855, 870, 871, 873, 875, 876, 877, 880, 883, 884, 885, 886, 925, 953, 954, 955, 957, 960, 963, 969, 972, 973, 981, 998, 1001, 1007, 1009, 1010, 1011, 1012, 1013], "ha": [0, 4, 5, 8, 11, 12, 16, 25, 30, 34, 37, 44, 50, 55, 56, 59, 73, 79, 80, 84, 85, 95, 115, 118, 120, 122, 126, 131, 145, 149, 154, 155, 156, 162, 166, 167, 168, 172, 189, 193, 196, 197, 198, 202, 213, 214, 217, 225, 229, 231, 235, 241, 242, 244, 246, 247, 251, 254, 255, 256, 259, 260, 262, 267, 268, 274, 282, 283, 284, 286, 294, 298, 299, 301, 303, 306, 307, 308, 309, 310, 314, 317, 326, 331, 333, 339, 348, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 370, 371, 374, 375, 377, 378, 379, 380, 385, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 403, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440, 441, 442, 444, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 471, 472, 475, 476, 486, 487, 494, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 597, 605, 606, 607, 608, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 668, 669, 670, 673, 689, 691, 698, 718, 740, 751, 755, 768, 772, 773, 774, 775, 777, 778, 779, 780, 781, 788, 792, 795, 800, 801, 804, 805, 807, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 890, 894, 895, 896, 914, 920, 926, 942, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 978, 981, 983, 987, 990, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "been": [0, 4, 9, 16, 26, 44, 53, 59, 80, 100, 146, 149, 154, 156, 166, 221, 225, 227, 232, 254, 256, 262, 306, 307, 308, 309, 310, 316, 339, 350, 355, 361, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 377, 378, 379, 380, 385, 388, 389, 391, 393, 395, 396, 398, 401, 414, 417, 448, 450, 451, 453, 457, 465, 501, 512, 514, 515, 527, 528, 545, 546, 559, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 611, 612, 636, 637, 644, 646, 651, 653, 654, 655, 656, 698, 768, 774, 777, 778, 780, 788, 800, 801, 825, 872, 875, 947, 949, 950, 952, 953, 954, 957, 958, 960, 963, 967, 969, 971, 972, 978, 981, 983, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lead": [0, 7, 25, 31, 37, 52, 60, 71, 119, 122, 145, 146, 166, 167, 168, 175, 185, 187, 196, 200, 230, 256, 257, 259, 263, 281, 282, 294, 298, 300, 308, 326, 340, 344, 350, 354, 355, 361, 366, 374, 375, 378, 379, 385, 388, 391, 393, 395, 396, 397, 398, 400, 431, 441, 444, 447, 474, 493, 505, 513, 516, 517, 518, 521, 525, 529, 535, 536, 537, 538, 541, 542, 543, 544, 584, 608, 624, 625, 628, 630, 631, 632, 638, 639, 640, 641, 657, 669, 673, 723, 772, 777, 778, 804, 816, 817, 821, 840, 847, 867, 868, 873, 875, 883, 884, 885, 886, 946, 951, 953, 954, 956, 957, 958, 960, 961, 963, 965, 967, 970, 971, 973, 981, 983, 1001, 1003, 1005, 1006, 1007, 1008, 1010, 1011], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 26, 27, 30, 31, 32, 34, 37, 39, 40, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 59, 60, 61, 62, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 87, 90, 91, 92, 95, 98, 100, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 167, 168, 169, 172, 175, 177, 178, 179, 181, 184, 185, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 204, 205, 213, 214, 216, 220, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 244, 246, 247, 250, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 281, 282, 283, 284, 285, 286, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 316, 317, 323, 324, 326, 330, 331, 332, 334, 335, 336, 339, 340, 341, 344, 346, 347, 348, 350, 354, 355, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 729, 730, 731, 732, 733, 734, 735, 736, 739, 741, 742, 743, 744, 747, 748, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 906, 907, 908, 909, 910, 911, 912, 914, 915, 922, 924, 925, 926, 927, 928, 931, 941, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 983, 984, 985, 987, 988, 989, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "decis": [0, 4, 16, 25, 27, 31, 34, 55, 57, 59, 108, 109, 112, 113, 115, 127, 133, 153, 166, 178, 179, 188, 205, 206, 209, 210, 225, 226, 228, 235, 259, 279, 284, 287, 292, 298, 299, 300, 313, 320, 322, 323, 324, 325, 326, 327, 328, 332, 335, 336, 339, 349, 354, 357, 363, 364, 367, 379, 389, 391, 398, 417, 448, 478, 482, 497, 514, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 571, 572, 609, 610, 611, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 676, 678, 680, 681, 685, 698, 703, 704, 712, 716, 717, 719, 733, 759, 765, 766, 769, 774, 777, 778, 788, 802, 804, 805, 807, 818, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 951, 957, 958, 959, 960, 961, 963, 964, 965, 970, 971, 972, 975, 977, 978, 979, 981, 990, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012], "make": [0, 4, 7, 8, 11, 14, 17, 21, 25, 26, 27, 39, 40, 43, 44, 55, 60, 61, 66, 72, 100, 119, 122, 127, 143, 146, 149, 154, 157, 166, 167, 168, 175, 182, 185, 188, 189, 190, 192, 196, 197, 198, 202, 214, 218, 227, 229, 231, 232, 241, 243, 246, 247, 251, 256, 258, 259, 265, 266, 267, 285, 294, 298, 299, 303, 310, 326, 336, 339, 340, 341, 350, 354, 355, 356, 357, 361, 362, 365, 366, 368, 369, 371, 372, 374, 377, 379, 382, 385, 388, 389, 391, 392, 393, 395, 396, 398, 399, 400, 401, 403, 420, 421, 422, 423, 425, 426, 428, 430, 431, 432, 437, 438, 439, 441, 466, 481, 492, 493, 500, 501, 505, 510, 512, 519, 529, 530, 533, 534, 561, 562, 585, 586, 609, 627, 633, 634, 649, 669, 673, 714, 719, 745, 746, 758, 772, 773, 774, 776, 779, 785, 789, 790, 791, 793, 794, 798, 799, 806, 807, 810, 843, 852, 855, 856, 859, 863, 865, 866, 867, 868, 881, 889, 895, 896, 906, 912, 918, 919, 920, 943, 946, 947, 949, 951, 953, 954, 956, 957, 958, 959, 960, 962, 963, 964, 965, 967, 970, 971, 972, 973, 975, 976, 977, 978, 980, 981, 983, 988, 990, 992, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "process": [0, 4, 5, 26, 30, 31, 45, 46, 47, 48, 50, 65, 69, 71, 73, 78, 80, 96, 97, 99, 119, 126, 135, 136, 137, 138, 159, 175, 198, 232, 241, 242, 247, 256, 258, 259, 268, 298, 308, 315, 340, 341, 344, 354, 355, 356, 357, 362, 366, 367, 368, 370, 372, 375, 377, 378, 379, 385, 391, 392, 393, 395, 396, 397, 398, 399, 400, 427, 428, 474, 482, 501, 512, 513, 514, 515, 516, 539, 540, 541, 566, 567, 569, 588, 589, 591, 592, 593, 595, 596, 597, 600, 601, 603, 605, 610, 611, 617, 621, 642, 650, 663, 664, 681, 700, 718, 758, 772, 774, 777, 778, 788, 797, 798, 799, 808, 809, 825, 839, 843, 845, 846, 847, 856, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 925, 946, 949, 953, 957, 960, 967, 969, 971, 973, 975, 976, 977, 978, 979, 981, 983, 984, 991, 992, 994, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "structur": [0, 3, 9, 14, 15, 17, 20, 36, 44, 67, 81, 106, 125, 148, 159, 164, 217, 221, 227, 247, 251, 262, 281, 307, 310, 313, 320, 326, 343, 345, 349, 354, 362, 364, 367, 368, 371, 377, 379, 380, 382, 388, 391, 393, 394, 395, 396, 398, 399, 400, 401, 421, 422, 425, 429, 430, 431, 432, 433, 436, 441, 442, 451, 474, 481, 482, 486, 489, 491, 492, 499, 508, 513, 519, 522, 541, 588, 589, 590, 594, 595, 596, 667, 674, 687, 691, 802, 824, 829, 856, 867, 868, 871, 883, 884, 885, 886, 889, 911, 912, 928, 931, 954, 956, 957, 960, 962, 963, 967, 970, 973, 977, 978, 986, 991, 992, 998, 999, 1001, 1002, 1004, 1008], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 324, 325, 326, 331, 332, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 378, 379, 380, 381, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 914, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 931, 932, 938, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 983, 985, 986, 987, 988, 989, 990, 991, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "laid": [0, 367], "out": [0, 3, 4, 7, 9, 12, 14, 15, 17, 26, 30, 40, 50, 69, 70, 103, 108, 114, 116, 123, 133, 138, 164, 168, 196, 198, 204, 214, 241, 243, 254, 256, 259, 264, 268, 274, 309, 317, 319, 322, 323, 326, 339, 353, 362, 364, 365, 367, 368, 369, 370, 372, 377, 379, 391, 394, 396, 398, 401, 407, 415, 416, 422, 423, 425, 426, 428, 451, 460, 461, 462, 463, 477, 493, 494, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 566, 567, 569, 582, 585, 586, 612, 617, 618, 619, 620, 629, 633, 644, 646, 651, 653, 654, 666, 667, 679, 704, 718, 719, 774, 776, 777, 778, 779, 781, 782, 783, 784, 788, 802, 811, 812, 813, 814, 815, 820, 825, 828, 832, 833, 834, 842, 846, 853, 864, 867, 868, 890, 921, 923, 926, 947, 951, 952, 956, 957, 958, 960, 965, 967, 978, 979, 980, 981, 987, 990, 992, 994, 998, 1000, 1002, 1004, 1006, 1007, 1010, 1011], "document": [0, 3, 14, 15, 18, 22, 31, 45, 51, 56, 70, 72, 88, 89, 91, 95, 126, 177, 179, 193, 194, 211, 229, 232, 238, 257, 294, 318, 331, 341, 342, 354, 355, 356, 357, 361, 362, 363, 365, 366, 368, 369, 370, 371, 372, 374, 377, 379, 380, 382, 385, 388, 390, 391, 396, 399, 402, 424, 426, 427, 428, 429, 432, 436, 443, 466, 467, 477, 479, 489, 499, 501, 514, 522, 542, 566, 567, 568, 569, 572, 582, 609, 617, 621, 636, 637, 644, 646, 651, 652, 653, 654, 674, 681, 683, 689, 695, 714, 735, 736, 746, 755, 756, 757, 768, 770, 774, 777, 778, 788, 798, 800, 803, 806, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 837, 848, 875, 880, 891, 894, 896, 909, 946, 953, 955, 957, 958, 959, 960, 961, 965, 971, 974, 975, 976, 981, 985, 990, 992, 999, 1000, 1004], "peopl": [0, 6, 69, 233, 259, 339, 340, 355, 356, 362, 364, 366, 367, 397, 471, 472, 619, 813, 977, 988], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 32, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 65, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 84, 85, 91, 95, 97, 100, 103, 106, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 142, 143, 145, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 200, 205, 207, 214, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 242, 243, 244, 246, 250, 251, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 281, 282, 286, 289, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 310, 311, 314, 316, 317, 318, 319, 324, 326, 328, 330, 334, 335, 339, 340, 341, 344, 348, 350, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 379, 380, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 411, 413, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 466, 467, 471, 473, 474, 476, 478, 479, 480, 481, 482, 486, 487, 488, 490, 493, 494, 495, 496, 497, 498, 501, 502, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 687, 690, 691, 693, 694, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 717, 718, 720, 722, 723, 725, 727, 728, 730, 731, 733, 734, 738, 739, 740, 742, 744, 745, 746, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 780, 781, 786, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 899, 900, 901, 904, 906, 911, 912, 913, 916, 917, 920, 922, 923, 925, 928, 931, 932, 936, 937, 938, 941, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "current": [0, 8, 46, 84, 154, 166, 214, 298, 306, 355, 356, 362, 365, 367, 368, 371, 375, 377, 379, 380, 387, 388, 390, 391, 395, 398, 399, 400, 401, 420, 429, 447, 448, 449, 450, 451, 452, 453, 454, 455, 510, 513, 519, 531, 532, 535, 536, 537, 538, 540, 542, 543, 544, 569, 571, 588, 595, 604, 605, 624, 636, 645, 649, 653, 654, 655, 656, 765, 772, 773, 821, 825, 833, 834, 852, 863, 873, 883, 884, 885, 886, 889, 932, 946, 951, 953, 957, 960, 961, 967, 978, 990, 1006, 1010, 1012, 1013], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17, 19, 24, 27, 30, 34, 38, 39, 40, 42, 43, 44, 46, 47, 48, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 77, 78, 81, 84, 89, 90, 91, 95, 96, 97, 100, 101, 104, 105, 106, 109, 110, 112, 116, 118, 119, 121, 122, 123, 125, 126, 127, 128, 130, 138, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 166, 167, 169, 172, 176, 177, 178, 180, 182, 184, 185, 186, 187, 188, 194, 196, 198, 202, 203, 205, 208, 209, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 231, 232, 234, 241, 243, 244, 246, 251, 256, 257, 258, 259, 260, 263, 267, 269, 270, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 301, 303, 306, 308, 309, 310, 311, 315, 316, 323, 324, 325, 326, 327, 330, 331, 332, 333, 336, 339, 340, 341, 345, 346, 347, 348, 350, 354, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 379, 380, 381, 382, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 401, 403, 405, 411, 414, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 467, 474, 476, 478, 482, 488, 489, 497, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 550, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 668, 669, 670, 671, 678, 679, 680, 686, 689, 694, 698, 712, 718, 719, 735, 736, 756, 757, 772, 773, 774, 776, 777, 778, 783, 788, 792, 793, 798, 799, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 890, 893, 895, 896, 899, 912, 914, 941, 945, 946, 948, 949, 951, 953, 954, 955, 958, 959, 960, 961, 962, 964, 965, 967, 969, 970, 971, 972, 973, 977, 978, 981, 983, 987, 988, 990, 991, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mainten": [0, 367, 374, 377, 382, 384, 953, 978, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "j\u00e9r\u00e9mie": [0, 1, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "du": [0, 1, 2, 998, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "boisberrang": [0, 1, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "jori": [0, 1, 1005, 1006, 1007, 1010, 1011], "van": [0, 1, 361, 393, 448, 453, 512, 605, 670, 674, 947, 954, 957, 963, 981, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1011], "den": [0, 1, 999, 1000, 1005, 1006, 1007, 1010, 1011], "bossch": [0, 1, 1005, 1006, 1007, 1011], "lo\u00efc": [0, 1, 1006, 1009, 1011, 1012, 1013], "est\u00e8v": [0, 1, 1006, 1009, 1011, 1012, 1013], "thoma": [0, 1, 103, 225, 298, 355, 358, 380, 871, 953, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "j": [0, 1, 11, 17, 37, 38, 40, 43, 60, 69, 78, 79, 80, 94, 109, 113, 114, 124, 150, 162, 167, 208, 220, 233, 241, 255, 256, 261, 267, 280, 286, 289, 302, 311, 348, 355, 361, 362, 364, 370, 377, 388, 389, 391, 393, 395, 396, 398, 399, 401, 402, 417, 420, 424, 432, 433, 448, 453, 476, 491, 494, 495, 496, 498, 506, 509, 512, 514, 515, 516, 518, 519, 525, 537, 538, 571, 572, 610, 611, 615, 622, 623, 626, 627, 644, 645, 647, 658, 666, 667, 668, 670, 671, 672, 674, 683, 686, 688, 692, 694, 696, 699, 700, 701, 703, 732, 733, 735, 736, 751, 755, 765, 766, 767, 768, 805, 806, 813, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 847, 856, 883, 884, 946, 947, 951, 953, 954, 955, 957, 958, 959, 960, 961, 963, 964, 965, 969, 971, 972, 973, 975, 992, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "fan": [0, 1, 355, 380, 972, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "olivi": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 339, 340, 341, 380, 871, 970, 976, 978, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "grisel": [0, 1, 14, 17, 37, 48, 60, 185, 196, 214, 218, 257, 259, 339, 340, 341, 380, 976, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "yaroslav": [0, 1, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007], "halchenko": [0, 1, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007], "nicola": [0, 1, 146, 302, 636, 953, 970, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "hug": [0, 1, 146, 302, 975, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "adrin": [0, 1, 64, 335, 380, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "jalali": [0, 1, 64, 335, 380, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "julien": [0, 1, 636, 953, 981, 998, 1001, 1005, 1006, 1010, 1011, 1012, 1013], "jerphanion": [0, 1, 1010, 1011, 1012, 1013], "guillaum": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 184, 185, 198, 218, 298, 981, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lemaitr": [0, 1, 5, 7, 71, 74, 100, 129, 149, 154, 155, 156, 158, 184, 185, 198, 218, 298, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "christian": [0, 1, 19, 196, 197, 198, 214, 339, 340, 362, 981, 992, 998, 999, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "lorentzen": [0, 1, 196, 197, 198, 214, 1008, 1009, 1010, 1011, 1012, 1013], "jan": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 197, 231, 855, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1010], "hendrik": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 998, 1001, 1002, 1003, 1004], "metzen": [0, 1, 24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 998, 1001, 1002, 1003, 1004], "andrea": [0, 1, 31, 73, 100, 114, 187, 230, 299, 300, 316, 334, 335, 380, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mueller": [0, 1, 73, 100, 114, 187, 230, 316, 334, 335, 981, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "vlad": [0, 1, 95, 232, 295, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007], "nicula": [0, 1, 95, 232, 295, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007], "joel": [0, 1, 71, 380, 399, 513, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "nothman": [0, 1, 71, 380, 399, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "hanmin": [0, 1, 299, 1005, 1006, 1007, 1008, 1009], "qin": [0, 1, 299, 364, 399, 1005, 1006, 1007, 1008, 1009], "bertrand": [0, 1, 998, 1004, 1005, 1010, 1011], "thirion": [0, 1, 998, 1004, 1005, 1011], "tom": [0, 1, 188, 204, 276, 278, 300, 301, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "dupr\u00e9": [0, 1, 300, 301, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "la": [0, 1, 188, 204, 276, 278, 300, 301, 364, 981, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tour": [0, 1, 188, 204, 276, 278, 300, 301, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "nell": [0, 1, 39, 220, 228, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010], "roman": [0, 1, 196, 214, 605, 889, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "yurchak": [0, 1, 196, 214, 399, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "meekail": [0, 1, 1012, 1013], "zain": [0, 1, 1012, 1013], "pleas": [0, 12, 17, 26, 70, 109, 115, 116, 117, 123, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 200, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 286, 295, 306, 307, 308, 309, 310, 311, 316, 348, 355, 361, 362, 365, 367, 368, 370, 374, 377, 378, 379, 382, 385, 387, 390, 391, 398, 399, 429, 474, 545, 546, 609, 610, 611, 628, 629, 632, 633, 634, 642, 643, 777, 778, 799, 853, 864, 877, 880, 883, 884, 885, 886, 946, 957, 961, 967, 971, 972, 977, 978, 980, 983, 990, 992, 998, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "do": [0, 4, 10, 25, 42, 60, 66, 73, 89, 99, 101, 102, 105, 114, 116, 118, 120, 122, 123, 129, 136, 143, 154, 161, 166, 167, 168, 193, 196, 214, 217, 219, 232, 247, 251, 254, 257, 259, 274, 276, 278, 282, 309, 319, 323, 326, 331, 334, 339, 340, 341, 348, 350, 354, 355, 356, 362, 364, 366, 367, 368, 369, 370, 373, 374, 379, 380, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 429, 440, 481, 514, 516, 520, 522, 530, 533, 559, 560, 561, 566, 567, 569, 623, 624, 630, 633, 634, 637, 644, 646, 654, 714, 740, 755, 759, 791, 794, 808, 809, 813, 839, 840, 841, 843, 848, 854, 856, 860, 861, 863, 864, 865, 866, 883, 884, 885, 886, 894, 931, 946, 949, 951, 953, 954, 957, 958, 960, 961, 965, 967, 972, 973, 977, 978, 981, 983, 990, 991, 992, 998, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "email": [0, 339, 367, 377, 399, 811, 959, 981], "directli": [0, 6, 19, 27, 45, 46, 55, 70, 115, 146, 157, 184, 196, 202, 214, 226, 261, 295, 298, 310, 341, 350, 354, 365, 367, 368, 370, 372, 378, 379, 388, 389, 391, 392, 393, 394, 395, 399, 401, 422, 431, 441, 443, 448, 453, 505, 545, 546, 547, 548, 575, 589, 598, 610, 621, 624, 625, 630, 631, 638, 639, 640, 641, 642, 655, 659, 662, 668, 751, 755, 758, 767, 768, 774, 777, 778, 788, 821, 835, 836, 837, 843, 853, 855, 857, 864, 925, 946, 953, 955, 960, 962, 964, 967, 972, 973, 978, 984, 987, 988, 998, 1006, 1007, 1009, 1010, 1011], "ask": [0, 161, 162, 256, 357, 366, 367, 370, 371, 374, 379, 380, 400, 818, 819, 820, 822, 824, 826, 827, 828, 975, 980], "assist": [0, 367, 377, 967, 981], "report": [0, 4, 8, 32, 69, 74, 143, 157, 184, 254, 264, 276, 306, 314, 350, 362, 366, 368, 369, 372, 374, 377, 379, 382, 385, 391, 395, 589, 627, 636, 642, 663, 664, 678, 691, 706, 707, 715, 760, 761, 764, 805, 814, 833, 834, 870, 888, 906, 953, 960, 977, 978, 980, 999, 1002, 1005, 1006, 1008, 1009, 1011, 1013], "issu": [0, 4, 25, 78, 85, 196, 214, 261, 355, 357, 361, 369, 370, 371, 374, 375, 377, 379, 380, 381, 382, 385, 387, 391, 393, 394, 399, 401, 428, 431, 441, 452, 454, 460, 461, 462, 512, 517, 521, 551, 563, 564, 566, 567, 569, 589, 605, 669, 673, 746, 847, 852, 863, 902, 946, 947, 954, 960, 965, 967, 972, 977, 978, 980, 991, 992, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1013], "instead": [0, 4, 5, 6, 48, 53, 55, 56, 70, 100, 113, 117, 126, 143, 146, 149, 196, 198, 211, 214, 221, 247, 252, 253, 257, 258, 274, 281, 298, 306, 307, 308, 309, 310, 326, 328, 339, 341, 350, 354, 355, 361, 362, 365, 366, 367, 368, 370, 371, 374, 375, 377, 378, 379, 385, 387, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 412, 417, 420, 421, 422, 424, 425, 426, 429, 435, 438, 444, 446, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 487, 488, 511, 513, 515, 517, 518, 519, 524, 525, 527, 528, 531, 532, 533, 534, 535, 536, 538, 540, 542, 543, 546, 548, 568, 585, 586, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 608, 610, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 648, 649, 650, 651, 654, 656, 657, 665, 668, 672, 677, 685, 723, 751, 755, 760, 772, 773, 774, 778, 786, 788, 793, 794, 809, 810, 819, 827, 833, 834, 837, 838, 849, 854, 856, 865, 866, 869, 876, 878, 880, 881, 883, 884, 885, 886, 889, 901, 907, 912, 920, 932, 946, 947, 949, 953, 954, 956, 957, 958, 961, 962, 967, 971, 972, 973, 977, 980, 988, 990, 992, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "see": [0, 4, 5, 7, 24, 25, 27, 37, 44, 49, 50, 53, 56, 57, 61, 63, 64, 66, 68, 79, 85, 88, 89, 95, 100, 102, 106, 111, 112, 113, 116, 117, 118, 119, 121, 123, 126, 129, 135, 142, 143, 144, 146, 149, 154, 155, 156, 161, 164, 166, 167, 169, 172, 175, 176, 177, 187, 197, 198, 199, 202, 213, 214, 217, 219, 227, 229, 235, 236, 238, 242, 243, 244, 250, 251, 253, 255, 256, 257, 258, 259, 263, 265, 266, 267, 270, 271, 276, 282, 283, 285, 289, 298, 306, 307, 308, 309, 310, 311, 316, 326, 339, 340, 341, 344, 345, 346, 347, 350, 354, 355, 356, 359, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 377, 378, 379, 382, 389, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 413, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 460, 461, 462, 463, 465, 466, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 592, 597, 600, 601, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 679, 684, 686, 689, 691, 720, 740, 751, 755, 756, 757, 758, 765, 767, 768, 772, 773, 774, 776, 777, 778, 779, 780, 785, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 911, 912, 926, 928, 931, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 976, 978, 981, 983, 985, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "what": [0, 4, 9, 12, 40, 45, 52, 53, 85, 96, 100, 118, 166, 185, 202, 204, 212, 227, 294, 339, 341, 344, 350, 355, 362, 367, 368, 370, 372, 374, 378, 379, 380, 381, 391, 397, 398, 399, 481, 514, 566, 567, 569, 624, 630, 674, 860, 861, 863, 864, 865, 866, 883, 884, 885, 886, 956, 957, 958, 960, 973, 978, 980, 983, 998, 1005], "best": [0, 4, 6, 8, 12, 13, 19, 24, 26, 40, 46, 54, 60, 69, 70, 71, 72, 77, 84, 95, 99, 103, 104, 105, 113, 119, 120, 121, 122, 123, 129, 132, 146, 149, 150, 155, 161, 166, 175, 180, 184, 185, 192, 210, 211, 212, 217, 220, 225, 230, 231, 234, 243, 247, 250, 254, 255, 256, 257, 260, 263, 264, 267, 268, 270, 271, 274, 280, 285, 299, 308, 309, 326, 329, 334, 339, 340, 341, 347, 354, 355, 361, 364, 366, 367, 372, 378, 379, 382, 388, 389, 391, 395, 396, 398, 399, 400, 401, 412, 423, 426, 428, 430, 431, 432, 438, 441, 444, 451, 460, 461, 462, 516, 523, 524, 530, 532, 534, 535, 536, 537, 538, 540, 542, 543, 544, 546, 548, 571, 572, 575, 580, 588, 589, 613, 615, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 653, 654, 656, 657, 658, 666, 667, 668, 671, 672, 681, 686, 697, 698, 699, 700, 701, 705, 706, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 760, 761, 762, 764, 767, 768, 769, 771, 772, 773, 774, 777, 778, 788, 799, 801, 804, 809, 810, 819, 827, 833, 834, 876, 878, 881, 883, 884, 885, 886, 946, 951, 952, 953, 954, 957, 960, 961, 963, 971, 973, 977, 978, 981, 983, 988, 992, 998, 1001, 1004, 1006, 1007, 1008, 1011, 1012, 1013], "wai": [0, 4, 17, 27, 50, 59, 70, 73, 115, 121, 125, 127, 146, 156, 166, 168, 169, 197, 201, 211, 227, 228, 231, 235, 251, 256, 263, 265, 298, 299, 309, 311, 350, 354, 355, 356, 361, 363, 365, 366, 368, 369, 370, 374, 375, 379, 380, 382, 385, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 406, 423, 424, 430, 431, 432, 438, 439, 441, 442, 448, 474, 533, 534, 541, 550, 567, 577, 578, 589, 610, 644, 645, 654, 655, 656, 682, 684, 695, 713, 714, 731, 732, 734, 740, 751, 755, 765, 770, 797, 805, 822, 843, 849, 854, 859, 885, 886, 928, 931, 946, 947, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 963, 964, 965, 967, 969, 971, 972, 973, 977, 978, 980, 981, 983, 991, 992, 998, 1000, 1006, 1011, 1012], "question": [0, 135, 256, 334, 357, 366, 367, 371, 374, 395, 398, 805, 877, 880, 953, 956, 957, 963, 975, 981], "faq": [0, 374, 395, 670, 954, 967], "how": [0, 4, 5, 7, 8, 9, 10, 20, 21, 25, 26, 32, 33, 37, 50, 51, 52, 53, 56, 59, 68, 69, 70, 73, 77, 79, 85, 101, 105, 110, 111, 114, 117, 118, 119, 120, 122, 123, 127, 129, 143, 154, 156, 164, 166, 167, 168, 169, 172, 177, 185, 186, 192, 197, 198, 199, 200, 203, 204, 210, 214, 221, 222, 227, 230, 233, 234, 235, 237, 247, 251, 252, 254, 256, 257, 258, 263, 265, 266, 268, 269, 270, 276, 278, 280, 282, 283, 294, 307, 308, 309, 323, 324, 326, 329, 334, 339, 340, 344, 348, 354, 355, 356, 357, 362, 365, 366, 368, 369, 371, 374, 378, 379, 380, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 413, 417, 422, 423, 424, 425, 426, 428, 431, 443, 447, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 537, 544, 545, 546, 547, 548, 559, 560, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 600, 601, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 666, 667, 669, 670, 682, 698, 734, 767, 774, 777, 778, 788, 799, 820, 822, 825, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 880, 946, 947, 951, 952, 953, 954, 956, 957, 963, 964, 965, 967, 969, 970, 972, 973, 976, 978, 980, 981, 983, 985, 987, 992, 994, 998, 1000, 1003, 1009, 1012, 1013], "you": [0, 14, 16, 24, 70, 117, 118, 121, 123, 143, 146, 162, 167, 184, 197, 198, 227, 244, 251, 256, 257, 263, 271, 282, 306, 307, 310, 315, 318, 339, 350, 354, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 374, 375, 378, 379, 382, 385, 389, 390, 391, 392, 393, 395, 398, 399, 400, 402, 403, 408, 417, 424, 428, 443, 446, 448, 474, 478, 481, 482, 487, 488, 510, 511, 514, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 546, 547, 548, 556, 558, 566, 567, 569, 585, 586, 588, 605, 624, 625, 628, 629, 630, 632, 633, 634, 636, 637, 642, 643, 644, 646, 650, 652, 653, 654, 655, 656, 665, 678, 762, 773, 776, 777, 778, 779, 789, 790, 791, 793, 794, 804, 805, 806, 807, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 833, 835, 836, 840, 841, 848, 849, 850, 860, 861, 863, 864, 865, 866, 868, 870, 871, 875, 877, 880, 883, 884, 885, 886, 912, 946, 947, 952, 953, 957, 958, 961, 963, 964, 967, 968, 971, 972, 973, 976, 977, 980, 981, 983, 984, 987, 990, 992, 998, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "can": [0, 4, 5, 7, 8, 9, 10, 12, 14, 16, 19, 24, 25, 26, 27, 31, 32, 33, 37, 40, 42, 43, 46, 48, 49, 53, 55, 56, 57, 59, 60, 61, 62, 64, 69, 70, 71, 72, 77, 78, 79, 80, 81, 85, 96, 98, 99, 100, 101, 103, 105, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 141, 142, 143, 145, 146, 149, 154, 155, 156, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 181, 184, 185, 187, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 204, 212, 213, 214, 217, 218, 219, 225, 226, 227, 228, 229, 231, 235, 238, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263, 265, 267, 268, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 293, 294, 295, 298, 299, 300, 302, 303, 306, 307, 308, 309, 310, 311, 315, 316, 318, 319, 323, 324, 326, 329, 334, 339, 340, 341, 346, 347, 348, 350, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 378, 379, 380, 381, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 412, 414, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 435, 436, 438, 440, 441, 443, 444, 445, 446, 447, 451, 460, 461, 462, 465, 474, 477, 481, 486, 487, 490, 499, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 556, 557, 558, 559, 560, 561, 562, 566, 567, 569, 570, 572, 575, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 610, 612, 613, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 665, 667, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 682, 685, 687, 689, 690, 696, 698, 699, 700, 701, 703, 704, 706, 707, 709, 710, 714, 715, 716, 717, 719, 720, 723, 729, 732, 733, 734, 735, 736, 740, 756, 757, 759, 760, 761, 762, 764, 765, 766, 769, 770, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 833, 834, 835, 836, 839, 840, 841, 843, 844, 845, 849, 850, 851, 854, 855, 856, 860, 867, 868, 873, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 891, 893, 895, 899, 901, 906, 911, 912, 918, 920, 922, 925, 927, 928, 931, 938, 941, 942, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "contribut": [0, 13, 123, 154, 265, 357, 364, 365, 368, 369, 370, 374, 379, 380, 382, 396, 397, 398, 401, 426, 428, 531, 532, 537, 538, 703, 706, 733, 951, 957, 960, 965, 972, 975, 977, 978, 981, 990, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "activ": [0, 164, 204, 241, 247, 257, 313, 320, 341, 361, 362, 365, 367, 374, 377, 379, 380, 382, 392, 474, 480, 504, 610, 613, 615, 628, 629, 631, 632, 633, 641, 642, 643, 660, 661, 662, 663, 664, 691, 696, 772, 832, 833, 834, 871, 953, 954, 955, 956, 960, 961, 962, 970], "who": [0, 69, 355, 357, 362, 367, 373, 380, 382, 818, 819, 820, 822, 824, 826, 827, 828, 975, 977, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "also": [0, 4, 7, 11, 17, 19, 24, 25, 26, 27, 32, 46, 48, 53, 56, 57, 59, 63, 69, 70, 77, 79, 84, 85, 95, 103, 105, 113, 117, 119, 121, 122, 123, 127, 129, 142, 143, 144, 146, 149, 151, 154, 162, 166, 167, 168, 169, 172, 176, 177, 179, 185, 188, 189, 192, 196, 197, 198, 201, 205, 213, 214, 217, 228, 230, 235, 247, 254, 256, 257, 258, 259, 262, 263, 265, 266, 267, 276, 279, 284, 287, 289, 292, 298, 299, 300, 302, 306, 307, 308, 309, 319, 322, 323, 324, 326, 328, 339, 340, 341, 344, 345, 348, 350, 354, 355, 356, 360, 361, 362, 364, 365, 366, 367, 368, 370, 372, 374, 375, 377, 378, 379, 382, 385, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 417, 418, 419, 421, 422, 425, 426, 427, 429, 431, 441, 442, 444, 446, 460, 462, 470, 474, 476, 481, 486, 510, 511, 513, 514, 519, 524, 527, 529, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 586, 587, 588, 589, 600, 610, 611, 613, 621, 622, 623, 624, 625, 628, 630, 631, 632, 634, 638, 639, 640, 641, 650, 654, 656, 659, 662, 665, 669, 672, 673, 677, 688, 691, 700, 706, 707, 715, 720, 740, 756, 757, 760, 761, 764, 772, 773, 774, 777, 778, 788, 791, 794, 798, 799, 801, 802, 803, 805, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 832, 833, 834, 836, 838, 839, 844, 845, 849, 853, 856, 860, 864, 877, 880, 883, 884, 885, 886, 895, 914, 923, 925, 946, 947, 949, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 970, 971, 972, 973, 977, 978, 980, 981, 983, 988, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "help": [0, 4, 9, 11, 16, 69, 73, 100, 106, 167, 214, 217, 257, 259, 295, 323, 326, 340, 341, 350, 354, 355, 368, 369, 370, 371, 372, 374, 375, 379, 380, 381, 385, 391, 392, 395, 399, 401, 413, 514, 554, 605, 628, 632, 643, 663, 664, 670, 692, 812, 883, 884, 885, 886, 947, 951, 952, 954, 956, 957, 959, 961, 968, 973, 976, 977, 978, 980, 981, 992, 1004, 1005, 1006, 1009, 1012], "triag": [0, 357, 367, 369], "pr": [0, 131, 355, 367, 369, 374, 399, 718, 957, 1008, 1010], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 69, 70, 71, 72, 73, 74, 78, 80, 84, 85, 87, 88, 89, 92, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 143, 144, 146, 150, 151, 152, 153, 154, 157, 161, 162, 166, 167, 168, 169, 172, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 247, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 306, 308, 309, 310, 311, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 354, 355, 357, 359, 360, 362, 364, 368, 369, 370, 371, 372, 374, 375, 377, 378, 385, 388, 389, 391, 395, 397, 399, 400, 401, 403, 407, 411, 412, 417, 420, 423, 426, 428, 431, 433, 437, 438, 439, 441, 443, 444, 446, 448, 451, 453, 460, 461, 462, 466, 469, 470, 473, 474, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 560, 561, 562, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 592, 593, 596, 597, 598, 600, 601, 605, 606, 607, 608, 610, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 663, 664, 667, 668, 669, 670, 671, 672, 673, 679, 682, 684, 695, 699, 700, 701, 714, 720, 734, 755, 758, 762, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 809, 810, 816, 817, 819, 821, 822, 824, 825, 826, 827, 828, 832, 833, 834, 836, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 863, 864, 865, 866, 867, 868, 875, 876, 877, 878, 880, 881, 884, 886, 887, 888, 889, 906, 907, 911, 912, 915, 916, 924, 926, 928, 931, 946, 947, 949, 951, 952, 954, 956, 957, 958, 960, 962, 963, 964, 965, 969, 970, 972, 973, 975, 977, 979, 980, 981, 983, 986, 990, 991, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "juan": [0, 358, 998, 1009, 1010, 1011, 1012, 1013], "carlo": [0, 230, 358, 398, 401, 589, 619, 620, 949, 962, 998, 1009, 1010, 1011, 1012, 1013], "alfaro": [0, 358, 1009, 1010, 1011, 1012, 1013], "jim\u00e9nez": [0, 358, 1006, 1009, 1010, 1011, 1012, 1013], "arturo": [0, 37, 56, 175, 257, 259, 339, 340, 341, 358, 1012, 1013], "amor": [0, 37, 56, 175, 257, 259, 339, 340, 341, 358, 1012, 1013], "luci": [0, 262, 358, 1009, 1010, 1011, 1012, 1013], "liu": [0, 262, 358, 541, 703, 733, 957, 963, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013], "maxwel": [0, 358, 1008, 1011, 1012, 1013], "martin": [0, 358, 699, 700, 701, 953, 957, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "loyola": [0, 358, 1011, 1012], "sylvain": [0, 358, 1002, 1007, 1008, 1009, 1010, 1011, 1012], "mari\u00e9": [0, 358, 1007, 1008, 1009, 1010, 1011, 1012], "chiara": [0, 358, 1008, 1009, 1010, 1011, 1012, 1013], "marmo": [0, 358, 1008, 1009, 1010, 1011, 1012, 1013], "norbert": [0, 358, 1000, 1010, 1011, 1012], "prein": [0, 358, 1010, 1011, 1012], "reshama": [0, 352, 358, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "shaikh": [0, 352, 358, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "albert": [0, 225, 358, 1005, 1006, 1007, 1010, 1011], "tim": [0, 115, 128, 358, 998, 1003, 1004, 1007, 1008, 1009, 1011, 1013], "head": [0, 26, 70, 115, 128, 154, 166, 184, 185, 214, 238, 246, 306, 311, 358, 367, 374, 396, 981, 1003, 1004, 1013], "around": [0, 4, 26, 37, 52, 84, 113, 122, 155, 167, 172, 259, 295, 314, 316, 317, 326, 329, 339, 340, 341, 350, 362, 364, 367, 372, 377, 391, 395, 396, 399, 401, 450, 451, 493, 522, 598, 618, 627, 682, 772, 780, 822, 824, 826, 827, 828, 856, 953, 954, 956, 957, 963, 967, 971, 977, 978, 981, 990, 992, 1002, 1003], "lauren": [0, 351, 670, 674, 954, 1010, 1013], "burk": [0, 351, 1013], "francoisgoupil": [0, 351, 1012], "longer": [0, 4, 53, 113, 167, 181, 294, 309, 367, 368, 395, 398, 399, 401, 428, 514, 952, 956, 957, 959, 962, 972, 981, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mathieu": [0, 2, 24, 48, 100, 187, 197, 218, 232, 257, 339, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1011], "blondel": [0, 2, 24, 48, 100, 187, 197, 218, 232, 257, 339, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1011], "lar": [0, 2, 14, 98, 146, 164, 174, 185, 215, 339, 340, 341, 364, 450, 451, 457, 479, 509, 515, 517, 520, 521, 523, 524, 526, 629, 630, 631, 632, 633, 634, 641, 642, 643, 656, 660, 661, 662, 663, 664, 979, 990, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011], "buitinck": [0, 2, 14, 339, 340, 341, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "noel": [0, 2, 109, 110, 111, 112, 998, 999, 1000, 1001, 1002, 1010], "daw": [0, 2, 109, 110, 111, 112, 998, 999, 1000, 1001, 1002], "dubourg": [0, 2, 152, 156, 981, 998, 1002], "edouard": [0, 2, 998], "duchesnai": [0, 2, 998], "alexand": [0, 2, 391, 396, 513, 842, 1000, 1001, 1002, 1004, 1005, 1006, 1010, 1011, 1012], "fabisch": [0, 2, 1000, 1001, 1002, 1004], "virgil": [0, 2, 9, 998, 999, 1001], "fritsch": [0, 2, 9, 998, 999, 1001], "satrajit": [0, 2, 998, 999], "ghosh": [0, 2, 391, 998, 999], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 998, 1001, 1006, 1007, 1008, 1009, 1012], "gorgolewski": [0, 2, 998, 1001], "jaqu": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 179, 192, 193, 194, 219, 331, 334, 998, 999, 1000, 1001], "grobler": [0, 2, 31, 45, 51, 53, 72, 88, 89, 101, 179, 192, 193, 194, 219, 331, 334, 998, 999, 1000, 1001], "brian": [0, 2, 46, 686, 957, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012], "holt": [0, 2, 998], "arnaud": [0, 2, 999, 1000, 1001, 1002, 1003, 1004], "joli": [0, 2, 999, 1000, 1001, 1002, 1003, 1004], "thoui": [0, 2, 998], "rai": [0, 2, 925, 957, 998, 1008, 1010, 1011], "jone": [0, 2, 362, 998], "kyle": [0, 2, 99, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010], "kastner": [0, 2, 99, 1000, 1001, 1002, 1009, 1010], "manoj": [0, 2, 42, 146, 178, 1001, 1002, 1003, 1004, 1005], "kumar": [0, 2, 42, 146, 178, 362, 391, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "robert": [0, 2, 48, 71, 146, 184, 364, 396, 506, 513, 606, 634, 699, 700, 701, 712, 842, 947, 953, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1013], "layton": [0, 2, 48, 998, 999, 1000, 1001, 1003], "wei": [0, 2, 971, 998, 999, 1002, 1003, 1004, 1005, 1007, 1011], "li": [0, 2, 317, 362, 617, 620, 674, 703, 733, 868, 946, 949, 957, 960, 967, 969, 972, 998, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "paolo": [0, 2, 998, 1002, 1008], "losi": [0, 2, 998], "gill": [0, 2, 113, 114, 998, 999, 1000, 1001, 1002, 1003, 1004], "loupp": [0, 2, 113, 114, 398, 533, 534, 998, 999, 1000, 1001, 1002, 1003, 1004], "jarrod": [0, 2, 1007], "millman": [0, 2, 1007], "passo": [0, 2, 998, 999], "peter": [0, 2, 11, 16, 62, 109, 121, 123, 124, 257, 339, 340, 391, 427, 429, 436, 627, 767, 768, 953, 957, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013], "prettenhof": [0, 2, 11, 16, 109, 121, 123, 124, 257, 339, 340, 998, 999, 1000, 1001, 1002, 1003], "venkat": [0, 2], "raghav": [0, 2, 120, 260, 298, 1002, 1003, 1004, 1005, 1006, 1010], "rajagopalan": [0, 2, 1006, 1010], "jacob": [0, 2, 1003, 1004, 1005], "schreiber": [0, 2, 1003, 1004, 1005], "shiqiao": [0, 2, 998, 999], "jake": [0, 2, 11, 156, 197, 217, 244, 281, 289, 976, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012], "vanderpla": [0, 2, 11, 156, 197, 217, 244, 281, 289, 976, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "ward": [0, 2, 36, 39, 44, 52, 54, 55, 61, 67, 164, 169, 399, 421, 425, 442, 508, 829, 998, 1001, 1003], "farlei": [0, 2, 998], "ron": [0, 2, 243, 998], "weiss": [0, 2, 243, 391, 669, 998], "respons": [0, 146, 167, 192, 196, 199, 266, 339, 364, 372, 379, 390, 391, 392, 398, 401, 443, 460, 461, 462, 609, 610, 611, 652, 653, 676, 678, 680, 772, 773, 958, 964, 975, 983], "If": [0, 4, 11, 16, 27, 32, 42, 49, 70, 81, 98, 117, 122, 129, 158, 162, 166, 177, 196, 211, 213, 256, 263, 271, 281, 289, 298, 303, 326, 334, 335, 339, 340, 341, 348, 350, 354, 355, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 379, 380, 382, 385, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 492, 493, 497, 500, 501, 502, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 692, 694, 695, 696, 703, 704, 705, 706, 707, 708, 709, 713, 715, 718, 719, 722, 723, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 743, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 786, 788, 791, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 904, 910, 912, 914, 916, 920, 922, 925, 926, 928, 931, 932, 938, 941, 942, 943, 944, 946, 947, 949, 951, 952, 953, 954, 955, 957, 960, 961, 963, 964, 967, 969, 971, 972, 973, 974, 977, 978, 980, 983, 984, 990, 991, 992, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 25, 26, 27, 30, 32, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 64, 65, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 85, 89, 90, 91, 93, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 135, 136, 137, 138, 142, 143, 145, 146, 149, 150, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 208, 211, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 293, 294, 295, 297, 298, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 314, 315, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 341, 342, 344, 346, 347, 348, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 378, 379, 380, 381, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 401, 402, 403, 404, 407, 409, 410, 411, 412, 418, 419, 435, 436, 438, 440, 442, 447, 450, 457, 459, 463, 471, 481, 486, 487, 494, 509, 521, 523, 524, 525, 526, 533, 550, 552, 553, 554, 555, 557, 561, 563, 564, 570, 573, 574, 576, 579, 581, 585, 587, 594, 598, 599, 602, 607, 614, 616, 620, 625, 628, 629, 632, 637, 638, 639, 641, 645, 653, 661, 663, 664, 665, 672, 673, 674, 676, 677, 689, 692, 693, 694, 699, 700, 701, 703, 705, 707, 709, 712, 713, 716, 720, 723, 728, 733, 735, 736, 740, 741, 743, 744, 745, 746, 748, 751, 752, 753, 754, 757, 758, 760, 769, 781, 782, 783, 784, 785, 786, 787, 796, 804, 806, 808, 810, 812, 816, 817, 824, 826, 827, 828, 830, 838, 839, 842, 844, 847, 857, 858, 860, 862, 863, 865, 866, 867, 870, 874, 876, 885, 886, 887, 888, 891, 894, 895, 896, 901, 902, 911, 912, 920, 922, 925, 926, 928, 929, 933, 934, 935, 939, 940, 946, 947, 949, 950, 952, 955, 956, 958, 959, 960, 962, 963, 964, 965, 967, 968, 969, 970, 974, 975, 976, 977, 978, 979, 980, 983, 984, 986, 987, 988, 989, 991, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "scientif": [0, 32, 135, 136, 137, 138, 230, 357, 361, 365, 377, 382, 391, 431, 441, 479, 981, 984], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 30, 32, 37, 40, 41, 42, 44, 47, 49, 50, 53, 55, 56, 57, 61, 63, 64, 65, 69, 70, 71, 72, 74, 77, 79, 80, 81, 85, 88, 89, 91, 95, 96, 97, 98, 100, 103, 104, 106, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 131, 132, 135, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 179, 182, 184, 185, 187, 189, 191, 193, 196, 197, 198, 199, 202, 204, 205, 208, 209, 210, 211, 212, 214, 217, 218, 221, 222, 225, 226, 228, 229, 230, 232, 235, 237, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 281, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 326, 327, 328, 329, 331, 334, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 377, 378, 379, 380, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 429, 448, 449, 450, 451, 452, 453, 454, 455, 479, 501, 509, 510, 512, 515, 527, 539, 540, 541, 547, 548, 589, 595, 605, 610, 611, 618, 629, 633, 636, 637, 644, 646, 651, 652, 653, 654, 655, 670, 689, 696, 698, 703, 723, 733, 741, 758, 797, 818, 819, 820, 822, 824, 825, 826, 827, 828, 849, 850, 856, 860, 861, 863, 864, 865, 866, 868, 871, 875, 879, 923, 946, 947, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 981, 983, 987, 988, 989, 990, 991, 992, 995, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "would": [0, 4, 6, 9, 26, 32, 45, 53, 57, 69, 77, 79, 80, 85, 91, 100, 101, 122, 146, 149, 154, 155, 166, 167, 168, 169, 172, 186, 196, 197, 198, 211, 214, 225, 243, 252, 256, 257, 262, 264, 266, 282, 294, 298, 299, 309, 317, 326, 335, 339, 341, 350, 354, 362, 363, 367, 368, 370, 372, 374, 375, 377, 378, 379, 380, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 412, 444, 447, 460, 461, 462, 467, 510, 512, 514, 519, 522, 530, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 561, 562, 565, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 650, 651, 652, 653, 654, 656, 657, 680, 686, 690, 691, 698, 733, 762, 766, 774, 776, 788, 801, 809, 810, 819, 827, 834, 860, 861, 863, 864, 865, 866, 867, 868, 873, 875, 876, 878, 881, 883, 884, 885, 886, 946, 947, 950, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 967, 972, 978, 981, 983, 988, 990, 992, 995, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "appreci": [0, 367], "citat": [0, 361, 364, 377], "paper": [0, 146, 172, 256, 364, 372, 377, 391, 393, 422, 428, 457, 482, 512, 519, 541, 619, 636, 644, 645, 649, 654, 657, 670, 765, 813, 822, 825, 867, 868, 953, 957, 960, 963, 972, 992, 998, 1005, 1006], "machin": [0, 4, 6, 8, 9, 27, 62, 142, 143, 149, 154, 168, 208, 237, 256, 259, 262, 291, 296, 298, 303, 308, 311, 322, 327, 334, 339, 341, 354, 355, 357, 360, 361, 362, 364, 365, 367, 369, 372, 373, 377, 378, 379, 381, 385, 389, 391, 395, 396, 398, 399, 401, 417, 419, 427, 457, 480, 482, 488, 494, 495, 496, 508, 510, 512, 519, 522, 533, 534, 535, 536, 537, 538, 542, 543, 544, 571, 572, 588, 589, 592, 597, 600, 612, 616, 617, 619, 621, 622, 623, 628, 629, 632, 633, 634, 636, 637, 654, 660, 661, 670, 686, 691, 702, 712, 718, 720, 765, 772, 801, 802, 816, 817, 822, 825, 832, 833, 834, 836, 854, 856, 861, 875, 876, 877, 878, 880, 881, 885, 886, 946, 947, 949, 950, 953, 954, 955, 957, 958, 960, 963, 964, 965, 967, 971, 973, 976, 977, 978, 979, 980, 981, 984, 985, 986, 988, 992, 993, 994, 995, 998, 1000, 1010, 1011, 1012, 1013], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 354, 356, 361, 365, 367, 368, 369, 370, 371, 374, 375, 377, 379, 380, 382, 392, 399, 474, 486, 487, 559, 677, 785, 850, 925, 957, 967, 973, 975, 978, 980, 981, 983, 984, 986, 992, 994, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "et": [0, 11, 77, 78, 109, 110, 124, 184, 289, 364, 388, 391, 393, 396, 398, 399, 400, 430, 454, 476, 497, 498, 506, 513, 519, 522, 541, 660, 661, 697, 698, 811, 813, 833, 834, 868, 911, 912, 953, 954, 957, 963, 967, 969, 972, 973, 1006], "al": [0, 11, 77, 78, 109, 110, 124, 184, 289, 364, 388, 391, 393, 396, 398, 399, 400, 430, 454, 476, 497, 498, 506, 513, 519, 522, 541, 660, 661, 697, 698, 811, 813, 833, 834, 868, 911, 912, 953, 954, 957, 963, 967, 969, 972, 973, 1006, 1011], "jmlr": [0, 391, 644, 645, 654, 682, 953, 972], "12": [0, 4, 6, 8, 10, 15, 33, 40, 42, 53, 55, 56, 72, 73, 84, 118, 119, 123, 152, 153, 154, 162, 166, 167, 169, 176, 182, 196, 204, 214, 217, 220, 221, 225, 226, 228, 229, 235, 238, 239, 243, 244, 255, 256, 258, 259, 262, 268, 302, 311, 334, 341, 364, 365, 371, 378, 380, 391, 395, 399, 423, 426, 428, 460, 461, 462, 463, 510, 512, 519, 548, 642, 647, 649, 663, 664, 667, 670, 671, 772, 773, 775, 792, 795, 807, 828, 844, 946, 947, 953, 955, 958, 967, 971, 972, 975, 983, 988, 996, 999, 1001, 1005, 1006, 1008, 1009], "pp": [0, 62, 255, 364, 391, 393, 399, 402, 403, 424, 427, 431, 441, 489, 511, 512, 519, 568, 613, 621, 642, 663, 664, 698, 703, 707, 717, 733, 746, 760, 811, 813, 815, 832, 852, 863, 950, 957, 959, 960, 970], "2825": 0, "2830": 0, "2011": [0, 47, 167, 218, 372, 396, 399, 513, 516, 518, 519, 525, 568, 605, 616, 636, 707, 947, 961, 971, 976, 998], "bibtex": 0, "entri": [0, 16, 70, 74, 129, 162, 166, 167, 252, 306, 340, 350, 370, 372, 374, 378, 379, 388, 389, 391, 396, 398, 401, 442, 451, 509, 510, 515, 523, 524, 539, 540, 566, 569, 572, 589, 598, 610, 616, 618, 625, 629, 631, 633, 634, 637, 639, 641, 642, 643, 651, 653, 660, 661, 663, 664, 677, 682, 685, 687, 690, 693, 694, 696, 703, 706, 707, 708, 711, 712, 715, 720, 733, 735, 736, 760, 762, 765, 766, 767, 768, 787, 800, 816, 817, 824, 825, 826, 827, 828, 847, 853, 864, 943, 946, 947, 953, 957, 960, 967, 972, 978, 983, 1005, 1008, 1009, 1011], "articl": [0, 17, 69, 339, 362, 366, 367, 374, 395, 404, 454, 683, 953, 957, 992, 1011], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 20, 21, 24, 25, 26, 27, 30, 32, 34, 37, 38, 39, 41, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 71, 77, 78, 80, 81, 84, 85, 90, 94, 95, 96, 97, 98, 99, 103, 104, 105, 111, 112, 113, 117, 118, 119, 122, 123, 125, 128, 131, 132, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 166, 175, 176, 178, 180, 181, 183, 184, 185, 188, 189, 195, 196, 198, 200, 201, 202, 204, 205, 210, 213, 214, 217, 218, 219, 225, 229, 230, 231, 232, 233, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 259, 260, 261, 265, 266, 270, 271, 278, 279, 282, 283, 284, 285, 287, 288, 289, 298, 302, 316, 319, 322, 323, 324, 325, 326, 329, 335, 336, 339, 345, 346, 347, 366, 367, 370, 374, 392, 957, 980, 988], "p": [0, 11, 13, 24, 26, 27, 41, 60, 79, 80, 84, 91, 103, 121, 142, 152, 172, 208, 213, 214, 217, 219, 229, 244, 256, 262, 263, 289, 361, 362, 364, 365, 371, 374, 388, 389, 391, 393, 394, 396, 398, 400, 401, 402, 422, 424, 426, 429, 436, 448, 450, 453, 454, 457, 476, 506, 512, 516, 518, 519, 525, 527, 528, 529, 531, 533, 534, 535, 536, 537, 539, 542, 543, 544, 568, 570, 571, 572, 573, 574, 576, 577, 578, 582, 583, 584, 585, 586, 587, 593, 594, 605, 618, 621, 666, 668, 670, 672, 677, 683, 693, 701, 718, 729, 763, 765, 776, 782, 783, 784, 787, 801, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 832, 836, 837, 852, 863, 869, 885, 886, 887, 950, 951, 953, 954, 955, 957, 959, 960, 961, 962, 963, 964, 967, 971, 972, 975, 987, 990, 998, 999, 1001, 1004, 1006, 1013], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 14, 16, 17, 26, 32, 37, 43, 47, 48, 49, 52, 53, 57, 63, 66, 70, 74, 85, 98, 113, 116, 117, 119, 122, 129, 130, 137, 140, 142, 145, 146, 147, 149, 155, 156, 158, 164, 166, 167, 168, 172, 180, 182, 185, 196, 197, 198, 206, 214, 218, 229, 231, 234, 238, 246, 254, 256, 257, 258, 259, 262, 263, 265, 266, 268, 292, 293, 294, 300, 303, 306, 308, 310, 314, 315, 334, 339, 340, 341, 350, 362, 367, 368, 372, 377, 389, 392, 396, 398, 399, 400, 401, 465, 486, 487, 509, 510, 515, 516, 544, 559, 560, 570, 573, 574, 576, 577, 578, 582, 583, 584, 585, 586, 587, 595, 605, 610, 613, 636, 691, 700, 703, 706, 707, 733, 760, 761, 764, 765, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 800, 833, 834, 838, 847, 850, 851, 855, 856, 890, 895, 896, 949, 952, 961, 964, 965, 967, 971, 1000, 1006, 1007, 1008, 1010, 1012], "g": [0, 4, 7, 8, 9, 10, 12, 16, 24, 25, 26, 27, 32, 53, 64, 69, 72, 81, 85, 103, 113, 114, 121, 122, 129, 136, 149, 150, 151, 152, 154, 156, 157, 158, 162, 178, 181, 196, 197, 198, 214, 218, 222, 231, 241, 256, 260, 261, 267, 274, 282, 298, 303, 317, 333, 341, 350, 354, 359, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 377, 379, 385, 389, 390, 391, 393, 395, 396, 398, 399, 400, 401, 403, 481, 506, 509, 511, 512, 515, 519, 533, 534, 535, 536, 537, 542, 543, 545, 546, 547, 548, 559, 560, 566, 567, 569, 571, 572, 575, 582, 589, 595, 600, 601, 608, 611, 612, 642, 652, 655, 658, 664, 670, 675, 698, 705, 715, 717, 740, 762, 774, 777, 778, 780, 788, 792, 797, 798, 799, 800, 803, 806, 811, 815, 818, 819, 820, 823, 825, 826, 827, 828, 832, 839, 841, 846, 849, 852, 854, 856, 858, 860, 861, 862, 863, 864, 865, 866, 875, 883, 884, 885, 886, 911, 912, 925, 946, 947, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 967, 971, 972, 973, 978, 980, 981, 992, 998, 1002, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "A": [0, 16, 17, 18, 22, 25, 27, 31, 36, 39, 59, 67, 74, 77, 80, 85, 91, 94, 96, 97, 98, 103, 111, 112, 116, 117, 119, 128, 132, 135, 136, 137, 138, 143, 144, 145, 149, 152, 154, 156, 157, 158, 164, 166, 167, 184, 197, 206, 210, 211, 214, 218, 256, 257, 259, 263, 270, 292, 298, 300, 306, 308, 311, 315, 317, 319, 326, 331, 339, 340, 341, 346, 348, 350, 354, 356, 357, 361, 362, 364, 365, 367, 368, 369, 371, 374, 377, 378, 379, 380, 381, 386, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 412, 417, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 466, 468, 469, 470, 472, 475, 478, 479, 480, 481, 482, 486, 488, 489, 490, 491, 492, 498, 500, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 548, 559, 566, 567, 568, 569, 571, 572, 575, 580, 585, 586, 589, 595, 598, 605, 608, 610, 611, 613, 615, 616, 617, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 650, 651, 653, 654, 655, 656, 657, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 682, 683, 688, 689, 690, 694, 695, 697, 699, 700, 701, 702, 703, 708, 713, 714, 717, 720, 721, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 741, 743, 744, 751, 752, 753, 754, 755, 758, 765, 768, 770, 772, 773, 774, 777, 778, 780, 785, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 843, 847, 852, 856, 859, 860, 861, 863, 864, 865, 866, 871, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 888, 910, 911, 912, 942, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 970, 971, 972, 973, 976, 977, 978, 983, 984, 990, 991, 992, 994, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "v": [0, 4, 16, 17, 19, 27, 30, 33, 34, 36, 37, 38, 49, 57, 67, 69, 74, 76, 79, 82, 83, 84, 86, 95, 97, 98, 101, 114, 122, 164, 165, 167, 169, 170, 174, 185, 196, 211, 215, 229, 242, 243, 246, 247, 249, 252, 271, 272, 303, 306, 323, 340, 350, 355, 359, 364, 367, 372, 374, 379, 388, 390, 393, 394, 396, 398, 399, 412, 421, 425, 431, 441, 442, 443, 444, 449, 452, 453, 454, 455, 456, 460, 461, 462, 474, 490, 502, 508, 509, 515, 519, 523, 524, 528, 530, 532, 534, 536, 538, 540, 542, 543, 546, 548, 559, 567, 571, 572, 578, 584, 589, 608, 612, 613, 617, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 648, 650, 651, 654, 656, 657, 666, 673, 677, 679, 682, 695, 713, 714, 716, 731, 732, 734, 765, 770, 774, 779, 786, 788, 798, 802, 804, 805, 806, 809, 810, 811, 819, 827, 829, 832, 834, 836, 837, 840, 843, 849, 850, 851, 856, 859, 869, 875, 876, 877, 878, 880, 881, 884, 886, 890, 951, 952, 953, 954, 957, 958, 959, 962, 965, 971, 972, 974, 994, 998, 1001, 1002, 1003, 1006, 1008, 1009, 1012, 1013], "b": [0, 8, 9, 10, 24, 26, 58, 64, 79, 101, 103, 110, 112, 113, 118, 122, 123, 132, 135, 136, 150, 151, 152, 157, 162, 178, 181, 196, 197, 202, 214, 232, 234, 255, 259, 261, 266, 270, 274, 309, 317, 350, 362, 364, 367, 370, 371, 372, 388, 389, 391, 394, 395, 396, 399, 417, 460, 478, 515, 519, 524, 544, 566, 567, 568, 569, 585, 586, 588, 589, 606, 624, 625, 626, 627, 636, 647, 650, 652, 654, 658, 665, 666, 683, 697, 707, 708, 767, 768, 785, 786, 823, 849, 851, 852, 855, 856, 863, 890, 912, 913, 922, 947, 949, 953, 954, 955, 957, 960, 962, 967, 971, 972, 987, 998, 1006, 1009, 1011, 1012, 1013], "o": [0, 17, 19, 27, 30, 38, 49, 59, 60, 62, 63, 81, 84, 90, 97, 126, 157, 184, 189, 194, 196, 211, 231, 241, 256, 258, 265, 298, 299, 303, 307, 310, 318, 344, 354, 362, 364, 367, 382, 391, 393, 396, 398, 402, 424, 426, 427, 429, 452, 512, 582, 605, 644, 645, 670, 804, 832, 847, 887, 925, 926, 949, 951, 953, 954, 957, 958, 960, 961, 971, 972, 973, 998, 1001, 1004, 1006, 1007, 1010, 1011, 1013], "m": [0, 8, 9, 11, 19, 26, 27, 44, 57, 58, 62, 63, 64, 79, 80, 95, 132, 154, 178, 180, 196, 214, 256, 260, 289, 318, 322, 333, 339, 354, 355, 361, 362, 364, 365, 370, 372, 382, 388, 389, 391, 393, 396, 398, 400, 402, 424, 425, 429, 436, 452, 453, 478, 491, 506, 510, 512, 514, 519, 617, 623, 627, 642, 649, 663, 664, 667, 671, 686, 694, 703, 718, 733, 735, 736, 772, 773, 822, 847, 912, 936, 937, 947, 949, 951, 953, 954, 955, 957, 958, 959, 960, 961, 965, 967, 971, 973, 981, 1006, 1007, 1008, 1009, 1012, 1013], "r": [0, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 39, 43, 64, 74, 77, 78, 79, 80, 85, 95, 103, 106, 110, 113, 114, 118, 122, 123, 124, 132, 142, 150, 151, 152, 156, 157, 158, 161, 162, 166, 178, 180, 181, 185, 196, 203, 206, 214, 222, 228, 231, 241, 244, 247, 255, 256, 259, 261, 262, 263, 266, 269, 271, 274, 278, 283, 287, 289, 310, 328, 341, 350, 362, 364, 370, 377, 379, 388, 389, 391, 393, 394, 395, 396, 398, 399, 412, 417, 430, 432, 444, 448, 453, 457, 460, 461, 462, 476, 482, 491, 498, 512, 530, 531, 532, 534, 536, 537, 538, 539, 540, 543, 546, 548, 566, 567, 568, 569, 584, 587, 589, 605, 613, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 656, 657, 658, 663, 664, 670, 674, 694, 699, 700, 701, 705, 707, 758, 762, 765, 774, 788, 791, 806, 809, 810, 813, 816, 817, 819, 822, 823, 825, 827, 834, 847, 852, 863, 876, 878, 881, 883, 884, 886, 888, 947, 949, 951, 953, 954, 957, 958, 959, 960, 961, 964, 965, 967, 971, 972, 973, 977, 992, 998, 1002, 1005, 1008, 1009, 1010, 1011, 1013], "d": [0, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 30, 31, 32, 37, 38, 42, 48, 49, 50, 59, 60, 62, 69, 70, 81, 88, 91, 95, 98, 103, 105, 120, 149, 157, 196, 204, 210, 212, 214, 222, 226, 228, 229, 230, 231, 244, 255, 256, 264, 274, 282, 283, 289, 294, 314, 315, 318, 325, 326, 331, 341, 361, 362, 364, 368, 372, 377, 389, 391, 393, 394, 396, 398, 399, 401, 402, 424, 426, 431, 439, 442, 466, 471, 481, 504, 512, 514, 535, 536, 543, 544, 559, 560, 568, 592, 593, 597, 600, 601, 622, 623, 626, 647, 648, 649, 658, 666, 667, 670, 671, 675, 677, 683, 686, 699, 700, 701, 703, 733, 741, 745, 755, 758, 765, 786, 811, 813, 815, 816, 817, 832, 843, 847, 849, 852, 863, 868, 885, 886, 890, 949, 951, 953, 954, 955, 956, 957, 959, 965, 967, 969, 972, 973, 980, 988, 989, 990, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "perrot": [0, 998], "e": [0, 4, 8, 10, 11, 16, 25, 26, 32, 53, 56, 60, 69, 77, 79, 80, 81, 84, 85, 98, 100, 101, 113, 119, 121, 122, 125, 135, 142, 145, 146, 157, 166, 167, 172, 176, 185, 186, 196, 197, 198, 214, 217, 218, 231, 252, 256, 257, 259, 261, 262, 270, 271, 282, 289, 300, 303, 306, 308, 334, 341, 346, 347, 348, 350, 354, 355, 356, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 377, 378, 379, 382, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 417, 419, 421, 424, 425, 426, 429, 433, 442, 448, 449, 450, 451, 452, 454, 455, 474, 476, 478, 479, 480, 481, 502, 511, 513, 514, 516, 518, 519, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 554, 559, 560, 566, 567, 568, 569, 571, 572, 575, 581, 582, 584, 585, 586, 587, 588, 589, 595, 600, 601, 608, 611, 612, 613, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 662, 665, 666, 668, 670, 672, 675, 677, 679, 682, 683, 686, 687, 705, 706, 707, 708, 715, 718, 719, 732, 740, 744, 762, 765, 772, 773, 774, 777, 778, 780, 787, 788, 792, 797, 798, 799, 800, 801, 803, 815, 816, 817, 818, 819, 820, 822, 826, 827, 828, 832, 833, 834, 839, 841, 844, 846, 847, 848, 849, 851, 852, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 875, 876, 882, 883, 884, 885, 886, 890, 906, 911, 912, 914, 917, 918, 925, 932, 943, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 967, 968, 971, 972, 973, 978, 980, 981, 990, 991, 992, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "journal": [0, 80, 167, 256, 262, 361, 362, 364, 391, 393, 398, 431, 441, 452, 512, 519, 605, 613, 623, 667, 670, 671, 683, 693, 708, 711, 712, 735, 736, 763, 801, 806, 852, 863, 946, 947, 951, 953, 954, 955, 958, 964, 969, 971, 972], "research": [0, 256, 262, 362, 364, 377, 391, 479, 491, 613, 623, 670, 712, 801, 806, 946, 954, 958, 960, 972, 977, 978, 981], "volum": [0, 65, 78, 154, 362, 364, 391, 393, 401, 452, 454, 512, 746, 953, 972, 981], "page": [0, 12, 17, 26, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 217, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 354, 362, 364, 367, 368, 370, 372, 374, 380, 390, 391, 393, 452, 494, 495, 496, 606, 622, 806, 870, 912, 947, 957, 958, 983, 992, 996, 998, 1002, 1003], "want": [0, 4, 12, 24, 25, 26, 63, 70, 146, 162, 166, 196, 197, 198, 247, 256, 270, 294, 319, 323, 339, 340, 350, 354, 355, 356, 365, 366, 368, 370, 371, 372, 377, 378, 379, 380, 382, 385, 389, 390, 391, 392, 393, 398, 399, 400, 478, 481, 482, 488, 513, 527, 632, 633, 634, 636, 637, 644, 646, 652, 653, 654, 741, 822, 825, 841, 848, 868, 875, 946, 953, 956, 957, 958, 961, 963, 967, 968, 972, 977, 978, 983, 991, 998, 1012], "its": [0, 4, 9, 12, 13, 19, 26, 34, 37, 64, 65, 77, 79, 81, 85, 90, 91, 100, 118, 122, 135, 146, 149, 154, 156, 166, 167, 169, 172, 175, 185, 209, 213, 214, 219, 225, 233, 236, 238, 241, 246, 247, 255, 259, 261, 263, 265, 276, 278, 282, 283, 300, 309, 317, 323, 336, 339, 340, 344, 348, 350, 355, 356, 360, 361, 362, 363, 367, 368, 370, 371, 374, 377, 378, 379, 380, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 407, 420, 421, 422, 424, 425, 429, 433, 435, 439, 442, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 475, 481, 501, 509, 511, 512, 515, 516, 518, 519, 520, 522, 528, 533, 534, 535, 536, 537, 538, 542, 543, 544, 561, 563, 564, 565, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 622, 623, 649, 650, 652, 663, 664, 665, 666, 670, 674, 686, 702, 706, 707, 713, 714, 718, 755, 758, 760, 772, 773, 774, 797, 804, 805, 818, 819, 820, 822, 823, 824, 826, 827, 828, 835, 836, 840, 845, 848, 849, 851, 867, 868, 871, 875, 876, 883, 885, 895, 896, 901, 907, 925, 927, 946, 952, 953, 954, 956, 957, 958, 959, 960, 963, 964, 965, 970, 971, 972, 973, 977, 981, 983, 985, 987, 990, 991, 992, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "api": [0, 12, 50, 164, 224, 226, 235, 239, 340, 341, 356, 357, 360, 361, 367, 369, 375, 376, 377, 378, 380, 382, 385, 396, 398, 399, 409, 410, 413, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 474, 482, 486, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 541, 542, 544, 545, 546, 547, 548, 556, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 589, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 636, 655, 666, 667, 668, 669, 772, 773, 777, 778, 802, 820, 822, 824, 825, 828, 832, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 873, 879, 880, 925, 946, 955, 956, 957, 960, 967, 971, 977, 978, 981, 983, 987, 989, 994, 995, 996, 997, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "design": [0, 13, 79, 129, 152, 166, 177, 246, 298, 348, 356, 361, 367, 371, 377, 378, 379, 380, 381, 391, 398, 400, 401, 493, 506, 610, 611, 626, 643, 647, 654, 658, 663, 774, 792, 793, 811, 813, 947, 953, 954, 957, 958, 967, 977, 978, 981, 985, 1000, 1007], "mai": [0, 8, 19, 25, 39, 44, 46, 55, 70, 85, 95, 109, 119, 146, 153, 155, 157, 158, 166, 172, 176, 185, 202, 222, 259, 261, 263, 264, 292, 315, 326, 339, 340, 341, 350, 354, 355, 356, 359, 361, 362, 363, 364, 366, 367, 368, 370, 371, 374, 377, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 412, 419, 420, 421, 423, 424, 425, 426, 428, 430, 431, 432, 433, 438, 441, 444, 448, 451, 460, 461, 462, 465, 466, 467, 474, 486, 487, 493, 512, 513, 516, 518, 522, 525, 526, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 552, 559, 572, 575, 580, 588, 589, 595, 598, 612, 613, 615, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 650, 651, 652, 654, 655, 656, 657, 659, 662, 664, 666, 667, 669, 670, 671, 673, 675, 683, 690, 693, 694, 696, 697, 699, 700, 701, 703, 715, 733, 740, 762, 763, 774, 776, 777, 778, 779, 788, 789, 790, 791, 793, 794, 797, 801, 804, 809, 810, 811, 812, 813, 815, 818, 819, 820, 822, 824, 826, 827, 828, 834, 835, 836, 839, 841, 851, 853, 854, 855, 856, 858, 864, 867, 868, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 893, 915, 916, 925, 946, 947, 949, 951, 953, 954, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 978, 983, 989, 990, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "consid": [0, 4, 12, 13, 25, 39, 65, 70, 80, 95, 99, 119, 120, 122, 141, 145, 146, 162, 167, 196, 198, 256, 259, 263, 267, 276, 282, 283, 298, 303, 308, 323, 331, 334, 339, 350, 354, 355, 356, 359, 366, 367, 368, 372, 374, 377, 379, 387, 391, 396, 397, 398, 399, 400, 401, 402, 403, 418, 424, 429, 436, 453, 486, 487, 499, 511, 527, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 563, 564, 566, 567, 569, 571, 585, 586, 598, 610, 611, 624, 630, 636, 637, 638, 640, 649, 657, 666, 667, 668, 670, 671, 672, 674, 678, 680, 683, 685, 687, 693, 703, 707, 711, 733, 763, 765, 769, 818, 819, 820, 822, 824, 826, 827, 828, 831, 833, 834, 839, 849, 870, 871, 880, 881, 883, 884, 885, 886, 941, 946, 952, 953, 954, 955, 957, 958, 960, 963, 964, 965, 967, 971, 972, 973, 978, 983, 990, 1001, 1002, 1006, 1010, 1011, 1013], "softwar": [0, 340, 354, 364, 367, 374, 377, 379, 399, 605, 613, 636, 947, 981], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 356, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 385, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 482, 484, 485, 486, 487, 488, 490, 493, 497, 499, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 665, 666, 667, 668, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 740, 741, 745, 746, 748, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 902, 903, 904, 905, 906, 907, 910, 912, 914, 915, 916, 917, 919, 921, 922, 923, 924, 925, 926, 928, 931, 945, 946, 947, 949, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 976, 977, 978, 981, 984, 986, 987, 988, 989, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "2013": [0, 172, 364, 395, 396, 514, 703, 733, 949, 957, 976, 999, 1000], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 13, 16, 17, 40, 46, 47, 65, 66, 80, 113, 168, 188, 191, 205, 206, 261, 262, 263, 293, 302, 334, 364, 365, 372, 374, 388, 389, 391, 395, 396, 398, 401, 453, 494, 495, 496, 516, 518, 525, 533, 534, 535, 536, 543, 544, 568, 585, 586, 588, 589, 593, 597, 600, 601, 612, 626, 627, 636, 647, 650, 652, 658, 665, 667, 670, 671, 683, 693, 702, 703, 708, 733, 763, 813, 847, 883, 884, 885, 886, 946, 951, 953, 954, 957, 959, 960, 961, 965, 969, 971, 973, 991, 1001, 1006, 1010, 1011, 1012, 1013], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 399, 811, 959, 976], "languag": [0, 341, 371, 385, 396, 399, 971, 977, 978, 981, 984], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 20, 21, 25, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 58, 59, 61, 64, 67, 68, 70, 71, 73, 75, 78, 80, 89, 91, 93, 95, 98, 99, 104, 106, 107, 112, 113, 115, 118, 119, 120, 121, 122, 126, 127, 128, 130, 132, 135, 136, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 159, 161, 164, 166, 167, 174, 175, 178, 179, 181, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 225, 228, 229, 230, 233, 235, 238, 241, 242, 243, 244, 245, 247, 250, 254, 256, 258, 259, 260, 261, 264, 270, 274, 276, 279, 280, 282, 283, 284, 285, 286, 287, 289, 293, 294, 297, 299, 300, 301, 303, 304, 306, 308, 310, 311, 315, 316, 318, 319, 322, 323, 325, 330, 331, 334, 339, 345, 346, 347, 348, 353, 355, 357, 359, 360, 361, 363, 364, 367, 368, 369, 372, 373, 374, 375, 378, 382, 385, 387, 388, 389, 390, 393, 396, 397, 398, 399, 402, 403, 404, 406, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 498, 499, 500, 501, 502, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 593, 595, 596, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 688, 689, 691, 695, 696, 698, 702, 704, 705, 706, 707, 708, 711, 713, 714, 715, 717, 718, 719, 731, 732, 734, 738, 740, 741, 746, 760, 761, 762, 764, 765, 766, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 899, 900, 901, 911, 912, 922, 928, 929, 931, 932, 933, 934, 935, 938, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 984, 985, 987, 988, 990, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mine": [0, 256, 340, 362, 391, 402, 424, 489, 541, 698, 711, 717, 760, 953, 957, 963, 969], "108": [0, 180, 215, 340, 999], "122": [0, 75, 112, 154, 162, 167, 200, 230, 372, 958], "high": [0, 4, 9, 11, 12, 25, 27, 31, 37, 40, 44, 49, 56, 61, 64, 69, 73, 79, 80, 97, 98, 113, 115, 116, 117, 122, 123, 125, 127, 137, 138, 146, 149, 155, 162, 167, 168, 169, 191, 197, 198, 210, 217, 218, 219, 225, 229, 241, 247, 254, 258, 262, 263, 271, 282, 283, 292, 294, 300, 302, 317, 323, 325, 326, 339, 340, 346, 347, 354, 362, 364, 367, 371, 374, 375, 377, 378, 388, 389, 390, 391, 395, 397, 398, 399, 400, 401, 424, 426, 428, 429, 431, 448, 460, 461, 462, 531, 532, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 622, 648, 649, 657, 667, 670, 671, 703, 708, 719, 723, 733, 766, 767, 782, 784, 816, 817, 821, 850, 851, 855, 877, 879, 880, 883, 884, 885, 886, 926, 946, 951, 952, 953, 954, 956, 957, 960, 961, 963, 965, 967, 969, 972, 973, 974, 977, 978, 983, 984, 986, 992, 998, 999, 1001, 1002, 1006, 1009, 1010, 1011, 1012, 1013], "qualiti": [0, 6, 24, 37, 46, 48, 49, 57, 98, 118, 166, 202, 250, 254, 263, 264, 265, 367, 374, 377, 379, 385, 386, 390, 391, 393, 396, 431, 441, 448, 453, 535, 536, 537, 538, 542, 543, 720, 788, 867, 868, 883, 884, 885, 886, 912, 952, 954, 962, 969, 973, 977, 978, 981, 987, 988, 994], "png": [0, 32, 887], "svg": 0, "logo": [0, 395, 781], "avail": [0, 5, 11, 12, 13, 41, 55, 56, 98, 117, 120, 121, 146, 149, 154, 158, 166, 167, 185, 196, 204, 214, 218, 234, 253, 254, 259, 260, 263, 281, 282, 283, 289, 303, 306, 307, 308, 309, 311, 317, 319, 350, 354, 361, 362, 364, 365, 366, 367, 371, 372, 375, 378, 379, 382, 385, 388, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 426, 429, 430, 431, 432, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 486, 513, 527, 533, 534, 535, 536, 537, 538, 542, 543, 566, 569, 571, 572, 588, 589, 610, 611, 635, 643, 648, 650, 651, 652, 654, 667, 674, 677, 709, 710, 774, 777, 778, 788, 798, 799, 804, 805, 807, 808, 809, 810, 822, 833, 834, 843, 852, 859, 863, 868, 919, 920, 925, 947, 951, 954, 956, 957, 958, 959, 960, 963, 967, 970, 971, 972, 976, 977, 978, 981, 983, 987, 992, 994, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012], "doc": [0, 4, 8, 19, 339, 341, 355, 365, 367, 370, 371, 372, 374, 379, 382, 384, 385, 399, 566, 567, 569, 755, 758, 767, 768, 799, 992, 998, 1002, 1012], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 361, 364, 366, 367, 369, 370, 372, 374, 375, 377, 378, 382, 385, 388, 392, 396, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 954, 967, 973, 977, 981, 991, 992, 1008, 1012], "directori": [0, 8, 278, 361, 365, 367, 368, 372, 374, 379, 382, 392, 421, 425, 429, 464, 477, 836, 837, 1012], "driven": [0, 977, 981], "howev": [0, 4, 5, 7, 13, 24, 25, 27, 37, 47, 49, 53, 59, 71, 74, 77, 81, 84, 100, 103, 113, 115, 119, 122, 123, 129, 143, 146, 149, 154, 155, 167, 168, 177, 185, 196, 218, 221, 222, 225, 231, 256, 263, 270, 274, 281, 293, 298, 308, 334, 339, 340, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 372, 374, 377, 379, 385, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 420, 423, 426, 428, 430, 433, 438, 474, 486, 510, 529, 545, 559, 567, 584, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 608, 610, 611, 621, 633, 634, 650, 665, 670, 673, 678, 740, 742, 774, 777, 778, 788, 799, 803, 804, 815, 833, 834, 849, 854, 877, 878, 880, 891, 926, 946, 947, 950, 951, 952, 953, 954, 956, 957, 958, 960, 961, 962, 964, 965, 967, 971, 972, 973, 983, 987, 990, 1007, 1008, 1010, 1011], "institut": [0, 364, 960], "privat": [0, 370, 379, 380, 891, 981, 998, 1006, 1008, 1009, 1011, 1012], "grant": [0, 367], "assur": [0, 379, 772, 773, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "sustain": 0, "like": [0, 4, 12, 19, 52, 57, 59, 69, 88, 91, 98, 103, 105, 112, 116, 122, 125, 149, 155, 166, 176, 196, 247, 256, 259, 260, 263, 264, 270, 285, 295, 298, 306, 317, 326, 339, 340, 350, 354, 356, 359, 361, 362, 365, 366, 367, 368, 370, 373, 374, 375, 377, 378, 379, 385, 387, 391, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 493, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 556, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 745, 746, 747, 749, 750, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 900, 901, 909, 914, 922, 923, 925, 928, 929, 930, 942, 944, 946, 949, 951, 952, 953, 954, 957, 959, 960, 961, 963, 964, 967, 972, 973, 977, 978, 980, 981, 983, 990, 992, 995, 998, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "thank": [0, 4, 17, 25, 85, 168, 172, 196, 265, 339, 340, 366, 374, 981, 998, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "funder": 0, "member": [0, 339, 340, 362, 367, 369, 370, 380, 391, 406, 422, 427, 430, 432, 470, 533, 534, 541, 559, 636, 637, 644, 646, 654, 655, 656, 682, 683, 693, 695, 708, 713, 714, 734, 763, 770, 774, 875, 953, 960, 983, 998, 1010, 1013], "consortium": [0, 981], "foundat": [0, 129, 367, 960], "face": [0, 3, 15, 36, 53, 67, 93, 98, 107, 117, 164, 224, 239, 360, 367, 370, 391, 396, 398, 400, 428, 451, 471, 472, 473, 499, 510, 511, 515, 517, 518, 519, 536, 562, 635, 651, 691, 788, 802, 819, 856, 880, 898, 960, 973, 974, 975, 986, 991, 994, 998, 1006], "2022": [0, 355, 398, 683, 1012, 1013], "microsoft": [0, 12, 365, 382], "m\u00fcller": [0, 31, 299, 300, 380, 396, 513, 842, 961, 967, 971, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012], "2020": [0, 362, 1008, 1009, 1010, 1011], "quansight": 0, "lab": [0, 362, 447, 514, 873, 981, 1009], "2021": [0, 365, 367, 382, 649, 1010, 1011], "columbia": 0, "univers": [0, 157, 339, 362, 364, 369, 391, 396, 399, 568, 765, 811, 815, 870, 953, 955, 957, 959], "2016": [0, 222, 361, 391, 946, 1003, 1004], "sydnei": 0, "2017": [0, 256, 361, 389, 391, 402, 424, 957, 1004, 1005], "receiv": [0, 19, 135, 164, 249, 253, 272, 341, 350, 367, 368, 374, 379, 395, 398, 482, 636, 680, 684, 686, 704, 759, 765, 766, 793, 802, 804, 805, 843, 880, 958, 961, 962, 971, 1008, 1009], "improv": [0, 4, 24, 25, 33, 77, 78, 81, 100, 106, 110, 111, 118, 120, 121, 122, 124, 129, 142, 162, 166, 172, 182, 196, 204, 214, 257, 259, 295, 329, 340, 350, 355, 365, 369, 371, 372, 374, 375, 377, 379, 380, 385, 390, 396, 398, 400, 428, 429, 509, 510, 512, 515, 516, 517, 519, 520, 521, 524, 532, 535, 536, 537, 538, 539, 540, 542, 543, 580, 588, 589, 621, 630, 642, 644, 645, 646, 650, 651, 652, 653, 654, 656, 663, 665, 670, 706, 707, 761, 764, 765, 825, 833, 834, 850, 852, 863, 883, 884, 886, 912, 951, 953, 954, 957, 960, 961, 971, 972, 973, 976, 977, 978, 981, 990, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 24, 25, 27, 34, 66, 106, 126, 131, 166, 181, 191, 196, 197, 198, 214, 220, 229, 234, 253, 256, 259, 263, 265, 266, 298, 307, 308, 339, 348, 354, 362, 366, 367, 368, 373, 375, 379, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 403, 418, 419, 422, 426, 428, 443, 446, 472, 476, 478, 482, 486, 487, 488, 503, 505, 507, 508, 509, 511, 513, 514, 515, 520, 523, 524, 526, 527, 528, 539, 540, 541, 570, 571, 572, 573, 574, 576, 577, 578, 584, 588, 589, 598, 610, 621, 624, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 647, 650, 651, 652, 653, 655, 658, 659, 660, 661, 662, 665, 668, 676, 678, 680, 685, 687, 690, 691, 693, 696, 698, 701, 704, 706, 707, 708, 712, 713, 715, 716, 717, 718, 719, 720, 721, 729, 731, 735, 759, 760, 761, 764, 765, 766, 772, 773, 777, 778, 816, 817, 822, 839, 840, 843, 849, 852, 855, 859, 863, 867, 868, 870, 871, 875, 876, 879, 880, 881, 892, 910, 912, 924, 948, 949, 953, 955, 957, 958, 960, 961, 962, 964, 967, 972, 988, 990, 992, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "It": [0, 4, 7, 8, 9, 16, 25, 37, 40, 53, 57, 71, 77, 79, 81, 95, 98, 99, 105, 113, 115, 118, 122, 129, 146, 154, 155, 156, 161, 162, 166, 167, 168, 176, 184, 185, 193, 196, 210, 213, 214, 217, 218, 225, 230, 251, 252, 254, 256, 257, 259, 262, 263, 276, 279, 282, 283, 284, 286, 287, 289, 298, 302, 303, 306, 322, 326, 334, 339, 340, 341, 348, 350, 354, 355, 356, 360, 362, 364, 365, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 382, 385, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 438, 441, 446, 448, 453, 457, 463, 465, 474, 486, 493, 502, 511, 513, 514, 516, 518, 519, 527, 528, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 557, 560, 567, 574, 584, 585, 586, 589, 592, 593, 597, 598, 600, 601, 605, 608, 609, 610, 611, 619, 620, 621, 624, 625, 628, 630, 631, 632, 633, 636, 638, 639, 640, 641, 644, 645, 646, 648, 649, 650, 652, 654, 655, 656, 659, 660, 661, 662, 665, 667, 669, 670, 671, 673, 674, 675, 676, 678, 680, 682, 686, 687, 688, 694, 700, 711, 719, 720, 724, 735, 736, 739, 742, 758, 760, 774, 776, 777, 778, 780, 786, 787, 788, 812, 813, 818, 819, 820, 822, 825, 826, 827, 828, 832, 833, 834, 838, 839, 840, 844, 845, 846, 850, 853, 855, 864, 867, 868, 872, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 899, 912, 925, 928, 931, 933, 934, 935, 936, 937, 938, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 968, 970, 971, 972, 973, 977, 981, 983, 989, 990, 991, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "provid": [0, 5, 8, 11, 24, 27, 37, 42, 59, 80, 95, 112, 116, 117, 127, 129, 149, 155, 166, 167, 175, 182, 184, 185, 188, 197, 205, 218, 222, 226, 227, 246, 256, 257, 258, 262, 286, 289, 294, 298, 302, 306, 307, 309, 311, 324, 331, 339, 340, 344, 345, 350, 354, 356, 359, 361, 362, 363, 365, 366, 367, 368, 369, 372, 374, 375, 377, 378, 379, 381, 382, 385, 387, 388, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 411, 417, 420, 422, 423, 424, 426, 428, 429, 431, 471, 472, 474, 476, 479, 510, 511, 512, 529, 530, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 566, 569, 571, 572, 579, 583, 589, 605, 610, 611, 612, 621, 624, 625, 630, 634, 635, 636, 637, 638, 639, 640, 641, 644, 646, 649, 651, 654, 655, 656, 659, 672, 677, 689, 712, 718, 741, 751, 755, 765, 769, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 793, 794, 795, 805, 807, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 846, 847, 851, 853, 871, 875, 876, 879, 880, 883, 884, 885, 886, 890, 901, 906, 920, 933, 934, 935, 946, 947, 949, 952, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 973, 974, 977, 978, 981, 983, 987, 990, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "2012": [0, 80, 389, 398, 533, 534, 541, 617, 720, 946, 950, 957, 976, 998], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 377, 379, 380, 382, 387, 388, 389, 390, 391, 393, 394, 396, 398, 399, 401, 402, 417, 421, 423, 424, 425, 426, 429, 431, 434, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 451, 474, 477, 479, 497, 501, 512, 514, 516, 518, 525, 540, 545, 546, 547, 548, 568, 588, 597, 605, 606, 607, 608, 612, 617, 618, 621, 624, 626, 628, 630, 632, 638, 640, 642, 644, 645, 647, 651, 654, 655, 656, 658, 663, 664, 668, 670, 672, 769, 772, 773, 774, 776, 777, 778, 779, 781, 783, 788, 789, 790, 793, 795, 797, 798, 799, 800, 801, 804, 806, 811, 812, 813, 814, 815, 816, 817, 824, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 846, 849, 850, 851, 855, 859, 867, 868, 872, 873, 877, 880, 881, 889, 914, 946, 947, 949, 950, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 969, 970, 971, 972, 973, 977, 981, 983, 988, 990, 991, 992, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "host": [0, 339, 362, 367, 370, 374, 375, 868, 925, 992], "other": [0, 4, 8, 12, 24, 27, 30, 31, 33, 37, 40, 44, 52, 56, 65, 68, 71, 84, 85, 97, 98, 100, 103, 113, 115, 118, 119, 123, 125, 131, 141, 161, 162, 164, 166, 167, 168, 172, 175, 189, 196, 214, 217, 218, 219, 221, 225, 226, 227, 229, 231, 235, 238, 243, 246, 251, 253, 256, 257, 258, 265, 266, 281, 282, 283, 298, 302, 303, 306, 307, 309, 314, 326, 333, 336, 339, 340, 344, 348, 350, 354, 359, 360, 362, 363, 364, 367, 368, 370, 371, 372, 374, 375, 378, 379, 380, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 424, 427, 429, 431, 436, 448, 466, 475, 481, 512, 513, 519, 527, 529, 530, 538, 539, 540, 545, 546, 559, 566, 567, 569, 575, 580, 588, 589, 590, 591, 598, 605, 606, 608, 617, 621, 630, 636, 637, 649, 650, 651, 652, 653, 654, 657, 665, 670, 674, 677, 682, 696, 740, 751, 755, 762, 767, 774, 777, 778, 779, 780, 781, 783, 788, 791, 793, 796, 797, 798, 799, 800, 801, 803, 805, 823, 831, 836, 848, 852, 856, 863, 875, 876, 877, 878, 879, 880, 881, 906, 946, 947, 949, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 973, 975, 978, 980, 981, 983, 987, 990, 991, 994, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1011, 1012, 1013], "event": [0, 4, 16, 196, 214, 259, 391, 566, 567, 614, 811, 900, 953, 958, 959, 977, 981, 1004], "pari": [0, 364, 392, 445, 741, 844, 968, 1012], "saclai": 0, "center": [0, 7, 8, 9, 13, 24, 26, 33, 37, 38, 40, 42, 43, 45, 48, 49, 50, 53, 55, 58, 59, 60, 62, 63, 80, 90, 100, 102, 105, 120, 121, 122, 123, 146, 162, 167, 177, 188, 190, 196, 197, 207, 208, 220, 221, 225, 226, 241, 244, 245, 251, 257, 267, 281, 284, 286, 293, 298, 300, 301, 310, 316, 324, 326, 327, 328, 333, 340, 341, 362, 363, 364, 371, 390, 391, 393, 394, 396, 397, 398, 404, 420, 422, 423, 426, 427, 428, 431, 433, 438, 439, 440, 441, 442, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 479, 490, 502, 512, 513, 519, 522, 528, 584, 587, 588, 589, 610, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 656, 668, 672, 772, 841, 842, 845, 854, 856, 865, 866, 875, 876, 951, 953, 954, 956, 964, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012], "scienc": [0, 38, 79, 157, 361, 364, 377, 391, 420, 433, 516, 518, 525, 666, 667, 671, 823, 947, 949, 953, 954, 957, 960, 969, 978, 981, 986, 1006], "one": [0, 4, 8, 9, 10, 14, 16, 17, 25, 26, 27, 32, 33, 37, 40, 47, 53, 56, 57, 59, 60, 63, 65, 70, 80, 88, 90, 95, 98, 100, 101, 105, 110, 115, 122, 125, 129, 132, 145, 146, 149, 156, 157, 161, 166, 167, 168, 169, 172, 175, 176, 185, 186, 188, 189, 190, 192, 196, 198, 200, 205, 206, 211, 214, 219, 225, 232, 243, 246, 252, 253, 254, 256, 257, 259, 260, 263, 264, 265, 266, 274, 276, 281, 295, 299, 300, 303, 306, 308, 309, 310, 317, 325, 326, 335, 339, 340, 341, 344, 348, 350, 354, 355, 356, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 385, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 419, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 439, 441, 443, 448, 453, 454, 465, 466, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 492, 512, 517, 518, 521, 525, 529, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 559, 561, 562, 566, 567, 568, 569, 588, 589, 593, 594, 598, 605, 608, 610, 611, 612, 613, 621, 625, 626, 627, 628, 632, 635, 636, 637, 639, 644, 646, 647, 649, 651, 652, 653, 654, 656, 658, 666, 670, 673, 677, 681, 687, 698, 711, 727, 728, 731, 740, 748, 751, 755, 756, 757, 758, 760, 765, 767, 768, 771, 772, 773, 774, 777, 778, 780, 781, 782, 784, 786, 788, 792, 793, 797, 799, 800, 802, 803, 804, 805, 806, 808, 809, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 832, 836, 839, 840, 841, 843, 844, 846, 847, 848, 849, 850, 855, 856, 859, 861, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 891, 901, 904, 914, 928, 946, 947, 949, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 971, 972, 973, 974, 976, 977, 981, 983, 987, 989, 990, 991, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "2014": [0, 52, 361, 396, 398, 401, 508, 585, 586, 600, 601, 636, 670, 833, 834, 911, 912, 954, 961, 981, 1001], "2015": [0, 167, 361, 401, 686, 699, 700, 701, 833, 834, 957, 964, 981, 1002, 1003], "50": [0, 4, 7, 10, 14, 16, 24, 32, 33, 38, 50, 52, 58, 59, 64, 65, 69, 84, 91, 95, 98, 105, 113, 122, 127, 128, 150, 152, 153, 154, 155, 166, 167, 176, 180, 191, 196, 199, 203, 204, 208, 210, 212, 214, 217, 221, 222, 228, 229, 231, 234, 238, 239, 251, 256, 258, 259, 269, 295, 298, 302, 308, 310, 315, 317, 319, 324, 333, 334, 340, 362, 364, 367, 371, 395, 398, 399, 400, 403, 422, 452, 478, 482, 501, 511, 517, 522, 531, 532, 547, 571, 572, 593, 595, 636, 637, 644, 646, 648, 654, 655, 656, 670, 691, 774, 788, 805, 825, 875, 884, 952, 953, 957, 958, 960, 963, 967, 998], "2018": [0, 196, 214, 399, 429, 946, 957, 975, 981, 1005, 1006], "nyu": [0, 120, 178, 825], "moor": [0, 712, 957, 981], "environ": [0, 12, 26, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 354, 362, 364, 365, 367, 372, 374, 377, 382, 385, 392, 477, 977, 978, 981, 1005, 1006], "student": [0, 97, 256, 954, 978, 981], "t\u00e9l\u00e9com": [0, 975], "paristech": [0, 24, 25, 42, 225, 975], "rv": [0, 120, 260, 298, 778, 786, 788, 946, 998, 999, 1002, 1003, 1004, 1005, 1006], "thierri": [0, 241, 243, 981, 1004, 1005, 1012], "guillemot": [0, 241, 243, 1004, 1005], "labex": 0, "digicosm": 0, "goix": [0, 1002, 1004, 1005, 1006, 1007], "mathurin": [0, 1009, 1011, 1012], "massia": [0, 1009, 1011, 1012], "2019": [0, 167, 365, 391, 431, 441, 670, 954, 964, 967, 1006, 1007, 1008], "dure": [0, 4, 5, 12, 50, 57, 71, 74, 85, 100, 114, 119, 126, 143, 149, 154, 166, 167, 169, 185, 197, 204, 254, 258, 308, 309, 354, 356, 365, 367, 368, 371, 379, 380, 391, 392, 396, 398, 399, 401, 402, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 591, 592, 593, 595, 597, 598, 600, 601, 603, 605, 606, 607, 608, 610, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 766, 772, 773, 774, 777, 778, 788, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 947, 949, 953, 954, 960, 967, 969, 987, 992, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "phd": [0, 391, 398, 978, 981], "chan": [0, 814, 856], "zuckerberg": 0, "initi": [0, 7, 12, 17, 36, 45, 56, 57, 59, 63, 67, 80, 123, 130, 131, 132, 150, 155, 164, 166, 176, 189, 211, 217, 218, 222, 240, 243, 248, 256, 308, 316, 326, 340, 350, 355, 362, 367, 368, 374, 375, 377, 379, 391, 396, 398, 400, 401, 403, 422, 423, 426, 427, 428, 429, 430, 431, 432, 438, 439, 440, 441, 457, 490, 493, 509, 510, 511, 515, 516, 518, 521, 523, 524, 525, 526, 531, 532, 537, 538, 571, 585, 586, 588, 589, 597, 598, 605, 618, 623, 624, 625, 626, 630, 631, 636, 638, 639, 640, 641, 644, 645, 646, 647, 649, 654, 655, 656, 658, 659, 662, 668, 669, 670, 672, 673, 772, 773, 806, 825, 832, 833, 834, 871, 898, 911, 912, 926, 931, 932, 949, 953, 954, 961, 962, 963, 971, 973, 977, 989, 991, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "were": [0, 4, 32, 69, 70, 73, 79, 80, 119, 122, 143, 146, 154, 162, 196, 197, 226, 265, 267, 294, 295, 307, 308, 310, 311, 317, 339, 341, 348, 350, 361, 362, 364, 367, 370, 377, 379, 388, 392, 398, 399, 443, 446, 447, 474, 539, 540, 557, 566, 569, 580, 777, 778, 793, 800, 872, 873, 909, 946, 957, 958, 973, 980, 991, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "through": [0, 7, 115, 119, 157, 166, 217, 230, 251, 256, 259, 281, 302, 303, 324, 331, 341, 348, 364, 367, 368, 373, 375, 379, 380, 382, 391, 394, 396, 398, 400, 401, 443, 446, 451, 513, 535, 536, 539, 542, 543, 544, 559, 571, 572, 575, 625, 629, 631, 633, 636, 637, 639, 641, 643, 646, 654, 655, 666, 669, 698, 780, 852, 863, 867, 868, 883, 884, 885, 886, 918, 946, 947, 954, 957, 959, 960, 961, 963, 965, 967, 971, 972, 973, 981, 983, 990, 992, 998, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013], "program": [0, 50, 340, 350, 355, 356, 364, 365, 367, 372, 377, 486, 613, 648, 865, 866, 953, 972, 973, 977, 978, 998, 1000], "immanuel": [0, 998, 999, 1003], "bayer": [0, 998, 999, 1003], "kemal": [0, 20, 21, 1000, 1001], "eren": [0, 20, 21, 1000, 1001], "tr\u00e9segni": [0, 1000], "hamzeh": [0, 1001, 1002], "alsalhi": [0, 1001, 1002], "issam": [0, 292, 1004], "laradji": [0, 292, 1004], "maheshakya": [0, 1001, 1002, 1003], "wijewardena": [0, 1001, 1002, 1003], "xue": [0, 1002, 1003, 1004, 1006, 1007, 1010], "nelson": [0, 1004, 1005, 1010], "yenchen": [0, 1004], "lin": [0, 512, 636, 972, 1003, 1004, 1005, 1006], "neurodebian": 0, "debian": [0, 354, 365, 372], "packag": [0, 19, 46, 53, 161, 257, 276, 355, 360, 361, 364, 365, 367, 368, 370, 372, 375, 377, 379, 382, 393, 398, 399, 431, 457, 624, 625, 925, 947, 953, 956, 960, 967, 973, 981, 986, 998, 1004, 1006, 1007, 1008], "dr": [0, 364, 391, 1012], "jame": [0, 364, 395, 806, 958, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "haxbi": 0, "dartmouth": 0, "colleg": 0, "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 19, 24, 25, 27, 37, 44, 50, 53, 55, 57, 61, 66, 70, 73, 77, 79, 80, 85, 89, 95, 111, 112, 122, 125, 126, 129, 130, 142, 149, 151, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 177, 179, 184, 185, 186, 190, 191, 196, 197, 204, 205, 210, 213, 214, 217, 219, 225, 229, 234, 242, 243, 244, 250, 251, 256, 257, 258, 259, 262, 264, 279, 282, 283, 287, 293, 294, 298, 307, 308, 309, 310, 311, 322, 323, 325, 326, 334, 336, 339, 340, 341, 348, 350, 354, 355, 356, 360, 361, 362, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 412, 423, 426, 428, 430, 432, 438, 442, 444, 460, 461, 462, 477, 486, 487, 493, 501, 502, 512, 514, 519, 526, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 548, 550, 552, 566, 584, 587, 589, 610, 611, 613, 617, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 660, 661, 667, 670, 671, 675, 676, 678, 679, 680, 685, 686, 693, 698, 703, 704, 715, 716, 717, 723, 731, 733, 734, 740, 759, 761, 764, 765, 766, 769, 772, 792, 793, 809, 810, 811, 812, 813, 814, 815, 819, 827, 834, 836, 843, 876, 878, 881, 883, 884, 885, 886, 895, 896, 925, 946, 947, 949, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 964, 967, 970, 971, 972, 973, 976, 977, 978, 980, 981, 983, 988, 990, 991, 992, 995, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "particip": [0, 366, 367, 380, 981], "could": [0, 4, 9, 13, 27, 37, 42, 53, 70, 71, 95, 98, 111, 112, 119, 122, 143, 149, 154, 162, 166, 167, 196, 197, 205, 214, 221, 230, 231, 250, 256, 279, 284, 287, 309, 322, 323, 339, 344, 356, 367, 372, 374, 379, 382, 385, 389, 395, 398, 399, 403, 453, 511, 516, 585, 586, 607, 649, 776, 781, 783, 946, 947, 953, 954, 964, 965, 967, 972, 978, 991, 995, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "attend": 0, "psf": [0, 367], "dataia": 0, "possibl": [0, 4, 17, 26, 37, 49, 70, 77, 95, 113, 126, 149, 166, 167, 168, 196, 200, 213, 214, 230, 256, 257, 258, 259, 261, 262, 263, 265, 266, 274, 306, 326, 334, 339, 340, 350, 354, 355, 356, 360, 361, 362, 365, 367, 368, 369, 370, 372, 374, 377, 378, 379, 382, 385, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 401, 403, 405, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 474, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 682, 687, 699, 700, 701, 705, 733, 734, 755, 760, 762, 765, 772, 773, 774, 776, 777, 778, 780, 786, 787, 788, 792, 793, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 893, 895, 896, 899, 904, 925, 928, 931, 946, 949, 952, 953, 954, 956, 957, 958, 959, 960, 965, 967, 972, 973, 978, 981, 983, 990, 991, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013], "tinyclu": 0, "french": [0, 214], "associ": [0, 11, 24, 25, 79, 149, 244, 314, 316, 339, 374, 391, 393, 395, 396, 398, 399, 428, 448, 449, 450, 451, 452, 453, 454, 455, 471, 472, 473, 502, 535, 539, 542, 583, 584, 608, 623, 636, 637, 644, 646, 652, 653, 654, 667, 673, 677, 708, 716, 819, 827, 853, 864, 872, 881, 883, 885, 901, 956, 957, 960, 967, 970, 981, 991, 998, 1010], "fond": [0, 981], "de": [0, 12, 24, 25, 26, 27, 73, 114, 129, 149, 150, 152, 153, 154, 155, 156, 158, 187, 230, 231, 316, 334, 364, 613, 666, 741, 953, 954, 978, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 42, 44, 50, 61, 65, 71, 117, 122, 129, 143, 146, 154, 161, 167, 168, 185, 196, 197, 198, 214, 218, 230, 250, 253, 256, 257, 259, 265, 303, 326, 334, 340, 348, 354, 362, 364, 367, 371, 372, 374, 377, 380, 391, 393, 396, 399, 401, 471, 472, 478, 482, 488, 624, 625, 875, 947, 953, 954, 957, 962, 963, 964, 978, 981, 988, 990, 991, 998], "our": [0, 4, 5, 7, 11, 12, 42, 53, 55, 69, 70, 79, 80, 85, 95, 96, 109, 111, 116, 119, 122, 123, 141, 146, 149, 154, 156, 166, 167, 168, 169, 196, 214, 219, 221, 250, 256, 259, 262, 263, 294, 298, 307, 309, 319, 323, 329, 330, 331, 334, 339, 340, 341, 350, 355, 366, 370, 371, 374, 377, 378, 379, 380, 391, 395, 398, 399, 402, 424, 429, 541, 622, 670, 686, 698, 703, 715, 733, 818, 819, 820, 822, 824, 826, 827, 828, 946, 947, 953, 954, 957, 963, 967, 970, 971, 972, 978, 981, 983, 990, 991, 992, 1005, 1006, 1008, 1009, 1012, 1013], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 359, 364, 365, 368, 370, 374, 377, 378, 379, 380, 382, 385, 388, 389, 391, 392, 394, 395, 396, 400, 401, 417, 479, 513, 517, 519, 521, 524, 537, 538, 589, 594, 599, 602, 616, 617, 618, 619, 634, 644, 646, 651, 654, 665, 667, 670, 671, 677, 687, 774, 796, 804, 805, 806, 808, 814, 822, 833, 837, 856, 870, 871, 946, 951, 953, 954, 956, 957, 958, 964, 965, 971, 972, 978, 981, 983, 994, 998, 1002, 1003, 1006, 1010, 1011, 1012, 1013], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 13, 16, 19, 24, 25, 27, 34, 38, 39, 40, 42, 48, 52, 53, 54, 59, 63, 74, 81, 90, 95, 97, 98, 110, 115, 117, 118, 122, 131, 132, 146, 154, 155, 157, 164, 166, 167, 175, 182, 188, 189, 190, 196, 197, 198, 199, 205, 207, 211, 213, 214, 217, 218, 225, 231, 235, 238, 242, 244, 246, 254, 257, 258, 259, 260, 262, 263, 264, 266, 268, 274, 281, 294, 298, 299, 303, 306, 307, 308, 309, 311, 314, 316, 317, 318, 323, 326, 331, 335, 339, 340, 341, 345, 348, 350, 354, 355, 356, 360, 362, 363, 364, 365, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 380, 387, 388, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 412, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 486, 487, 493, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 678, 679, 680, 683, 687, 691, 692, 693, 694, 695, 696, 698, 699, 700, 703, 705, 706, 707, 709, 710, 712, 713, 714, 715, 722, 723, 725, 727, 728, 730, 733, 738, 746, 751, 755, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 783, 784, 786, 788, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 901, 903, 904, 905, 906, 917, 922, 925, 932, 941, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 967, 970, 971, 972, 973, 977, 978, 981, 983, 984, 986, 987, 989, 990, 991, 992, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "handl": [0, 4, 70, 119, 125, 129, 172, 231, 258, 263, 265, 276, 306, 339, 341, 354, 359, 361, 367, 368, 375, 377, 379, 399, 474, 522, 554, 559, 560, 563, 564, 566, 567, 569, 588, 613, 624, 625, 630, 636, 637, 638, 639, 640, 646, 653, 654, 656, 659, 698, 765, 849, 850, 875, 880, 887, 913, 954, 957, 958, 959, 960, 963, 965, 972, 973, 977, 978, 981, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "non": [0, 3, 5, 9, 10, 13, 15, 24, 25, 33, 37, 49, 56, 61, 70, 74, 79, 81, 96, 97, 98, 100, 109, 112, 119, 126, 127, 129, 142, 143, 145, 153, 155, 162, 164, 166, 167, 168, 174, 175, 182, 189, 190, 195, 197, 198, 200, 202, 211, 212, 214, 215, 220, 221, 226, 227, 228, 229, 231, 241, 243, 247, 249, 250, 256, 265, 272, 276, 280, 295, 298, 300, 302, 307, 308, 309, 310, 318, 321, 323, 328, 329, 334, 335, 337, 339, 340, 341, 348, 350, 354, 355, 359, 362, 363, 367, 368, 371, 372, 374, 375, 377, 379, 380, 389, 390, 391, 392, 395, 397, 398, 399, 400, 401, 403, 417, 421, 425, 429, 431, 435, 441, 442, 443, 444, 446, 447, 466, 474, 475, 481, 482, 486, 504, 510, 513, 514, 516, 518, 522, 525, 527, 529, 530, 531, 535, 536, 537, 538, 539, 540, 542, 543, 544, 550, 566, 567, 569, 570, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 613, 616, 621, 628, 630, 635, 636, 637, 638, 642, 643, 644, 646, 647, 650, 654, 655, 656, 663, 664, 665, 666, 667, 668, 669, 670, 672, 676, 677, 680, 684, 685, 690, 693, 695, 697, 698, 703, 704, 705, 712, 714, 716, 717, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 759, 762, 765, 766, 769, 772, 773, 774, 775, 779, 781, 782, 783, 784, 786, 792, 798, 802, 805, 824, 826, 827, 828, 831, 836, 837, 839, 840, 841, 844, 848, 849, 850, 851, 852, 853, 855, 856, 862, 863, 864, 865, 866, 868, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 895, 896, 910, 912, 916, 918, 922, 946, 947, 948, 949, 950, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 968, 969, 970, 971, 972, 973, 978, 990, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "profit": 0, "organ": [0, 11, 69, 79, 339, 361, 366, 367, 380, 824, 977], "which": [0, 4, 7, 10, 12, 13, 14, 16, 17, 19, 21, 25, 26, 27, 37, 39, 40, 44, 46, 49, 53, 55, 56, 57, 64, 66, 69, 70, 71, 74, 77, 79, 80, 85, 91, 97, 99, 100, 101, 106, 113, 114, 115, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 135, 141, 143, 145, 146, 149, 150, 154, 155, 156, 161, 162, 166, 167, 169, 172, 175, 176, 185, 189, 196, 197, 198, 202, 204, 210, 212, 213, 214, 217, 218, 219, 221, 225, 226, 229, 230, 231, 232, 234, 235, 241, 242, 246, 247, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 274, 276, 281, 282, 283, 293, 298, 300, 301, 302, 303, 306, 308, 309, 310, 311, 314, 316, 317, 318, 326, 336, 339, 340, 341, 344, 348, 350, 354, 355, 356, 359, 361, 362, 364, 365, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 441, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 465, 501, 509, 510, 511, 512, 515, 519, 520, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 556, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 600, 605, 606, 607, 608, 610, 611, 612, 618, 620, 621, 622, 625, 626, 627, 630, 632, 633, 634, 636, 637, 639, 644, 646, 647, 649, 651, 652, 653, 654, 655, 656, 658, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 685, 687, 694, 695, 697, 698, 700, 702, 703, 711, 712, 713, 714, 720, 723, 733, 735, 755, 756, 757, 758, 759, 760, 766, 772, 773, 774, 777, 778, 779, 780, 782, 784, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 833, 836, 840, 843, 847, 849, 851, 854, 855, 856, 857, 859, 867, 868, 870, 871, 872, 875, 877, 880, 881, 883, 884, 885, 886, 887, 891, 904, 907, 911, 912, 914, 925, 926, 929, 932, 938, 941, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 976, 977, 978, 981, 983, 985, 987, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "manag": [0, 85, 353, 361, 365, 368, 370, 374, 377, 379, 380, 398, 429, 447, 604, 873, 951, 973, 978, 981, 992, 994, 1011], "board": [0, 19], "scipi": [0, 13, 17, 19, 34, 41, 46, 47, 53, 54, 77, 78, 81, 96, 98, 101, 103, 121, 166, 169, 182, 186, 198, 242, 246, 247, 253, 256, 264, 268, 276, 281, 286, 295, 307, 308, 314, 315, 354, 361, 362, 365, 367, 368, 370, 372, 375, 377, 378, 379, 382, 384, 391, 396, 399, 429, 430, 431, 432, 436, 441, 442, 474, 481, 486, 510, 512, 513, 519, 522, 559, 560, 563, 564, 566, 567, 588, 589, 626, 627, 631, 635, 636, 637, 641, 644, 646, 647, 648, 650, 652, 654, 655, 656, 658, 662, 665, 669, 670, 673, 677, 737, 740, 755, 756, 757, 758, 767, 768, 778, 786, 788, 802, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 839, 848, 854, 855, 856, 858, 862, 865, 866, 875, 877, 878, 880, 881, 914, 928, 931, 946, 947, 953, 955, 958, 960, 961, 967, 971, 972, 976, 978, 986, 991, 992, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "mission": [0, 340, 981], "foster": [0, 1006], "comput": [0, 4, 6, 7, 11, 13, 26, 37, 39, 41, 42, 46, 52, 54, 56, 57, 59, 60, 69, 71, 78, 79, 80, 81, 96, 105, 109, 113, 116, 117, 121, 122, 123, 124, 145, 149, 154, 156, 157, 161, 166, 167, 168, 169, 172, 176, 177, 181, 182, 183, 184, 185, 196, 198, 204, 210, 213, 214, 218, 221, 226, 228, 229, 231, 234, 235, 237, 252, 254, 256, 257, 258, 259, 263, 265, 267, 276, 278, 280, 282, 283, 285, 286, 289, 298, 306, 310, 311, 315, 317, 326, 334, 339, 340, 341, 348, 355, 356, 357, 361, 362, 364, 367, 371, 372, 373, 375, 377, 378, 379, 381, 382, 385, 386, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 436, 438, 440, 441, 442, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 494, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 560, 563, 564, 567, 568, 569, 571, 572, 581, 582, 583, 584, 587, 588, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 702, 703, 704, 706, 707, 708, 711, 713, 715, 716, 717, 719, 720, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 841, 842, 845, 846, 851, 852, 853, 854, 855, 856, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 909, 910, 911, 912, 924, 930, 932, 938, 946, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 967, 969, 970, 971, 972, 973, 977, 978, 981, 987, 988, 991, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "particular": [0, 4, 11, 13, 37, 39, 40, 59, 70, 77, 91, 100, 104, 119, 122, 125, 153, 161, 166, 167, 196, 198, 204, 230, 234, 253, 257, 259, 265, 285, 289, 298, 306, 307, 310, 340, 341, 350, 354, 361, 362, 365, 366, 367, 368, 370, 371, 372, 374, 375, 378, 379, 382, 391, 395, 396, 398, 399, 400, 401, 448, 452, 454, 474, 522, 541, 587, 631, 636, 641, 650, 652, 662, 665, 690, 705, 762, 808, 823, 894, 896, 947, 949, 951, 953, 957, 960, 961, 962, 963, 965, 967, 978, 981, 991, 998, 1001, 1005, 1006, 1007, 1009, 1011, 1012, 1013], "As": [0, 4, 7, 25, 27, 30, 40, 53, 56, 57, 65, 81, 85, 100, 110, 111, 116, 119, 121, 123, 128, 141, 149, 154, 162, 166, 168, 172, 175, 178, 185, 187, 196, 200, 204, 214, 222, 244, 251, 253, 254, 256, 257, 259, 269, 274, 276, 281, 299, 303, 309, 317, 326, 340, 341, 344, 346, 347, 350, 354, 355, 362, 365, 366, 367, 368, 370, 371, 378, 379, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 471, 532, 540, 544, 597, 610, 633, 634, 650, 652, 665, 712, 735, 741, 818, 819, 820, 822, 824, 855, 946, 951, 953, 954, 956, 957, 958, 960, 964, 967, 971, 972, 973, 978, 981, 983, 987, 990, 991, 992, 998, 1004, 1009], "fiscal": 0, "home": [0, 8, 12, 27, 50, 84, 112, 129, 153, 155, 157, 158, 188, 205, 257, 311, 331, 345, 362, 365, 374, 382, 390, 464, 477, 657, 981], "ensur": [0, 41, 56, 81, 91, 116, 169, 196, 218, 251, 259, 294, 348, 350, 354, 355, 367, 368, 370, 371, 372, 380, 382, 389, 391, 392, 395, 403, 448, 511, 512, 519, 589, 605, 626, 647, 658, 674, 683, 759, 766, 797, 868, 895, 896, 912, 918, 953, 954, 957, 967, 973, 987, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "monei": [0, 214, 981], "when": [0, 4, 9, 10, 11, 24, 25, 26, 27, 39, 40, 43, 55, 59, 66, 69, 70, 71, 77, 79, 80, 85, 95, 98, 99, 100, 103, 113, 118, 119, 120, 122, 125, 129, 130, 131, 143, 149, 161, 166, 167, 168, 169, 175, 176, 185, 187, 189, 193, 196, 198, 201, 212, 225, 226, 227, 231, 238, 242, 244, 252, 255, 256, 257, 258, 259, 263, 265, 266, 276, 278, 282, 283, 284, 298, 300, 302, 303, 306, 307, 308, 309, 310, 316, 317, 319, 326, 329, 330, 334, 339, 340, 341, 344, 350, 354, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 382, 385, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 407, 412, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 467, 468, 469, 470, 474, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 493, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 555, 557, 559, 560, 561, 562, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 679, 680, 682, 683, 685, 686, 690, 691, 694, 704, 705, 706, 707, 709, 711, 712, 715, 719, 723, 725, 728, 731, 732, 734, 738, 740, 744, 745, 746, 748, 751, 755, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 770, 772, 773, 774, 777, 778, 779, 780, 788, 792, 793, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 894, 895, 896, 902, 906, 910, 911, 912, 913, 915, 916, 919, 925, 926, 946, 947, 949, 951, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 978, 981, 983, 989, 990, 991, 992, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "need": [0, 4, 9, 12, 32, 46, 48, 53, 56, 81, 97, 119, 121, 122, 123, 129, 146, 149, 154, 161, 162, 166, 184, 198, 213, 214, 218, 225, 228, 230, 235, 241, 242, 246, 247, 254, 256, 258, 259, 261, 278, 306, 317, 326, 334, 339, 340, 350, 354, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 385, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 407, 417, 419, 421, 425, 428, 444, 481, 519, 529, 550, 560, 566, 567, 568, 569, 605, 613, 617, 618, 620, 627, 644, 646, 649, 654, 657, 670, 698, 699, 700, 701, 758, 762, 772, 773, 774, 777, 778, 788, 789, 790, 797, 805, 808, 816, 817, 833, 836, 843, 849, 853, 870, 877, 880, 946, 947, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 968, 970, 971, 972, 973, 978, 981, 989, 990, 991, 992, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "keep": [0, 6, 42, 74, 98, 100, 145, 161, 166, 167, 168, 169, 196, 197, 198, 204, 214, 246, 251, 254, 302, 309, 315, 326, 339, 340, 344, 350, 354, 355, 359, 367, 370, 378, 379, 391, 392, 393, 394, 395, 396, 412, 429, 444, 460, 461, 462, 463, 471, 472, 512, 515, 518, 519, 522, 525, 532, 534, 536, 538, 540, 543, 546, 548, 573, 576, 578, 580, 581, 589, 612, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 654, 655, 656, 657, 686, 792, 809, 810, 819, 827, 833, 834, 871, 876, 878, 881, 884, 886, 953, 958, 962, 965, 967, 978, 981, 983, 988, 990, 992, 994, 998, 1003, 1006, 1007, 1011, 1012], "while": [0, 4, 7, 8, 10, 12, 17, 24, 27, 34, 37, 39, 43, 44, 48, 61, 65, 69, 72, 74, 91, 99, 100, 110, 113, 116, 126, 129, 146, 150, 155, 157, 158, 161, 166, 167, 168, 172, 175, 177, 185, 190, 196, 198, 212, 225, 228, 229, 232, 242, 243, 247, 250, 251, 255, 256, 257, 259, 263, 264, 265, 266, 267, 269, 278, 298, 299, 300, 303, 306, 309, 323, 326, 339, 341, 348, 350, 355, 359, 360, 361, 362, 363, 366, 367, 368, 370, 371, 372, 374, 375, 377, 379, 380, 385, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 424, 443, 446, 447, 461, 463, 474, 499, 510, 530, 535, 536, 537, 538, 542, 543, 544, 545, 546, 547, 548, 553, 560, 566, 567, 568, 569, 572, 575, 584, 612, 621, 624, 625, 627, 634, 635, 636, 637, 654, 655, 656, 657, 686, 706, 707, 715, 731, 751, 755, 760, 761, 764, 765, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 797, 798, 799, 800, 801, 803, 811, 822, 824, 826, 827, 828, 835, 836, 837, 838, 839, 852, 863, 868, 873, 875, 876, 883, 884, 885, 886, 891, 916, 946, 947, 950, 951, 953, 954, 956, 957, 958, 959, 960, 963, 964, 967, 969, 972, 973, 978, 983, 989, 990, 992, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 46, 69, 196, 214, 374, 377, 379, 396, 398, 399, 499, 756, 757, 956, 972, 981, 1006, 1007, 1008], "go": [0, 26, 129, 146, 162, 166, 167, 184, 256, 309, 339, 348, 362, 367, 368, 371, 375, 382, 392, 396, 398, 400, 423, 539, 540, 563, 564, 698, 915, 916, 967, 977, 978, 983, 992, 1009], "toward": [0, 26, 27, 62, 81, 116, 122, 128, 149, 168, 175, 200, 201, 222, 367, 379, 391, 427, 431, 441, 654, 656, 673, 850, 956, 971, 973, 976, 978], "cover": [0, 52, 172, 196, 214, 350, 359, 362, 367, 378, 613, 698, 769, 957, 958, 976], "travel": 0, "expens": [0, 55, 129, 149, 167, 226, 253, 265, 326, 339, 340, 341, 356, 372, 379, 391, 392, 395, 398, 399, 428, 447, 486, 774, 777, 778, 788, 799, 873, 875, 954, 956, 972, 977, 981, 992, 1002], "well": [0, 4, 9, 12, 24, 25, 27, 39, 48, 53, 56, 57, 61, 69, 77, 85, 111, 113, 120, 122, 127, 129, 146, 154, 156, 166, 167, 168, 172, 184, 194, 196, 197, 198, 200, 204, 217, 218, 219, 222, 225, 229, 234, 243, 256, 263, 265, 267, 271, 281, 282, 283, 307, 308, 309, 310, 311, 334, 339, 340, 341, 350, 362, 364, 366, 367, 370, 372, 374, 375, 377, 378, 379, 380, 389, 391, 393, 395, 396, 398, 401, 402, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 438, 439, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 678, 699, 700, 701, 762, 765, 767, 770, 772, 773, 774, 777, 778, 788, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 910, 911, 946, 947, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 967, 970, 971, 973, 974, 977, 978, 981, 991, 992, 998, 999, 1002, 1004, 1005, 1006, 1009], "budget": [0, 119, 811, 812, 813, 814, 815, 946], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 378, 379, 380, 382, 383, 384, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 466, 467, 469, 471, 473, 474, 475, 478, 479, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 554, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 740, 741, 743, 745, 746, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 901, 906, 909, 910, 912, 914, 916, 917, 919, 920, 921, 922, 923, 924, 925, 928, 931, 932, 938, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 975, 977, 978, 980, 981, 983, 984, 987, 988, 989, 990, 991, 996, 1000], "note": [0, 4, 5, 7, 8, 11, 12, 13, 19, 26, 32, 37, 53, 65, 70, 71, 79, 81, 84, 85, 91, 98, 113, 114, 118, 122, 123, 126, 146, 149, 156, 161, 166, 167, 168, 172, 184, 185, 189, 196, 197, 198, 200, 204, 210, 212, 214, 217, 218, 219, 221, 225, 226, 228, 230, 231, 232, 242, 251, 252, 256, 259, 262, 263, 264, 274, 276, 278, 282, 283, 293, 298, 299, 302, 303, 306, 307, 308, 309, 310, 311, 315, 317, 319, 326, 339, 348, 354, 355, 361, 364, 365, 367, 368, 370, 372, 373, 377, 378, 379, 382, 386, 389, 390, 391, 393, 394, 396, 398, 399, 401, 402, 403, 404, 405, 406, 412, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 443, 444, 447, 448, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 465, 468, 474, 476, 482, 487, 493, 497, 505, 508, 512, 516, 517, 518, 519, 521, 522, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 563, 564, 566, 568, 569, 571, 572, 575, 577, 578, 580, 581, 582, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 610, 611, 613, 614, 616, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 673, 674, 677, 678, 681, 685, 686, 691, 693, 698, 699, 700, 701, 705, 706, 707, 709, 711, 715, 718, 719, 723, 731, 732, 735, 740, 741, 745, 747, 751, 755, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 788, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 803, 805, 808, 809, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 891, 901, 902, 911, 912, 922, 925, 932, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 960, 961, 963, 964, 965, 967, 970, 971, 972, 973, 974, 976, 978, 980, 983, 990, 991, 992, 994, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "regard": [0, 5, 7, 11, 53, 70, 100, 137, 149, 154, 167, 168, 185, 193, 198, 219, 231, 258, 265, 266, 334, 340, 363, 367, 371, 377, 379, 385, 390, 391, 396, 398, 399, 401, 423, 426, 431, 438, 441, 479, 592, 597, 634, 636, 679, 720, 773, 780, 800, 818, 819, 950, 953, 957, 959, 960, 962, 964, 971, 972, 973, 985, 992, 1005, 1008], "might": [0, 4, 5, 31, 42, 44, 59, 61, 69, 110, 118, 127, 143, 155, 162, 166, 167, 168, 172, 196, 214, 225, 256, 258, 293, 303, 308, 336, 350, 354, 355, 361, 365, 367, 368, 370, 371, 374, 377, 379, 382, 385, 392, 395, 396, 397, 398, 399, 401, 414, 423, 466, 474, 479, 481, 486, 493, 501, 514, 533, 534, 535, 542, 556, 558, 560, 588, 589, 605, 628, 632, 633, 634, 636, 637, 654, 656, 670, 734, 769, 777, 778, 800, 825, 841, 856, 868, 887, 889, 891, 895, 896, 912, 926, 946, 947, 949, 951, 953, 954, 956, 957, 959, 960, 964, 965, 967, 972, 973, 992, 999, 1001, 1006, 1007, 1009, 1012, 1013], "pai": [0, 214, 367, 953], "dn": [0, 960], "continu": [0, 17, 19, 42, 119, 120, 149, 164, 167, 197, 204, 214, 218, 221, 237, 242, 246, 247, 294, 297, 303, 304, 308, 309, 348, 362, 365, 368, 369, 370, 371, 374, 377, 379, 380, 382, 391, 396, 398, 470, 570, 573, 574, 577, 578, 585, 586, 587, 610, 624, 625, 630, 631, 635, 638, 639, 640, 641, 703, 719, 733, 786, 788, 839, 841, 843, 845, 846, 855, 856, 872, 884, 922, 946, 953, 954, 957, 958, 960, 961, 967, 973, 978, 980, 981, 983, 990, 995, 998, 1000, 1001, 1006, 1011, 1012, 1013], "integr": [0, 42, 70, 143, 157, 185, 294, 308, 365, 368, 369, 370, 372, 374, 379, 382, 396, 401, 693, 763, 932, 956, 964, 981, 986, 999, 1001, 1002, 1010, 1011], "servic": [0, 4, 226, 367, 370, 981, 1006], "azur": [0, 367], "travi": [0, 369, 998, 1006], "cl": [0, 8, 12, 16, 373, 379, 885], "circlecl": 0, "free": [0, 5, 154, 155, 162, 195, 246, 298, 361, 366, 367, 374, 377, 382, 399, 401, 431, 587, 649, 832, 881, 946, 949, 953, 957, 978, 1006], "cpu": [0, 60, 257, 311, 354, 355, 365, 372, 379, 382, 399, 474, 610, 625, 629, 631, 633, 636, 637, 639, 641, 643, 644, 646, 654, 657, 774, 788, 797, 798, 799, 820, 828, 868, 925, 957, 983, 987, 992, 1003, 1012, 1013], "server": [0, 354, 364, 365, 474, 1006], "anaconda": [0, 355, 365, 370], "inc": [0, 69, 255, 947, 969, 981], "storag": [0, 341, 379, 636, 637, 644, 646, 654, 655, 656, 875, 960, 972, 1001, 1006], "thei": [0, 4, 26, 27, 37, 50, 56, 81, 97, 111, 116, 117, 119, 121, 123, 125, 142, 145, 149, 150, 154, 166, 167, 182, 185, 191, 196, 197, 214, 218, 221, 225, 231, 250, 253, 256, 257, 259, 265, 278, 293, 298, 303, 308, 310, 339, 340, 346, 347, 350, 354, 355, 356, 360, 362, 363, 364, 365, 366, 367, 368, 370, 374, 375, 377, 378, 379, 380, 388, 390, 391, 392, 393, 394, 396, 398, 400, 401, 403, 420, 422, 426, 432, 433, 438, 446, 474, 486, 487, 511, 513, 515, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 557, 566, 569, 588, 597, 607, 621, 624, 625, 630, 636, 637, 638, 639, 640, 648, 650, 654, 656, 659, 665, 739, 740, 742, 745, 751, 766, 774, 788, 805, 811, 812, 813, 814, 815, 833, 836, 838, 844, 855, 856, 877, 880, 883, 884, 885, 886, 890, 946, 947, 949, 951, 953, 956, 957, 958, 959, 960, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 981, 983, 987, 989, 990, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "stage": [0, 7, 26, 71, 115, 120, 123, 370, 387, 391, 398, 427, 531, 532, 537, 538, 539, 540, 566, 567, 569, 580, 954, 967, 976, 1006, 1010], "nightli": [0, 355, 369, 370], "build": [0, 4, 7, 17, 32, 43, 66, 73, 99, 118, 120, 126, 132, 143, 145, 160, 161, 163, 164, 166, 204, 261, 264, 276, 294, 295, 299, 341, 350, 354, 355, 356, 363, 368, 369, 370, 371, 372, 379, 382, 384, 390, 391, 392, 395, 398, 399, 422, 468, 479, 481, 502, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 563, 564, 566, 567, 569, 605, 606, 608, 669, 691, 692, 775, 779, 783, 792, 796, 798, 837, 854, 856, 883, 884, 885, 886, 888, 908, 946, 947, 954, 957, 961, 963, 967, 972, 973, 977, 978, 981, 984, 986, 990, 991, 998, 1001, 1003, 1004, 1005, 1007, 1010], "applic": [3, 5, 19, 49, 79, 164, 172, 196, 213, 219, 250, 259, 298, 354, 356, 362, 364, 367, 368, 372, 374, 375, 377, 379, 391, 395, 396, 397, 398, 401, 403, 424, 431, 474, 476, 510, 511, 512, 531, 532, 607, 666, 667, 668, 672, 690, 706, 707, 715, 760, 761, 764, 802, 946, 953, 954, 955, 956, 957, 961, 963, 969, 973, 977, 978, 981, 990, 992, 998, 999, 1004, 1006, 1009], "problem": [3, 4, 5, 6, 11, 13, 14, 26, 37, 54, 56, 65, 95, 110, 113, 117, 122, 123, 149, 164, 168, 172, 175, 182, 185, 189, 190, 196, 198, 213, 214, 219, 225, 226, 232, 237, 254, 256, 261, 265, 266, 270, 281, 288, 302, 309, 323, 326, 334, 335, 339, 340, 350, 354, 362, 363, 364, 365, 366, 368, 371, 372, 375, 377, 379, 389, 390, 391, 393, 395, 397, 398, 399, 400, 401, 402, 403, 424, 426, 428, 429, 431, 436, 441, 444, 457, 481, 486, 487, 493, 494, 495, 496, 501, 502, 506, 509, 511, 515, 517, 520, 521, 522, 523, 524, 525, 526, 529, 530, 535, 539, 542, 545, 549, 551, 567, 588, 609, 621, 626, 628, 630, 632, 633, 634, 635, 636, 637, 642, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 657, 658, 663, 664, 665, 666, 667, 669, 671, 673, 686, 694, 706, 707, 712, 716, 761, 764, 765, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 796, 804, 805, 806, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 842, 843, 849, 859, 865, 866, 875, 876, 883, 885, 901, 912, 947, 948, 952, 953, 954, 956, 957, 958, 959, 960, 961, 965, 967, 971, 974, 978, 979, 981, 984, 985, 986, 992, 993, 994, 998, 999, 1001, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013], "medium": [3, 164, 231, 271, 326, 391, 396, 401, 621, 950, 953], "size": [3, 4, 5, 6, 8, 9, 11, 12, 13, 24, 30, 31, 33, 37, 39, 40, 42, 44, 46, 47, 52, 54, 56, 57, 59, 60, 61, 65, 66, 72, 77, 78, 79, 80, 81, 84, 85, 91, 95, 96, 97, 98, 99, 101, 103, 105, 113, 121, 122, 125, 126, 142, 149, 151, 152, 155, 156, 164, 167, 168, 175, 176, 177, 178, 180, 182, 186, 191, 194, 197, 198, 199, 202, 209, 210, 217, 222, 225, 228, 229, 230, 231, 233, 234, 243, 250, 252, 254, 256, 258, 259, 261, 262, 282, 283, 284, 292, 295, 299, 300, 301, 302, 303, 307, 310, 315, 319, 322, 324, 325, 326, 336, 339, 340, 341, 344, 354, 355, 356, 362, 363, 367, 371, 375, 377, 378, 379, 382, 388, 389, 390, 393, 395, 396, 399, 401, 402, 424, 425, 427, 428, 429, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 471, 472, 473, 493, 505, 512, 514, 516, 518, 525, 535, 536, 537, 538, 539, 540, 542, 543, 565, 566, 569, 572, 610, 611, 621, 635, 644, 645, 657, 661, 670, 673, 683, 697, 715, 717, 720, 758, 768, 776, 779, 780, 784, 791, 794, 795, 797, 800, 802, 811, 812, 813, 815, 818, 819, 820, 821, 822, 824, 826, 827, 828, 833, 834, 851, 853, 864, 869, 873, 877, 878, 879, 880, 881, 883, 884, 885, 886, 889, 911, 915, 916, 922, 923, 926, 932, 947, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 967, 969, 971, 972, 973, 981, 986, 988, 990, 991, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "interact": [3, 89, 123, 164, 196, 222, 227, 257, 307, 366, 368, 372, 377, 379, 380, 392, 537, 538, 539, 540, 610, 611, 851, 855, 946, 949, 953, 954, 955, 962, 964, 967, 976, 978, 1000, 1005, 1012, 1013], "user": [3, 25, 68, 95, 158, 164, 166, 184, 217, 246, 253, 263, 265, 282, 283, 286, 306, 307, 308, 309, 310, 311, 350, 354, 355, 357, 361, 365, 366, 367, 368, 370, 372, 373, 374, 377, 378, 379, 382, 385, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 402, 403, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 597, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 908, 912, 946, 947, 953, 954, 956, 957, 958, 960, 967, 971, 975, 978, 981, 985, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "interfac": [3, 109, 164, 360, 361, 368, 375, 377, 379, 395, 401, 402, 421, 425, 429, 474, 677, 774, 777, 778, 788, 836, 837, 861, 942, 946, 960, 972, 977, 978, 981, 998, 1000, 1003, 1004, 1006, 1007, 1012], "compress": [3, 11, 15, 19, 48, 164, 298, 362, 391, 396, 399, 630, 650, 670, 806, 928, 931, 953, 967, 991, 998, 1007], "sens": [3, 4, 15, 25, 155, 164, 172, 229, 298, 315, 326, 339, 350, 354, 370, 379, 391, 393, 395, 441, 448, 449, 450, 451, 452, 453, 454, 455, 630, 633, 634, 650, 775, 785, 872, 951, 953, 960, 961, 963, 967, 970], "tomographi": [3, 15, 164, 630, 650, 953], "reconstruct": [3, 15, 95, 96, 100, 164, 195, 220, 221, 310, 396, 399, 460, 461, 462, 509, 511, 513, 515, 516, 517, 518, 520, 521, 526, 561, 565, 630, 650, 666, 667, 671, 867, 868, 953, 954, 1012], "l1": [3, 7, 15, 30, 40, 81, 84, 164, 174, 181, 185, 207, 211, 215, 227, 257, 276, 309, 375, 377, 390, 391, 393, 396, 421, 425, 429, 436, 443, 448, 449, 450, 451, 452, 453, 454, 455, 457, 474, 480, 482, 509, 515, 516, 517, 518, 520, 521, 525, 526, 536, 543, 567, 568, 569, 575, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 646, 648, 650, 654, 655, 656, 657, 659, 666, 712, 739, 745, 750, 755, 756, 757, 788, 802, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 848, 856, 862, 875, 876, 882, 884, 886, 898, 939, 953, 955, 957, 960, 967, 971, 972, 973, 990, 1003, 1005, 1011], "prior": [3, 15, 46, 47, 56, 66, 148, 149, 159, 164, 168, 175, 177, 240, 242, 246, 247, 248, 256, 367, 368, 370, 379, 382, 391, 394, 396, 398, 401, 444, 501, 514, 526, 527, 528, 529, 537, 563, 564, 589, 591, 592, 593, 597, 600, 601, 608, 622, 623, 624, 625, 629, 630, 632, 633, 634, 638, 639, 640, 650, 656, 659, 694, 772, 811, 812, 813, 814, 815, 836, 837, 851, 877, 880, 946, 949, 951, 953, 956, 957, 959, 965, 973, 974, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "lasso": [3, 15, 105, 129, 135, 164, 166, 174, 215, 309, 354, 377, 393, 394, 396, 398, 399, 400, 450, 451, 457, 479, 502, 509, 515, 517, 520, 521, 523, 524, 526, 575, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 656, 659, 660, 661, 662, 663, 664, 699, 700, 701, 762, 797, 798, 799, 837, 856, 946, 957, 971, 979, 987, 990, 994, 998, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1012], "recognit": [3, 9, 15, 164, 295, 360, 371, 396, 398, 400, 472, 480, 510, 512, 519, 686, 691, 718, 746, 765, 766, 772, 788, 802, 856, 880, 949, 953, 957, 958, 962, 972, 974, 983, 986, 994, 998], "eigenfac": [3, 15, 164, 362, 396, 472, 519, 691, 788, 802, 856, 880, 974, 986, 998], "svm": [3, 7, 9, 10, 11, 15, 16, 25, 27, 30, 31, 32, 69, 71, 73, 130, 134, 136, 139, 140, 144, 147, 164, 174, 189, 215, 225, 231, 232, 236, 237, 250, 253, 254, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 271, 300, 303, 306, 308, 313, 317, 320, 321, 324, 333, 334, 337, 339, 354, 357, 362, 368, 372, 379, 385, 392, 395, 396, 398, 400, 417, 472, 482, 490, 493, 519, 533, 534, 541, 545, 546, 554, 571, 572, 577, 578, 582, 583, 617, 621, 646, 654, 655, 656, 667, 675, 676, 678, 680, 691, 712, 719, 774, 788, 794, 798, 799, 802, 804, 805, 822, 836, 837, 849, 856, 871, 872, 945, 946, 949, 952, 954, 955, 957, 958, 962, 970, 972, 974, 979, 983, 986, 987, 988, 992, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1005], "imag": [3, 6, 13, 15, 19, 32, 36, 46, 48, 51, 54, 57, 67, 69, 88, 93, 95, 107, 117, 144, 153, 164, 187, 218, 227, 230, 233, 254, 285, 294, 295, 307, 314, 315, 339, 340, 359, 360, 362, 364, 367, 371, 374, 377, 379, 382, 384, 391, 396, 421, 425, 431, 441, 471, 472, 473, 474, 480, 481, 484, 485, 512, 513, 515, 519, 585, 586, 669, 675, 715, 802, 846, 953, 957, 958, 960, 962, 969, 973, 977, 981, 983, 988, 989, 991, 992, 994, 998, 1001, 1006, 1007, 1011, 1013], "denois": [3, 15, 93, 107, 164, 396, 474, 513, 515, 519, 562, 565, 802, 846], "kernel": [3, 6, 9, 10, 11, 15, 16, 30, 31, 73, 93, 105, 107, 130, 136, 138, 144, 148, 150, 151, 152, 153, 156, 159, 161, 173, 197, 210, 224, 225, 232, 236, 239, 250, 254, 256, 258, 261, 262, 266, 271, 277, 290, 309, 316, 319, 321, 323, 326, 327, 328, 331, 332, 335, 337, 350, 354, 357, 359, 368, 377, 379, 389, 391, 392, 395, 398, 399, 412, 420, 427, 431, 440, 441, 444, 460, 461, 462, 469, 474, 476, 480, 482, 492, 511, 512, 513, 519, 522, 532, 534, 536, 538, 540, 543, 546, 548, 571, 572, 588, 589, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 654, 655, 656, 657, 666, 668, 669, 670, 673, 712, 735, 736, 738, 743, 744, 751, 752, 753, 754, 774, 785, 788, 802, 804, 809, 810, 816, 817, 819, 821, 827, 834, 836, 837, 842, 846, 848, 849, 856, 870, 871, 875, 876, 877, 878, 879, 880, 881, 884, 886, 946, 952, 953, 954, 957, 958, 960, 963, 970, 971, 977, 979, 983, 987, 988, 993, 994, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "pca": [3, 6, 15, 68, 71, 73, 75, 85, 89, 93, 97, 106, 107, 164, 218, 220, 230, 232, 236, 255, 276, 280, 285, 303, 309, 350, 359, 368, 379, 390, 391, 392, 397, 407, 452, 455, 474, 480, 482, 492, 510, 511, 512, 513, 517, 518, 521, 522, 527, 621, 636, 666, 668, 670, 774, 798, 802, 825, 832, 835, 836, 838, 846, 854, 856, 949, 951, 954, 960, 967, 971, 973, 988, 993, 994, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1009, 1011, 1012, 1013], "libsvm": [3, 15, 164, 172, 324, 360, 372, 465, 486, 541, 875, 876, 877, 878, 879, 880, 881, 972, 977, 994, 998, 1000, 1006, 1009, 1012], "gui": [3, 15, 164, 465, 879, 880, 990, 998, 999, 1009], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 24, 25, 27, 39, 40, 41, 48, 49, 54, 55, 57, 60, 68, 70, 75, 77, 81, 85, 93, 95, 107, 110, 113, 115, 118, 120, 121, 122, 124, 126, 128, 129, 132, 135, 136, 138, 140, 142, 147, 152, 153, 155, 156, 157, 158, 162, 165, 169, 170, 176, 178, 180, 182, 186, 187, 189, 191, 192, 193, 197, 198, 200, 202, 204, 208, 209, 211, 212, 213, 215, 225, 228, 232, 241, 243, 244, 245, 248, 250, 251, 252, 254, 257, 259, 261, 262, 264, 265, 269, 270, 272, 274, 276, 278, 280, 282, 283, 285, 289, 299, 302, 306, 308, 310, 311, 314, 315, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 340, 341, 345, 346, 347, 350, 357, 359, 361, 362, 369, 372, 379, 380, 381, 387, 388, 389, 391, 392, 394, 396, 397, 398, 399, 400, 401, 410, 412, 414, 417, 422, 428, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 466, 467, 474, 476, 479, 480, 481, 487, 500, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 566, 567, 569, 571, 572, 575, 580, 584, 587, 588, 589, 593, 605, 612, 613, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 679, 684, 689, 699, 700, 701, 711, 712, 718, 719, 727, 730, 762, 765, 766, 767, 772, 773, 774, 777, 778, 780, 788, 789, 790, 791, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 821, 822, 823, 825, 827, 832, 833, 834, 836, 837, 839, 841, 843, 848, 849, 851, 852, 853, 855, 856, 860, 861, 863, 864, 865, 866, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 947, 949, 950, 951, 954, 955, 958, 960, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 977, 978, 979, 981, 984, 986, 988, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003], "complex": [3, 9, 14, 15, 16, 149, 154, 161, 164, 210, 213, 224, 231, 239, 249, 265, 272, 299, 306, 309, 310, 313, 320, 326, 341, 343, 349, 363, 367, 371, 377, 392, 396, 398, 401, 402, 420, 424, 426, 427, 429, 446, 467, 478, 479, 480, 492, 512, 519, 529, 535, 536, 537, 538, 540, 542, 543, 582, 608, 616, 634, 636, 654, 655, 711, 727, 774, 802, 804, 832, 836, 837, 841, 849, 856, 871, 875, 878, 881, 883, 884, 885, 886, 946, 947, 949, 950, 952, 956, 958, 963, 967, 970, 978, 979, 981, 994, 999, 1001, 1007, 1008, 1011], "influenc": [3, 9, 15, 79, 80, 164, 166, 178, 241, 264, 298, 326, 334, 350, 356, 393, 396, 398, 412, 420, 433, 444, 460, 461, 462, 467, 479, 532, 534, 536, 538, 540, 543, 546, 548, 589, 606, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 654, 656, 657, 711, 727, 802, 809, 810, 818, 819, 826, 827, 834, 853, 854, 864, 876, 878, 881, 884, 886, 895, 946, 951, 952, 960, 963, 967, 971, 972, 981, 1001, 1006, 1007], "core": [3, 15, 49, 64, 70, 117, 118, 164, 166, 167, 311, 353, 355, 357, 365, 367, 369, 374, 379, 382, 391, 396, 398, 402, 424, 428, 429, 434, 436, 477, 516, 567, 572, 636, 637, 644, 646, 654, 811, 812, 813, 814, 815, 820, 828, 953, 960, 963, 972, 975, 978, 979, 981, 990, 992, 994, 1000, 1002, 1003, 1005, 1008, 1012, 1013], "classif": [3, 6, 7, 15, 23, 24, 25, 27, 28, 31, 35, 45, 70, 71, 72, 87, 92, 98, 109, 110, 112, 114, 116, 117, 118, 120, 123, 127, 134, 139, 142, 143, 144, 145, 148, 159, 166, 167, 172, 174, 188, 189, 196, 204, 215, 224, 226, 230, 234, 237, 239, 244, 249, 253, 254, 255, 256, 257, 265, 271, 272, 277, 278, 284, 286, 289, 290, 291, 296, 300, 314, 320, 322, 326, 329, 332, 334, 335, 338, 340, 341, 342, 350, 354, 356, 357, 360, 361, 362, 364, 368, 371, 375, 378, 379, 386, 389, 391, 392, 395, 396, 399, 400, 408, 417, 448, 454, 460, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 488, 490, 492, 493, 497, 498, 500, 501, 519, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 547, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 584, 587, 588, 589, 591, 592, 600, 610, 611, 621, 636, 637, 644, 646, 652, 653, 654, 675, 681, 683, 685, 686, 690, 691, 693, 694, 696, 703, 704, 706, 707, 711, 715, 718, 719, 720, 731, 733, 735, 736, 759, 760, 761, 763, 764, 765, 766, 769, 771, 774, 775, 777, 778, 779, 780, 788, 792, 793, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 818, 823, 825, 826, 832, 833, 834, 836, 840, 843, 848, 849, 856, 859, 861, 870, 871, 872, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 898, 901, 909, 946, 947, 949, 950, 951, 954, 955, 959, 962, 964, 965, 967, 968, 970, 976, 977, 979, 980, 981, 983, 984, 988, 989, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "text": [3, 7, 11, 12, 14, 15, 16, 19, 31, 32, 40, 44, 53, 56, 59, 61, 63, 69, 79, 80, 120, 176, 190, 191, 225, 229, 235, 236, 241, 243, 249, 262, 263, 267, 272, 281, 284, 286, 292, 300, 309, 313, 315, 320, 333, 342, 344, 354, 356, 357, 359, 360, 361, 367, 371, 377, 379, 391, 392, 394, 395, 396, 398, 401, 426, 428, 447, 465, 466, 467, 477, 481, 486, 499, 514, 522, 542, 593, 603, 630, 636, 644, 646, 652, 654, 675, 681, 683, 685, 691, 695, 706, 714, 768, 770, 774, 788, 802, 811, 813, 815, 818, 823, 836, 837, 839, 840, 848, 871, 872, 873, 875, 887, 888, 889, 909, 946, 949, 953, 955, 957, 958, 959, 961, 964, 967, 969, 971, 972, 976, 978, 981, 984, 994, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "outlier": [3, 15, 44, 79, 80, 122, 125, 164, 174, 198, 199, 202, 215, 224, 239, 277, 290, 297, 304, 336, 362, 379, 391, 393, 398, 448, 449, 452, 453, 454, 455, 468, 469, 470, 474, 488, 490, 500, 502, 541, 617, 627, 648, 649, 650, 654, 655, 656, 657, 670, 680, 822, 826, 837, 843, 845, 846, 848, 852, 853, 854, 856, 861, 864, 878, 879, 881, 957, 971, 972, 977, 979, 993, 994, 998, 1003, 1004, 1006], "detect": [3, 8, 10, 15, 62, 64, 79, 81, 116, 125, 164, 177, 224, 239, 249, 256, 259, 272, 277, 290, 325, 362, 365, 367, 370, 377, 379, 390, 391, 393, 395, 399, 428, 448, 449, 452, 453, 454, 455, 466, 467, 469, 470, 474, 488, 490, 493, 500, 515, 516, 517, 524, 541, 542, 566, 569, 574, 617, 655, 680, 704, 766, 802, 822, 826, 837, 843, 856, 875, 879, 949, 953, 978, 979, 981, 987, 992, 993, 994, 998, 1001, 1004, 1005, 1006, 1008, 1010, 1011, 1013], "set": [3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 25, 26, 27, 30, 31, 37, 41, 42, 44, 45, 46, 49, 50, 53, 54, 56, 57, 59, 61, 63, 64, 65, 69, 70, 72, 79, 80, 81, 85, 89, 93, 95, 100, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 131, 135, 142, 143, 146, 149, 155, 156, 157, 158, 164, 166, 167, 168, 169, 175, 180, 181, 184, 185, 187, 189, 191, 192, 195, 196, 197, 198, 200, 201, 204, 209, 210, 214, 217, 218, 219, 225, 226, 227, 228, 230, 231, 238, 241, 243, 245, 246, 250, 251, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 274, 278, 282, 283, 284, 285, 286, 289, 293, 294, 295, 298, 300, 302, 303, 306, 308, 309, 314, 315, 318, 319, 323, 325, 328, 334, 339, 340, 341, 346, 347, 350, 354, 355, 356, 359, 360, 362, 364, 365, 367, 368, 370, 371, 373, 374, 378, 379, 380, 382, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 413, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 466, 467, 471, 473, 474, 475, 477, 480, 481, 482, 486, 487, 488, 493, 501, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 675, 676, 678, 679, 680, 681, 691, 692, 697, 699, 700, 703, 704, 705, 706, 707, 708, 711, 715, 717, 718, 722, 723, 725, 727, 728, 730, 733, 756, 757, 759, 760, 761, 762, 764, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 895, 896, 906, 907, 912, 916, 925, 926, 927, 928, 931, 932, 938, 941, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 984, 986, 987, 988, 991, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "predict": [3, 6, 7, 8, 11, 15, 23, 25, 26, 27, 30, 32, 34, 37, 44, 48, 55, 57, 61, 69, 70, 71, 72, 74, 84, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 143, 146, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 172, 175, 178, 179, 180, 188, 191, 192, 193, 194, 197, 198, 199, 202, 203, 204, 205, 210, 211, 213, 214, 225, 226, 228, 230, 233, 242, 243, 244, 245, 246, 247, 249, 250, 254, 256, 258, 259, 262, 265, 266, 270, 272, 274, 276, 279, 282, 283, 284, 287, 288, 295, 298, 299, 303, 306, 307, 308, 309, 310, 315, 317, 318, 319, 322, 323, 325, 326, 332, 333, 334, 335, 339, 340, 345, 346, 347, 348, 350, 353, 355, 357, 359, 362, 364, 367, 368, 373, 375, 379, 381, 385, 386, 387, 389, 390, 391, 392, 396, 398, 399, 400, 408, 412, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 444, 448, 460, 461, 462, 465, 479, 486, 502, 512, 519, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 554, 560, 571, 572, 580, 584, 588, 589, 591, 592, 593, 594, 600, 603, 605, 606, 608, 609, 610, 611, 612, 613, 615, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 692, 693, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 715, 718, 719, 720, 723, 725, 727, 729, 733, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 773, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 823, 826, 827, 833, 834, 836, 843, 856, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 931, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 958, 959, 960, 961, 963, 964, 965, 970, 971, 972, 973, 976, 977, 978, 980, 981, 984, 986, 987, 988, 992, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "latenc": [3, 7, 15, 120, 164, 353, 502, 543, 650, 656, 802, 856, 881, 924, 931, 977, 994, 1001], "speci": [3, 15, 164, 277, 290, 339, 362, 397, 476, 684, 766, 821, 879, 890, 957, 963, 998], "distribut": [3, 4, 8, 9, 10, 15, 27, 37, 39, 44, 52, 53, 56, 61, 74, 78, 79, 80, 91, 110, 112, 122, 125, 141, 149, 158, 164, 166, 172, 175, 196, 198, 200, 219, 221, 225, 229, 241, 246, 247, 252, 256, 262, 264, 277, 281, 290, 297, 298, 300, 303, 304, 314, 315, 331, 334, 339, 354, 355, 362, 363, 364, 365, 367, 370, 371, 372, 379, 385, 389, 390, 391, 393, 395, 396, 397, 401, 403, 426, 428, 448, 449, 450, 451, 452, 453, 454, 455, 466, 476, 481, 493, 494, 495, 496, 497, 501, 510, 511, 514, 528, 529, 530, 541, 589, 603, 618, 620, 622, 623, 626, 636, 637, 647, 657, 658, 666, 667, 668, 670, 684, 686, 701, 729, 766, 772, 773, 778, 779, 786, 788, 792, 793, 802, 812, 815, 821, 825, 832, 839, 852, 853, 854, 855, 856, 863, 864, 865, 870, 871, 879, 890, 914, 925, 946, 951, 953, 955, 956, 957, 959, 960, 962, 963, 969, 970, 975, 977, 978, 983, 987, 991, 993, 994, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "relat": [3, 7, 12, 15, 17, 44, 61, 96, 98, 100, 164, 165, 166, 191, 234, 249, 263, 311, 339, 348, 357, 362, 363, 366, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 385, 390, 391, 392, 393, 394, 395, 396, 398, 401, 429, 443, 448, 474, 527, 528, 540, 541, 617, 651, 655, 670, 700, 720, 795, 799, 834, 835, 837, 840, 841, 846, 849, 850, 851, 852, 855, 863, 879, 946, 951, 957, 958, 960, 961, 964, 967, 972, 973, 974, 975, 978, 994, 998, 1002, 1003, 1004, 1006, 1007, 1010, 1011], "featur": [3, 5, 6, 7, 8, 10, 11, 14, 15, 25, 26, 27, 30, 33, 36, 42, 57, 59, 62, 67, 68, 69, 70, 71, 75, 79, 80, 85, 88, 89, 90, 91, 95, 97, 99, 103, 104, 106, 108, 109, 118, 124, 128, 129, 130, 132, 133, 141, 143, 147, 149, 150, 151, 154, 155, 157, 161, 162, 165, 166, 167, 170, 174, 179, 182, 183, 185, 192, 196, 197, 198, 200, 201, 205, 211, 212, 213, 215, 224, 227, 229, 237, 238, 239, 249, 253, 256, 262, 263, 265, 266, 270, 272, 274, 279, 284, 285, 287, 291, 294, 296, 297, 298, 301, 304, 305, 307, 310, 311, 321, 322, 323, 326, 334, 337, 338, 341, 342, 345, 347, 348, 350, 357, 359, 360, 361, 362, 363, 364, 365, 368, 369, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 389, 391, 393, 394, 395, 396, 397, 401, 402, 403, 407, 411, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 556, 558, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 596, 597, 598, 600, 601, 603, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 663, 664, 665, 666, 667, 668, 669, 670, 681, 691, 699, 700, 701, 735, 736, 740, 741, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 758, 762, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 896, 909, 924, 932, 933, 934, 938, 946, 949, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 968, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 983, 984, 988, 989, 990, 994, 995, 996, 997, 998, 999, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "engin": [3, 15, 19, 40, 115, 154, 164, 354, 361, 364, 391, 397, 399, 401, 443, 474, 540, 617, 651, 795, 799, 834, 835, 837, 840, 841, 846, 849, 850, 851, 855, 947, 957, 967, 975, 1004], "topic": [3, 7, 8, 15, 69, 164, 339, 340, 341, 362, 363, 395, 396, 399, 466, 475, 514, 516, 518, 525, 566, 569, 953, 958, 977, 978, 992, 1003, 1005], "extract": [3, 4, 6, 8, 11, 12, 15, 17, 50, 68, 69, 70, 75, 84, 95, 164, 200, 211, 249, 272, 295, 303, 339, 341, 350, 357, 359, 362, 364, 368, 372, 375, 377, 391, 392, 395, 396, 429, 431, 434, 435, 441, 443, 466, 467, 471, 472, 481, 482, 509, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 561, 562, 566, 567, 569, 571, 572, 575, 577, 609, 696, 765, 774, 788, 813, 835, 836, 880, 912, 923, 946, 954, 958, 962, 967, 971, 977, 981, 984, 988, 989, 994, 998, 999, 1007, 1010], "neg": [3, 4, 15, 16, 24, 59, 74, 77, 85, 121, 122, 126, 164, 166, 174, 196, 214, 215, 245, 246, 253, 256, 259, 263, 265, 266, 298, 302, 310, 339, 372, 379, 391, 395, 398, 399, 402, 403, 412, 420, 424, 431, 444, 448, 460, 461, 462, 466, 509, 511, 513, 514, 515, 516, 518, 520, 522, 525, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 548, 566, 569, 570, 573, 574, 576, 577, 578, 582, 583, 584, 585, 586, 587, 589, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 648, 650, 651, 655, 656, 657, 658, 665, 676, 677, 682, 683, 690, 691, 693, 696, 697, 699, 700, 701, 704, 706, 707, 708, 712, 715, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 759, 760, 761, 762, 764, 768, 772, 773, 797, 802, 809, 810, 819, 822, 827, 834, 843, 852, 854, 855, 859, 863, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 910, 912, 925, 955, 957, 958, 960, 961, 962, 963, 971, 972, 992, 993, 994, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "matrix": [3, 7, 9, 13, 15, 19, 20, 21, 32, 34, 39, 41, 44, 54, 61, 69, 78, 79, 80, 81, 84, 95, 96, 97, 106, 156, 164, 169, 174, 182, 197, 201, 215, 226, 229, 230, 246, 249, 263, 272, 294, 310, 314, 315, 339, 340, 341, 348, 354, 357, 362, 363, 364, 367, 368, 372, 375, 377, 378, 379, 388, 392, 393, 394, 399, 400, 401, 402, 403, 412, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 433, 436, 438, 439, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 474, 475, 478, 479, 480, 481, 482, 483, 486, 487, 488, 497, 499, 501, 502, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 563, 564, 566, 567, 568, 569, 571, 572, 581, 582, 583, 584, 585, 586, 587, 589, 598, 607, 608, 609, 613, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 690, 691, 692, 693, 694, 696, 706, 707, 708, 711, 715, 716, 717, 718, 731, 732, 735, 736, 737, 738, 740, 741, 743, 744, 745, 749, 751, 752, 754, 755, 756, 757, 758, 760, 761, 764, 765, 771, 772, 773, 774, 777, 778, 788, 802, 805, 807, 808, 809, 810, 811, 812, 813, 815, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 845, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 893, 894, 895, 896, 901, 910, 911, 912, 913, 916, 917, 918, 922, 923, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 943, 947, 949, 951, 953, 954, 958, 959, 960, 961, 967, 968, 969, 970, 971, 973, 974, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "factor": [3, 15, 26, 31, 44, 46, 53, 61, 93, 100, 105, 107, 127, 164, 166, 222, 225, 234, 267, 268, 277, 290, 292, 293, 298, 300, 308, 310, 354, 355, 372, 375, 379, 388, 390, 391, 398, 399, 401, 420, 422, 433, 448, 452, 453, 455, 457, 466, 482, 492, 493, 505, 510, 513, 514, 516, 518, 519, 522, 523, 524, 525, 527, 528, 539, 540, 541, 566, 569, 575, 591, 627, 628, 629, 632, 633, 634, 660, 661, 670, 697, 760, 774, 777, 778, 798, 822, 856, 869, 871, 879, 911, 912, 946, 953, 954, 960, 970, 974, 977, 993, 994, 998, 999, 1001, 1002, 1004, 1012], "latent": [3, 15, 17, 106, 164, 295, 340, 394, 399, 401, 466, 510, 514, 516, 517, 518, 521, 522, 566, 569, 832, 956, 977, 992, 993, 994, 1000, 1003], "dirichlet": [3, 15, 164, 241, 242, 247, 251, 399, 466, 514, 516, 518, 566, 569, 772, 977, 993, 994, 998, 1003, 1004], "alloc": [3, 15, 25, 60, 164, 268, 308, 363, 367, 391, 399, 423, 426, 438, 466, 514, 516, 518, 562, 566, 569, 624, 630, 638, 640, 777, 778, 780, 800, 803, 946, 967, 977, 993, 994, 1002, 1003, 1008, 1009], "visual": [3, 4, 9, 15, 16, 25, 30, 32, 43, 46, 49, 52, 56, 59, 60, 79, 90, 93, 97, 99, 105, 107, 123, 125, 127, 131, 132, 157, 162, 164, 167, 169, 180, 187, 196, 198, 214, 222, 224, 227, 230, 235, 236, 239, 246, 249, 250, 252, 253, 257, 266, 272, 281, 285, 286, 291, 293, 296, 298, 302, 303, 306, 308, 315, 357, 359, 363, 365, 372, 373, 388, 393, 395, 396, 397, 398, 418, 421, 425, 433, 451, 474, 480, 482, 485, 488, 492, 500, 510, 512, 519, 542, 544, 549, 609, 611, 636, 667, 670, 675, 676, 678, 679, 680, 696, 704, 759, 766, 775, 776, 779, 780, 791, 792, 793, 794, 795, 802, 833, 837, 856, 880, 889, 908, 952, 954, 955, 960, 961, 963, 964, 967, 973, 977, 983, 994, 1001, 1008, 1009, 1010, 1012], "stock": [3, 15, 164, 391, 393, 433, 451, 667, 986], "market": [3, 15, 164, 391, 393, 433, 451, 667, 981, 986], "wikipedia": [3, 15, 24, 164, 374, 390, 391, 573, 585, 586, 614, 634, 646, 649, 660, 661, 673, 682, 683, 685, 687, 690, 694, 696, 703, 706, 707, 708, 711, 712, 715, 720, 733, 760, 762, 763, 765, 766, 767, 768, 818, 819, 824, 825, 826, 827, 854, 869, 883, 884, 949, 953, 957, 960, 969, 973, 992, 998, 1005], "princip": [3, 15, 83, 86, 93, 97, 99, 100, 102, 104, 107, 127, 164, 217, 230, 232, 285, 303, 308, 359, 391, 394, 403, 462, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 528, 635, 666, 667, 668, 670, 671, 802, 825, 837, 856, 911, 912, 954, 960, 993, 994, 998], "eigenvector": [3, 15, 46, 85, 89, 164, 241, 391, 431, 441, 512, 513, 519, 528, 666, 667, 669, 673, 954, 998, 1002, 1012], "click": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 367, 374, 981, 983, 985], "here": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 374, 377, 378, 385, 387, 388, 391, 392, 394, 395, 396, 397, 398, 399, 402, 417, 420, 421, 422, 423, 424, 425, 426, 428, 431, 443, 451, 454, 514, 516, 517, 521, 522, 545, 546, 547, 548, 559, 560, 562, 566, 569, 572, 580, 606, 608, 625, 629, 631, 633, 639, 641, 643, 651, 653, 667, 669, 673, 677, 690, 703, 723, 733, 769, 774, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 803, 812, 816, 817, 840, 848, 851, 854, 867, 868, 878, 946, 949, 953, 954, 955, 956, 957, 960, 963, 967, 969, 970, 971, 972, 977, 978, 980, 981, 983, 984, 990, 998, 1006, 1011], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 360, 362, 364, 365, 370, 371, 374, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 488, 973, 988, 990, 992, 994, 1002, 1003, 1006, 1010, 1011, 1012], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 354, 355, 357, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 382, 384, 385, 390, 402, 403, 407, 418, 419, 435, 440, 447, 450, 463, 485, 486, 509, 521, 525, 533, 550, 551, 554, 561, 570, 573, 574, 576, 579, 581, 585, 590, 594, 598, 599, 602, 607, 616, 620, 625, 628, 629, 632, 637, 638, 639, 641, 645, 653, 676, 677, 686, 693, 699, 700, 701, 703, 705, 707, 708, 712, 716, 720, 721, 723, 724, 728, 731, 733, 740, 741, 745, 746, 748, 750, 758, 760, 769, 781, 782, 783, 784, 785, 786, 787, 804, 806, 808, 810, 812, 816, 817, 824, 826, 827, 828, 830, 838, 839, 842, 844, 847, 857, 860, 862, 863, 865, 866, 867, 870, 876, 885, 886, 887, 888, 901, 910, 912, 914, 915, 917, 921, 922, 923, 928, 945, 947, 955, 978, 979, 981, 984, 987, 988, 992, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1011, 1013], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 365, 367, 368, 370, 371, 372, 373, 374, 377, 379, 380, 382, 387, 391, 393, 395, 398, 401, 402, 403, 417, 423, 424, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 441, 443, 446, 450, 451, 509, 510, 511, 512, 513, 515, 517, 519, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 560, 570, 572, 573, 574, 576, 577, 578, 580, 588, 589, 612, 618, 624, 625, 627, 629, 630, 631, 633, 634, 638, 639, 640, 641, 660, 661, 666, 667, 668, 669, 670, 671, 672, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 808, 809, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 833, 834, 835, 838, 870, 871, 875, 876, 877, 878, 879, 880, 881, 883, 884, 906, 907, 925, 928, 931, 946, 956, 958, 961, 970, 972, 973, 977, 978, 981, 983, 990, 992, 998, 1001, 1003, 1005, 1006, 1007, 1008, 1012], "yourbrowser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 367, 374, 967], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 372, 392, 447, 873, 973, 976, 978, 1009, 1012], "introduc": [4, 77, 79, 80, 100, 145, 164, 168, 175, 224, 229, 239, 263, 311, 341, 360, 363, 365, 367, 368, 370, 371, 374, 377, 379, 382, 389, 391, 393, 395, 396, 398, 399, 413, 421, 422, 423, 425, 426, 428, 438, 443, 447, 460, 461, 462, 463, 474, 482, 493, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 533, 534, 544, 545, 546, 547, 548, 559, 560, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 636, 642, 663, 664, 666, 667, 802, 820, 825, 828, 832, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 869, 873, 951, 953, 956, 959, 960, 963, 967, 969, 971, 972, 983, 990, 998, 999, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "differ": [4, 5, 7, 10, 12, 13, 14, 16, 24, 27, 30, 31, 34, 36, 37, 43, 45, 46, 49, 53, 56, 57, 63, 64, 65, 66, 67, 69, 70, 71, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 103, 104, 105, 109, 113, 115, 118, 119, 122, 124, 129, 130, 131, 132, 135, 138, 141, 146, 148, 149, 150, 151, 154, 155, 156, 159, 161, 162, 164, 166, 168, 172, 175, 176, 182, 183, 184, 185, 187, 193, 196, 197, 198, 200, 201, 202, 203, 204, 214, 217, 218, 219, 222, 225, 227, 230, 231, 234, 241, 243, 244, 245, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 270, 271, 282, 283, 285, 292, 293, 297, 302, 303, 304, 306, 321, 325, 326, 330, 334, 335, 337, 339, 340, 341, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 369, 371, 373, 375, 378, 379, 382, 385, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 414, 417, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 437, 438, 441, 443, 457, 468, 471, 472, 474, 481, 482, 486, 487, 490, 492, 500, 515, 516, 517, 518, 524, 525, 527, 528, 533, 534, 541, 566, 567, 568, 569, 572, 589, 591, 592, 593, 597, 600, 601, 605, 610, 611, 612, 616, 621, 622, 625, 627, 629, 631, 633, 636, 639, 644, 645, 646, 654, 655, 656, 658, 668, 670, 672, 676, 677, 678, 679, 682, 683, 684, 685, 687, 693, 695, 696, 704, 705, 706, 707, 708, 711, 714, 720, 734, 735, 736, 745, 755, 759, 760, 761, 763, 764, 766, 767, 768, 770, 773, 774, 776, 777, 778, 779, 780, 783, 788, 789, 790, 791, 792, 793, 794, 797, 799, 800, 803, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 829, 832, 836, 841, 845, 846, 848, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 866, 875, 877, 880, 883, 884, 885, 886, 923, 946, 947, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 970, 971, 972, 973, 974, 978, 981, 983, 985, 986, 987, 991, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "strategi": [4, 52, 54, 57, 60, 70, 119, 124, 129, 145, 161, 162, 164, 168, 185, 196, 204, 214, 227, 236, 249, 257, 259, 261, 265, 266, 272, 291, 296, 297, 304, 306, 307, 310, 341, 353, 368, 372, 378, 379, 395, 398, 399, 400, 403, 417, 418, 419, 431, 441, 451, 480, 482, 490, 492, 500, 511, 516, 529, 530, 539, 540, 545, 546, 549, 566, 567, 569, 570, 572, 580, 605, 606, 608, 612, 623, 625, 629, 631, 633, 639, 641, 643, 651, 653, 669, 673, 682, 691, 732, 734, 770, 774, 777, 778, 780, 788, 791, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 833, 841, 846, 870, 875, 877, 880, 883, 884, 885, 886, 928, 946, 947, 956, 958, 959, 960, 961, 963, 965, 967, 971, 972, 973, 977, 987, 992, 994, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "leverag": [4, 8, 37, 49, 85, 214, 339, 340, 354, 355, 365, 395, 398, 851, 946, 953, 983, 1001, 1013], "task": [4, 7, 98, 109, 116, 117, 123, 144, 145, 157, 164, 174, 196, 212, 215, 217, 253, 341, 354, 356, 362, 364, 365, 366, 367, 370, 371, 372, 375, 377, 378, 379, 396, 398, 399, 400, 401, 427, 440, 471, 483, 493, 570, 573, 574, 576, 577, 578, 582, 583, 584, 587, 610, 611, 624, 625, 630, 631, 638, 639, 640, 641, 652, 659, 662, 685, 704, 706, 707, 731, 759, 761, 764, 766, 775, 779, 792, 796, 954, 957, 958, 959, 960, 968, 970, 972, 973, 975, 976, 978, 979, 980, 981, 983, 990, 991, 992, 994, 998, 1003, 1007], "highli": [4, 9, 71, 79, 80, 97, 106, 125, 191, 201, 256, 259, 265, 293, 340, 354, 355, 367, 368, 372, 389, 391, 395, 398, 399, 431, 441, 474, 541, 649, 670, 786, 788, 832, 953, 957, 960, 961, 963, 971, 972, 976], "depend": [4, 5, 7, 37, 53, 74, 99, 119, 122, 123, 126, 129, 141, 145, 155, 161, 164, 165, 166, 170, 172, 176, 200, 214, 218, 224, 225, 231, 239, 246, 256, 257, 261, 262, 263, 276, 293, 298, 308, 311, 323, 334, 340, 341, 350, 354, 355, 356, 360, 367, 368, 369, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 390, 391, 393, 395, 396, 398, 399, 400, 401, 402, 418, 419, 420, 424, 429, 431, 433, 436, 439, 441, 443, 448, 462, 467, 468, 469, 471, 474, 478, 479, 480, 482, 483, 488, 512, 513, 519, 522, 529, 537, 538, 540, 566, 567, 568, 569, 580, 582, 585, 586, 589, 605, 610, 611, 616, 618, 626, 636, 637, 647, 649, 651, 654, 655, 656, 658, 665, 668, 669, 672, 673, 706, 718, 755, 758, 767, 768, 772, 773, 793, 801, 818, 819, 820, 822, 824, 825, 826, 827, 828, 834, 835, 837, 849, 850, 853, 856, 869, 876, 877, 880, 884, 893, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 961, 962, 965, 969, 971, 972, 973, 983, 990, 992, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1013], "busi": [4, 196, 256, 374, 377, 765, 953, 957, 981], "dai": [4, 12, 154, 167, 197, 355, 364, 367, 855, 981, 1004, 1005, 1012, 1013], "week": [4, 366, 367, 380, 981, 1012], "yearli": 4, "season": [4, 154, 167, 197, 366, 401], "perform": [4, 7, 19, 24, 25, 26, 27, 32, 36, 48, 49, 53, 56, 57, 61, 63, 65, 66, 67, 69, 70, 73, 77, 85, 98, 105, 109, 110, 117, 119, 121, 123, 124, 128, 129, 135, 145, 146, 150, 161, 162, 164, 166, 167, 168, 169, 172, 185, 196, 198, 202, 203, 204, 213, 214, 218, 219, 221, 225, 230, 232, 234, 243, 246, 249, 251, 252, 253, 254, 256, 257, 258, 261, 262, 264, 265, 267, 269, 271, 272, 274, 276, 289, 295, 298, 300, 302, 303, 306, 313, 320, 326, 329, 332, 339, 341, 350, 353, 355, 356, 362, 364, 368, 369, 374, 375, 377, 378, 379, 381, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 403, 409, 420, 422, 423, 424, 426, 427, 429, 431, 433, 434, 438, 440, 447, 448, 460, 461, 462, 463, 472, 480, 490, 493, 509, 510, 511, 513, 515, 517, 520, 521, 522, 523, 524, 526, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 566, 567, 568, 569, 579, 580, 581, 588, 589, 605, 608, 618, 623, 629, 632, 633, 634, 636, 642, 643, 644, 645, 646, 648, 651, 653, 654, 655, 656, 660, 661, 663, 665, 667, 668, 671, 672, 681, 682, 683, 685, 686, 690, 691, 703, 706, 707, 715, 717, 719, 732, 733, 734, 755, 760, 761, 763, 764, 765, 769, 770, 771, 772, 773, 774, 777, 778, 785, 786, 788, 792, 797, 798, 799, 801, 802, 805, 808, 809, 811, 812, 813, 814, 815, 816, 817, 823, 825, 831, 832, 833, 834, 836, 837, 839, 842, 843, 845, 846, 848, 849, 850, 852, 853, 856, 858, 860, 861, 862, 863, 864, 865, 866, 870, 871, 873, 877, 878, 879, 880, 881, 883, 884, 885, 886, 895, 896, 930, 941, 946, 947, 949, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 973, 977, 978, 981, 983, 984, 987, 990, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "sklearnpreprocess": [4, 5, 6, 10, 31, 42, 44, 49, 53, 57, 61, 69, 70, 72, 74, 85, 95, 106, 115, 119, 142, 154, 158, 168, 172, 175, 177, 184, 185, 187, 196, 197, 202, 212, 214, 218, 226, 227, 235, 238, 253, 263, 265, 270, 284, 285, 292, 293, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 318, 326, 329, 340, 356, 357, 359, 361, 364, 367, 371, 378, 379, 388, 391, 392, 395, 399, 400, 443, 444, 445, 446, 467, 545, 559, 560, 566, 567, 568, 569, 608, 636, 637, 650, 652, 654, 656, 665, 718, 805, 836, 837, 875, 876, 877, 878, 880, 881, 947, 953, 958, 961, 968, 971, 972, 974, 977, 980, 981, 983, 988, 989, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "splinetransform": [4, 197, 309, 851, 967, 1011], "class": [4, 8, 9, 10, 13, 16, 19, 23, 24, 25, 27, 28, 30, 34, 40, 54, 55, 57, 70, 71, 90, 91, 100, 104, 108, 109, 117, 125, 130, 133, 149, 150, 153, 157, 158, 161, 164, 166, 167, 172, 174, 186, 187, 188, 204, 208, 211, 212, 215, 218, 225, 232, 234, 241, 242, 243, 249, 250, 251, 256, 258, 262, 266, 267, 272, 274, 276, 279, 281, 284, 285, 286, 287, 303, 306, 310, 314, 316, 317, 321, 322, 326, 327, 335, 337, 339, 340, 341, 356, 357, 359, 361, 362, 363, 364, 367, 368, 370, 371, 372, 373, 375, 377, 378, 382, 387, 389, 391, 392, 394, 396, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 486, 487, 488, 490, 492, 493, 497, 500, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 698, 704, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 731, 732, 734, 759, 760, 761, 763, 764, 765, 766, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 900, 901, 902, 903, 904, 906, 907, 919, 925, 927, 928, 941, 946, 947, 948, 949, 951, 952, 953, 954, 958, 959, 961, 964, 965, 967, 968, 970, 973, 978, 979, 981, 983, 987, 990, 992, 994, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "extrapol": [4, 149, 175, 197, 228, 259, 855, 957, 967, 973, 1011], "option": [4, 30, 46, 52, 103, 123, 155, 162, 177, 197, 259, 265, 307, 339, 344, 350, 356, 361, 362, 363, 367, 369, 371, 372, 374, 375, 377, 379, 380, 382, 385, 391, 392, 394, 395, 396, 398, 399, 402, 413, 421, 422, 424, 425, 426, 427, 428, 431, 438, 440, 441, 442, 474, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 527, 535, 536, 540, 542, 543, 545, 546, 560, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 606, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 624, 630, 635, 636, 637, 648, 651, 653, 654, 655, 656, 658, 660, 661, 665, 666, 667, 670, 672, 673, 682, 689, 691, 695, 699, 700, 701, 712, 713, 714, 734, 735, 736, 741, 743, 744, 748, 751, 752, 753, 754, 755, 758, 767, 768, 770, 777, 778, 780, 800, 802, 803, 807, 808, 809, 810, 816, 817, 820, 825, 828, 832, 835, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 867, 868, 875, 883, 884, 885, 886, 887, 889, 902, 943, 946, 947, 953, 956, 957, 960, 967, 970, 972, 973, 978, 980, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "load": [4, 6, 11, 12, 14, 26, 32, 46, 48, 53, 70, 71, 88, 95, 106, 109, 115, 116, 118, 125, 126, 129, 130, 132, 143, 144, 154, 166, 167, 172, 177, 192, 193, 196, 204, 212, 227, 228, 233, 234, 235, 236, 238, 246, 252, 254, 256, 261, 263, 268, 274, 276, 280, 285, 293, 294, 295, 307, 308, 310, 311, 316, 317, 318, 345, 348, 354, 357, 359, 362, 364, 369, 372, 378, 385, 390, 394, 395, 396, 398, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 510, 512, 521, 816, 817, 912, 967, 978, 984, 986, 988, 994, 998, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "openml": [4, 70, 129, 154, 166, 196, 204, 212, 214, 226, 274, 294, 360, 382, 474, 994, 1006, 1008, 1011], "repositori": [4, 8, 172, 360, 362, 364, 365, 367, 368, 370, 374, 380, 382, 482, 977, 980, 994], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 170, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 466, 473, 474, 478, 480, 481, 482, 484, 485, 486, 488, 490, 493, 499, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 554, 556, 557, 558, 559, 560, 561, 562, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 666, 667, 668, 669, 670, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 693, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 740, 741, 745, 746, 748, 750, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 902, 907, 910, 912, 914, 915, 916, 917, 919, 921, 922, 923, 925, 928, 931, 945, 946, 947, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 969, 970, 971, 972, 973, 978, 981, 983, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "fetch_openml": [4, 5, 70, 74, 119, 129, 154, 166, 167, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 306, 310, 361, 370, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "bike_shar": 4, "bike_sharing_demand": [4, 167], "version": [4, 46, 53, 70, 84, 95, 100, 151, 162, 167, 168, 172, 194, 197, 198, 204, 210, 212, 234, 238, 257, 274, 294, 303, 306, 307, 308, 309, 311, 326, 339, 354, 357, 362, 366, 367, 368, 369, 372, 374, 375, 377, 379, 380, 382, 384, 385, 390, 391, 394, 396, 398, 399, 401, 402, 403, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 478, 479, 480, 482, 483, 486, 487, 488, 490, 492, 500, 501, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 691, 692, 696, 699, 700, 701, 702, 704, 705, 706, 707, 708, 711, 716, 717, 718, 720, 723, 730, 731, 733, 734, 735, 736, 738, 743, 744, 745, 746, 755, 761, 762, 764, 766, 772, 773, 774, 775, 776, 777, 778, 779, 780, 787, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 893, 895, 896, 906, 907, 909, 911, 912, 920, 922, 925, 927, 932, 938, 943, 944, 946, 949, 951, 954, 957, 959, 961, 963, 965, 970, 971, 973, 975, 978, 980, 991, 996], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 135, 138, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 355, 356, 361, 362, 364, 365, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 382, 383, 384, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 441, 442, 443, 444, 447, 448, 450, 451, 452, 453, 454, 457, 460, 461, 462, 463, 471, 474, 478, 479, 482, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 554, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 581, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 684, 686, 691, 693, 694, 695, 696, 699, 700, 701, 702, 703, 705, 706, 707, 708, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 740, 741, 745, 746, 748, 750, 753, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 859, 863, 868, 869, 871, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 895, 896, 901, 909, 910, 911, 912, 914, 915, 916, 917, 919, 921, 922, 923, 924, 925, 928, 930, 931, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 975, 980, 983, 984, 987, 988, 989, 990, 991, 995, 996, 998, 999, 1000, 1002, 1003], "as_fram": [4, 5, 70, 74, 119, 129, 154, 166, 167, 168, 184, 185, 196, 204, 212, 214, 234, 238, 276, 294, 306, 308, 310, 311, 361, 362, 467, 468, 469, 470, 474, 478, 479, 480, 482, 483, 488, 1008, 1009, 1010, 1011], "true": [4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 19, 26, 30, 32, 34, 37, 44, 49, 50, 53, 54, 56, 57, 59, 62, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 91, 95, 96, 97, 98, 100, 106, 109, 114, 119, 120, 121, 122, 124, 125, 126, 129, 130, 132, 135, 136, 137, 142, 145, 149, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 172, 180, 181, 183, 184, 185, 187, 189, 191, 192, 193, 195, 196, 198, 199, 200, 203, 204, 210, 211, 212, 214, 217, 220, 221, 225, 226, 229, 231, 232, 233, 234, 237, 238, 241, 244, 246, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 281, 282, 285, 289, 292, 293, 294, 295, 299, 303, 306, 308, 310, 311, 315, 317, 318, 319, 329, 333, 334, 335, 339, 340, 341, 344, 345, 348, 350, 354, 355, 360, 362, 363, 367, 368, 371, 372, 373, 375, 378, 379, 381, 385, 387, 388, 389, 391, 392, 393, 395, 396, 398, 399, 400, 401, 403, 404, 405, 408, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 497, 500, 501, 502, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 690, 691, 692, 693, 696, 698, 701, 703, 704, 705, 706, 707, 708, 711, 712, 715, 716, 717, 718, 719, 720, 727, 728, 729, 731, 733, 738, 744, 745, 746, 755, 759, 760, 761, 762, 763, 764, 765, 766, 769, 771, 772, 773, 774, 777, 778, 779, 780, 785, 786, 788, 792, 793, 796, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 896, 906, 912, 913, 919, 920, 921, 924, 927, 928, 930, 938, 943, 945, 946, 947, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 977, 983, 987, 988, 990, 991, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "parser": [4, 5, 8, 70, 74, 119, 129, 154, 166, 167, 168, 196, 204, 212, 214, 226, 234, 238, 274, 276, 294, 306, 310, 474, 1013], "panda": [4, 5, 12, 25, 69, 70, 72, 74, 116, 119, 122, 126, 129, 154, 161, 166, 167, 168, 175, 185, 196, 204, 212, 214, 226, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 274, 276, 294, 306, 309, 310, 334, 339, 340, 361, 362, 365, 366, 367, 368, 369, 379, 382, 384, 392, 413, 422, 423, 425, 426, 428, 443, 445, 447, 460, 461, 462, 463, 467, 468, 469, 470, 474, 478, 479, 480, 482, 483, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 560, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 610, 611, 613, 616, 617, 618, 619, 620, 666, 667, 774, 777, 778, 788, 802, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 891, 946, 947, 967, 977, 978, 992, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "df": [4, 25, 27, 129, 167, 175, 196, 214, 246, 256, 302, 340, 371, 399, 568, 569, 946, 947], "frame": [4, 16, 70, 154, 166, 167, 196, 362, 367, 377, 380, 467, 468, 469, 470, 474, 478, 479, 480, 482, 483, 488, 977, 988, 1010], "To": [4, 8, 16, 26, 27, 32, 46, 56, 77, 79, 81, 85, 89, 100, 119, 122, 123, 131, 135, 146, 154, 155, 158, 161, 162, 166, 172, 177, 184, 196, 197, 198, 204, 214, 229, 230, 236, 238, 246, 251, 253, 254, 256, 258, 259, 261, 263, 274, 294, 298, 303, 306, 307, 308, 309, 310, 311, 336, 340, 344, 350, 354, 355, 360, 361, 367, 368, 370, 371, 372, 374, 377, 379, 385, 388, 391, 392, 393, 394, 395, 396, 398, 399, 427, 428, 429, 440, 443, 446, 470, 474, 480, 481, 485, 486, 509, 515, 516, 517, 519, 521, 522, 523, 524, 535, 536, 537, 538, 542, 543, 547, 575, 580, 605, 610, 624, 625, 630, 631, 634, 636, 637, 638, 639, 640, 641, 662, 678, 690, 705, 740, 762, 768, 777, 778, 798, 805, 847, 865, 866, 875, 876, 883, 884, 885, 886, 902, 912, 925, 944, 946, 947, 952, 953, 954, 955, 957, 958, 959, 960, 963, 964, 967, 971, 972, 973, 980, 981, 983, 987, 989, 990, 992, 998, 1001, 1003, 1004, 1005, 1007, 1009], "get": [4, 5, 9, 12, 16, 17, 19, 37, 48, 52, 55, 96, 100, 122, 131, 143, 146, 149, 154, 155, 161, 166, 167, 168, 169, 189, 198, 211, 214, 217, 232, 254, 257, 258, 260, 264, 267, 274, 281, 289, 299, 306, 315, 318, 323, 326, 328, 331, 336, 339, 341, 344, 355, 357, 360, 361, 362, 365, 367, 368, 370, 371, 372, 373, 374, 379, 382, 385, 387, 391, 392, 393, 395, 396, 398, 399, 400, 401, 405, 406, 407, 411, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 673, 677, 699, 700, 701, 703, 709, 710, 719, 733, 740, 741, 746, 762, 765, 772, 773, 774, 777, 778, 788, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 890, 903, 904, 905, 911, 912, 946, 952, 953, 954, 956, 957, 967, 970, 971, 972, 973, 978, 980, 987, 990, 991, 992, 995, 998, 1001, 1004, 1006, 1009, 1011, 1012], "quick": [4, 100, 237, 367, 368, 372, 382, 584, 802, 957, 958, 967, 981, 990, 995], "understand": [4, 9, 89, 154, 164, 167, 251, 254, 308, 309, 323, 339, 343, 349, 350, 366, 367, 370, 372, 377, 381, 391, 398, 399, 482, 802, 833, 834, 883, 884, 885, 886, 889, 946, 947, 954, 956, 973, 976, 977, 981, 998, 1012], "pattern": [4, 16, 62, 81, 93, 107, 149, 161, 164, 167, 309, 339, 340, 341, 350, 364, 367, 368, 388, 391, 392, 396, 398, 399, 427, 443, 445, 482, 510, 512, 519, 533, 534, 616, 686, 702, 718, 746, 765, 766, 772, 856, 949, 951, 953, 957, 958, 964, 972, 974, 978, 981, 1010], "let": [4, 5, 53, 63, 70, 74, 95, 100, 109, 116, 119, 122, 123, 126, 149, 155, 156, 162, 166, 167, 168, 177, 185, 196, 198, 214, 217, 221, 251, 256, 259, 263, 339, 341, 348, 350, 362, 367, 368, 372, 377, 388, 391, 395, 398, 399, 478, 482, 488, 512, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 659, 662, 842, 849, 850, 953, 954, 955, 956, 957, 964, 965, 967, 972, 973, 981, 990, 992, 1008], "u": [4, 10, 11, 12, 16, 17, 34, 50, 52, 55, 95, 103, 119, 120, 149, 158, 166, 167, 193, 197, 204, 214, 218, 221, 229, 237, 238, 242, 243, 247, 251, 256, 259, 263, 302, 339, 348, 355, 357, 362, 367, 370, 372, 374, 377, 382, 388, 391, 394, 396, 398, 399, 412, 442, 444, 460, 461, 462, 509, 515, 523, 524, 528, 530, 532, 534, 536, 538, 540, 543, 546, 548, 566, 567, 569, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 659, 662, 667, 671, 682, 698, 717, 732, 809, 810, 819, 827, 834, 856, 869, 876, 878, 881, 884, 886, 912, 951, 956, 957, 964, 967, 975, 981, 992, 995, 1008], "look": [4, 5, 53, 95, 98, 100, 122, 123, 149, 154, 155, 162, 166, 167, 198, 217, 221, 225, 247, 251, 256, 258, 294, 339, 340, 350, 355, 356, 361, 362, 365, 367, 368, 370, 372, 374, 377, 378, 391, 394, 396, 397, 398, 399, 427, 466, 467, 535, 536, 537, 538, 542, 543, 580, 581, 609, 637, 670, 856, 883, 884, 885, 886, 953, 954, 967, 971, 972, 974, 992, 998, 1006, 1008], "averag": [4, 25, 27, 37, 39, 40, 44, 52, 59, 61, 113, 114, 118, 122, 125, 130, 131, 132, 146, 154, 167, 177, 185, 196, 203, 214, 234, 259, 261, 264, 266, 274, 298, 306, 318, 339, 350, 354, 362, 364, 368, 388, 389, 393, 395, 399, 401, 402, 403, 417, 418, 421, 424, 425, 426, 428, 468, 471, 472, 501, 509, 510, 511, 515, 516, 518, 519, 525, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 565, 610, 611, 626, 636, 637, 644, 645, 647, 650, 652, 654, 655, 656, 658, 665, 678, 681, 682, 684, 685, 686, 691, 698, 699, 700, 702, 703, 705, 706, 707, 711, 712, 713, 715, 716, 717, 720, 722, 723, 725, 727, 728, 730, 733, 741, 758, 759, 760, 761, 762, 764, 765, 770, 771, 772, 773, 800, 822, 842, 943, 947, 952, 953, 958, 961, 963, 964, 971, 972, 973, 990, 992, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013], "per": [4, 10, 48, 53, 63, 90, 115, 119, 154, 156, 166, 167, 196, 211, 214, 238, 242, 252, 263, 265, 298, 308, 334, 339, 341, 354, 362, 363, 367, 371, 372, 375, 377, 379, 389, 391, 395, 396, 397, 398, 399, 401, 427, 429, 436, 440, 443, 447, 465, 478, 480, 481, 482, 486, 488, 490, 493, 501, 510, 512, 513, 514, 517, 519, 521, 527, 528, 539, 540, 547, 561, 566, 569, 588, 589, 610, 611, 619, 620, 636, 637, 644, 646, 649, 651, 652, 653, 654, 656, 670, 674, 691, 694, 698, 718, 731, 735, 736, 758, 760, 772, 773, 797, 804, 805, 806, 808, 809, 812, 814, 832, 835, 841, 843, 845, 846, 849, 850, 856, 873, 875, 876, 877, 878, 879, 880, 881, 900, 901, 912, 932, 946, 949, 953, 956, 957, 958, 961, 964, 971, 972, 973, 977, 978, 990, 992, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012], "hour": [4, 166, 167, 367, 370, 372, 954, 976], "sundai": 4, "weekend": 4, "clearli": [4, 59, 98, 167, 230, 303, 366, 367, 377, 379, 396, 398, 958, 964], "distinguish": [4, 40, 79, 91, 100, 198, 253, 362, 368, 379, 398, 401, 946, 957, 960, 963], "commut": 4, "morn": 4, "even": [4, 13, 27, 40, 42, 52, 74, 85, 98, 122, 155, 166, 167, 168, 185, 196, 197, 204, 214, 221, 222, 231, 242, 262, 298, 300, 302, 319, 339, 340, 341, 350, 356, 362, 366, 367, 368, 370, 371, 374, 377, 379, 389, 390, 391, 393, 395, 396, 398, 399, 401, 421, 423, 425, 426, 427, 428, 438, 440, 510, 513, 535, 536, 537, 538, 542, 543, 560, 567, 572, 605, 606, 608, 617, 636, 637, 673, 683, 690, 720, 738, 744, 751, 755, 758, 763, 765, 799, 867, 868, 883, 884, 885, 886, 912, 926, 946, 947, 949, 951, 953, 956, 957, 960, 962, 963, 965, 967, 969, 971, 972, 973, 981, 992, 1005, 1006, 1007, 1010, 1012], "leisur": 4, "more": [4, 6, 7, 8, 11, 12, 13, 19, 25, 26, 27, 30, 31, 37, 39, 40, 44, 46, 49, 52, 53, 56, 59, 66, 74, 79, 88, 89, 91, 95, 98, 102, 103, 111, 113, 116, 117, 119, 121, 122, 123, 124, 125, 129, 146, 149, 155, 158, 162, 166, 167, 172, 175, 176, 182, 185, 187, 190, 194, 196, 197, 198, 211, 212, 213, 214, 217, 221, 225, 230, 231, 232, 236, 241, 243, 244, 246, 247, 250, 254, 256, 257, 258, 259, 263, 265, 276, 278, 286, 292, 293, 295, 298, 299, 300, 303, 306, 307, 308, 310, 311, 315, 323, 326, 331, 334, 336, 339, 340, 341, 344, 345, 350, 354, 355, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 378, 379, 380, 382, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 908, 910, 912, 914, 922, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 977, 978, 979, 980, 981, 983, 987, 988, 989, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "spread": [4, 40, 219, 257, 298, 314, 315, 316, 319, 354, 367, 391, 431, 441, 493, 853, 864, 872, 957], "peak": [4, 27, 167, 389, 395, 1012], "middl": [4, 24, 59, 100, 110, 335, 364, 964, 967], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 361, 369, 373, 382, 384, 418, 480, 609, 610, 675, 676, 678, 679, 680, 780, 889, 977, 986, 988, 989, 990, 995, 1007, 1010, 1011, 1012, 1013], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 367, 373, 418, 480, 609, 610, 675, 676, 678, 679, 680, 780, 988, 989, 990, 995, 1012], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 310, 311, 314, 315, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 373, 418, 480, 609, 610, 675, 676, 678, 679, 680, 780, 889, 964, 988, 989, 990, 995], "fig": [4, 5, 7, 8, 10, 14, 25, 27, 42, 43, 45, 53, 56, 59, 63, 65, 72, 77, 79, 85, 89, 95, 100, 101, 102, 106, 109, 115, 116, 119, 122, 123, 126, 127, 129, 131, 152, 158, 161, 167, 169, 172, 176, 184, 187, 190, 191, 193, 194, 196, 197, 204, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 228, 234, 235, 246, 251, 252, 253, 256, 257, 258, 259, 262, 265, 266, 267, 274, 276, 278, 280, 281, 289, 293, 294, 298, 299, 300, 302, 303, 306, 310, 311, 323, 333, 334, 335, 336, 339, 340, 341, 344, 373, 988], "ax": [4, 5, 7, 8, 10, 12, 14, 16, 25, 27, 30, 31, 32, 40, 42, 43, 45, 53, 55, 56, 63, 65, 72, 74, 79, 81, 85, 89, 91, 95, 101, 102, 106, 109, 112, 115, 116, 119, 126, 127, 129, 130, 131, 152, 153, 158, 161, 166, 167, 168, 169, 172, 175, 176, 179, 185, 187, 188, 191, 193, 194, 196, 197, 198, 200, 201, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220, 221, 222, 226, 231, 234, 235, 237, 241, 243, 246, 251, 252, 253, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 274, 276, 278, 279, 280, 281, 284, 286, 287, 292, 293, 294, 298, 300, 301, 302, 303, 306, 307, 310, 311, 322, 323, 324, 327, 328, 333, 334, 335, 336, 339, 340, 341, 344, 345, 368, 369, 396, 401, 418, 512, 519, 528, 609, 610, 675, 676, 678, 679, 680, 696, 780, 889, 957, 960, 964, 995, 1008], "subplot": [4, 5, 6, 8, 10, 11, 13, 14, 30, 31, 32, 34, 39, 43, 44, 50, 51, 53, 54, 55, 56, 59, 61, 64, 65, 72, 74, 78, 79, 80, 81, 84, 85, 90, 91, 95, 96, 97, 98, 100, 105, 106, 110, 112, 113, 115, 116, 118, 119, 123, 126, 127, 129, 130, 131, 141, 151, 153, 158, 161, 162, 166, 167, 169, 172, 176, 179, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 204, 209, 212, 214, 217, 218, 221, 222, 225, 226, 228, 230, 231, 232, 233, 234, 235, 241, 242, 243, 244, 246, 247, 251, 252, 253, 256, 258, 259, 261, 262, 263, 265, 266, 267, 269, 270, 274, 276, 278, 279, 280, 281, 284, 285, 287, 288, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 310, 311, 317, 319, 323, 324, 326, 333, 334, 335, 336, 339, 340, 341, 344, 345, 373, 988], "figsiz": [4, 5, 6, 10, 12, 13, 14, 25, 26, 27, 30, 31, 32, 34, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 72, 74, 79, 81, 84, 85, 88, 89, 90, 91, 95, 98, 99, 100, 101, 102, 105, 106, 110, 112, 113, 119, 120, 121, 122, 123, 127, 129, 130, 141, 151, 153, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 179, 186, 190, 193, 194, 195, 196, 197, 198, 200, 202, 204, 207, 210, 212, 214, 217, 218, 219, 221, 222, 225, 226, 228, 230, 232, 233, 234, 235, 241, 243, 244, 247, 251, 252, 253, 258, 259, 260, 263, 265, 266, 270, 274, 276, 278, 292, 293, 295, 298, 299, 300, 301, 302, 303, 310, 311, 314, 316, 324, 326, 330, 331, 333, 334, 335, 336, 339, 340, 341, 889, 988], "4": [4, 5, 6, 7, 8, 9, 10, 12, 17, 19, 20, 25, 26, 27, 31, 32, 33, 34, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 70, 71, 72, 73, 80, 81, 84, 85, 90, 91, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 109, 111, 113, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 142, 152, 154, 155, 157, 158, 161, 162, 166, 167, 169, 172, 175, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 202, 203, 204, 206, 209, 210, 214, 217, 219, 225, 226, 229, 230, 231, 232, 233, 234, 236, 238, 241, 242, 243, 244, 246, 247, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 267, 270, 274, 276, 278, 280, 281, 282, 283, 286, 292, 294, 295, 298, 299, 301, 302, 306, 307, 309, 311, 314, 315, 316, 317, 318, 323, 325, 329, 330, 331, 334, 335, 336, 339, 340, 348, 350, 355, 361, 362, 364, 365, 367, 371, 372, 375, 377, 378, 379, 382, 383, 384, 389, 391, 392, 393, 395, 396, 398, 399, 400, 401, 403, 417, 419, 420, 421, 423, 425, 426, 427, 428, 430, 431, 432, 438, 439, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 474, 482, 490, 491, 494, 495, 496, 506, 510, 511, 512, 513, 515, 516, 517, 518, 522, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 548, 554, 559, 560, 567, 568, 569, 571, 572, 581, 585, 586, 592, 595, 597, 600, 605, 606, 607, 608, 611, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 655, 657, 658, 662, 665, 667, 668, 670, 671, 676, 677, 680, 684, 685, 693, 694, 703, 704, 711, 720, 721, 723, 724, 725, 726, 728, 729, 733, 745, 746, 758, 759, 765, 766, 769, 771, 772, 773, 774, 775, 776, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 802, 805, 806, 807, 810, 811, 812, 813, 815, 824, 833, 834, 835, 841, 842, 843, 848, 849, 851, 852, 854, 859, 863, 869, 875, 876, 878, 879, 881, 883, 884, 885, 901, 909, 911, 912, 914, 916, 917, 923, 925, 928, 946, 947, 950, 951, 952, 953, 955, 957, 958, 959, 960, 967, 968, 971, 972, 975, 983, 987, 988, 989, 990, 992, 996, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1011, 1012, 1013], "average_week_demand": 4, "groupbi": [4, 72, 167, 204, 214], "weekdai": [4, 167], "count": [4, 14, 25, 27, 41, 49, 53, 69, 70, 91, 130, 131, 166, 167, 196, 198, 229, 265, 276, 307, 308, 340, 341, 362, 364, 370, 375, 379, 389, 390, 391, 396, 398, 399, 428, 467, 514, 522, 559, 566, 567, 568, 569, 572, 582, 595, 618, 675, 683, 693, 696, 706, 707, 715, 731, 760, 761, 763, 764, 811, 815, 816, 817, 825, 828, 839, 887, 889, 914, 924, 946, 949, 953, 957, 959, 960, 967, 973, 981, 992, 998, 1001, 1003, 1006, 1007, 1009, 1010], "mean": [4, 5, 8, 11, 13, 24, 25, 27, 34, 36, 37, 40, 42, 44, 50, 53, 54, 67, 70, 78, 79, 80, 81, 85, 91, 95, 98, 99, 100, 102, 103, 112, 113, 118, 119, 122, 123, 129, 130, 131, 136, 145, 146, 149, 154, 156, 158, 161, 164, 166, 167, 176, 178, 185, 187, 189, 192, 196, 198, 200, 202, 203, 205, 211, 212, 213, 214, 220, 222, 225, 228, 229, 230, 231, 232, 234, 235, 236, 238, 241, 242, 243, 244, 246, 247, 252, 253, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 274, 287, 298, 301, 303, 306, 309, 317, 326, 329, 334, 336, 338, 339, 341, 342, 350, 354, 359, 361, 362, 364, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 388, 389, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 412, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 466, 479, 480, 482, 484, 490, 497, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 566, 567, 568, 569, 572, 575, 580, 584, 585, 586, 587, 588, 589, 591, 600, 605, 606, 608, 610, 612, 613, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 671, 672, 673, 682, 683, 685, 687, 690, 691, 694, 695, 701, 703, 706, 707, 708, 713, 714, 715, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 734, 751, 755, 756, 758, 760, 761, 762, 764, 765, 767, 768, 770, 772, 773, 774, 777, 778, 780, 788, 792, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 827, 829, 830, 832, 833, 834, 835, 837, 838, 840, 841, 845, 846, 848, 852, 854, 856, 861, 863, 864, 866, 868, 870, 871, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 891, 895, 896, 898, 931, 932, 938, 942, 946, 947, 948, 951, 953, 954, 956, 959, 960, 961, 962, 964, 965, 970, 971, 972, 973, 977, 981, 987, 990, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "plot": [4, 5, 6, 9, 11, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 45, 54, 55, 57, 58, 59, 60, 61, 64, 67, 72, 74, 78, 79, 80, 85, 87, 89, 92, 94, 95, 98, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 116, 121, 122, 124, 126, 127, 128, 133, 136, 138, 141, 142, 144, 149, 150, 151, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 168, 169, 170, 172, 174, 178, 179, 181, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 219, 220, 221, 222, 224, 225, 228, 229, 231, 232, 233, 238, 239, 241, 242, 243, 245, 247, 249, 250, 251, 256, 257, 259, 261, 262, 266, 267, 268, 270, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 298, 299, 300, 301, 302, 307, 310, 311, 315, 316, 319, 321, 322, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 346, 347, 348, 349, 357, 367, 369, 375, 377, 381, 382, 386, 389, 391, 393, 395, 397, 398, 418, 421, 429, 435, 443, 450, 474, 479, 480, 482, 490, 493, 497, 501, 502, 531, 535, 538, 540, 542, 543, 547, 548, 588, 600, 609, 610, 611, 635, 636, 650, 654, 675, 676, 678, 679, 680, 681, 696, 704, 727, 759, 761, 764, 765, 766, 780, 791, 797, 798, 799, 800, 803, 814, 818, 834, 837, 849, 850, 853, 856, 875, 880, 883, 884, 889, 950, 951, 953, 954, 956, 957, 960, 961, 963, 971, 972, 973, 978, 987, 988, 990, 994, 999, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "_": [4, 5, 7, 8, 11, 12, 14, 25, 26, 27, 32, 33, 40, 43, 50, 53, 57, 62, 66, 69, 81, 91, 95, 100, 101, 103, 105, 113, 114, 115, 141, 149, 154, 155, 156, 166, 167, 172, 175, 179, 180, 181, 183, 184, 185, 188, 193, 194, 196, 198, 209, 213, 218, 221, 226, 231, 238, 251, 256, 258, 259, 260, 262, 263, 265, 279, 284, 287, 295, 300, 307, 310, 311, 315, 316, 334, 339, 341, 345, 368, 372, 379, 396, 398, 399, 510, 511, 512, 513, 514, 516, 517, 518, 521, 525, 544, 575, 630, 631, 641, 662, 666, 667, 668, 669, 674, 676, 678, 741, 774, 788, 820, 828, 947, 953, 954, 957, 959, 960, 961, 964, 965, 967, 972, 973, 990, 1005], "hourli": 4, "xtick": [4, 6, 8, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 71, 81, 84, 89, 98, 119, 120, 121, 151, 152, 153, 157, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 255, 256, 270, 280, 289, 295, 314, 326, 329, 330, 331, 332, 675, 988], "24": [4, 5, 8, 19, 65, 164, 167, 222, 305, 306, 312, 314, 315, 365, 370, 382, 383, 384, 391, 398, 399, 417, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 441, 443, 448, 449, 450, 451, 452, 453, 454, 455, 467, 468, 469, 470, 474, 482, 493, 494, 495, 496, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 591, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 676, 678, 680, 686, 692, 704, 723, 730, 772, 773, 774, 777, 778, 788, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 837, 839, 840, 841, 842, 845, 846, 848, 850, 851, 852, 853, 854, 856, 865, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 906, 907, 932, 938, 946, 964, 967, 975, 996, 998, 1006, 1007, 1008, 1009, 1011], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 25, 26, 27, 30, 32, 33, 37, 38, 40, 42, 46, 47, 48, 50, 51, 59, 60, 62, 63, 64, 77, 78, 80, 81, 110, 112, 113, 114, 116, 122, 128, 141, 145, 150, 166, 167, 172, 185, 186, 190, 194, 196, 197, 203, 204, 212, 214, 218, 220, 228, 229, 233, 241, 243, 246, 247, 251, 255, 256, 257, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 274, 276, 280, 286, 289, 295, 298, 303, 306, 310, 311, 315, 326, 339, 340, 345, 348, 355, 361, 362, 364, 367, 368, 372, 375, 379, 385, 391, 395, 398, 401, 420, 448, 450, 451, 452, 453, 454, 455, 457, 459, 469, 472, 473, 492, 505, 519, 531, 532, 537, 538, 541, 566, 567, 569, 607, 610, 616, 618, 626, 627, 647, 649, 654, 658, 670, 690, 708, 723, 765, 802, 808, 822, 824, 826, 827, 832, 846, 853, 854, 855, 860, 861, 864, 865, 868, 869, 911, 912, 925, 946, 953, 957, 961, 971, 978, 981, 986, 987, 988, 990, 1003, 1004, 1005, 1006, 1008, 1011], "7": [4, 6, 8, 12, 13, 14, 16, 19, 26, 30, 32, 34, 39, 42, 44, 46, 53, 54, 55, 59, 63, 64, 66, 71, 73, 79, 81, 84, 98, 109, 113, 118, 121, 122, 125, 129, 130, 158, 166, 167, 169, 172, 177, 178, 180, 189, 195, 196, 197, 198, 210, 212, 214, 217, 225, 230, 231, 236, 238, 241, 242, 245, 246, 251, 256, 260, 262, 263, 267, 269, 274, 278, 281, 282, 284, 294, 295, 298, 302, 303, 306, 309, 310, 311, 314, 315, 317, 318, 323, 325, 330, 334, 335, 340, 341, 350, 362, 364, 365, 367, 370, 371, 372, 382, 383, 384, 395, 396, 398, 399, 400, 401, 419, 424, 427, 429, 430, 431, 432, 441, 450, 451, 469, 510, 511, 512, 513, 514, 516, 522, 539, 540, 566, 569, 578, 605, 606, 608, 625, 627, 636, 639, 670, 699, 700, 701, 703, 705, 721, 722, 723, 727, 728, 730, 762, 769, 772, 775, 776, 781, 784, 791, 792, 795, 799, 802, 806, 816, 817, 825, 834, 835, 848, 870, 871, 912, 915, 916, 923, 946, 947, 952, 953, 955, 957, 958, 960, 961, 963, 967, 971, 972, 975, 983, 987, 990, 996, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1011], "xticklabel": [4, 10, 119, 167], "sun": [4, 167, 1006, 1011, 1012], "mon": [4, 167], "tue": [4, 167, 1004], "wed": [4, 167], "thu": [4, 5, 24, 25, 26, 27, 40, 53, 59, 77, 81, 98, 100, 113, 115, 117, 119, 142, 149, 154, 155, 167, 184, 185, 196, 198, 214, 225, 231, 235, 243, 254, 256, 261, 262, 263, 306, 309, 344, 350, 354, 355, 362, 368, 372, 377, 379, 389, 391, 395, 396, 398, 399, 401, 402, 417, 419, 442, 493, 505, 531, 532, 533, 534, 535, 536, 541, 542, 543, 581, 584, 588, 600, 605, 610, 611, 621, 623, 636, 655, 683, 696, 702, 765, 770, 776, 781, 783, 795, 807, 810, 845, 875, 948, 949, 950, 951, 952, 953, 954, 957, 958, 963, 964, 965, 967, 969, 970, 971, 972, 978, 980, 981, 998, 1000, 1004, 1006, 1007, 1008, 1010], "fri": [4, 167, 362], "sat": [4, 167, 399], "xlabel": [4, 8, 9, 24, 25, 26, 27, 33, 37, 41, 60, 71, 77, 78, 80, 81, 84, 85, 89, 94, 97, 103, 110, 111, 112, 114, 119, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 210, 214, 229, 231, 232, 251, 255, 256, 260, 261, 265, 266, 269, 270, 271, 278, 279, 282, 283, 323, 325, 326, 329, 339, 345, 346, 347, 609], "ylabel": [4, 8, 9, 24, 25, 26, 27, 30, 33, 34, 37, 60, 71, 77, 78, 80, 81, 84, 85, 89, 97, 103, 110, 111, 112, 114, 120, 121, 122, 123, 124, 128, 132, 135, 136, 141, 142, 145, 149, 150, 151, 152, 154, 155, 156, 166, 175, 178, 179, 181, 183, 184, 185, 186, 189, 190, 196, 198, 199, 200, 201, 203, 205, 206, 214, 229, 231, 232, 251, 255, 256, 259, 260, 261, 265, 266, 269, 270, 271, 279, 323, 326, 329, 339, 345, 346, 347, 609], "number": [4, 5, 7, 8, 10, 12, 13, 19, 25, 26, 27, 32, 33, 36, 38, 39, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 56, 60, 61, 62, 66, 67, 69, 71, 72, 74, 81, 84, 85, 90, 91, 95, 97, 99, 100, 103, 109, 110, 111, 113, 117, 118, 120, 121, 122, 123, 125, 129, 131, 142, 143, 146, 157, 158, 162, 164, 166, 167, 172, 185, 195, 196, 197, 198, 203, 204, 210, 211, 212, 213, 214, 217, 225, 229, 232, 235, 241, 242, 244, 246, 247, 250, 251, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 276, 278, 282, 283, 298, 300, 301, 306, 307, 308, 309, 310, 311, 318, 326, 330, 331, 334, 340, 341, 344, 348, 350, 355, 356, 359, 361, 362, 363, 364, 365, 367, 369, 370, 372, 373, 374, 375, 377, 378, 379, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 559, 560, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 685, 690, 691, 692, 694, 696, 698, 701, 705, 706, 707, 708, 711, 712, 715, 717, 729, 732, 751, 755, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 896, 899, 911, 912, 915, 916, 925, 926, 928, 931, 932, 949, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 971, 972, 973, 974, 977, 978, 980, 983, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "rental": [4, 167, 964], "target": [4, 6, 17, 19, 26, 30, 32, 33, 45, 52, 68, 73, 75, 85, 89, 99, 102, 104, 109, 111, 117, 118, 119, 122, 123, 126, 128, 129, 130, 132, 138, 141, 144, 146, 149, 151, 154, 155, 162, 164, 166, 167, 168, 169, 175, 179, 189, 192, 196, 198, 201, 204, 205, 218, 226, 228, 229, 230, 231, 233, 234, 235, 243, 250, 254, 257, 259, 261, 262, 265, 266, 276, 279, 284, 287, 288, 293, 298, 303, 307, 308, 310, 314, 315, 318, 319, 322, 323, 326, 330, 332, 333, 339, 340, 345, 346, 347, 348, 350, 354, 356, 357, 359, 360, 361, 362, 363, 364, 368, 370, 371, 374, 375, 378, 381, 391, 395, 398, 401, 413, 417, 418, 419, 422, 425, 443, 444, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 486, 488, 498, 502, 509, 510, 512, 514, 515, 517, 520, 521, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 551, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 675, 676, 678, 679, 680, 685, 686, 687, 690, 691, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 712, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 759, 760, 761, 762, 764, 765, 766, 769, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 825, 826, 827, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 859, 864, 867, 868, 870, 871, 872, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 895, 921, 922, 923, 948, 949, 950, 953, 954, 957, 961, 964, 965, 971, 972, 973, 978, 980, 981, 983, 988, 990, 992, 994, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "absolut": [4, 74, 99, 119, 146, 166, 196, 198, 202, 214, 368, 391, 393, 395, 396, 398, 399, 400, 401, 402, 424, 429, 435, 436, 509, 515, 520, 523, 524, 526, 527, 528, 536, 538, 539, 540, 543, 566, 568, 569, 571, 575, 580, 597, 605, 610, 624, 627, 628, 630, 632, 634, 649, 654, 656, 660, 661, 677, 682, 695, 699, 713, 714, 722, 723, 725, 730, 732, 734, 745, 770, 776, 780, 791, 794, 800, 802, 814, 816, 817, 821, 840, 845, 848, 860, 884, 886, 943, 953, 954, 967, 971, 973, 990, 991, 999, 1004, 1009, 1010, 1011, 1012], "basi": [4, 6, 13, 100, 149, 154, 156, 197, 294, 309, 326, 359, 365, 391, 396, 398, 431, 512, 600, 610, 617, 669, 855, 955, 967, 972, 979, 987, 988, 991, 994, 1006, 1008, 1011], "max": [4, 8, 9, 10, 11, 12, 17, 19, 25, 27, 31, 40, 44, 52, 57, 61, 66, 71, 76, 81, 82, 89, 95, 98, 106, 110, 112, 118, 127, 135, 137, 138, 141, 142, 151, 153, 154, 162, 164, 166, 178, 183, 184, 185, 189, 191, 198, 199, 202, 210, 212, 214, 220, 229, 232, 254, 255, 256, 267, 269, 274, 276, 278, 282, 283, 289, 292, 294, 298, 300, 301, 309, 317, 319, 325, 332, 335, 354, 391, 393, 396, 448, 449, 450, 451, 452, 453, 454, 455, 456, 490, 514, 533, 534, 535, 536, 537, 538, 541, 542, 543, 584, 605, 609, 610, 626, 627, 647, 658, 669, 670, 674, 677, 682, 683, 718, 734, 766, 767, 768, 774, 833, 834, 845, 846, 848, 855, 861, 862, 883, 884, 885, 886, 925, 953, 955, 960, 967, 971, 972, 990, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "977": [4, 395], "rescal": [4, 46, 47, 100, 177, 184, 220, 298, 303, 336, 393, 403, 448, 449, 450, 451, 452, 453, 454, 455, 511, 516, 624, 627, 630, 848, 854, 877, 878, 879, 880, 881, 957, 967, 991, 1002, 1003], "variabl": [4, 9, 11, 12, 16, 37, 69, 113, 116, 119, 122, 123, 137, 138, 141, 146, 156, 157, 161, 162, 167, 168, 172, 185, 196, 200, 201, 214, 219, 247, 256, 259, 266, 350, 354, 356, 362, 364, 365, 367, 368, 370, 371, 374, 379, 391, 392, 393, 394, 396, 398, 399, 400, 429, 460, 461, 462, 465, 477, 479, 486, 493, 510, 512, 514, 519, 522, 531, 537, 538, 582, 584, 585, 586, 618, 628, 629, 632, 633, 639, 660, 661, 673, 687, 724, 775, 776, 779, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 804, 808, 809, 839, 853, 864, 876, 946, 947, 949, 953, 956, 957, 958, 959, 960, 962, 964, 965, 967, 971, 973, 977, 978, 980, 983, 984, 986, 988, 998, 1003, 1006, 1008, 1011, 1013], "rel": [4, 6, 8, 17, 27, 60, 100, 116, 154, 172, 176, 196, 214, 244, 282, 283, 299, 307, 310, 326, 339, 340, 362, 366, 368, 374, 379, 389, 391, 395, 398, 399, 401, 420, 423, 426, 428, 438, 499, 502, 509, 512, 515, 519, 535, 536, 537, 538, 542, 543, 544, 582, 627, 636, 637, 649, 668, 672, 706, 724, 774, 777, 778, 780, 788, 800, 803, 816, 817, 821, 833, 834, 845, 846, 856, 871, 875, 876, 877, 880, 882, 883, 884, 885, 886, 953, 954, 957, 959, 960, 961, 963, 980, 988], "so": [4, 9, 12, 16, 17, 42, 48, 55, 60, 64, 80, 118, 121, 128, 149, 154, 166, 168, 172, 176, 196, 197, 225, 256, 282, 283, 286, 293, 294, 299, 307, 317, 326, 334, 339, 341, 348, 350, 354, 355, 356, 361, 362, 366, 367, 368, 370, 371, 372, 374, 375, 379, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 474, 486, 487, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 673, 683, 686, 694, 703, 718, 733, 765, 772, 773, 774, 777, 778, 780, 781, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 865, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 912, 932, 946, 947, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 967, 969, 970, 971, 972, 978, 981, 990, 991, 992, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "error": [4, 5, 7, 13, 17, 27, 74, 77, 78, 80, 99, 105, 108, 109, 110, 113, 116, 119, 123, 133, 149, 161, 164, 166, 185, 192, 196, 198, 200, 202, 203, 210, 214, 228, 231, 247, 249, 252, 256, 257, 261, 270, 272, 282, 283, 310, 325, 334, 339, 340, 364, 365, 367, 368, 369, 370, 371, 375, 377, 379, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 423, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 474, 481, 493, 502, 509, 515, 520, 521, 523, 526, 531, 532, 533, 534, 536, 537, 538, 539, 540, 542, 543, 545, 553, 570, 573, 574, 576, 577, 578, 584, 607, 610, 621, 624, 625, 626, 629, 631, 633, 639, 641, 643, 647, 649, 651, 653, 655, 656, 658, 663, 666, 667, 670, 671, 674, 676, 679, 680, 687, 690, 698, 699, 700, 704, 717, 720, 721, 722, 723, 724, 725, 727, 728, 730, 733, 741, 755, 759, 765, 766, 774, 777, 778, 780, 788, 798, 799, 800, 802, 803, 806, 811, 812, 813, 815, 816, 817, 823, 824, 826, 827, 828, 831, 834, 837, 849, 850, 855, 856, 873, 875, 877, 878, 879, 884, 886, 893, 894, 895, 896, 899, 922, 941, 944, 946, 947, 948, 950, 951, 952, 954, 958, 961, 965, 967, 971, 972, 973, 979, 990, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "easili": [4, 9, 31, 143, 169, 199, 212, 230, 235, 238, 256, 258, 265, 281, 300, 367, 368, 379, 380, 392, 398, 399, 401, 428, 951, 953, 954, 967, 971, 972, 973, 984, 987, 992, 1004], "interpret": [4, 27, 146, 156, 164, 165, 167, 170, 196, 197, 212, 214, 250, 256, 258, 259, 295, 299, 302, 308, 339, 341, 354, 365, 367, 372, 374, 375, 379, 381, 389, 391, 392, 397, 399, 431, 443, 444, 446, 474, 519, 550, 589, 617, 621, 631, 650, 651, 669, 670, 673, 679, 706, 730, 735, 736, 760, 767, 768, 780, 789, 799, 800, 802, 805, 837, 849, 856, 925, 951, 953, 957, 958, 964, 967, 973, 977, 983, 991, 998, 999, 1003, 1006, 1011, 1013], "fraction": [4, 25, 27, 120, 122, 196, 204, 214, 334, 340, 389, 395, 398, 418, 419, 428, 429, 435, 436, 493, 505, 535, 536, 537, 538, 542, 543, 544, 568, 571, 580, 644, 645, 646, 649, 654, 655, 656, 681, 699, 700, 701, 711, 769, 771, 776, 780, 800, 801, 815, 843, 877, 878, 879, 883, 884, 885, 886, 953, 957, 960, 964, 965, 967, 972, 973, 978, 999, 1000, 1001, 1012], "maximum": [4, 8, 11, 27, 33, 37, 56, 77, 78, 79, 80, 81, 97, 115, 118, 120, 150, 156, 164, 174, 184, 215, 266, 278, 282, 283, 289, 298, 321, 337, 340, 344, 346, 347, 354, 371, 372, 378, 379, 388, 389, 391, 393, 394, 396, 398, 399, 401, 402, 403, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 436, 438, 440, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 476, 487, 489, 490, 491, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 561, 562, 575, 588, 605, 609, 610, 613, 615, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 654, 655, 656, 657, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 694, 721, 758, 772, 774, 777, 778, 780, 788, 795, 800, 825, 832, 833, 834, 840, 841, 845, 846, 848, 851, 852, 853, 855, 863, 864, 869, 870, 871, 872, 875, 876, 880, 883, 884, 885, 886, 887, 889, 892, 899, 946, 952, 953, 954, 956, 957, 959, 960, 961, 963, 967, 971, 972, 973, 991, 1005, 1006, 1008, 1009, 1012, 1013], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 169, 172, 174, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 220, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 339, 340, 344, 345, 346, 347, 348, 354, 356, 357, 359, 362, 364, 367, 369, 371, 372, 375, 377, 379, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 407, 412, 413, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 479, 487, 488, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 675, 676, 678, 679, 680, 689, 700, 712, 727, 765, 772, 773, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 904, 941, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 967, 968, 969, 970, 971, 972, 973, 977, 978, 979, 981, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "method": [4, 8, 17, 19, 20, 24, 25, 26, 27, 36, 37, 41, 49, 50, 53, 54, 55, 56, 57, 60, 64, 67, 68, 75, 78, 79, 83, 86, 95, 98, 100, 104, 105, 106, 115, 116, 117, 123, 129, 141, 146, 161, 172, 183, 185, 197, 204, 213, 216, 218, 223, 225, 231, 238, 240, 248, 258, 263, 265, 276, 282, 283, 285, 298, 302, 306, 308, 309, 339, 340, 341, 348, 350, 354, 355, 356, 357, 359, 364, 365, 367, 368, 372, 373, 375, 377, 378, 381, 385, 387, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 441, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 482, 490, 492, 500, 503, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 688, 689, 708, 709, 712, 713, 718, 719, 740, 745, 746, 751, 755, 760, 765, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 864, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 898, 912, 919, 920, 926, 941, 942, 945, 946, 947, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 965, 967, 969, 970, 971, 972, 973, 974, 977, 979, 981, 983, 987, 989, 990, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "minim": [4, 12, 56, 65, 77, 78, 122, 149, 157, 175, 192, 194, 196, 198, 204, 214, 217, 228, 229, 241, 246, 257, 265, 266, 298, 306, 309, 323, 334, 344, 357, 366, 367, 369, 374, 377, 379, 389, 391, 393, 396, 398, 420, 421, 425, 429, 442, 516, 518, 525, 535, 536, 537, 538, 542, 543, 587, 588, 589, 619, 624, 627, 635, 636, 645, 649, 650, 652, 656, 657, 665, 670, 672, 673, 725, 757, 823, 825, 834, 852, 863, 869, 883, 884, 885, 886, 948, 953, 954, 957, 960, 961, 967, 969, 970, 971, 972, 977, 979, 990, 991, 994, 1002, 1007, 1008], "squar": [4, 5, 60, 78, 79, 80, 83, 86, 96, 106, 113, 123, 125, 146, 149, 154, 164, 166, 174, 175, 177, 185, 192, 196, 198, 200, 201, 206, 213, 214, 215, 228, 229, 231, 244, 265, 266, 270, 302, 308, 309, 311, 323, 339, 359, 364, 367, 372, 375, 379, 389, 391, 393, 394, 396, 397, 398, 402, 403, 412, 420, 422, 423, 424, 426, 428, 429, 436, 438, 439, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 479, 509, 515, 517, 519, 521, 525, 527, 530, 532, 534, 536, 537, 538, 540, 543, 546, 548, 568, 569, 570, 573, 574, 576, 577, 578, 582, 583, 584, 587, 589, 593, 600, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 660, 661, 664, 665, 666, 668, 670, 672, 674, 677, 687, 699, 700, 701, 727, 728, 735, 736, 740, 746, 747, 762, 802, 809, 810, 818, 819, 822, 824, 826, 827, 834, 837, 856, 875, 876, 878, 880, 881, 882, 884, 886, 910, 930, 943, 948, 950, 951, 960, 961, 965, 971, 973, 979, 990, 991, 994, 998, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 24, 26, 27, 30, 33, 37, 38, 44, 45, 49, 54, 55, 56, 57, 60, 62, 70, 71, 73, 82, 84, 85, 95, 96, 97, 103, 105, 108, 109, 110, 115, 116, 118, 120, 122, 126, 129, 130, 131, 132, 133, 135, 136, 144, 145, 146, 148, 149, 154, 156, 159, 160, 161, 163, 166, 174, 177, 180, 184, 185, 191, 196, 198, 200, 201, 203, 204, 213, 214, 215, 224, 225, 226, 231, 236, 238, 239, 240, 241, 243, 244, 246, 248, 249, 250, 253, 254, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 272, 277, 283, 290, 298, 300, 309, 310, 329, 334, 340, 341, 345, 354, 355, 356, 357, 359, 365, 367, 369, 370, 373, 374, 375, 376, 382, 385, 386, 389, 391, 394, 396, 399, 400, 402, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 469, 470, 473, 474, 476, 479, 480, 502, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 553, 554, 556, 557, 558, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 665, 666, 667, 668, 669, 670, 675, 676, 678, 679, 680, 685, 686, 689, 690, 691, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 759, 760, 761, 762, 764, 765, 766, 769, 772, 773, 774, 777, 778, 779, 780, 785, 786, 788, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 863, 864, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 894, 895, 896, 898, 900, 901, 904, 906, 907, 908, 920, 941, 945, 952, 954, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 978, 979, 981, 983, 984, 986, 988, 990, 991, 992, 993, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1013], "condit": [4, 12, 25, 27, 81, 117, 122, 164, 165, 166, 170, 185, 198, 201, 214, 259, 309, 348, 372, 377, 381, 388, 391, 393, 396, 398, 400, 430, 443, 451, 452, 457, 474, 491, 501, 502, 514, 517, 518, 519, 521, 523, 525, 527, 528, 540, 605, 610, 611, 621, 628, 629, 630, 632, 633, 634, 648, 650, 651, 652, 653, 660, 661, 665, 675, 690, 695, 696, 713, 714, 770, 811, 812, 813, 814, 815, 834, 837, 840, 849, 850, 853, 912, 951, 953, 954, 955, 957, 959, 960, 962, 967, 973, 977, 990, 994, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1013], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 25, 26, 27, 33, 36, 37, 44, 46, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 65, 67, 69, 70, 71, 72, 74, 77, 78, 79, 80, 88, 95, 96, 97, 98, 99, 100, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 132, 136, 137, 138, 142, 146, 149, 150, 151, 154, 155, 156, 158, 160, 161, 163, 164, 166, 167, 168, 172, 174, 175, 176, 179, 180, 184, 191, 196, 197, 198, 201, 203, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 228, 229, 230, 231, 232, 238, 241, 242, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 271, 274, 279, 282, 283, 284, 287, 289, 298, 303, 307, 308, 309, 311, 315, 319, 322, 323, 325, 326, 328, 329, 339, 340, 341, 344, 347, 348, 350, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 411, 413, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 479, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 588, 589, 590, 597, 600, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 684, 687, 689, 690, 696, 698, 699, 704, 706, 707, 711, 712, 714, 719, 720, 722, 723, 725, 727, 728, 730, 733, 735, 736, 740, 741, 743, 744, 745, 746, 747, 750, 752, 753, 754, 755, 758, 759, 760, 761, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 867, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 892, 893, 895, 896, 898, 899, 902, 906, 907, 908, 910, 911, 912, 914, 916, 919, 920, 922, 923, 924, 925, 927, 928, 931, 932, 938, 941, 943, 944, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 981, 984, 986, 987, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "median": [4, 37, 70, 74, 79, 80, 122, 161, 162, 166, 198, 202, 213, 227, 298, 307, 309, 310, 362, 393, 398, 400, 420, 433, 437, 440, 453, 530, 532, 536, 543, 575, 605, 608, 613, 648, 649, 657, 699, 730, 823, 854, 865, 884, 886, 947, 967, 973, 1001, 1002], "measur": [4, 7, 8, 10, 11, 19, 25, 37, 38, 49, 57, 59, 60, 96, 113, 114, 122, 125, 132, 146, 149, 154, 164, 166, 167, 172, 185, 190, 195, 196, 202, 214, 249, 254, 256, 262, 263, 269, 272, 303, 339, 340, 354, 362, 364, 368, 372, 379, 388, 389, 390, 393, 395, 396, 397, 398, 399, 428, 431, 441, 476, 493, 516, 518, 525, 529, 535, 536, 537, 538, 541, 542, 543, 582, 585, 586, 589, 605, 636, 668, 670, 676, 677, 680, 682, 683, 685, 687, 690, 691, 694, 695, 698, 702, 703, 704, 706, 708, 713, 714, 716, 717, 720, 724, 732, 733, 734, 759, 760, 761, 763, 764, 766, 767, 770, 797, 799, 802, 822, 853, 864, 883, 884, 885, 886, 947, 953, 955, 960, 962, 963, 965, 971, 973, 987, 990, 998, 1001, 1003, 1004, 1006, 1008], "test": [4, 6, 8, 10, 11, 16, 24, 25, 26, 27, 31, 32, 33, 69, 70, 84, 100, 109, 110, 113, 115, 116, 117, 120, 121, 122, 123, 124, 135, 138, 140, 142, 145, 147, 149, 150, 164, 166, 167, 168, 169, 172, 180, 185, 191, 192, 196, 197, 198, 203, 204, 211, 212, 214, 221, 226, 231, 233, 243, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 263, 264, 266, 267, 268, 272, 274, 276, 284, 285, 292, 294, 300, 303, 318, 326, 334, 341, 350, 354, 355, 361, 362, 364, 369, 370, 371, 372, 377, 378, 379, 381, 382, 384, 386, 389, 392, 393, 396, 398, 399, 400, 401, 408, 410, 412, 415, 416, 417, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 466, 467, 471, 475, 476, 480, 482, 502, 509, 515, 517, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 570, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 586, 587, 588, 589, 605, 606, 608, 613, 614, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 677, 690, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 826, 827, 833, 834, 836, 860, 861, 863, 864, 865, 866, 870, 871, 873, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 904, 906, 907, 952, 953, 956, 957, 960, 961, 965, 967, 971, 972, 973, 977, 978, 980, 981, 984, 987, 988, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "discuss": [4, 53, 57, 166, 185, 217, 222, 259, 339, 350, 356, 362, 364, 367, 371, 372, 374, 377, 379, 380, 391, 393, 397, 398, 401, 476, 660, 661, 818, 819, 824, 826, 827, 947, 951, 953, 954, 957, 960, 967, 974, 978, 1001], "choos": [4, 11, 12, 44, 45, 46, 50, 53, 59, 61, 65, 77, 101, 102, 118, 129, 135, 136, 146, 166, 169, 189, 232, 234, 251, 261, 268, 344, 350, 354, 355, 356, 357, 368, 371, 374, 379, 391, 393, 395, 398, 399, 401, 402, 423, 424, 426, 428, 438, 501, 510, 516, 537, 538, 560, 580, 636, 637, 650, 652, 657, 665, 666, 667, 671, 703, 733, 774, 777, 778, 788, 843, 883, 884, 885, 886, 947, 948, 952, 953, 954, 955, 956, 960, 967, 970, 971, 972, 984, 986, 990, 991, 1000, 1001, 1005, 1007, 1009], "focu": [4, 9, 27, 95, 149, 247, 286, 354, 371, 389, 398, 531, 532, 537, 539, 540, 656, 954, 960, 967, 977, 978], "intuit": [4, 31, 44, 52, 61, 100, 113, 119, 141, 149, 166, 167, 197, 198, 219, 225, 257, 281, 300, 303, 323, 326, 340, 367, 379, 389, 391, 393, 395, 397, 759, 760, 761, 764, 847, 949, 953, 954, 957, 958, 964, 967, 968, 972, 981, 990, 992, 998], "than": [4, 5, 7, 11, 12, 13, 19, 27, 30, 31, 40, 44, 47, 53, 71, 74, 79, 81, 85, 91, 95, 98, 100, 103, 109, 110, 112, 113, 115, 116, 118, 119, 122, 146, 149, 155, 158, 161, 166, 167, 168, 172, 175, 182, 185, 196, 198, 202, 212, 213, 214, 221, 225, 231, 232, 242, 253, 254, 256, 257, 258, 259, 262, 265, 274, 282, 283, 295, 298, 302, 303, 308, 310, 315, 339, 340, 341, 350, 354, 355, 356, 361, 362, 363, 366, 367, 368, 371, 372, 374, 379, 380, 385, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 433, 436, 439, 442, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 471, 472, 474, 487, 492, 493, 501, 509, 512, 513, 514, 515, 516, 518, 519, 520, 522, 525, 526, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 559, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 605, 606, 608, 612, 618, 620, 621, 622, 623, 624, 625, 630, 631, 633, 636, 637, 638, 639, 640, 641, 644, 645, 646, 649, 650, 652, 654, 655, 656, 657, 660, 665, 670, 672, 674, 682, 683, 690, 698, 699, 700, 701, 712, 713, 716, 741, 756, 757, 758, 760, 762, 770, 772, 773, 774, 777, 778, 784, 788, 793, 795, 797, 798, 799, 800, 801, 804, 806, 807, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 830, 833, 834, 839, 849, 851, 853, 854, 856, 858, 864, 865, 869, 872, 875, 876, 877, 880, 881, 883, 884, 885, 886, 887, 901, 912, 914, 915, 922, 926, 928, 931, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 971, 972, 973, 977, 978, 983, 987, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "root": [4, 16, 79, 146, 177, 348, 364, 367, 374, 391, 422, 479, 519, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 617, 728, 883, 884, 885, 886, 887, 889, 963, 973, 1000, 1006, 1007, 1008, 1009, 1012, 1013], "metric": [4, 6, 7, 11, 19, 20, 21, 24, 25, 26, 30, 32, 36, 38, 44, 48, 49, 52, 57, 59, 63, 67, 69, 74, 81, 109, 110, 115, 121, 123, 124, 129, 143, 150, 161, 164, 166, 168, 180, 185, 191, 192, 196, 198, 200, 202, 214, 220, 226, 229, 230, 234, 237, 249, 250, 252, 253, 254, 256, 257, 259, 263, 265, 266, 272, 274, 276, 278, 286, 289, 295, 298, 303, 306, 307, 309, 310, 311, 314, 315, 317, 318, 339, 340, 350, 354, 357, 359, 362, 367, 368, 377, 378, 379, 381, 386, 389, 396, 397, 398, 401, 402, 408, 417, 421, 424, 425, 429, 436, 448, 498, 513, 527, 528, 529, 531, 533, 535, 537, 539, 540, 542, 545, 547, 555, 580, 588, 598, 606, 612, 616, 617, 618, 619, 620, 621, 636, 637, 641, 644, 646, 652, 653, 654, 666, 668, 670, 672, 674, 774, 777, 778, 780, 788, 797, 798, 799, 801, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 842, 848, 870, 871, 875, 877, 880, 883, 885, 947, 949, 952, 958, 963, 965, 977, 978, 987, 988, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "studi": [4, 59, 122, 196, 214, 259, 262, 263, 339, 362, 364, 395, 400, 674, 686, 735, 736, 801, 955, 957, 971, 983], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 24, 25, 26, 27, 30, 31, 33, 34, 39, 40, 42, 43, 44, 45, 52, 54, 55, 56, 59, 60, 61, 64, 65, 70, 71, 72, 73, 74, 80, 84, 85, 89, 90, 91, 94, 97, 99, 100, 101, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 214, 217, 218, 219, 222, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 344, 345, 346, 347, 348, 350, 359, 360, 361, 362, 365, 367, 368, 371, 373, 375, 378, 379, 385, 389, 391, 392, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 412, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 476, 478, 480, 483, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 676, 677, 678, 679, 680, 684, 689, 703, 712, 718, 719, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 765, 766, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 895, 900, 901, 921, 922, 923, 928, 931, 944, 946, 947, 948, 949, 951, 952, 953, 955, 957, 958, 959, 960, 961, 962, 964, 967, 971, 972, 973, 978, 983, 987, 988, 990, 994, 995, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "hist": [4, 25, 27, 53, 74, 112, 196, 198, 229, 262, 281, 298, 302, 310], "bin": [4, 24, 25, 27, 53, 74, 112, 196, 229, 262, 281, 298, 299, 300, 301, 302, 365, 374, 382, 389, 397, 398, 418, 419, 427, 440, 539, 540, 839, 841, 855, 914, 991, 1006, 1007, 1008, 1012], "30": [4, 8, 10, 14, 39, 40, 54, 59, 72, 77, 101, 103, 118, 122, 128, 135, 149, 150, 153, 155, 167, 172, 175, 190, 194, 196, 214, 217, 218, 222, 230, 233, 245, 256, 257, 261, 270, 276, 285, 286, 302, 303, 311, 314, 315, 319, 324, 327, 329, 332, 354, 362, 364, 371, 372, 395, 399, 402, 424, 429, 436, 478, 513, 516, 517, 519, 521, 548, 570, 573, 574, 576, 626, 670, 712, 760, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 871, 884, 946, 951, 957, 958, 960, 965, 988, 998, 999, 1005, 1006, 1007], "rent": 4, "fleet": 4, "input": [4, 6, 10, 31, 33, 72, 95, 99, 109, 118, 122, 123, 155, 156, 157, 166, 172, 175, 196, 199, 200, 204, 211, 214, 228, 229, 231, 238, 251, 280, 281, 294, 299, 300, 301, 302, 306, 309, 311, 326, 332, 335, 341, 361, 364, 367, 369, 371, 375, 376, 377, 378, 379, 388, 389, 392, 395, 396, 397, 398, 399, 400, 401, 403, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 425, 427, 428, 429, 433, 436, 437, 440, 443, 444, 446, 447, 448, 451, 460, 461, 462, 467, 481, 487, 494, 495, 496, 498, 502, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 589, 598, 600, 605, 606, 607, 608, 609, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 671, 674, 675, 676, 677, 678, 679, 680, 699, 700, 701, 705, 722, 723, 725, 727, 728, 730, 731, 738, 744, 745, 748, 749, 751, 755, 756, 757, 758, 762, 772, 773, 774, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 892, 893, 894, 895, 896, 897, 901, 906, 911, 923, 930, 932, 938, 943, 944, 947, 949, 951, 953, 954, 955, 956, 957, 959, 960, 961, 962, 964, 965, 969, 970, 971, 972, 973, 977, 978, 981, 983, 987, 988, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "annot": [4, 9, 26, 131, 172, 218, 260, 263, 339, 367, 368, 391, 694, 889, 957, 973, 1007], "log": [4, 20, 25, 26, 27, 77, 95, 122, 129, 142, 146, 150, 151, 153, 154, 155, 158, 181, 184, 185, 189, 196, 200, 201, 206, 214, 229, 231, 245, 286, 339, 362, 364, 365, 367, 370, 374, 375, 379, 388, 389, 391, 392, 393, 396, 398, 399, 401, 427, 430, 439, 444, 449, 450, 451, 452, 453, 454, 455, 510, 514, 519, 527, 528, 529, 531, 533, 535, 537, 540, 542, 568, 569, 571, 572, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 620, 623, 626, 636, 637, 647, 649, 654, 658, 718, 728, 732, 772, 773, 774, 777, 778, 788, 811, 812, 813, 814, 815, 816, 817, 821, 832, 833, 840, 841, 869, 872, 877, 880, 882, 883, 885, 910, 946, 949, 951, 953, 954, 959, 960, 962, 965, 967, 971, 973, 977, 978, 990, 1000, 1001, 1002, 1007, 1008, 1009, 1012], "describ": [4, 55, 129, 166, 214, 230, 256, 265, 350, 354, 355, 360, 362, 364, 366, 367, 368, 371, 374, 379, 380, 388, 391, 393, 394, 395, 396, 398, 399, 441, 448, 452, 453, 454, 469, 471, 473, 474, 475, 478, 479, 480, 481, 482, 483, 488, 494, 495, 496, 506, 585, 586, 623, 637, 692, 772, 773, 811, 813, 851, 912, 946, 949, 952, 953, 956, 957, 959, 963, 971, 972, 973, 980, 983, 989, 990, 1006, 1008], "weather": [4, 154, 167, 401, 953, 957], "includ": [4, 32, 79, 119, 121, 166, 168, 196, 214, 257, 276, 293, 298, 309, 310, 326, 331, 339, 341, 350, 354, 355, 361, 363, 365, 367, 368, 370, 371, 372, 374, 375, 379, 380, 382, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 424, 429, 435, 445, 448, 449, 450, 451, 452, 453, 454, 455, 467, 468, 469, 474, 478, 479, 480, 482, 483, 488, 512, 519, 535, 542, 552, 610, 616, 624, 625, 630, 638, 639, 640, 643, 659, 666, 667, 675, 691, 706, 707, 712, 714, 715, 748, 760, 761, 764, 770, 774, 776, 777, 778, 787, 788, 791, 794, 799, 802, 824, 826, 827, 828, 849, 850, 851, 855, 872, 883, 885, 887, 889, 895, 896, 899, 901, 904, 946, 953, 956, 957, 958, 960, 961, 967, 971, 972, 973, 977, 978, 980, 981, 990, 992, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "both": [4, 5, 7, 9, 10, 14, 16, 25, 26, 42, 54, 63, 70, 77, 79, 84, 85, 100, 103, 109, 113, 116, 119, 128, 129, 132, 141, 142, 146, 149, 156, 158, 166, 167, 168, 175, 182, 184, 185, 196, 197, 198, 201, 202, 204, 214, 221, 231, 232, 241, 242, 243, 244, 245, 246, 256, 257, 258, 259, 263, 265, 267, 271, 288, 298, 302, 306, 308, 316, 317, 323, 328, 334, 339, 340, 341, 348, 350, 354, 355, 356, 360, 361, 362, 363, 365, 367, 368, 372, 373, 375, 377, 378, 379, 380, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 401, 417, 426, 431, 438, 441, 447, 454, 460, 461, 462, 463, 466, 467, 474, 475, 478, 480, 483, 485, 486, 487, 512, 525, 529, 533, 534, 535, 541, 542, 543, 544, 545, 554, 566, 567, 569, 575, 585, 586, 605, 610, 611, 621, 635, 636, 637, 650, 652, 654, 656, 665, 677, 682, 690, 694, 708, 713, 734, 738, 744, 751, 755, 760, 765, 766, 770, 777, 778, 780, 805, 833, 834, 848, 852, 863, 868, 873, 875, 876, 883, 885, 899, 913, 922, 932, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 970, 971, 972, 973, 977, 978, 980, 981, 987, 990, 991, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "numer": [4, 19, 65, 70, 74, 117, 119, 129, 146, 154, 157, 167, 168, 185, 196, 214, 236, 238, 286, 309, 341, 361, 362, 364, 369, 371, 372, 377, 378, 379, 391, 393, 398, 399, 400, 401, 403, 420, 423, 426, 438, 450, 451, 454, 457, 467, 468, 469, 474, 478, 479, 480, 482, 483, 488, 509, 511, 513, 518, 525, 545, 559, 568, 589, 595, 598, 608, 610, 611, 624, 630, 632, 650, 665, 668, 672, 692, 765, 769, 774, 777, 778, 780, 788, 798, 799, 800, 803, 811, 812, 813, 814, 815, 833, 834, 839, 844, 849, 850, 887, 889, 895, 896, 911, 912, 946, 947, 953, 954, 958, 965, 967, 968, 973, 980, 981, 983, 992, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "categor": [4, 70, 108, 115, 129, 133, 164, 166, 167, 168, 196, 214, 236, 238, 309, 311, 356, 359, 361, 362, 368, 371, 379, 392, 399, 445, 446, 467, 468, 474, 483, 539, 540, 559, 560, 585, 586, 610, 611, 626, 636, 637, 647, 658, 687, 799, 811, 812, 813, 814, 815, 837, 839, 843, 844, 847, 849, 850, 870, 871, 947, 953, 964, 965, 973, 977, 978, 979, 980, 981, 992, 994, 998, 999, 1002, 1003, 1006, 1008, 1010, 1013], "inform": [4, 5, 8, 11, 12, 13, 25, 27, 33, 37, 38, 49, 53, 57, 65, 66, 69, 70, 85, 88, 89, 90, 102, 116, 117, 140, 142, 143, 145, 146, 147, 149, 154, 164, 166, 167, 169, 172, 174, 175, 176, 197, 211, 213, 214, 215, 235, 243, 244, 246, 251, 253, 256, 257, 258, 261, 263, 265, 282, 283, 286, 309, 329, 334, 339, 340, 341, 345, 348, 350, 354, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 374, 377, 378, 379, 380, 385, 388, 395, 396, 398, 399, 400, 401, 431, 441, 470, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 488, 493, 502, 506, 512, 513, 516, 517, 519, 521, 535, 539, 540, 542, 565, 567, 568, 570, 571, 572, 573, 574, 577, 578, 584, 585, 586, 587, 617, 618, 634, 636, 665, 669, 673, 675, 679, 682, 683, 693, 703, 707, 720, 732, 733, 734, 763, 765, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 788, 792, 799, 811, 815, 816, 817, 821, 825, 837, 848, 853, 856, 860, 861, 863, 864, 865, 866, 871, 874, 877, 880, 883, 885, 887, 889, 947, 949, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 968, 971, 973, 978, 981, 989, 990, 991, 992, 998, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "alreadi": [4, 6, 10, 16, 57, 100, 129, 146, 166, 226, 232, 237, 257, 263, 309, 367, 371, 372, 377, 379, 389, 393, 395, 397, 398, 403, 417, 477, 501, 511, 545, 546, 612, 624, 627, 642, 643, 644, 645, 646, 652, 654, 655, 656, 663, 664, 677, 745, 811, 831, 839, 845, 846, 848, 853, 858, 860, 861, 862, 864, 865, 866, 872, 875, 876, 898, 946, 963, 967, 968, 978, 983, 988, 992, 995, 999, 1003, 1006, 1010, 1011, 1012], "expand": [4, 16, 49, 64, 227, 307, 350, 359, 398, 424, 429, 477, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 957, 999, 1006, 1007], "complementari": [4, 399], "column": [4, 20, 21, 59, 68, 74, 75, 89, 116, 118, 119, 122, 126, 129, 146, 154, 161, 164, 166, 167, 168, 185, 196, 197, 204, 214, 233, 235, 246, 256, 257, 267, 268, 294, 308, 309, 310, 311, 339, 340, 341, 354, 361, 362, 364, 367, 368, 372, 375, 377, 378, 379, 388, 391, 392, 394, 396, 398, 399, 400, 403, 406, 430, 432, 443, 445, 446, 450, 451, 457, 465, 466, 467, 468, 469, 470, 472, 474, 478, 479, 480, 482, 483, 486, 487, 488, 489, 491, 493, 504, 509, 512, 515, 520, 522, 526, 533, 535, 536, 542, 543, 544, 545, 559, 560, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 605, 608, 610, 611, 612, 624, 626, 630, 636, 638, 640, 642, 643, 647, 658, 663, 664, 675, 691, 696, 697, 706, 707, 715, 731, 740, 745, 746, 747, 750, 760, 761, 764, 765, 774, 777, 778, 788, 797, 802, 807, 810, 811, 812, 813, 814, 815, 816, 817, 836, 840, 841, 842, 843, 849, 850, 851, 855, 856, 857, 859, 875, 877, 880, 883, 885, 891, 895, 896, 901, 912, 922, 933, 934, 936, 944, 946, 947, 953, 955, 957, 958, 965, 967, 972, 978, 998, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "x": [4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 24, 25, 26, 27, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 217, 218, 219, 222, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 354, 360, 361, 362, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 385, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 465, 471, 472, 473, 476, 478, 479, 480, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 684, 688, 689, 702, 712, 719, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 765, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 899, 911, 912, 914, 919, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 946, 947, 948, 949, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 978, 983, 987, 988, 990, 991, 992, 995, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "drop": [4, 5, 70, 74, 85, 154, 166, 167, 169, 196, 214, 238, 266, 308, 311, 340, 374, 392, 396, 398, 443, 446, 545, 546, 547, 548, 673, 680, 766, 835, 849, 855, 947, 953, 957, 965, 967, 977, 998, 999, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "axi": [4, 5, 7, 11, 12, 13, 14, 17, 19, 25, 26, 34, 37, 39, 40, 47, 48, 50, 52, 53, 54, 60, 70, 71, 74, 81, 85, 90, 91, 94, 95, 96, 97, 98, 99, 105, 110, 112, 113, 116, 118, 125, 128, 132, 138, 142, 153, 154, 158, 161, 166, 177, 181, 183, 185, 188, 189, 190, 196, 200, 201, 205, 208, 210, 211, 213, 214, 218, 219, 222, 225, 229, 230, 233, 234, 241, 243, 245, 246, 252, 253, 257, 258, 263, 265, 266, 271, 274, 276, 281, 282, 283, 286, 287, 288, 295, 298, 302, 303, 315, 317, 319, 322, 325, 326, 329, 330, 331, 332, 333, 334, 336, 339, 340, 345, 346, 347, 348, 368, 375, 379, 389, 391, 399, 403, 418, 425, 443, 446, 509, 511, 514, 515, 517, 519, 521, 528, 563, 590, 609, 610, 663, 664, 679, 740, 756, 757, 758, 759, 780, 804, 845, 846, 853, 854, 856, 858, 860, 861, 862, 864, 865, 866, 889, 891, 895, 896, 914, 932, 938, 947, 957, 964, 967, 972, 989, 991, 1006, 1008, 1010], "holidai": [4, 167], "workingdai": [4, 167], "temp": [4, 167], "feel_temp": [4, 167], "humid": [4, 167, 964], "windspe": [4, 167], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 354, 355, 361, 362, 364, 365, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 750, 752, 753, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 895, 896, 901, 906, 907, 909, 911, 912, 914, 915, 916, 917, 919, 921, 922, 924, 925, 926, 927, 928, 931, 932, 938, 946, 947, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 975, 978, 979, 980, 983, 987, 988, 989, 990, 991, 992, 994, 995, 996], "spring": [4, 167], "fals": [4, 5, 7, 8, 10, 11, 13, 14, 16, 20, 21, 24, 26, 27, 32, 33, 39, 42, 44, 46, 47, 54, 63, 66, 69, 70, 71, 72, 78, 80, 91, 99, 101, 104, 105, 109, 116, 119, 122, 123, 132, 135, 149, 154, 155, 156, 157, 166, 167, 168, 169, 175, 176, 182, 196, 197, 201, 202, 204, 212, 214, 217, 220, 232, 234, 238, 241, 253, 254, 256, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 276, 280, 286, 289, 293, 294, 298, 299, 306, 308, 309, 310, 311, 316, 326, 328, 334, 335, 339, 340, 361, 367, 368, 371, 379, 389, 391, 392, 393, 395, 396, 398, 399, 400, 401, 403, 404, 414, 415, 416, 417, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 438, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 493, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 615, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 672, 673, 675, 676, 677, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 696, 703, 704, 705, 706, 707, 708, 715, 719, 720, 727, 728, 731, 733, 738, 740, 744, 745, 746, 751, 755, 759, 760, 761, 762, 764, 766, 769, 771, 772, 773, 774, 777, 778, 779, 780, 785, 788, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 872, 873, 875, 876, 877, 878, 879, 880, 881, 887, 888, 889, 893, 894, 895, 896, 906, 913, 919, 921, 924, 927, 928, 931, 938, 943, 944, 946, 947, 953, 957, 960, 967, 971, 972, 991, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "6": [4, 8, 9, 10, 11, 12, 16, 26, 31, 32, 33, 40, 44, 46, 49, 50, 52, 55, 56, 59, 60, 61, 62, 63, 64, 66, 70, 72, 73, 74, 77, 78, 79, 81, 89, 95, 97, 105, 110, 111, 122, 123, 124, 126, 128, 135, 141, 146, 149, 152, 154, 156, 157, 161, 162, 166, 167, 172, 175, 176, 177, 185, 189, 194, 196, 197, 198, 200, 210, 211, 214, 217, 218, 219, 221, 225, 228, 229, 232, 235, 236, 241, 242, 243, 244, 246, 247, 250, 251, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 271, 274, 278, 281, 289, 292, 294, 295, 298, 300, 302, 303, 306, 309, 310, 311, 314, 315, 318, 319, 326, 327, 329, 331, 334, 336, 340, 341, 347, 350, 361, 362, 364, 365, 371, 372, 378, 382, 383, 384, 389, 391, 392, 395, 396, 398, 399, 400, 401, 423, 427, 428, 429, 430, 431, 432, 441, 460, 461, 462, 463, 483, 508, 516, 518, 519, 525, 541, 547, 548, 571, 572, 589, 592, 593, 603, 605, 606, 608, 622, 623, 648, 667, 671, 699, 705, 715, 722, 723, 727, 728, 730, 746, 762, 765, 772, 773, 775, 776, 781, 783, 784, 786, 791, 792, 795, 800, 802, 811, 812, 813, 815, 816, 817, 824, 826, 827, 828, 843, 844, 846, 851, 854, 855, 859, 890, 912, 915, 917, 922, 946, 947, 951, 953, 954, 957, 967, 968, 971, 972, 975, 983, 987, 988, 990, 996, 999, 1000, 1001, 1006, 1011], "clear": [4, 16, 59, 71, 166, 167, 303, 362, 366, 367, 368, 377, 378, 379, 392, 397, 889, 890, 946, 951, 1009, 1010, 1011], "9": [4, 7, 9, 12, 24, 26, 27, 30, 31, 32, 42, 44, 50, 57, 61, 63, 73, 81, 84, 90, 98, 109, 118, 119, 120, 121, 122, 127, 129, 137, 138, 152, 156, 158, 162, 166, 167, 177, 178, 187, 196, 209, 210, 213, 214, 217, 220, 229, 230, 234, 238, 241, 242, 243, 244, 250, 257, 259, 263, 265, 274, 278, 280, 281, 284, 285, 286, 292, 293, 295, 298, 300, 301, 302, 311, 314, 315, 317, 318, 319, 326, 330, 336, 339, 350, 364, 365, 372, 378, 382, 383, 384, 389, 392, 393, 395, 398, 399, 419, 460, 461, 462, 463, 468, 498, 505, 512, 516, 517, 518, 525, 538, 545, 548, 561, 569, 585, 586, 605, 608, 612, 617, 625, 636, 639, 670, 687, 700, 703, 718, 725, 746, 772, 775, 777, 778, 792, 795, 800, 802, 805, 813, 814, 818, 819, 824, 827, 833, 834, 842, 848, 851, 912, 916, 946, 953, 957, 961, 967, 971, 972, 975, 983, 987, 992, 996, 999, 1000, 1001, 1003, 1012], "84": [4, 69, 143, 187, 214, 295, 300, 314, 350, 364, 398, 399, 765, 788, 952, 957, 967, 988], "14": [4, 11, 19, 22, 38, 49, 59, 61, 62, 65, 73, 80, 98, 100, 141, 167, 172, 173, 185, 187, 214, 217, 219, 223, 225, 230, 255, 261, 262, 270, 274, 290, 295, 301, 302, 311, 333, 336, 355, 362, 364, 378, 382, 391, 395, 476, 488, 531, 532, 563, 564, 613, 621, 670, 788, 792, 842, 950, 953, 957, 967, 972, 975, 983, 996, 998, 999, 1001, 1002, 1006, 1011], "395": 4, "81": [4, 19, 50, 238, 303, 314, 315, 391, 765, 774, 788, 957, 958, 960, 967], "0000": [4, 311], "02": [4, 12, 15, 35, 44, 50, 52, 57, 61, 63, 67, 75, 81, 82, 84, 95, 98, 107, 112, 118, 133, 151, 156, 159, 166, 170, 177, 214, 215, 225, 232, 239, 251, 257, 263, 272, 281, 292, 295, 298, 300, 303, 319, 322, 337, 340, 345, 361, 364, 371, 395, 421, 425, 575, 636, 654, 774, 788, 855, 870, 884, 953], "13": [4, 6, 10, 11, 19, 44, 73, 75, 100, 105, 118, 120, 121, 123, 161, 166, 172, 182, 205, 214, 215, 250, 257, 260, 262, 295, 298, 302, 303, 326, 362, 364, 367, 372, 378, 395, 403, 488, 491, 510, 511, 529, 530, 560, 613, 617, 711, 792, 820, 835, 842, 867, 868, 953, 957, 958, 963, 964, 967, 972, 975, 983, 996, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1010], "635": [4, 594], "80": [4, 6, 11, 16, 27, 66, 80, 101, 129, 138, 143, 167, 175, 232, 295, 300, 314, 329, 330, 331, 339, 346, 350, 362, 364, 367, 389, 395, 400, 424, 488, 519, 691, 774, 788, 869, 888, 946, 952, 953, 957, 964, 970, 973, 992], "75": [4, 6, 7, 10, 33, 44, 81, 113, 143, 156, 157, 162, 166, 172, 175, 178, 187, 203, 214, 238, 243, 244, 256, 265, 269, 281, 295, 298, 309, 336, 339, 350, 529, 636, 684, 690, 711, 716, 722, 730, 733, 769, 774, 854, 865, 872, 888, 957, 959, 967, 973, 976, 988, 1000], "17374": 4, "19": [4, 7, 9, 15, 154, 166, 221, 222, 223, 246, 302, 315, 340, 364, 370, 379, 391, 392, 399, 402, 424, 470, 494, 495, 496, 514, 518, 519, 525, 527, 528, 535, 536, 537, 538, 542, 543, 544, 560, 567, 626, 636, 637, 644, 645, 646, 649, 650, 652, 654, 656, 665, 685, 758, 762, 774, 788, 799, 804, 805, 807, 808, 822, 823, 842, 853, 873, 877, 880, 883, 884, 885, 886, 946, 957, 967, 975, 996, 998, 999, 1000, 1001, 1003, 1006], "misti": [4, 167], "10": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 19, 20, 25, 26, 27, 30, 31, 32, 34, 35, 37, 39, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 70, 71, 73, 77, 78, 79, 80, 81, 84, 85, 91, 97, 98, 99, 100, 101, 105, 106, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 126, 127, 130, 132, 133, 136, 138, 143, 146, 150, 151, 153, 155, 156, 158, 161, 162, 166, 167, 168, 169, 172, 175, 180, 186, 187, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 212, 213, 214, 218, 219, 225, 228, 229, 230, 231, 233, 234, 235, 237, 239, 244, 245, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 267, 270, 272, 274, 276, 281, 283, 292, 293, 294, 295, 298, 299, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 324, 326, 328, 329, 330, 331, 333, 334, 336, 339, 340, 341, 350, 354, 361, 362, 363, 364, 365, 367, 368, 371, 372, 377, 378, 379, 382, 383, 384, 388, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 418, 423, 426, 428, 430, 431, 432, 438, 439, 441, 454, 470, 471, 478, 479, 480, 482, 488, 489, 490, 491, 494, 498, 499, 502, 506, 509, 513, 514, 515, 516, 517, 519, 520, 522, 524, 526, 530, 533, 534, 535, 536, 539, 540, 542, 543, 544, 545, 546, 548, 560, 571, 572, 577, 578, 589, 595, 597, 605, 608, 610, 612, 613, 618, 620, 621, 622, 627, 637, 642, 643, 644, 645, 647, 648, 650, 651, 653, 654, 655, 656, 663, 664, 669, 670, 683, 693, 703, 719, 733, 746, 772, 773, 774, 775, 776, 777, 778, 785, 788, 789, 790, 791, 792, 794, 795, 800, 802, 804, 805, 811, 812, 813, 815, 816, 817, 823, 832, 833, 834, 842, 846, 849, 850, 853, 864, 872, 878, 881, 883, 884, 888, 912, 916, 923, 925, 927, 943, 946, 947, 953, 954, 955, 957, 958, 960, 961, 963, 964, 967, 971, 972, 975, 983, 987, 988, 990, 991, 992, 995, 996, 999, 1000, 1001, 1006, 1008, 1009, 1010, 1012, 1013], "66": [4, 91, 221, 364, 391, 510, 610, 690, 760, 761, 770, 855, 957, 969], "880": 4, "60": [4, 6, 16, 58, 72, 81, 98, 196, 208, 214, 217, 218, 238, 244, 264, 269, 295, 315, 329, 339, 361, 391, 395, 429, 436, 691, 774, 957, 967, 988, 998, 1001], "11": [4, 8, 9, 11, 14, 15, 19, 73, 80, 97, 139, 146, 152, 163, 166, 167, 196, 197, 198, 201, 219, 253, 261, 262, 268, 272, 280, 282, 302, 303, 308, 311, 325, 329, 339, 341, 361, 364, 365, 372, 378, 391, 394, 395, 398, 460, 461, 462, 463, 479, 495, 496, 590, 628, 634, 648, 693, 699, 700, 701, 775, 778, 792, 795, 801, 828, 884, 923, 953, 955, 967, 971, 972, 975, 983, 990, 992, 996, 1000, 1004, 1006, 1007, 1009, 1012], "0014": 4, "17375": 4, "20": [4, 7, 8, 14, 16, 25, 26, 27, 33, 34, 39, 40, 43, 46, 47, 50, 54, 60, 66, 77, 81, 91, 95, 101, 103, 105, 110, 112, 118, 119, 122, 125, 129, 130, 132, 138, 141, 142, 143, 155, 167, 168, 170, 178, 185, 186, 188, 192, 193, 195, 196, 197, 200, 205, 208, 209, 210, 211, 213, 220, 229, 234, 243, 245, 246, 256, 257, 259, 260, 262, 267, 268, 270, 280, 281, 282, 283, 284, 287, 295, 302, 307, 308, 309, 310, 314, 315, 318, 323, 325, 329, 331, 336, 337, 340, 341, 346, 347, 360, 364, 367, 368, 370, 371, 372, 382, 391, 398, 399, 421, 426, 428, 443, 444, 448, 450, 451, 457, 466, 467, 468, 469, 470, 472, 474, 475, 478, 480, 482, 483, 490, 493, 494, 501, 509, 514, 515, 520, 523, 524, 526, 530, 533, 534, 537, 538, 539, 540, 541, 547, 548, 560, 567, 570, 572, 575, 577, 607, 608, 623, 627, 636, 644, 645, 646, 654, 656, 674, 682, 686, 691, 694, 702, 703, 716, 733, 734, 744, 767, 768, 772, 773, 774, 788, 798, 799, 800, 803, 805, 808, 809, 810, 813, 814, 821, 822, 833, 834, 835, 836, 838, 840, 841, 849, 850, 851, 852, 870, 871, 873, 874, 879, 887, 893, 895, 896, 946, 953, 957, 960, 963, 964, 967, 970, 975, 980, 981, 984, 990, 994, 996, 998, 1004, 1007, 1010, 1012, 1013], "17376": 4, "21": [4, 15, 166, 185, 197, 214, 229, 246, 295, 300, 302, 364, 365, 368, 370, 382, 388, 398, 399, 421, 425, 453, 510, 539, 540, 541, 547, 548, 566, 567, 569, 605, 647, 665, 731, 774, 776, 788, 799, 842, 849, 851, 873, 889, 953, 958, 967, 975, 996, 998, 999, 1001, 1005, 1006, 1008], "17377": 4, "22": [4, 8, 42, 98, 129, 133, 164, 166, 167, 211, 213, 222, 246, 295, 298, 302, 305, 308, 312, 315, 341, 365, 367, 370, 371, 382, 383, 384, 388, 417, 427, 451, 466, 467, 473, 474, 482, 493, 509, 515, 520, 523, 524, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 572, 605, 606, 610, 612, 623, 625, 629, 631, 633, 636, 637, 639, 641, 643, 647, 666, 670, 682, 691, 734, 746, 755, 760, 761, 765, 774, 775, 779, 788, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 820, 822, 824, 826, 827, 828, 833, 834, 835, 837, 840, 856, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 906, 907, 957, 967, 975, 996, 998, 1001, 1006, 1009, 1011], "56": [4, 214, 229, 372, 691, 712, 957, 967, 998], "8": [4, 5, 6, 7, 8, 9, 12, 13, 25, 26, 27, 31, 32, 34, 37, 44, 45, 48, 50, 53, 59, 61, 63, 64, 69, 71, 73, 74, 80, 84, 89, 90, 91, 95, 96, 99, 100, 104, 106, 113, 115, 119, 121, 122, 124, 127, 130, 131, 135, 145, 146, 150, 152, 154, 155, 157, 158, 162, 166, 167, 169, 172, 175, 176, 181, 182, 187, 190, 196, 197, 203, 204, 206, 212, 214, 217, 218, 219, 221, 222, 226, 229, 230, 231, 232, 234, 236, 237, 238, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 266, 267, 274, 278, 280, 284, 288, 292, 294, 295, 298, 300, 301, 302, 303, 306, 311, 314, 315, 316, 318, 319, 323, 326, 330, 331, 333, 335, 339, 340, 341, 347, 350, 355, 361, 362, 364, 365, 367, 371, 372, 382, 383, 384, 389, 391, 395, 396, 398, 399, 400, 401, 419, 423, 424, 426, 428, 429, 431, 441, 448, 449, 450, 451, 452, 453, 454, 455, 461, 462, 463, 465, 468, 480, 481, 492, 509, 512, 516, 518, 521, 523, 525, 527, 528, 533, 534, 543, 548, 560, 566, 567, 568, 569, 606, 607, 626, 636, 648, 654, 667, 670, 671, 672, 673, 677, 680, 684, 685, 687, 693, 699, 704, 705, 706, 718, 722, 723, 727, 728, 730, 759, 760, 762, 765, 766, 770, 772, 775, 776, 781, 784, 791, 792, 795, 802, 805, 814, 816, 817, 823, 833, 834, 835, 841, 848, 877, 880, 910, 912, 916, 946, 947, 953, 954, 955, 957, 960, 965, 967, 971, 975, 981, 983, 987, 988, 989, 990, 991, 995, 996, 999, 1000, 1001, 1005, 1006, 1011, 1012], "9981": 4, "17378": 4, "23": [4, 6, 8, 15, 19, 26, 34, 42, 50, 91, 98, 159, 164, 238, 246, 295, 302, 303, 305, 308, 309, 312, 315, 364, 372, 382, 398, 412, 420, 426, 431, 433, 441, 444, 446, 447, 454, 460, 461, 462, 468, 470, 478, 479, 480, 482, 483, 488, 490, 492, 500, 502, 516, 517, 518, 521, 525, 532, 534, 536, 538, 539, 540, 543, 546, 547, 548, 585, 586, 589, 605, 608, 610, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 647, 648, 650, 651, 653, 656, 657, 658, 695, 707, 755, 802, 808, 809, 810, 819, 827, 834, 837, 849, 856, 863, 864, 873, 876, 878, 881, 884, 886, 893, 895, 896, 906, 907, 912, 957, 975, 996, 998, 999, 1005, 1006, 1007, 1010], "65": [4, 167, 196, 265, 391, 419, 480, 575, 718, 767, 768, 964, 988, 998, 999, 1000], "17379": [4, 1010], "row": [4, 19, 20, 21, 25, 27, 44, 59, 74, 89, 91, 118, 127, 130, 161, 196, 197, 198, 226, 229, 234, 235, 300, 348, 354, 362, 368, 375, 378, 379, 388, 391, 394, 399, 406, 422, 423, 426, 428, 429, 430, 432, 435, 436, 438, 443, 447, 466, 468, 469, 470, 471, 472, 473, 478, 479, 480, 482, 483, 488, 489, 491, 512, 520, 526, 529, 568, 569, 598, 610, 621, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 670, 674, 675, 688, 696, 697, 702, 735, 736, 740, 743, 745, 746, 747, 748, 750, 751, 753, 755, 756, 757, 758, 772, 773, 805, 811, 812, 813, 814, 815, 821, 824, 825, 826, 827, 828, 831, 842, 846, 848, 851, 862, 865, 866, 869, 873, 891, 895, 896, 912, 928, 931, 935, 937, 939, 940, 944, 946, 947, 951, 953, 955, 957, 958, 960, 967, 968, 971, 972, 978, 1005, 1006, 1007, 1008, 1013], "onli": [4, 7, 11, 13, 14, 24, 25, 26, 27, 30, 33, 37, 39, 40, 45, 49, 53, 57, 65, 69, 70, 71, 73, 74, 80, 89, 98, 99, 106, 110, 112, 116, 117, 118, 119, 121, 128, 129, 141, 142, 143, 146, 149, 151, 154, 156, 158, 162, 164, 166, 167, 172, 174, 179, 185, 192, 196, 197, 199, 202, 204, 205, 214, 215, 217, 218, 225, 227, 229, 231, 235, 241, 242, 243, 246, 247, 252, 254, 256, 258, 259, 262, 263, 264, 265, 267, 268, 276, 279, 282, 284, 287, 289, 294, 298, 299, 308, 309, 314, 315, 317, 322, 323, 326, 331, 334, 335, 339, 340, 341, 344, 345, 348, 350, 354, 355, 356, 360, 361, 362, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 379, 380, 382, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 467, 468, 469, 470, 472, 474, 475, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 494, 497, 501, 502, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 677, 685, 687, 691, 703, 706, 707, 711, 713, 714, 715, 718, 719, 720, 733, 735, 737, 751, 755, 756, 757, 758, 760, 761, 764, 765, 767, 768, 769, 772, 773, 774, 776, 777, 778, 780, 788, 792, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 893, 895, 896, 899, 901, 904, 912, 914, 917, 919, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 977, 978, 981, 990, 991, 992, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013], "present": [4, 5, 49, 91, 95, 103, 115, 122, 125, 145, 155, 158, 175, 178, 185, 196, 225, 228, 246, 254, 259, 262, 265, 266, 276, 298, 301, 340, 364, 365, 368, 371, 377, 379, 391, 393, 396, 398, 399, 409, 410, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 447, 448, 449, 450, 451, 452, 453, 454, 455, 467, 468, 469, 470, 474, 478, 479, 480, 481, 482, 483, 488, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 527, 528, 541, 544, 547, 548, 559, 560, 561, 566, 567, 569, 595, 605, 606, 607, 608, 628, 632, 655, 666, 667, 668, 669, 690, 706, 707, 715, 719, 746, 760, 761, 764, 772, 773, 774, 777, 778, 786, 788, 800, 818, 819, 820, 822, 824, 826, 827, 828, 835, 840, 848, 849, 850, 851, 852, 854, 867, 868, 879, 887, 889, 890, 912, 941, 956, 957, 958, 959, 964, 967, 976, 978, 1001, 1006, 1008, 1009, 1010, 1012], "date": [4, 69, 154, 167, 362, 364, 367, 370, 380, 392, 978], "datetim": [4, 17, 154, 167], "http": [4, 6, 7, 8, 12, 17, 24, 50, 70, 123, 129, 146, 158, 162, 172, 196, 204, 212, 214, 222, 226, 234, 274, 276, 294, 361, 362, 364, 365, 367, 370, 371, 372, 374, 377, 379, 382, 391, 395, 400, 422, 428, 431, 441, 465, 470, 474, 478, 480, 486, 487, 488, 508, 509, 512, 514, 515, 519, 573, 614, 619, 622, 627, 636, 642, 644, 645, 646, 649, 654, 657, 660, 661, 663, 664, 669, 670, 673, 683, 699, 700, 701, 735, 736, 746, 811, 813, 814, 815, 818, 819, 824, 825, 826, 827, 832, 854, 868, 869, 870, 883, 884, 953, 955, 957, 960, 970, 973, 980, 981, 988, 1003, 1008], "pydata": [4, 976, 981], "org": [4, 12, 13, 14, 17, 24, 26, 32, 37, 46, 48, 60, 65, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 158, 166, 167, 168, 172, 177, 187, 188, 196, 204, 212, 214, 218, 226, 227, 228, 230, 235, 236, 237, 238, 246, 254, 256, 257, 259, 263, 268, 274, 294, 295, 307, 308, 310, 311, 314, 315, 316, 319, 339, 340, 341, 348, 355, 360, 365, 367, 369, 372, 374, 380, 382, 395, 573, 614, 646, 649, 654, 673, 683, 746, 818, 819, 824, 825, 826, 827, 854, 869, 883, 884, 953, 957, 973, 975, 994, 1006, 1010], "stabl": [4, 158, 166, 190, 194, 198, 307, 340, 365, 367, 370, 372, 375, 379, 382, 395, 399, 403, 450, 451, 457, 511, 557, 633, 650, 652, 665, 670, 701, 729, 911, 912, 953, 959, 960, 967, 978, 998, 999, 1004, 1009, 1011], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 26, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 146, 154, 158, 166, 167, 168, 172, 177, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 362, 364, 367, 370, 372, 374, 392, 395, 399, 465, 486, 487, 636, 811, 815, 908, 955, 978, 1009, 1010, 1011, 1012, 1013], "compon": [4, 5, 17, 44, 57, 61, 69, 72, 83, 84, 86, 93, 96, 97, 99, 100, 102, 103, 104, 106, 107, 127, 154, 164, 217, 229, 230, 232, 241, 242, 245, 246, 247, 255, 257, 277, 290, 295, 303, 308, 354, 359, 362, 367, 368, 372, 375, 377, 390, 391, 392, 394, 399, 401, 403, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 442, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 480, 482, 493, 499, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 673, 706, 707, 715, 760, 761, 764, 772, 773, 774, 777, 778, 788, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 911, 912, 949, 954, 967, 969, 972, 977, 978, 979, 981, 986, 992, 993, 994, 998, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "now": [4, 5, 7, 17, 53, 56, 70, 85, 100, 109, 111, 115, 116, 118, 119, 122, 123, 129, 132, 146, 149, 154, 155, 156, 162, 166, 167, 168, 172, 175, 177, 182, 184, 185, 197, 198, 221, 230, 252, 256, 259, 267, 268, 307, 308, 310, 311, 316, 326, 334, 339, 340, 341, 350, 354, 356, 362, 367, 368, 372, 377, 378, 379, 388, 395, 396, 398, 399, 403, 471, 486, 487, 490, 514, 527, 556, 557, 558, 560, 605, 608, 627, 631, 636, 641, 662, 703, 733, 772, 773, 777, 778, 808, 823, 932, 946, 947, 953, 957, 963, 966, 967, 972, 973, 976, 978, 983, 990, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "introspect": [4, 6, 70, 372, 537, 538, 566, 567, 569, 967, 988], "value_count": [4, 167], "11413": [4, 167], "4544": [4, 167], "rain": [4, 167, 953], "1419": [4, 167], "heavy_rain": [4, 167], "name": [4, 6, 7, 10, 11, 12, 17, 19, 25, 27, 30, 31, 37, 44, 45, 57, 61, 70, 72, 74, 81, 94, 96, 102, 113, 114, 115, 119, 120, 122, 129, 166, 167, 168, 185, 194, 196, 198, 202, 203, 211, 213, 214, 217, 218, 225, 231, 233, 234, 238, 243, 251, 253, 254, 257, 259, 260, 263, 265, 266, 276, 284, 285, 292, 293, 300, 302, 310, 311, 318, 331, 339, 340, 341, 355, 356, 361, 362, 365, 367, 368, 370, 371, 373, 374, 379, 382, 385, 388, 391, 392, 395, 398, 399, 401, 405, 407, 411, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 675, 676, 677, 678, 680, 686, 687, 691, 709, 710, 756, 757, 772, 773, 774, 777, 778, 780, 786, 788, 799, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 894, 895, 896, 899, 903, 904, 905, 907, 920, 922, 927, 941, 945, 946, 951, 953, 957, 958, 964, 965, 967, 973, 978, 987, 988, 990, 992, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "dtype": [4, 8, 10, 11, 17, 48, 49, 53, 64, 69, 70, 121, 123, 124, 125, 150, 151, 152, 162, 166, 167, 198, 214, 234, 238, 241, 254, 260, 264, 276, 283, 289, 309, 310, 315, 348, 361, 362, 367, 368, 377, 379, 392, 395, 406, 409, 422, 423, 426, 427, 428, 429, 430, 432, 443, 445, 446, 448, 451, 453, 466, 467, 468, 469, 474, 475, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 492, 500, 520, 535, 536, 537, 538, 541, 542, 543, 544, 559, 560, 563, 564, 566, 567, 569, 571, 572, 580, 584, 605, 606, 607, 608, 610, 611, 618, 619, 622, 623, 624, 630, 634, 635, 638, 639, 640, 641, 642, 643, 649, 651, 653, 675, 692, 693, 715, 718, 763, 780, 797, 800, 812, 816, 817, 819, 827, 841, 847, 849, 850, 856, 869, 877, 878, 879, 880, 881, 883, 884, 885, 886, 892, 893, 895, 896, 924, 932, 933, 934, 935, 938, 944, 947, 967, 970, 972, 983, 999, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "int64": [4, 13, 54, 70, 166, 167, 348, 379, 399, 409, 422, 427, 429, 566, 618, 692, 693, 812, 1006, 1009, 1011], "cannot": [4, 40, 55, 74, 81, 95, 100, 117, 166, 167, 196, 214, 298, 326, 356, 366, 370, 372, 379, 380, 391, 392, 393, 395, 396, 398, 399, 401, 444, 499, 516, 517, 518, 521, 525, 588, 591, 592, 593, 595, 597, 598, 600, 601, 603, 629, 633, 660, 670, 689, 695, 755, 777, 778, 823, 824, 826, 827, 828, 836, 837, 846, 847, 857, 893, 895, 896, 946, 947, 951, 953, 954, 958, 963, 967, 972, 973, 978, 981, 987, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "train": [4, 5, 6, 7, 8, 10, 11, 16, 24, 26, 27, 30, 31, 32, 33, 55, 57, 63, 69, 70, 74, 84, 85, 89, 95, 98, 100, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 135, 143, 149, 150, 151, 154, 155, 156, 157, 158, 164, 166, 167, 168, 169, 172, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 196, 197, 198, 200, 203, 204, 205, 208, 210, 211, 214, 225, 228, 230, 233, 234, 243, 245, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 276, 279, 282, 283, 284, 285, 287, 289, 292, 293, 294, 298, 300, 302, 303, 306, 309, 313, 314, 315, 318, 319, 320, 322, 325, 333, 334, 341, 343, 346, 347, 349, 350, 354, 355, 356, 359, 364, 368, 371, 377, 378, 379, 385, 387, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 403, 417, 420, 421, 423, 424, 426, 428, 430, 431, 432, 433, 438, 444, 448, 449, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 471, 475, 476, 478, 482, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 605, 606, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 669, 670, 674, 681, 718, 765, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 841, 842, 845, 846, 849, 850, 854, 855, 856, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 931, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 967, 971, 972, 973, 977, 978, 979, 981, 984, 987, 988, 994, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "learn": [4, 6, 7, 8, 9, 10, 16, 17, 25, 26, 27, 31, 32, 34, 36, 37, 49, 55, 66, 67, 69, 74, 80, 81, 84, 93, 100, 105, 107, 109, 112, 113, 114, 115, 117, 118, 124, 126, 127, 128, 129, 135, 136, 137, 138, 143, 146, 149, 152, 153, 154, 155, 157, 158, 161, 162, 168, 171, 173, 182, 184, 185, 188, 205, 210, 214, 221, 223, 224, 225, 230, 232, 237, 238, 249, 253, 255, 256, 259, 261, 262, 264, 270, 272, 276, 280, 281, 282, 283, 284, 289, 291, 294, 295, 296, 298, 299, 303, 305, 312, 313, 317, 319, 320, 325, 331, 332, 334, 339, 340, 341, 344, 345, 346, 347, 350, 355, 357, 359, 360, 361, 362, 364, 366, 369, 372, 373, 374, 375, 378, 379, 381, 385, 386, 387, 388, 389, 391, 392, 393, 395, 397, 399, 400, 401, 405, 406, 408, 409, 410, 412, 413, 417, 418, 419, 422, 423, 426, 428, 429, 436, 438, 443, 444, 446, 447, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 486, 487, 488, 490, 492, 493, 494, 495, 496, 498, 500, 502, 503, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 549, 559, 560, 562, 563, 564, 565, 566, 568, 569, 571, 572, 577, 580, 581, 588, 589, 592, 597, 600, 604, 606, 608, 612, 618, 619, 621, 622, 623, 624, 626, 630, 636, 646, 647, 654, 655, 656, 658, 666, 667, 668, 669, 670, 674, 678, 679, 686, 691, 695, 696, 699, 700, 701, 703, 712, 718, 720, 725, 733, 755, 756, 757, 765, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 818, 820, 825, 832, 833, 834, 835, 837, 841, 843, 846, 848, 849, 850, 851, 854, 855, 856, 859, 867, 868, 870, 871, 872, 873, 875, 876, 877, 880, 883, 884, 885, 886, 898, 906, 907, 946, 947, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 971, 972, 973, 974, 976, 980, 985, 987, 988, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "simplifi": [4, 70, 184, 326, 366, 371, 394, 493, 540, 835, 836, 957, 959, 967], "represent": [4, 12, 17, 20, 26, 53, 70, 95, 98, 109, 115, 116, 117, 125, 126, 127, 129, 132, 143, 154, 166, 167, 168, 172, 177, 217, 218, 219, 226, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 286, 295, 308, 310, 311, 316, 340, 341, 348, 350, 359, 361, 368, 379, 385, 391, 392, 396, 397, 398, 442, 509, 513, 515, 518, 520, 526, 544, 566, 568, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 608, 621, 624, 630, 636, 637, 638, 640, 644, 646, 654, 655, 656, 746, 772, 773, 780, 832, 845, 849, 850, 854, 856, 868, 875, 887, 889, 892, 908, 949, 954, 956, 958, 960, 961, 962, 964, 967, 972, 978, 983, 984, 986, 990, 992, 998, 999, 1002, 1009, 1010, 1011, 1012, 1013], "collaps": [4, 167, 298, 326, 377], "those": [4, 7, 12, 17, 19, 59, 70, 111, 122, 146, 158, 167, 168, 169, 196, 198, 214, 222, 229, 233, 234, 247, 250, 256, 259, 262, 293, 298, 303, 323, 326, 339, 340, 341, 354, 355, 361, 367, 368, 370, 371, 372, 373, 377, 379, 382, 388, 389, 391, 395, 396, 398, 399, 401, 427, 429, 440, 443, 447, 472, 473, 474, 481, 535, 536, 542, 543, 547, 548, 559, 670, 675, 690, 696, 713, 774, 777, 778, 786, 788, 795, 818, 819, 820, 822, 824, 825, 826, 827, 828, 877, 880, 883, 884, 885, 886, 946, 949, 953, 956, 957, 959, 960, 961, 964, 967, 973, 976, 977, 981, 983, 992, 998, 1001, 1004, 1005, 1006, 1011, 1012, 1013], "replac": [4, 25, 79, 99, 149, 156, 161, 167, 182, 197, 234, 259, 276, 300, 308, 328, 365, 367, 368, 370, 372, 375, 379, 385, 392, 395, 398, 399, 421, 425, 481, 493, 533, 534, 541, 560, 566, 567, 568, 569, 585, 586, 608, 612, 617, 619, 705, 762, 786, 788, 835, 836, 839, 858, 871, 878, 926, 928, 931, 946, 947, 953, 957, 967, 972, 973, 977, 978, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013], "to_replac": [4, 167], "valu": [4, 5, 7, 9, 11, 12, 13, 16, 17, 19, 21, 26, 27, 32, 37, 40, 42, 44, 46, 53, 59, 60, 61, 65, 70, 72, 74, 77, 79, 81, 95, 98, 106, 112, 114, 115, 116, 117, 119, 122, 123, 125, 126, 128, 129, 141, 142, 145, 146, 149, 152, 153, 155, 157, 158, 163, 166, 167, 168, 169, 172, 175, 176, 178, 182, 184, 185, 186, 187, 189, 194, 196, 197, 198, 200, 202, 211, 214, 216, 220, 223, 225, 226, 227, 228, 229, 230, 231, 234, 237, 238, 241, 247, 250, 252, 254, 256, 257, 259, 261, 262, 263, 265, 267, 268, 269, 271, 289, 292, 293, 295, 298, 299, 300, 301, 302, 308, 317, 326, 331, 334, 339, 340, 341, 344, 348, 350, 354, 355, 356, 357, 359, 360, 361, 362, 364, 368, 369, 371, 372, 373, 375, 377, 378, 379, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 403, 405, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 468, 469, 471, 474, 475, 476, 479, 486, 487, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 746, 748, 751, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 785, 786, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 892, 893, 894, 895, 896, 899, 900, 901, 902, 904, 912, 914, 919, 921, 922, 923, 925, 933, 934, 935, 946, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 961, 962, 963, 964, 968, 970, 971, 972, 973, 981, 983, 988, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "inplac": [4, 167, 214, 268, 433, 460, 461, 462, 463, 831, 839, 842, 845, 846, 848, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 865, 866, 930, 933, 934, 935, 939, 940, 1007], "1422": 4, "expect": [4, 5, 10, 24, 37, 44, 53, 85, 91, 100, 113, 115, 116, 119, 122, 143, 149, 155, 164, 165, 168, 170, 182, 187, 196, 197, 198, 204, 214, 229, 235, 242, 243, 246, 247, 263, 339, 340, 350, 354, 355, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 387, 389, 391, 392, 393, 395, 398, 399, 400, 412, 443, 444, 446, 447, 448, 460, 461, 462, 474, 501, 510, 514, 516, 519, 530, 532, 533, 534, 536, 538, 540, 541, 543, 545, 546, 548, 550, 563, 564, 566, 567, 569, 573, 575, 584, 589, 605, 610, 611, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 652, 653, 656, 657, 673, 682, 683, 694, 712, 765, 769, 809, 810, 811, 812, 813, 814, 815, 819, 822, 827, 834, 837, 842, 849, 850, 853, 856, 865, 866, 873, 875, 876, 877, 878, 879, 880, 881, 884, 886, 922, 946, 953, 957, 959, 963, 967, 971, 972, 973, 980, 988, 991, 992, 994, 998, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "balanc": [4, 6, 53, 65, 164, 201, 249, 259, 272, 298, 356, 377, 379, 395, 396, 398, 480, 493, 512, 518, 519, 525, 535, 539, 542, 618, 636, 637, 644, 646, 652, 653, 654, 681, 686, 706, 720, 759, 764, 774, 775, 792, 836, 875, 877, 880, 883, 885, 900, 901, 946, 972, 973, 988, 998, 1000, 1003, 1004, 1007, 1008, 1012], "fall": [4, 122, 156, 255, 256, 367, 368, 390, 391, 399, 414, 426, 486, 487, 704, 705, 769, 853, 864, 956, 957, 967, 983, 991, 1007], "4496": 4, "4409": 4, "4242": 4, "winter": 4, "4232": 4, "order": [4, 13, 24, 47, 63, 64, 71, 77, 88, 105, 117, 118, 119, 123, 138, 154, 166, 169, 172, 185, 189, 192, 196, 197, 202, 210, 214, 219, 229, 243, 251, 254, 256, 263, 274, 295, 298, 303, 308, 309, 334, 339, 341, 350, 354, 355, 362, 367, 368, 370, 371, 372, 375, 379, 382, 385, 391, 392, 393, 395, 396, 397, 398, 399, 401, 403, 420, 423, 426, 428, 429, 434, 435, 436, 438, 443, 466, 467, 468, 473, 475, 493, 512, 513, 517, 518, 519, 521, 525, 529, 531, 533, 534, 535, 537, 541, 542, 545, 559, 566, 569, 571, 572, 575, 584, 585, 586, 588, 600, 605, 609, 618, 636, 637, 643, 654, 663, 664, 666, 667, 671, 675, 677, 680, 682, 690, 691, 696, 703, 706, 707, 715, 717, 718, 731, 733, 755, 760, 761, 764, 765, 766, 769, 774, 775, 777, 778, 779, 781, 785, 788, 792, 793, 797, 804, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 826, 833, 836, 847, 849, 850, 851, 855, 856, 859, 860, 861, 863, 864, 865, 866, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 895, 896, 901, 912, 923, 926, 947, 953, 954, 957, 958, 960, 961, 967, 970, 971, 972, 973, 978, 987, 989, 990, 992, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "sensit": [4, 44, 79, 80, 113, 122, 167, 198, 199, 225, 298, 326, 355, 356, 380, 393, 398, 431, 441, 670, 690, 691, 765, 952, 953, 954, 956, 957, 961, 963, 971, 972, 983, 991, 1002], "splitter": [4, 379, 395, 417, 451, 545, 546, 572, 580, 625, 629, 631, 633, 639, 641, 643, 651, 653, 774, 776, 777, 778, 779, 780, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 801, 803, 807, 810, 883, 884, 885, 886, 978, 1004, 1005, 1006, 1007], "evalu": [4, 5, 6, 10, 11, 24, 32, 36, 49, 67, 70, 71, 98, 109, 116, 117, 119, 120, 122, 142, 152, 164, 169, 172, 176, 185, 198, 203, 214, 224, 239, 249, 250, 253, 254, 256, 259, 261, 262, 263, 265, 267, 268, 270, 272, 274, 285, 289, 308, 326, 339, 350, 357, 360, 362, 368, 372, 379, 381, 390, 392, 399, 400, 401, 426, 428, 466, 469, 470, 471, 474, 487, 498, 514, 529, 539, 540, 541, 545, 546, 569, 572, 580, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 609, 610, 611, 612, 625, 631, 637, 651, 653, 675, 677, 679, 680, 681, 682, 683, 689, 691, 692, 693, 695, 696, 703, 704, 713, 714, 719, 731, 732, 733, 734, 763, 770, 772, 773, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 807, 813, 816, 817, 822, 834, 836, 843, 860, 861, 863, 864, 865, 866, 877, 880, 883, 898, 906, 931, 949, 953, 955, 959, 960, 963, 964, 965, 968, 971, 973, 977, 981, 983, 984, 987, 988, 990, 993, 994, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "forecast": [4, 256, 389, 957, 977], "realist": [4, 8, 258, 265, 266, 323, 957], "gap": [4, 339, 362, 395, 450, 451, 457, 566, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 795, 883, 884, 885, 886, 953, 954, 1006, 1010, 1012], "between": [4, 5, 8, 9, 11, 12, 37, 38, 39, 40, 42, 43, 53, 59, 60, 65, 84, 98, 100, 104, 109, 113, 119, 122, 141, 149, 154, 155, 157, 164, 166, 167, 168, 175, 182, 187, 191, 192, 196, 197, 198, 200, 201, 204, 214, 217, 225, 230, 234, 249, 252, 255, 256, 257, 258, 259, 261, 262, 263, 265, 272, 278, 282, 283, 285, 286, 298, 309, 317, 326, 334, 339, 340, 341, 348, 350, 354, 355, 362, 367, 368, 375, 377, 378, 379, 385, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 411, 420, 421, 424, 425, 429, 431, 432, 433, 435, 436, 437, 442, 448, 449, 450, 451, 452, 453, 454, 455, 469, 471, 472, 473, 474, 475, 476, 480, 492, 493, 499, 502, 505, 512, 514, 515, 516, 517, 518, 519, 524, 525, 527, 531, 532, 537, 538, 540, 541, 562, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 598, 605, 610, 611, 612, 617, 620, 623, 624, 625, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 648, 654, 656, 657, 659, 662, 666, 668, 670, 672, 673, 674, 677, 679, 681, 682, 683, 685, 687, 688, 692, 693, 694, 695, 697, 701, 702, 703, 706, 707, 708, 711, 713, 714, 720, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 767, 768, 770, 771, 772, 773, 774, 776, 777, 783, 791, 792, 794, 801, 802, 804, 806, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 833, 834, 840, 843, 844, 846, 847, 849, 850, 853, 854, 855, 861, 864, 865, 869, 880, 883, 884, 885, 886, 888, 909, 926, 946, 949, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 974, 978, 990, 991, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "side": [4, 16, 27, 58, 122, 189, 214, 219, 228, 298, 339, 350, 362, 377, 389, 392, 395, 396, 399, 493, 953, 954, 957, 959, 972, 1007], "split": [4, 5, 6, 11, 14, 17, 24, 26, 31, 32, 69, 100, 109, 115, 116, 118, 121, 122, 123, 124, 125, 135, 142, 166, 180, 191, 192, 196, 199, 204, 214, 226, 242, 243, 250, 251, 254, 256, 261, 263, 266, 285, 292, 294, 299, 300, 303, 310, 317, 326, 339, 341, 348, 362, 373, 378, 379, 382, 389, 391, 396, 398, 399, 417, 422, 423, 451, 452, 458, 475, 509, 515, 517, 520, 524, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 566, 567, 569, 572, 580, 625, 629, 631, 633, 639, 641, 643, 651, 653, 673, 682, 683, 695, 708, 714, 734, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 810, 816, 817, 833, 834, 860, 861, 863, 864, 865, 866, 883, 884, 885, 886, 928, 946, 953, 954, 960, 963, 964, 965, 971, 973, 978, 983, 987, 988, 990, 991, 992, 994, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "limit": [4, 8, 17, 37, 42, 56, 65, 81, 116, 117, 123, 129, 161, 166, 167, 168, 175, 196, 197, 213, 229, 263, 300, 309, 341, 350, 355, 368, 371, 377, 379, 380, 391, 394, 396, 400, 442, 447, 537, 538, 539, 540, 610, 628, 636, 637, 657, 660, 661, 666, 755, 795, 824, 826, 827, 828, 849, 873, 877, 878, 879, 880, 881, 925, 946, 953, 954, 956, 957, 964, 965, 967, 978, 983, 994, 1006, 1008, 1011, 1012], "cv": [4, 12, 24, 25, 26, 54, 70, 71, 72, 73, 77, 103, 119, 121, 135, 136, 145, 161, 162, 166, 185, 195, 198, 252, 254, 255, 256, 257, 258, 259, 261, 262, 266, 270, 311, 326, 334, 378, 379, 389, 395, 398, 417, 451, 545, 546, 572, 580, 625, 629, 631, 633, 637, 639, 641, 643, 651, 653, 774, 776, 777, 778, 779, 780, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 800, 801, 803, 807, 810, 883, 884, 946, 949, 952, 953, 957, 978, 987, 988, 992, 1000, 1004, 1005, 1006, 1007, 1008, 1010, 1012], "fold": [4, 66, 73, 77, 118, 121, 135, 145, 166, 185, 243, 251, 252, 254, 256, 257, 259, 266, 317, 334, 350, 362, 369, 370, 378, 379, 391, 400, 417, 451, 471, 514, 545, 546, 572, 580, 625, 629, 631, 633, 637, 639, 641, 643, 651, 653, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 807, 810, 877, 880, 946, 953, 957, 972, 987, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010], "1000": [4, 7, 8, 14, 26, 31, 37, 43, 50, 71, 74, 84, 94, 105, 113, 115, 116, 121, 122, 126, 131, 137, 141, 155, 172, 182, 188, 199, 219, 228, 229, 231, 241, 245, 254, 256, 262, 265, 267, 281, 283, 299, 302, 307, 308, 310, 327, 328, 335, 339, 340, 371, 372, 378, 389, 399, 417, 452, 458, 509, 510, 515, 520, 521, 523, 524, 526, 531, 542, 610, 624, 625, 629, 630, 631, 633, 638, 639, 640, 641, 644, 645, 646, 650, 654, 655, 656, 665, 670, 676, 679, 741, 853, 864, 870, 875, 876, 946, 950, 972, 987, 990, 1005, 1007], "datapoint": [4, 42, 52, 55, 153, 156, 179, 230, 231, 251, 256, 274, 332, 401, 480, 535, 536, 537, 538, 542, 543, 544, 589, 883, 884, 885, 886, 950], "should": [4, 5, 6, 8, 9, 14, 17, 25, 27, 31, 37, 53, 113, 119, 122, 146, 161, 166, 172, 175, 176, 196, 198, 214, 225, 230, 231, 256, 259, 262, 263, 265, 276, 299, 300, 316, 326, 334, 340, 350, 354, 355, 356, 362, 365, 366, 367, 368, 370, 371, 373, 374, 375, 378, 379, 382, 385, 389, 391, 393, 395, 396, 398, 399, 400, 401, 402, 403, 405, 420, 422, 423, 424, 425, 426, 428, 429, 431, 433, 436, 437, 438, 441, 442, 443, 446, 453, 460, 461, 462, 463, 465, 474, 481, 486, 487, 494, 499, 501, 502, 505, 510, 511, 514, 527, 535, 536, 539, 540, 541, 542, 543, 545, 559, 560, 563, 564, 566, 567, 569, 571, 572, 575, 580, 585, 586, 598, 605, 606, 607, 609, 610, 611, 613, 616, 617, 618, 621, 623, 624, 625, 626, 627, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 662, 665, 667, 668, 669, 670, 671, 672, 673, 674, 679, 687, 704, 705, 748, 751, 755, 756, 757, 758, 759, 762, 765, 766, 776, 782, 784, 791, 792, 793, 794, 798, 802, 804, 805, 816, 817, 818, 819, 820, 821, 822, 824, 826, 833, 834, 839, 840, 843, 844, 845, 847, 848, 849, 850, 858, 862, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 895, 899, 901, 904, 912, 919, 926, 928, 931, 932, 933, 934, 935, 936, 937, 938, 946, 947, 951, 952, 953, 954, 957, 958, 960, 962, 963, 964, 967, 970, 971, 972, 973, 978, 980, 981, 988, 992, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "enough": [4, 37, 44, 61, 118, 149, 161, 167, 168, 185, 196, 230, 232, 302, 339, 341, 350, 365, 367, 370, 372, 380, 389, 390, 391, 393, 395, 398, 545, 546, 567, 774, 777, 778, 780, 788, 800, 912, 946, 951, 954, 956, 963, 967, 972, 977, 981, 1004], "quantifi": [4, 37, 49, 77, 154, 214, 263, 368, 379, 386, 390, 551, 839, 952, 965, 967, 994], "repres": [4, 8, 10, 12, 14, 26, 32, 44, 48, 49, 50, 53, 90, 95, 97, 104, 105, 116, 117, 125, 166, 175, 183, 188, 198, 200, 201, 205, 219, 221, 230, 234, 244, 250, 253, 256, 259, 263, 281, 300, 339, 341, 348, 356, 359, 362, 364, 368, 377, 378, 379, 380, 385, 389, 391, 395, 396, 397, 398, 399, 400, 418, 422, 431, 442, 449, 450, 451, 452, 453, 454, 455, 466, 468, 469, 470, 472, 474, 476, 478, 479, 480, 482, 483, 488, 512, 514, 516, 518, 519, 525, 533, 541, 559, 566, 569, 607, 610, 612, 618, 654, 656, 675, 679, 720, 766, 774, 776, 787, 788, 791, 794, 799, 801, 802, 805, 806, 812, 818, 819, 820, 822, 823, 824, 826, 827, 828, 833, 834, 843, 849, 872, 895, 896, 916, 947, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 967, 968, 970, 971, 973, 983, 988, 989, 991, 1004, 1006, 1009, 1010, 1013], "bit": [4, 48, 53, 77, 98, 194, 198, 298, 326, 340, 350, 354, 362, 365, 398, 399, 560, 567, 636, 806, 895, 896, 954, 958, 976, 985, 992, 998, 1001, 1004, 1006, 1007, 1010, 1011, 1012], "less": [4, 5, 8, 52, 53, 59, 91, 95, 98, 106, 116, 122, 123, 149, 156, 166, 178, 196, 198, 200, 231, 242, 244, 256, 257, 265, 267, 270, 299, 302, 303, 308, 310, 339, 340, 350, 354, 356, 362, 367, 368, 377, 379, 391, 395, 396, 398, 399, 403, 419, 421, 423, 425, 427, 429, 431, 436, 439, 441, 442, 460, 461, 462, 474, 493, 509, 513, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 568, 574, 597, 605, 612, 625, 639, 654, 656, 670, 679, 699, 700, 701, 702, 713, 729, 741, 756, 757, 762, 770, 772, 773, 776, 777, 778, 784, 800, 811, 812, 813, 815, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 839, 851, 853, 854, 856, 858, 864, 865, 875, 876, 883, 884, 885, 886, 901, 915, 946, 947, 949, 950, 951, 954, 956, 957, 960, 962, 967, 971, 972, 973, 977, 990, 992, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1013], "half": [4, 24, 98, 230, 233, 254, 256, 268, 362, 363, 396, 442, 500, 540, 571, 575, 580, 747, 835, 843, 957, 960, 973], "contigu": [4, 21, 368, 377, 388, 395, 399, 423, 426, 428, 438, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 758, 793, 816, 817, 875, 877, 878, 879, 880, 881, 972, 1001, 1008, 1012], "model_select": [4, 5, 6, 7, 10, 24, 25, 27, 31, 32, 54, 70, 71, 72, 73, 74, 77, 85, 100, 103, 109, 115, 116, 119, 120, 121, 122, 123, 124, 125, 128, 129, 135, 136, 142, 143, 145, 149, 161, 162, 164, 166, 168, 169, 172, 191, 196, 198, 203, 204, 211, 212, 214, 226, 231, 236, 237, 238, 243, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 278, 280, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 311, 317, 318, 326, 329, 334, 344, 348, 350, 357, 367, 368, 371, 378, 379, 392, 395, 398, 417, 418, 536, 538, 545, 546, 556, 637, 675, 676, 678, 680, 719, 804, 807, 825, 833, 834, 836, 883, 884, 885, 886, 946, 947, 952, 957, 959, 960, 965, 967, 972, 978, 987, 988, 992, 995, 1004, 1005], "timeseriessplit": [4, 251, 395, 1004, 1005, 1010], "ts_cv": 4, "n_split": [4, 110, 121, 161, 162, 166, 243, 251, 256, 258, 261, 266, 317, 326, 334, 350, 395, 775, 776, 777, 778, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 799, 987, 1004, 1006], "5": [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 135, 136, 138, 141, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 204, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 236, 238, 241, 242, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 280, 281, 282, 283, 285, 286, 288, 289, 292, 293, 294, 295, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 317, 318, 319, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 362, 364, 365, 367, 368, 371, 372, 377, 378, 379, 382, 383, 384, 389, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 417, 418, 419, 420, 422, 424, 427, 428, 429, 430, 431, 432, 433, 437, 441, 443, 445, 448, 451, 460, 461, 462, 463, 468, 471, 472, 482, 494, 495, 499, 501, 502, 506, 509, 511, 512, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 530, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 560, 570, 571, 572, 575, 580, 588, 591, 592, 593, 594, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 610, 612, 616, 619, 621, 624, 625, 629, 630, 631, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 648, 650, 654, 655, 656, 658, 659, 662, 666, 667, 669, 670, 673, 674, 677, 681, 683, 687, 690, 691, 699, 700, 701, 703, 704, 705, 707, 712, 715, 716, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 746, 758, 759, 761, 762, 764, 765, 766, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 833, 834, 835, 836, 841, 842, 843, 845, 846, 848, 849, 851, 852, 853, 855, 856, 863, 864, 869, 875, 876, 877, 878, 879, 880, 881, 883, 885, 901, 910, 911, 912, 914, 916, 917, 922, 923, 925, 928, 946, 947, 949, 952, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 969, 971, 972, 975, 979, 983, 987, 988, 990, 991, 992, 994, 996, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1012, 1013], "48": [4, 45, 102, 154, 238, 303, 364, 372, 391, 488, 575, 723, 800, 811, 946, 959, 967], "max_train_s": [4, 395, 795, 1005], "10000": [4, 11, 30, 62, 71, 72, 123, 135, 182, 189, 196, 204, 212, 229, 231, 269, 276, 308, 323, 350, 356, 398, 399, 539, 540, 622, 657, 853, 881, 969, 988, 992], "test_siz": [4, 5, 6, 10, 24, 25, 27, 31, 32, 70, 109, 115, 120, 121, 123, 124, 128, 172, 191, 196, 203, 204, 211, 212, 253, 254, 258, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 308, 326, 334, 350, 371, 395, 676, 776, 791, 794, 795, 802, 804, 825, 947, 959, 960, 987, 988, 998, 999, 1004, 1005, 1010], "manual": [4, 46, 166, 167, 169, 180, 197, 207, 258, 276, 317, 324, 339, 341, 354, 355, 362, 367, 370, 371, 378, 382, 391, 395, 396, 397, 417, 428, 545, 826, 849, 855, 946, 951, 953, 956, 957, 960, 967, 978, 983, 984, 992, 1006, 1008], "inspect": [4, 31, 55, 60, 112, 116, 123, 125, 126, 130, 143, 149, 154, 155, 166, 167, 168, 169, 179, 188, 205, 235, 256, 259, 268, 279, 284, 287, 306, 307, 308, 309, 311, 322, 323, 324, 327, 328, 339, 345, 355, 357, 368, 379, 391, 392, 398, 399, 443, 531, 532, 535, 536, 537, 538, 542, 543, 544, 805, 836, 837, 883, 884, 885, 886, 945, 957, 958, 961, 964, 965, 972, 977, 992, 994, 1001], "variou": [4, 12, 36, 37, 57, 59, 60, 67, 80, 84, 94, 98, 164, 166, 174, 206, 215, 216, 217, 218, 223, 229, 302, 307, 339, 341, 348, 350, 354, 361, 362, 363, 364, 367, 368, 371, 378, 380, 389, 390, 391, 393, 417, 421, 451, 480, 492, 493, 503, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 572, 580, 625, 629, 631, 633, 636, 639, 641, 643, 644, 646, 651, 653, 654, 669, 670, 677, 774, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 802, 803, 836, 875, 876, 946, 947, 954, 957, 960, 964, 967, 971, 973, 977, 981, 991, 992, 998, 1001, 1002], "check": [4, 5, 8, 17, 46, 53, 55, 99, 129, 149, 164, 167, 168, 182, 184, 185, 196, 218, 249, 265, 272, 309, 316, 334, 348, 354, 355, 365, 366, 367, 368, 369, 370, 372, 373, 375, 377, 379, 382, 385, 392, 423, 430, 431, 444, 480, 486, 487, 509, 514, 515, 526, 539, 540, 624, 625, 630, 631, 638, 639, 640, 641, 654, 656, 659, 665, 667, 670, 671, 780, 791, 800, 814, 832, 840, 880, 883, 884, 885, 886, 895, 896, 897, 906, 907, 918, 919, 921, 941, 942, 943, 945, 952, 953, 954, 957, 972, 978, 981, 998, 999, 1001, 1005, 1009, 1010, 1011, 1012, 1013], "all_split": 4, "list": [4, 8, 9, 10, 12, 13, 16, 17, 19, 25, 32, 40, 44, 49, 61, 69, 105, 106, 114, 121, 129, 136, 169, 235, 251, 254, 256, 257, 259, 260, 265, 269, 285, 300, 306, 307, 308, 309, 310, 311, 318, 329, 340, 341, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 389, 390, 391, 392, 395, 397, 398, 399, 412, 414, 417, 429, 435, 436, 443, 444, 445, 451, 457, 460, 461, 462, 466, 467, 468, 469, 470, 474, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 501, 510, 528, 529, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 566, 567, 569, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 610, 612, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 659, 662, 670, 674, 675, 677, 688, 690, 691, 694, 696, 702, 710, 723, 731, 755, 758, 765, 769, 772, 773, 774, 777, 778, 780, 785, 786, 788, 797, 798, 799, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 840, 844, 847, 849, 850, 855, 872, 876, 878, 881, 883, 884, 885, 886, 887, 888, 889, 891, 895, 896, 897, 901, 903, 904, 905, 907, 915, 916, 918, 920, 928, 931, 941, 946, 947, 953, 957, 959, 960, 961, 964, 965, 968, 973, 975, 977, 978, 981, 983, 987, 989, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "train_0": 4, "test_0": 4, "iloc": [4, 129, 166, 214, 256], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 19, 24, 26, 42, 45, 54, 79, 84, 90, 101, 103, 105, 110, 114, 122, 142, 143, 150, 161, 166, 176, 186, 219, 225, 243, 256, 258, 272, 289, 292, 295, 298, 300, 311, 314, 315, 339, 347, 350, 354, 372, 395, 398, 399, 424, 456, 479, 482, 548, 575, 656, 711, 771, 791, 802, 828, 846, 851, 853, 854, 864, 865, 867, 868, 952, 953, 957, 958, 960, 967, 988, 998, 1000, 1006, 1009], "760": 4, "68": [4, 187, 295, 314, 391, 513, 519, 568, 998], "27": [4, 6, 19, 31, 47, 54, 98, 107, 314, 315, 335, 364, 391, 399, 401, 691, 765, 766, 876, 957, 991, 998, 1000], "9993": [4, 631, 633, 1006], "12380": 4, "32": [4, 5, 51, 168, 222, 233, 257, 272, 310, 315, 361, 365, 371, 379, 388, 398, 399, 425, 542, 543, 560, 567, 612, 654, 855, 895, 896, 924, 965, 991, 998, 1001, 1004, 1006, 1007, 1010, 1011, 1012], "000": [4, 5, 15, 16, 17, 21, 25, 27, 42, 73, 150, 168, 172, 229, 254, 256, 257, 258, 276, 290, 309, 339, 340, 350, 362, 372, 398, 399, 468, 539, 540, 622, 655, 971, 992, 1009], "77": [4, 6, 44, 172, 265, 295, 315, 361, 364, 512], "0028": 4, "12381": 4, "72": [4, 6, 7, 152, 371, 800], "9995": 4, "12382": 4, "240": [4, 44, 965, 998], "82": [4, 6, 30, 53, 57, 91, 143, 199, 287, 295, 314, 765, 774, 788, 957, 960, 988, 998], "9980": [4, 1006], "12383": 4, "13374": 4, "34": [4, 91, 122, 149, 281, 295, 314, 315, 364, 395, 401, 498, 548, 575, 627, 645, 694, 741, 988, 998], "44": [4, 84, 154, 166, 167, 280, 401, 758, 876, 879, 957, 964, 998], "40": [4, 8, 14, 19, 54, 65, 77, 89, 95, 101, 125, 131, 149, 167, 187, 188, 190, 213, 219, 221, 232, 245, 257, 282, 288, 294, 300, 314, 315, 324, 325, 327, 329, 331, 333, 348, 355, 362, 395, 473, 495, 496, 816, 817, 821, 833, 834, 946, 958, 967, 998, 999], "150": [4, 6, 89, 91, 114, 122, 135, 152, 159, 218, 222, 225, 269, 364, 395, 400, 482, 580, 797, 798, 799, 957, 987, 988, 989], "53": [4, 53, 167, 170, 391, 398, 513, 519, 767, 768], "15": [4, 6, 7, 12, 13, 14, 22, 30, 31, 34, 40, 43, 44, 53, 54, 60, 61, 65, 72, 73, 79, 81, 91, 105, 109, 110, 114, 118, 119, 122, 133, 141, 143, 145, 149, 153, 161, 166, 167, 185, 193, 198, 210, 214, 219, 222, 225, 243, 244, 251, 259, 261, 264, 267, 268, 270, 276, 279, 280, 284, 287, 292, 293, 298, 300, 302, 303, 315, 324, 326, 329, 333, 336, 339, 342, 345, 361, 362, 367, 378, 395, 398, 399, 420, 433, 468, 475, 509, 515, 533, 534, 576, 622, 630, 639, 641, 646, 654, 656, 670, 718, 792, 805, 828, 946, 952, 953, 954, 957, 960, 961, 967, 972, 975, 983, 988, 996, 1000, 1010, 1012, 1013], "0013": 4, "13375": 4, "39": [4, 8, 211, 234, 238, 303, 362, 364, 365, 370, 391, 399, 473, 884], "49": [4, 8, 91, 361, 362, 364, 371, 391, 429, 436, 691, 703, 733, 741, 772, 774, 952, 957, 967, 1001], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 97, 155, 166, 204, 214, 215, 329, 364, 372, 398, 399, 533, 534, 548, 712, 957, 992, 998], "08": [4, 44, 50, 98, 107, 159, 163, 166, 167, 215, 248, 295, 320, 342, 364, 509, 521, 523, 541, 619, 636, 774, 833, 834, 855, 963], "910": [4, 8], "42": [4, 6, 24, 25, 26, 27, 31, 46, 55, 77, 91, 97, 103, 116, 117, 119, 122, 123, 125, 129, 142, 143, 162, 166, 168, 169, 172, 175, 180, 185, 188, 190, 191, 198, 202, 203, 204, 210, 211, 213, 218, 225, 231, 234, 237, 255, 257, 260, 276, 282, 283, 284, 292, 299, 300, 301, 303, 306, 308, 310, 317, 324, 326, 339, 340, 350, 355, 368, 371, 372, 379, 391, 395, 398, 399, 402, 417, 424, 466, 470, 509, 515, 522, 535, 536, 543, 544, 545, 546, 548, 655, 772, 776, 800, 802, 816, 817, 821, 825, 828, 867, 868, 870, 871, 872, 885, 886, 960, 967, 988, 992, 995, 998], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 70, 91, 112, 131, 166, 167, 175, 184, 225, 312, 314, 315, 522, 626, 627, 634, 680, 684, 685, 704, 718, 733, 759, 766, 809, 946, 953, 957, 963, 964, 967, 988, 992, 998, 1000], "26": [4, 46, 54, 79, 97, 154, 166, 222, 233, 269, 303, 315, 339, 372, 548, 626, 706, 760, 852, 863, 912, 957, 967, 998, 1001, 1002, 1010], "47": [4, 84, 192, 362, 471, 472, 513, 519, 952], "16": [4, 5, 15, 19, 27, 50, 51, 54, 65, 73, 79, 95, 98, 141, 158, 167, 189, 195, 196, 197, 214, 217, 218, 223, 230, 233, 258, 259, 260, 276, 280, 295, 298, 302, 303, 304, 306, 320, 340, 346, 362, 364, 365, 372, 378, 382, 383, 384, 395, 396, 399, 422, 457, 475, 480, 512, 513, 548, 567, 573, 574, 585, 586, 617, 628, 629, 632, 633, 634, 635, 660, 661, 787, 792, 802, 851, 876, 884, 946, 953, 957, 967, 972, 975, 983, 992, 996, 998, 999, 1003, 1004, 1006, 1007], "9979": 4, "2331": 4, "31": [4, 15, 69, 78, 214, 222, 281, 309, 314, 315, 388, 399, 478, 539, 540, 575, 627, 649, 657, 924, 958, 998], "060": [4, 728], "0032": 4, "2332": 4, "2333": 4, "78": [4, 8, 53, 172, 214, 295, 300, 315, 471, 472, 631, 633, 642, 643, 774, 780, 800, 957, 978, 988], "275": [4, 315, 1001], "2334": 4, "96": [4, 8, 32, 48, 61, 156, 225, 254, 295, 300, 314, 315, 364, 395, 946, 952, 957, 967, 998], "515": [4, 65, 67, 135, 139, 156, 159], "64": [4, 32, 48, 53, 57, 88, 95, 154, 166, 167, 218, 229, 230, 233, 254, 265, 280, 285, 345, 354, 355, 364, 365, 372, 396, 473, 480, 577, 578, 624, 636, 666, 667, 668, 669, 876, 960, 989, 998, 1000, 1006, 1007, 1010, 1011, 1012], "2335": [4, 8], "12326": 4, "12327": 4, "12328": [4, 1007], "12329": 4, "46": [4, 53, 188, 196, 350, 372, 571, 572, 694, 879, 884, 952, 967], "12330": [4, 1006], "52": [4, 154, 196, 611, 772, 952, 998], "last": [4, 44, 57, 88, 120, 122, 175, 196, 197, 204, 209, 225, 247, 259, 267, 268, 308, 310, 317, 344, 354, 362, 365, 368, 370, 371, 374, 379, 382, 391, 392, 399, 403, 418, 422, 426, 438, 443, 447, 493, 511, 539, 540, 561, 562, 565, 571, 572, 575, 588, 660, 661, 663, 664, 675, 676, 678, 679, 680, 685, 759, 772, 773, 777, 778, 793, 816, 817, 821, 836, 841, 849, 855, 890, 915, 932, 946, 952, 953, 954, 956, 957, 958, 961, 971, 978, 983, 990, 998, 1005, 1006, 1007, 1012], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 32, 46, 54, 97, 118, 195, 232, 269, 295, 300, 314, 315, 398, 641, 765, 952, 957, 958, 967, 992, 998], "665": [4, 92], "16380": 4, "71": [4, 8, 214, 364, 488, 707, 957, 990, 1000], "16381": 4, "76": [4, 6, 46, 172, 196, 315, 339, 350, 364, 372, 758, 990], "16382": 4, "16383": 4, "18": [4, 7, 8, 19, 40, 44, 49, 53, 59, 61, 73, 91, 103, 110, 122, 158, 166, 207, 225, 230, 256, 302, 315, 318, 339, 340, 341, 367, 372, 392, 395, 396, 399, 426, 438, 470, 478, 479, 480, 482, 483, 488, 513, 514, 516, 518, 519, 535, 536, 537, 538, 541, 542, 543, 544, 547, 549, 550, 551, 552, 553, 554, 555, 567, 572, 577, 578, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 624, 627, 636, 637, 649, 692, 696, 708, 711, 712, 718, 720, 772, 773, 795, 809, 832, 833, 834, 840, 846, 854, 855, 865, 875, 876, 883, 884, 885, 886, 887, 911, 912, 946, 955, 957, 967, 975, 996, 998, 999, 1002, 1003, 1005, 1006, 1008, 1009], "940": [4, 8], "6331": 4, "28": [4, 65, 122, 166, 212, 239, 265, 294, 303, 314, 315, 364, 372, 391, 395, 401, 429, 436, 967, 988, 998, 1001, 1004], "790": [4, 69, 70], "89": [4, 6, 32, 154, 187, 264, 295, 314, 315, 957, 967, 992, 998, 1001, 1009], "6332": 4, "6333": 4, "88": [4, 32, 187, 255, 295, 314, 315, 344, 362, 364, 393, 452, 836, 988, 998], "820": [4, 816, 817], "79": [4, 6, 8, 11, 30, 32, 46, 79, 80, 98, 172, 295, 315, 364, 371, 393, 453, 575, 814, 998, 1000], "6334": 4, "6335": 4, "70": [4, 6, 8, 11, 65, 72, 167, 241, 256, 315, 362, 364, 395, 471, 472, 691, 703, 733, 774, 788, 946, 967, 988], "33": [4, 79, 196, 303, 311, 315, 362, 364, 370, 371, 372, 399, 510, 626, 690, 691, 706, 707, 715, 720, 760, 761, 764, 780, 800, 802, 804, 886, 953, 957, 967, 988, 998, 1006], "335": [4, 74, 75], "74": [4, 112, 212, 314, 315, 364, 568, 774, 788, 855], "16326": [4, 1010], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 154, 197, 362, 370, 374], "tree": [4, 7, 26, 27, 31, 41, 44, 61, 108, 109, 112, 113, 114, 119, 120, 121, 122, 123, 125, 129, 130, 133, 157, 161, 167, 169, 218, 233, 235, 260, 276, 281, 289, 298, 299, 308, 349, 350, 354, 357, 362, 364, 372, 378, 379, 381, 389, 391, 397, 402, 417, 421, 422, 423, 424, 425, 427, 429, 436, 442, 473, 478, 482, 492, 493, 497, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 609, 610, 611, 612, 636, 666, 670, 681, 765, 780, 800, 802, 811, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 837, 840, 849, 907, 947, 954, 957, 958, 963, 964, 977, 978, 979, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "often": [4, 19, 24, 25, 33, 69, 73, 127, 153, 161, 166, 167, 197, 214, 218, 243, 258, 261, 298, 326, 336, 339, 340, 341, 354, 355, 361, 362, 364, 367, 368, 371, 374, 377, 378, 379, 381, 385, 389, 391, 392, 393, 395, 396, 398, 399, 401, 403, 447, 499, 502, 511, 514, 610, 624, 625, 630, 631, 638, 639, 640, 641, 650, 652, 665, 705, 846, 854, 861, 873, 946, 947, 949, 952, 953, 954, 955, 956, 957, 959, 960, 962, 963, 964, 967, 970, 971, 973, 983, 985, 990, 991, 992, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "flexibl": [4, 25, 119, 161, 196, 299, 323, 341, 368, 373, 395, 401, 652, 875, 876, 946, 951, 953, 957, 961, 967, 978, 981, 1007, 1011], "effici": [4, 5, 12, 13, 42, 46, 53, 95, 127, 172, 185, 189, 198, 204, 281, 339, 354, 359, 361, 367, 368, 369, 371, 372, 377, 379, 385, 388, 390, 391, 396, 397, 398, 401, 403, 422, 423, 426, 428, 429, 431, 433, 436, 438, 440, 441, 474, 511, 512, 513, 516, 518, 519, 522, 541, 544, 552, 566, 569, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 612, 616, 618, 633, 636, 637, 642, 644, 646, 651, 653, 654, 655, 656, 657, 663, 664, 666, 677, 703, 733, 740, 756, 757, 772, 773, 774, 788, 805, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 841, 853, 864, 868, 875, 884, 886, 912, 925, 946, 949, 951, 953, 954, 956, 957, 958, 960, 961, 962, 963, 965, 967, 968, 969, 970, 971, 972, 977, 981, 983, 987, 990, 991, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "heteorogen": 4, "tabular": [4, 167, 368, 965], "mix": [4, 61, 68, 75, 96, 97, 164, 196, 298, 361, 368, 377, 379, 392, 396, 403, 443, 445, 446, 474, 511, 516, 518, 525, 608, 624, 625, 630, 636, 637, 638, 639, 640, 641, 646, 654, 656, 659, 774, 802, 836, 849, 850, 856, 923, 928, 931, 953, 962, 991, 1010, 1012], "long": [4, 11, 12, 44, 61, 110, 122, 154, 162, 166, 168, 196, 232, 259, 289, 298, 307, 339, 340, 350, 355, 367, 374, 377, 379, 380, 385, 390, 391, 401, 432, 476, 516, 654, 655, 656, 777, 778, 811, 812, 813, 814, 815, 833, 834, 844, 957, 963, 967, 968, 970, 971, 976, 980, 1000, 1004, 1010, 1012], "sampl": [4, 5, 8, 13, 24, 25, 26, 27, 32, 33, 34, 37, 39, 41, 42, 43, 46, 48, 49, 53, 55, 56, 57, 58, 59, 64, 79, 80, 81, 85, 89, 91, 95, 99, 100, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 130, 131, 132, 143, 145, 149, 154, 155, 156, 158, 161, 164, 166, 167, 172, 174, 182, 184, 185, 196, 198, 200, 204, 210, 212, 213, 214, 215, 217, 225, 229, 230, 232, 234, 241, 242, 244, 245, 246, 247, 249, 251, 256, 258, 259, 260, 262, 264, 268, 270, 272, 274, 276, 279, 280, 281, 282, 283, 285, 286, 287, 298, 300, 301, 302, 306, 308, 309, 311, 314, 316, 317, 318, 319, 321, 322, 324, 326, 328, 334, 337, 339, 340, 345, 348, 354, 357, 360, 362, 363, 366, 367, 368, 369, 377, 378, 388, 389, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 408, 410, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 435, 436, 437, 440, 441, 442, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 589, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 665, 666, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 740, 741, 745, 746, 747, 748, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 895, 896, 900, 901, 912, 916, 926, 928, 931, 932, 935, 938, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 977, 978, 980, 983, 989, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "larg": [4, 12, 13, 21, 26, 37, 39, 47, 49, 50, 52, 53, 72, 74, 95, 99, 113, 115, 122, 125, 127, 142, 154, 155, 168, 175, 176, 185, 187, 196, 198, 201, 202, 214, 230, 253, 259, 262, 265, 278, 285, 294, 298, 300, 309, 310, 326, 331, 340, 341, 354, 362, 367, 372, 375, 377, 378, 379, 382, 385, 390, 393, 395, 396, 397, 398, 400, 401, 402, 422, 424, 426, 429, 430, 431, 432, 437, 441, 452, 454, 477, 492, 512, 514, 516, 518, 522, 525, 527, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 560, 566, 567, 569, 612, 619, 621, 628, 632, 635, 636, 637, 642, 649, 650, 652, 655, 657, 663, 665, 667, 669, 670, 671, 673, 723, 756, 757, 774, 782, 784, 788, 792, 801, 811, 812, 813, 814, 815, 816, 817, 822, 833, 834, 841, 845, 846, 854, 856, 867, 868, 875, 876, 880, 881, 883, 884, 885, 886, 911, 912, 946, 949, 951, 953, 954, 956, 959, 960, 961, 965, 970, 971, 972, 973, 977, 978, 981, 988, 990, 991, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ordin": [4, 53, 70, 129, 301, 308, 311, 361, 379, 398, 474, 545, 687, 841, 844, 849, 850, 953, 954, 967, 978, 1006, 1012], "encod": [4, 8, 11, 48, 70, 95, 115, 129, 166, 167, 168, 195, 196, 265, 299, 300, 301, 308, 310, 311, 326, 339, 341, 359, 361, 363, 368, 371, 377, 379, 392, 395, 396, 398, 399, 401, 465, 474, 481, 504, 509, 515, 517, 518, 520, 522, 523, 524, 526, 529, 539, 540, 544, 545, 547, 559, 566, 567, 569, 608, 626, 636, 637, 647, 658, 712, 776, 781, 783, 839, 841, 843, 844, 847, 849, 850, 859, 946, 947, 953, 954, 957, 959, 960, 962, 971, 977, 978, 994, 999, 1000, 1006, 1010, 1012, 1013], "know": [4, 53, 65, 119, 143, 146, 149, 158, 214, 232, 256, 274, 310, 314, 334, 340, 354, 367, 377, 385, 391, 394, 395, 396, 399, 478, 482, 488, 624, 630, 636, 637, 703, 733, 774, 788, 860, 861, 863, 864, 865, 866, 883, 884, 885, 886, 946, 956, 957, 958, 960, 969, 1004, 1005, 1008, 1010], "treat": [4, 6, 70, 119, 129, 161, 166, 196, 265, 308, 317, 350, 367, 377, 379, 388, 398, 399, 422, 539, 540, 566, 567, 569, 585, 586, 610, 616, 623, 649, 652, 731, 765, 845, 846, 852, 853, 856, 860, 863, 864, 866, 947, 949, 953, 957, 958, 964, 967, 971, 973, 988, 1002, 1010], "dedic": [4, 254, 336, 365, 372, 377, 380, 382, 387, 391, 562, 650, 652, 665, 946, 977, 983, 1006], "rule": [4, 172, 345, 348, 350, 354, 364, 367, 368, 377, 379, 380, 386, 390, 391, 395, 396, 398, 400, 514, 527, 528, 529, 530, 531, 539, 540, 547, 548, 580, 612, 623, 636, 637, 644, 646, 654, 655, 656, 684, 685, 774, 777, 778, 780, 788, 799, 801, 825, 875, 888, 946, 951, 959, 960, 971, 973, 978, 983, 990, 994, 1000, 1003, 1010], "pass": [4, 7, 8, 20, 21, 38, 119, 126, 143, 177, 197, 226, 228, 229, 235, 237, 246, 254, 257, 306, 309, 331, 341, 350, 354, 355, 356, 362, 367, 368, 371, 372, 373, 374, 375, 377, 379, 385, 391, 392, 395, 396, 398, 399, 401, 402, 403, 417, 418, 420, 423, 424, 426, 428, 429, 431, 433, 436, 438, 439, 441, 443, 444, 446, 448, 451, 453, 466, 469, 470, 473, 475, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 559, 560, 566, 567, 569, 571, 572, 575, 585, 586, 588, 589, 595, 598, 604, 609, 610, 612, 617, 618, 619, 620, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 649, 650, 654, 655, 656, 657, 659, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 709, 710, 719, 740, 751, 755, 756, 757, 758, 765, 767, 768, 772, 773, 774, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 840, 841, 843, 847, 849, 850, 851, 853, 856, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 895, 896, 902, 906, 907, 911, 912, 914, 916, 918, 919, 925, 927, 928, 931, 946, 947, 953, 955, 957, 958, 959, 960, 961, 964, 967, 970, 971, 972, 978, 981, 983, 987, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "explicitli": [4, 46, 116, 149, 156, 161, 162, 197, 228, 341, 350, 355, 361, 363, 367, 368, 370, 377, 379, 387, 395, 399, 401, 419, 527, 528, 556, 558, 575, 605, 626, 636, 637, 647, 658, 687, 704, 759, 765, 766, 777, 778, 807, 810, 816, 817, 842, 865, 866, 925, 946, 947, 949, 951, 953, 954, 957, 959, 960, 967, 981, 992, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012], "logic": [4, 355, 368, 373, 387, 398, 973, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "integ": [4, 17, 48, 53, 70, 166, 196, 214, 307, 308, 350, 354, 361, 362, 364, 368, 371, 375, 378, 379, 391, 392, 395, 396, 398, 399, 414, 417, 441, 443, 446, 451, 465, 474, 476, 479, 480, 481, 483, 486, 487, 490, 492, 493, 497, 500, 528, 537, 538, 539, 540, 541, 545, 546, 550, 560, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 610, 611, 622, 629, 633, 637, 643, 651, 653, 654, 677, 692, 712, 774, 776, 777, 778, 779, 781, 783, 788, 789, 790, 791, 793, 794, 796, 807, 810, 812, 815, 816, 817, 841, 849, 850, 855, 856, 859, 869, 871, 883, 884, 885, 886, 891, 922, 923, 924, 926, 947, 953, 958, 960, 967, 970, 972, 973, 983, 990, 992, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "lexicograph": [4, 379, 545, 765, 769, 818, 826], "ad": [4, 13, 74, 103, 105, 109, 120, 142, 149, 155, 156, 175, 198, 221, 231, 256, 257, 258, 298, 307, 308, 309, 310, 311, 318, 340, 366, 367, 370, 372, 377, 379, 380, 396, 398, 399, 400, 401, 421, 422, 423, 425, 426, 428, 431, 438, 441, 443, 492, 500, 510, 513, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 560, 567, 568, 569, 571, 580, 585, 586, 589, 591, 605, 607, 619, 620, 626, 628, 632, 636, 637, 647, 654, 656, 658, 673, 692, 752, 754, 772, 773, 774, 788, 797, 804, 814, 833, 834, 835, 849, 855, 857, 872, 883, 884, 885, 886, 902, 946, 950, 952, 953, 954, 958, 960, 961, 963, 978, 981, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "benefit": [4, 55, 73, 74, 166, 210, 221, 228, 230, 278, 310, 354, 367, 375, 379, 389, 391, 427, 440, 447, 486, 545, 546, 636, 637, 644, 646, 654, 655, 656, 873, 875, 946, 952, 960, 965, 967, 978, 981, 998, 1001, 1002, 1003, 1010, 1011, 1012, 1013], "prevent": [4, 110, 122, 143, 197, 298, 326, 339, 344, 350, 367, 368, 377, 378, 391, 396, 399, 422, 428, 466, 467, 568, 569, 589, 705, 762, 833, 834, 860, 861, 863, 864, 865, 866, 957, 959, 962, 963, 973, 990, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ani": [4, 8, 9, 13, 19, 30, 44, 46, 56, 66, 126, 141, 146, 154, 155, 156, 166, 167, 168, 185, 196, 214, 225, 228, 229, 242, 246, 247, 256, 257, 259, 262, 265, 289, 298, 299, 302, 306, 308, 309, 311, 326, 341, 350, 354, 355, 356, 361, 362, 364, 365, 367, 368, 370, 371, 372, 374, 378, 379, 380, 382, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 414, 420, 427, 428, 429, 431, 433, 435, 436, 440, 443, 446, 466, 467, 486, 487, 501, 512, 515, 517, 524, 529, 535, 536, 537, 538, 542, 543, 544, 545, 546, 547, 548, 556, 558, 560, 566, 567, 569, 571, 581, 588, 589, 598, 605, 610, 611, 626, 636, 637, 644, 646, 647, 654, 655, 656, 657, 658, 670, 674, 677, 678, 682, 694, 695, 697, 701, 713, 714, 729, 732, 734, 751, 755, 756, 757, 758, 767, 768, 770, 774, 777, 778, 786, 787, 805, 808, 822, 826, 835, 836, 841, 845, 847, 849, 850, 865, 866, 869, 872, 875, 883, 884, 885, 886, 887, 889, 891, 895, 896, 927, 941, 946, 947, 949, 952, 953, 954, 957, 958, 959, 960, 963, 964, 965, 967, 969, 970, 971, 972, 973, 977, 983, 985, 989, 990, 992, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "unknown": [4, 16, 55, 166, 256, 314, 316, 356, 362, 379, 385, 388, 399, 843, 849, 850, 922, 956, 967, 983, 1002, 1006, 1010, 1011], "sake": [4, 122, 162, 166, 196, 339, 341, 374, 377, 648, 677], "simplic": [4, 13, 31, 339, 341, 379, 397, 960, 961, 962, 972], "try": [4, 6, 11, 12, 14, 16, 25, 26, 39, 53, 70, 98, 109, 115, 116, 117, 118, 125, 126, 129, 132, 143, 149, 154, 162, 166, 167, 168, 172, 175, 177, 185, 226, 227, 228, 235, 236, 237, 238, 242, 243, 246, 254, 256, 257, 263, 268, 276, 289, 295, 307, 308, 310, 311, 316, 328, 339, 340, 348, 362, 365, 366, 367, 368, 371, 372, 374, 377, 379, 391, 394, 395, 399, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 481, 545, 554, 567, 636, 651, 653, 667, 671, 774, 777, 778, 786, 788, 797, 798, 799, 801, 854, 856, 875, 946, 953, 954, 963, 972, 973, 978, 980, 981, 983, 985, 988, 990, 991, 992, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "default": [4, 14, 25, 27, 30, 42, 45, 46, 48, 58, 95, 142, 149, 161, 167, 175, 176, 185, 196, 197, 214, 227, 229, 236, 238, 244, 251, 259, 265, 274, 283, 298, 302, 306, 307, 311, 335, 339, 340, 341, 344, 350, 354, 355, 361, 362, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 382, 385, 389, 391, 392, 395, 396, 398, 399, 400, 402, 403, 404, 405, 407, 408, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 685, 686, 687, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 899, 901, 902, 904, 906, 911, 912, 913, 914, 915, 916, 917, 922, 924, 925, 926, 927, 928, 930, 931, 932, 938, 941, 943, 944, 946, 947, 949, 951, 953, 956, 957, 958, 960, 961, 963, 964, 967, 969, 971, 972, 983, 987, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "hyper": [4, 70, 250, 256, 261, 295, 326, 350, 368, 377, 378, 379, 386, 395, 398, 400, 622, 623, 778, 786, 788, 832, 952, 953, 957, 960, 971, 972, 983, 994, 998, 1012], "paramet": [4, 5, 9, 10, 11, 13, 14, 16, 44, 54, 57, 59, 60, 61, 70, 71, 72, 78, 80, 81, 91, 95, 112, 114, 118, 123, 124, 135, 136, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 175, 176, 177, 178, 181, 183, 184, 185, 187, 188, 196, 198, 200, 201, 204, 205, 213, 214, 221, 222, 225, 227, 230, 231, 234, 241, 243, 244, 246, 247, 250, 255, 256, 257, 260, 261, 264, 267, 268, 269, 271, 276, 278, 282, 283, 289, 292, 293, 295, 298, 299, 300, 306, 307, 309, 310, 311, 318, 321, 323, 328, 331, 335, 336, 337, 339, 340, 341, 344, 345, 346, 347, 350, 354, 355, 356, 357, 359, 360, 362, 369, 371, 372, 373, 374, 375, 377, 386, 391, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 954, 956, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 973, 977, 978, 984, 986, 988, 989, 990, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "pipelin": [4, 31, 54, 57, 70, 73, 75, 85, 115, 119, 140, 142, 147, 161, 162, 167, 168, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 224, 225, 226, 230, 235, 238, 239, 249, 253, 255, 263, 270, 272, 276, 278, 284, 285, 292, 295, 300, 303, 306, 307, 308, 309, 310, 311, 318, 339, 340, 350, 354, 357, 359, 361, 362, 367, 369, 379, 395, 399, 401, 405, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 466, 480, 493, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 588, 589, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 675, 676, 678, 679, 680, 691, 772, 773, 774, 777, 778, 788, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 947, 953, 960, 961, 966, 967, 971, 972, 977, 978, 979, 981, 984, 986, 994, 998, 999, 1001, 1002, 1003, 1004, 1005], "make_pipelin": [4, 31, 57, 85, 115, 119, 129, 142, 143, 161, 162, 166, 167, 172, 175, 184, 185, 196, 197, 202, 210, 214, 218, 225, 226, 227, 235, 236, 238, 253, 263, 276, 285, 292, 300, 303, 306, 307, 308, 309, 310, 311, 340, 350, 378, 392, 395, 545, 654, 656, 828, 836, 860, 861, 863, 864, 865, 866, 875, 876, 877, 878, 880, 881, 947, 960, 967, 971, 972, 1001, 1008, 1011], "ordinalencod": [4, 119, 129, 167, 168, 196, 311, 361, 379, 398, 559, 812, 844, 849, 959, 967, 1006, 1007, 1010, 1011, 1012], "compos": [4, 5, 25, 68, 69, 70, 74, 85, 112, 119, 129, 164, 166, 167, 168, 196, 198, 214, 227, 236, 238, 307, 309, 310, 311, 357, 378, 380, 391, 392, 395, 401, 493, 590, 956, 998, 1013], "columntransform": [4, 69, 70, 129, 166, 167, 168, 196, 214, 227, 236, 238, 307, 309, 310, 311, 359, 361, 377, 378, 445, 446, 607, 841, 946, 947, 978, 994, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ensembl": [4, 7, 10, 26, 27, 31, 55, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 161, 162, 167, 168, 169, 196, 218, 225, 233, 234, 236, 237, 253, 268, 274, 300, 306, 307, 308, 309, 311, 339, 350, 354, 357, 370, 371, 378, 379, 389, 391, 395, 400, 417, 482, 493, 557, 610, 611, 613, 636, 777, 778, 802, 806, 837, 840, 849, 879, 883, 885, 886, 946, 957, 958, 963, 964, 973, 977, 978, 979, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "histgradientboostingregressor": [4, 7, 119, 122, 123, 126, 129, 161, 167, 196, 306, 307, 308, 309, 311, 370, 398, 538, 557, 610, 611, 613, 947, 964, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "cross_valid": [4, 119, 129, 166, 198, 252, 259, 367, 378, 553, 797, 798, 957, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "categorical_column": [4, 119, 166, 168, 446], "ordinal_encod": [4, 119], "gbrt_pipelin": 4, "transform": [4, 5, 6, 8, 10, 13, 25, 44, 46, 47, 48, 51, 54, 56, 61, 68, 73, 75, 85, 88, 97, 98, 100, 102, 104, 105, 108, 119, 129, 133, 143, 155, 162, 164, 166, 167, 168, 172, 188, 196, 197, 204, 210, 212, 214, 218, 221, 225, 227, 230, 232, 238, 243, 253, 254, 257, 265, 276, 278, 284, 285, 286, 298, 299, 300, 301, 302, 303, 306, 307, 311, 326, 329, 339, 341, 350, 357, 361, 362, 363, 364, 367, 368, 371, 375, 379, 387, 389, 390, 391, 393, 396, 398, 399, 400, 401, 407, 411, 413, 417, 421, 422, 423, 425, 426, 428, 431, 443, 444, 445, 446, 447, 460, 461, 462, 463, 466, 467, 474, 481, 486, 487, 492, 493, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 535, 537, 539, 542, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 614, 616, 617, 618, 619, 620, 631, 636, 641, 651, 654, 662, 666, 667, 668, 669, 670, 672, 691, 730, 731, 762, 774, 777, 778, 788, 802, 805, 811, 820, 825, 828, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 873, 875, 877, 880, 881, 904, 906, 946, 947, 949, 951, 953, 954, 957, 958, 961, 971, 972, 974, 977, 978, 979, 983, 988, 989, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "remaind": [4, 119, 166, 185, 196, 198, 214, 311, 334, 344, 392, 443, 446, 998, 1005, 1006, 1007, 1010, 1011], "passthrough": [4, 71, 119, 166, 167, 196, 214, 311, 392, 443, 446, 545, 546, 835, 836, 967, 1007, 1009, 1012, 1013], "short": [4, 5, 119, 125, 187, 254, 294, 339, 367, 374, 395, 399, 403, 953, 954, 960, 1003, 1008, 1009, 1010, 1011, 1012, 1013], "easier": [4, 44, 61, 65, 81, 119, 175, 181, 227, 253, 254, 298, 326, 339, 350, 362, 367, 368, 371, 374, 377, 382, 393, 395, 447, 493, 873, 906, 952, 957, 964, 973, 978, 981, 992, 1007, 1012], "specifi": [4, 95, 119, 120, 150, 153, 155, 156, 157, 158, 185, 197, 204, 241, 264, 354, 355, 361, 367, 368, 375, 378, 379, 385, 391, 392, 395, 396, 398, 400, 401, 403, 405, 417, 421, 425, 429, 431, 442, 443, 446, 448, 449, 451, 452, 453, 454, 455, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 493, 509, 511, 515, 519, 524, 530, 535, 537, 538, 539, 540, 542, 545, 546, 561, 562, 571, 572, 575, 580, 588, 589, 598, 609, 610, 611, 616, 621, 624, 625, 626, 629, 630, 631, 633, 634, 636, 637, 638, 639, 640, 641, 643, 646, 647, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 665, 669, 676, 677, 678, 680, 687, 689, 706, 707, 715, 731, 748, 756, 757, 760, 761, 764, 774, 776, 777, 778, 780, 781, 783, 787, 788, 791, 796, 797, 798, 799, 800, 801, 803, 807, 810, 811, 812, 814, 815, 816, 817, 821, 849, 851, 854, 855, 871, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 907, 914, 941, 947, 953, 954, 956, 957, 960, 964, 965, 967, 970, 971, 972, 987, 991, 998, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013], "next": [4, 7, 25, 59, 79, 118, 119, 123, 132, 156, 169, 189, 193, 196, 226, 233, 237, 238, 243, 251, 262, 274, 308, 315, 339, 344, 348, 350, 357, 365, 367, 368, 370, 388, 391, 392, 395, 398, 486, 487, 588, 612, 670, 676, 678, 680, 758, 772, 773, 802, 946, 950, 956, 957, 967, 981, 995, 998, 1011, 1012], "verbose_feature_names_out": [4, 119, 166, 167, 168, 238, 309, 310, 311, 392, 443, 446, 1011], "categorical_featur": [4, 70, 119, 167, 308, 309, 310, 311, 371, 398, 539, 540, 610, 611, 964, 1006, 1010, 1013], "set_output": [4, 119, 164, 167, 224, 239, 369, 413, 422, 423, 425, 426, 428, 443, 447, 460, 461, 462, 463, 474, 482, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 560, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 636, 666, 667, 802, 820, 825, 828, 832, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 1013], "across": [4, 60, 66, 84, 135, 166, 185, 190, 218, 251, 253, 256, 276, 298, 303, 368, 375, 379, 385, 390, 391, 395, 399, 403, 417, 420, 429, 431, 433, 436, 439, 441, 448, 451, 453, 466, 469, 470, 473, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 545, 546, 566, 569, 572, 580, 585, 586, 588, 589, 610, 611, 612, 617, 618, 619, 620, 624, 625, 628, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 654, 656, 657, 663, 664, 667, 668, 669, 670, 671, 672, 673, 682, 683, 695, 708, 734, 765, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 821, 825, 832, 833, 834, 841, 845, 846, 853, 854, 856, 864, 867, 868, 870, 871, 875, 876, 877, 880, 883, 884, 911, 912, 928, 931, 946, 953, 955, 957, 967, 971, 973, 978, 981, 992, 998, 1001, 1004, 1005, 1006, 1007, 1008], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 25, 27, 33, 34, 37, 40, 41, 48, 52, 55, 57, 60, 69, 74, 91, 95, 97, 98, 101, 103, 105, 113, 115, 119, 120, 121, 122, 129, 152, 155, 157, 158, 162, 176, 184, 185, 188, 193, 196, 197, 204, 205, 206, 214, 217, 218, 232, 234, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 259, 264, 267, 270, 276, 281, 286, 289, 293, 295, 298, 300, 306, 318, 322, 326, 336, 339, 340, 341, 354, 362, 367, 368, 372, 373, 377, 392, 395, 399, 403, 486, 511, 575, 588, 589, 758, 902, 907, 919, 957, 964, 972, 988], "cv_result": [4, 70, 254, 255, 257, 259, 788, 799, 957], "score": [4, 6, 8, 11, 16, 20, 21, 24, 25, 26, 31, 32, 33, 37, 57, 59, 69, 70, 71, 72, 73, 74, 77, 81, 85, 103, 109, 112, 118, 119, 121, 122, 125, 128, 129, 136, 137, 142, 143, 146, 161, 164, 166, 167, 168, 169, 172, 187, 188, 191, 196, 198, 202, 204, 212, 214, 225, 230, 231, 234, 238, 245, 249, 254, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 274, 283, 284, 285, 292, 293, 294, 295, 300, 303, 306, 307, 308, 309, 314, 315, 317, 318, 326, 334, 339, 340, 344, 350, 362, 367, 368, 371, 378, 379, 385, 386, 388, 389, 390, 392, 394, 396, 398, 400, 408, 410, 412, 417, 423, 426, 428, 431, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 480, 482, 510, 514, 519, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 587, 588, 589, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 719, 732, 733, 734, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 777, 778, 780, 788, 793, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 821, 822, 823, 825, 826, 827, 832, 833, 834, 836, 856, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 914, 946, 949, 953, 955, 960, 963, 965, 967, 971, 978, 986, 988, 990, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "neg_mean_absolute_error": [4, 129, 198, 957], "neg_root_mean_squared_error": [4, 957], "mae": [4, 129, 196, 198, 536, 543, 722, 884, 886, 957, 973, 1005, 1006, 1010, 1011], "test_neg_mean_absolute_error": [4, 198], "rmse": [4, 80, 727, 1009], "test_neg_root_mean_squared_error": 4, "print": [4, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 20, 21, 24, 26, 30, 32, 38, 42, 43, 46, 47, 48, 49, 50, 52, 53, 57, 59, 60, 62, 66, 69, 70, 72, 73, 74, 79, 84, 85, 91, 95, 98, 103, 104, 106, 113, 116, 117, 118, 119, 121, 123, 135, 137, 142, 143, 145, 146, 149, 150, 152, 154, 158, 167, 168, 169, 172, 180, 181, 182, 183, 187, 188, 191, 192, 196, 198, 199, 203, 204, 211, 212, 214, 218, 219, 222, 227, 229, 231, 234, 238, 244, 250, 254, 255, 256, 257, 259, 261, 264, 265, 269, 276, 280, 287, 289, 293, 294, 295, 300, 303, 306, 307, 308, 310, 314, 315, 318, 326, 339, 340, 341, 344, 348, 350, 354, 361, 362, 365, 368, 374, 379, 392, 395, 398, 399, 401, 443, 446, 447, 451, 457, 480, 490, 519, 522, 527, 528, 537, 538, 539, 540, 542, 543, 547, 548, 554, 561, 562, 566, 567, 569, 590, 595, 608, 624, 625, 627, 628, 630, 631, 632, 634, 638, 639, 640, 641, 644, 645, 654, 655, 662, 691, 695, 714, 770, 772, 773, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 805, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 836, 837, 838, 846, 852, 856, 863, 873, 874, 875, 876, 877, 880, 888, 899, 919, 925, 947, 957, 958, 959, 960, 965, 973, 983, 987, 988, 990, 991, 992, 998, 1000, 1006, 1007, 1009, 1013], "3f": [4, 6, 8, 11, 14, 17, 21, 24, 26, 38, 40, 47, 48, 49, 57, 70, 72, 74, 85, 116, 117, 142, 146, 149, 150, 151, 153, 158, 167, 168, 176, 180, 182, 188, 196, 198, 202, 211, 212, 214, 218, 229, 231, 254, 256, 257, 259, 262, 264, 267, 276, 292, 318, 339, 340, 341, 965, 988], "std": [4, 11, 12, 37, 46, 50, 54, 60, 65, 78, 80, 81, 96, 97, 98, 116, 118, 119, 129, 136, 158, 161, 162, 166, 176, 181, 205, 229, 254, 255, 256, 258, 259, 261, 264, 266, 270, 271, 317, 329, 340, 350, 379, 391, 395, 398, 493, 584, 587, 856, 866, 967, 991, 1006, 1010], "n": [4, 5, 7, 8, 10, 11, 14, 17, 19, 32, 33, 34, 37, 39, 40, 57, 69, 74, 79, 84, 91, 95, 98, 100, 103, 105, 106, 112, 113, 116, 120, 131, 141, 146, 149, 153, 158, 167, 176, 192, 196, 197, 211, 213, 214, 217, 228, 229, 230, 232, 241, 243, 244, 254, 256, 259, 261, 262, 263, 265, 266, 276, 281, 295, 300, 302, 303, 308, 311, 315, 334, 348, 354, 361, 364, 365, 367, 370, 375, 382, 388, 389, 391, 394, 395, 396, 397, 398, 399, 401, 402, 424, 425, 426, 427, 429, 448, 450, 453, 457, 467, 493, 494, 495, 496, 501, 506, 516, 518, 519, 525, 535, 536, 537, 538, 541, 542, 543, 544, 566, 567, 568, 569, 585, 586, 592, 605, 627, 649, 657, 670, 674, 677, 684, 685, 732, 779, 782, 784, 789, 790, 793, 812, 816, 817, 821, 841, 867, 869, 883, 884, 885, 886, 910, 915, 916, 932, 936, 937, 946, 949, 951, 953, 954, 957, 958, 959, 960, 961, 963, 964, 967, 969, 971, 972, 973, 983, 990, 992, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "044": [4, 6, 219, 254, 728, 957], "003": [4, 278, 290], "068": [4, 256], "005": [4, 233, 239, 256, 260, 281, 298, 340, 372], "quit": [4, 53, 56, 85, 113, 135, 146, 166, 167, 194, 214, 264, 309, 339, 354, 371, 378, 391, 399, 952, 954, 959, 981, 1006], "good": [4, 9, 25, 27, 40, 44, 46, 49, 52, 53, 57, 73, 80, 85, 105, 118, 121, 122, 150, 154, 161, 166, 185, 196, 197, 202, 211, 222, 225, 229, 234, 242, 244, 250, 256, 262, 271, 295, 308, 314, 319, 326, 339, 340, 350, 354, 355, 356, 366, 368, 369, 372, 377, 379, 385, 388, 389, 391, 393, 395, 396, 398, 399, 400, 401, 417, 419, 424, 512, 537, 539, 540, 568, 608, 618, 625, 626, 634, 636, 637, 639, 647, 658, 668, 672, 700, 708, 719, 741, 801, 869, 912, 946, 952, 953, 954, 957, 958, 960, 961, 962, 964, 965, 967, 971, 972, 973, 978, 981, 983, 987, 990, 992, 1004], "trial": [4, 261, 426, 428, 439, 649, 772, 773, 953, 1004], "without": [4, 5, 13, 24, 36, 42, 55, 66, 67, 74, 100, 121, 124, 126, 129, 142, 146, 156, 164, 166, 167, 185, 204, 225, 229, 232, 235, 237, 250, 257, 261, 263, 277, 290, 298, 299, 303, 306, 334, 340, 356, 362, 363, 365, 367, 368, 370, 371, 372, 375, 377, 378, 379, 385, 391, 392, 396, 398, 399, 400, 401, 414, 419, 421, 448, 453, 474, 482, 493, 510, 512, 533, 534, 541, 556, 558, 589, 605, 612, 617, 637, 670, 678, 758, 777, 778, 779, 786, 788, 801, 802, 818, 825, 829, 835, 836, 839, 842, 845, 846, 848, 852, 853, 854, 856, 860, 875, 891, 925, 926, 946, 947, 951, 953, 954, 957, 960, 963, 967, 971, 972, 973, 977, 978, 983, 984, 992, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013], "tune": [4, 44, 70, 100, 145, 149, 161, 167, 185, 201, 213, 221, 250, 261, 278, 299, 326, 339, 350, 354, 355, 356, 378, 379, 386, 390, 391, 395, 398, 400, 401, 431, 441, 537, 538, 572, 591, 592, 593, 595, 597, 598, 600, 601, 603, 621, 637, 668, 672, 832, 951, 952, 953, 954, 956, 957, 960, 961, 963, 971, 984, 994, 998, 1012], "just": [4, 31, 69, 85, 95, 119, 146, 186, 193, 218, 230, 256, 263, 267, 292, 326, 339, 340, 350, 362, 366, 367, 368, 370, 371, 372, 374, 377, 378, 379, 388, 391, 392, 395, 398, 400, 401, 403, 447, 511, 520, 524, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 556, 561, 562, 567, 588, 589, 624, 630, 635, 636, 638, 640, 644, 645, 646, 654, 655, 656, 825, 833, 834, 839, 848, 946, 953, 956, 957, 958, 961, 965, 967, 971, 978, 990, 998, 1002, 1004, 1006, 1010], "had": [4, 9, 47, 122, 154, 298, 309, 350, 367, 399, 402, 424, 947, 957, 981, 983, 998, 999, 1005, 1006, 1007, 1008, 1009, 1013], "explicit": [4, 164, 167, 172, 224, 239, 354, 355, 356, 366, 377, 379, 380, 392, 399, 405, 451, 477, 479, 480, 519, 529, 530, 616, 617, 619, 654, 774, 775, 782, 820, 828, 836, 875, 880, 923, 925, 949, 951, 953, 957, 967, 973, 977, 998, 1002, 1007, 1008, 1011], "them": [4, 5, 8, 32, 39, 40, 49, 53, 55, 59, 64, 65, 69, 70, 85, 95, 97, 100, 109, 110, 111, 125, 141, 146, 149, 161, 162, 166, 167, 168, 172, 175, 191, 197, 198, 214, 229, 235, 254, 256, 257, 259, 265, 278, 298, 309, 318, 326, 341, 348, 354, 356, 362, 367, 368, 369, 370, 374, 377, 379, 380, 381, 385, 389, 390, 391, 392, 395, 396, 398, 399, 401, 424, 426, 428, 429, 436, 443, 446, 471, 472, 486, 515, 524, 545, 546, 547, 548, 585, 586, 594, 598, 599, 602, 610, 617, 642, 670, 745, 748, 751, 755, 756, 757, 758, 766, 774, 788, 795, 801, 840, 850, 854, 856, 865, 866, 872, 883, 884, 946, 947, 953, 956, 957, 958, 960, 961, 962, 967, 972, 973, 976, 977, 980, 981, 983, 990, 991, 992, 998, 999, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "But": [4, 9, 53, 197, 198, 256, 298, 367, 377, 391, 394, 397, 398, 441, 723, 883, 884, 946, 957, 972, 978], "much": [4, 6, 7, 9, 19, 25, 39, 40, 79, 81, 91, 98, 105, 115, 122, 123, 129, 130, 131, 149, 161, 162, 166, 167, 168, 169, 172, 193, 194, 198, 229, 256, 258, 259, 262, 267, 294, 299, 303, 308, 309, 311, 326, 331, 339, 340, 350, 354, 356, 362, 367, 368, 371, 374, 377, 378, 382, 390, 393, 394, 395, 396, 397, 398, 399, 400, 426, 427, 474, 512, 513, 514, 516, 537, 538, 539, 540, 636, 637, 644, 646, 654, 655, 656, 670, 756, 757, 777, 778, 792, 851, 868, 875, 946, 949, 952, 953, 954, 956, 957, 958, 960, 961, 963, 965, 969, 970, 972, 973, 978, 981, 987, 988, 990, 991, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "monoton": [4, 25, 108, 133, 164, 167, 214, 228, 307, 389, 539, 540, 613, 614, 672, 684, 852, 863, 877, 880, 954, 958, 967, 972, 1005, 1009, 1013], "relationship": [4, 111, 155, 166, 175, 196, 198, 199, 263, 299, 379, 391, 393, 395, 401, 441, 614, 692, 954, 957, 959, 960, 964, 965, 990, 1003], "case": [4, 7, 8, 25, 27, 37, 49, 52, 56, 60, 65, 70, 71, 80, 85, 100, 103, 113, 115, 122, 123, 129, 143, 145, 146, 149, 156, 166, 167, 182, 185, 187, 196, 197, 198, 201, 204, 210, 212, 213, 214, 225, 229, 230, 231, 235, 246, 250, 253, 255, 256, 257, 259, 262, 263, 265, 283, 294, 298, 300, 306, 309, 339, 340, 341, 348, 350, 354, 355, 356, 361, 362, 365, 367, 368, 370, 371, 372, 373, 375, 377, 378, 379, 380, 382, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 417, 420, 423, 424, 426, 430, 432, 442, 443, 446, 453, 474, 486, 487, 493, 517, 519, 520, 521, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 559, 560, 571, 572, 575, 580, 584, 587, 588, 589, 603, 605, 606, 608, 610, 625, 626, 631, 634, 635, 636, 637, 639, 641, 644, 646, 647, 650, 652, 653, 654, 658, 660, 661, 662, 663, 664, 665, 677, 681, 686, 687, 690, 696, 698, 699, 700, 703, 705, 706, 711, 712, 715, 719, 720, 722, 723, 725, 727, 730, 731, 733, 740, 755, 758, 760, 762, 765, 769, 771, 773, 774, 777, 778, 780, 788, 792, 796, 797, 798, 799, 800, 801, 803, 805, 813, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 836, 843, 845, 846, 849, 850, 851, 854, 855, 856, 859, 865, 866, 867, 868, 875, 877, 880, 883, 884, 890, 891, 901, 912, 913, 925, 946, 947, 949, 951, 952, 954, 955, 956, 958, 959, 960, 961, 963, 964, 967, 971, 972, 973, 977, 978, 980, 981, 983, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "usual": [4, 40, 77, 78, 80, 121, 122, 124, 129, 167, 182, 196, 197, 250, 253, 256, 265, 266, 299, 309, 326, 350, 354, 355, 365, 367, 368, 370, 374, 377, 378, 379, 388, 391, 392, 395, 396, 398, 399, 400, 429, 435, 516, 518, 520, 525, 537, 538, 561, 585, 586, 608, 618, 636, 637, 644, 646, 654, 655, 656, 670, 703, 735, 780, 800, 804, 839, 848, 875, 912, 946, 947, 949, 952, 953, 954, 956, 957, 958, 961, 962, 963, 964, 967, 971, 972, 973, 983, 989, 990, 1013], "hot": [4, 70, 115, 117, 129, 166, 196, 265, 299, 300, 308, 326, 379, 398, 399, 529, 544, 559, 626, 636, 637, 647, 658, 839, 841, 843, 844, 847, 849, 850, 953, 967, 1006, 1012, 1013], "For": [4, 8, 9, 12, 13, 19, 27, 32, 37, 40, 44, 46, 48, 49, 53, 56, 57, 59, 66, 72, 79, 85, 90, 96, 113, 115, 117, 122, 123, 125, 127, 142, 143, 146, 149, 151, 156, 161, 162, 166, 167, 184, 185, 196, 197, 200, 201, 204, 213, 214, 217, 219, 222, 225, 226, 228, 229, 230, 238, 246, 253, 256, 257, 263, 271, 274, 276, 286, 292, 294, 295, 300, 302, 306, 307, 308, 309, 310, 311, 317, 319, 326, 328, 334, 339, 340, 341, 344, 345, 348, 350, 354, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 385, 387, 388, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 407, 412, 417, 420, 422, 423, 424, 425, 426, 428, 429, 430, 433, 435, 436, 437, 439, 440, 441, 444, 445, 447, 451, 453, 460, 461, 462, 463, 467, 474, 476, 481, 492, 493, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 559, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 575, 580, 585, 586, 587, 588, 589, 592, 597, 600, 601, 605, 606, 607, 608, 609, 610, 611, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 670, 671, 673, 677, 679, 682, 684, 685, 706, 707, 715, 718, 719, 740, 746, 755, 760, 761, 764, 765, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 788, 796, 797, 798, 799, 800, 801, 803, 805, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 842, 845, 846, 848, 849, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 895, 901, 922, 941, 946, 947, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 971, 972, 973, 976, 980, 981, 983, 990, 991, 992, 998, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "consist": [4, 7, 26, 32, 37, 55, 56, 69, 79, 84, 89, 91, 95, 119, 125, 132, 146, 152, 154, 157, 162, 196, 214, 231, 262, 265, 294, 306, 309, 334, 340, 350, 354, 360, 362, 364, 367, 368, 372, 373, 374, 375, 378, 379, 380, 389, 391, 393, 397, 398, 399, 401, 409, 410, 412, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 468, 475, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 569, 589, 605, 606, 607, 608, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 652, 655, 656, 657, 665, 666, 667, 668, 669, 677, 678, 712, 772, 773, 781, 804, 805, 806, 808, 809, 810, 811, 819, 820, 822, 824, 827, 828, 834, 840, 841, 843, 847, 848, 851, 852, 854, 855, 867, 868, 871, 875, 876, 878, 879, 881, 884, 886, 895, 897, 918, 928, 931, 946, 949, 950, 951, 953, 954, 956, 957, 958, 960, 961, 967, 970, 972, 973, 976, 977, 978, 981, 983, 990, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "scale": [4, 5, 12, 25, 27, 37, 40, 46, 47, 55, 57, 60, 70, 78, 81, 85, 97, 100, 101, 126, 146, 149, 150, 151, 154, 155, 156, 158, 164, 167, 172, 176, 177, 184, 196, 198, 210, 211, 212, 214, 216, 219, 223, 225, 231, 246, 253, 256, 257, 258, 263, 293, 294, 295, 297, 298, 304, 307, 310, 319, 321, 323, 326, 337, 350, 353, 354, 359, 360, 361, 364, 367, 371, 375, 377, 378, 379, 390, 391, 392, 396, 398, 400, 401, 426, 429, 430, 436, 443, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 479, 488, 492, 493, 502, 512, 516, 518, 519, 525, 527, 528, 539, 540, 560, 568, 569, 575, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 610, 619, 622, 623, 624, 625, 627, 630, 636, 637, 638, 639, 640, 650, 652, 654, 655, 656, 659, 665, 666, 667, 668, 670, 672, 677, 681, 694, 724, 734, 736, 746, 752, 754, 780, 788, 791, 802, 803, 804, 814, 816, 817, 833, 834, 837, 840, 845, 846, 848, 851, 853, 854, 856, 860, 861, 862, 864, 865, 867, 868, 875, 876, 877, 878, 879, 880, 881, 933, 934, 935, 946, 949, 950, 953, 957, 958, 959, 960, 961, 965, 971, 972, 978, 981, 983, 990, 991, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "same": [4, 7, 8, 16, 26, 34, 37, 40, 44, 53, 56, 57, 63, 69, 70, 71, 91, 95, 97, 100, 103, 105, 111, 113, 116, 119, 120, 122, 123, 127, 146, 149, 166, 167, 169, 182, 184, 185, 190, 196, 197, 198, 204, 214, 234, 235, 246, 251, 252, 253, 254, 256, 257, 259, 261, 262, 264, 269, 276, 281, 294, 298, 299, 301, 303, 306, 308, 317, 326, 334, 339, 340, 341, 348, 350, 354, 355, 356, 361, 362, 364, 366, 367, 368, 370, 372, 375, 377, 378, 379, 380, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 411, 414, 418, 419, 429, 435, 444, 448, 449, 450, 451, 452, 453, 454, 455, 457, 471, 473, 474, 476, 482, 486, 487, 509, 510, 514, 515, 516, 517, 518, 521, 525, 527, 529, 530, 531, 532, 535, 537, 538, 539, 540, 542, 543, 545, 546, 567, 568, 580, 581, 584, 588, 589, 591, 600, 605, 606, 607, 610, 611, 624, 627, 630, 631, 633, 636, 637, 641, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 662, 665, 677, 682, 683, 690, 691, 693, 695, 703, 708, 709, 713, 732, 733, 734, 755, 756, 757, 763, 765, 767, 769, 770, 772, 773, 774, 775, 777, 778, 780, 782, 783, 788, 792, 793, 797, 798, 799, 800, 801, 802, 803, 818, 819, 820, 824, 826, 827, 828, 839, 840, 841, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 864, 875, 876, 883, 885, 897, 901, 912, 920, 928, 931, 932, 942, 946, 947, 949, 951, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 971, 972, 973, 978, 987, 992, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "minmaxscal": [4, 5, 142, 172, 218, 293, 308, 356, 392, 443, 861, 947, 967, 1000, 1003, 1006, 1008, 1009, 1010], "although": [4, 9, 25, 116, 129, 193, 214, 225, 243, 274, 350, 356, 368, 379, 391, 392, 396, 399, 474, 791, 794, 847, 956, 958, 959, 960, 963, 973, 983, 990, 991, 992, 998, 1006, 1013], "doe": [4, 7, 8, 9, 12, 24, 25, 27, 31, 40, 46, 53, 56, 69, 71, 72, 85, 106, 115, 118, 124, 129, 146, 155, 166, 167, 193, 196, 202, 214, 217, 218, 219, 222, 225, 228, 229, 230, 232, 243, 244, 251, 256, 258, 259, 263, 265, 266, 274, 289, 298, 300, 302, 309, 310, 317, 318, 324, 326, 334, 336, 339, 340, 341, 354, 361, 365, 367, 368, 370, 374, 378, 379, 385, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 414, 420, 422, 426, 428, 429, 433, 435, 446, 452, 454, 458, 465, 477, 481, 486, 505, 513, 515, 516, 517, 519, 522, 524, 527, 528, 535, 536, 537, 538, 539, 540, 542, 543, 559, 566, 567, 569, 571, 572, 575, 580, 584, 588, 610, 627, 628, 629, 632, 633, 634, 637, 649, 660, 661, 676, 678, 680, 685, 705, 706, 707, 711, 713, 715, 720, 723, 755, 760, 761, 764, 765, 769, 774, 777, 778, 788, 833, 837, 838, 839, 841, 843, 845, 848, 849, 850, 853, 856, 864, 867, 868, 872, 875, 876, 883, 884, 885, 886, 890, 895, 899, 912, 915, 916, 925, 941, 946, 947, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 965, 967, 971, 972, 973, 992, 998, 999, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "result": [4, 5, 6, 9, 13, 19, 24, 25, 26, 27, 30, 32, 37, 40, 42, 44, 45, 46, 48, 53, 54, 59, 61, 65, 70, 72, 74, 80, 85, 95, 98, 100, 102, 106, 113, 114, 115, 116, 119, 122, 123, 125, 127, 128, 138, 145, 146, 149, 151, 153, 157, 161, 166, 167, 168, 169, 176, 181, 182, 185, 186, 191, 197, 198, 200, 204, 210, 211, 214, 217, 218, 221, 225, 228, 230, 235, 241, 246, 247, 250, 251, 254, 256, 257, 259, 262, 263, 264, 265, 267, 268, 271, 276, 278, 282, 292, 293, 294, 298, 299, 300, 303, 306, 308, 310, 311, 314, 317, 319, 326, 330, 331, 334, 339, 341, 346, 347, 354, 355, 356, 361, 362, 364, 367, 368, 370, 371, 372, 374, 377, 378, 379, 380, 385, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 414, 420, 421, 423, 425, 426, 429, 430, 431, 432, 433, 434, 436, 438, 441, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 467, 486, 487, 489, 491, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 556, 558, 559, 560, 562, 566, 567, 569, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 609, 610, 612, 614, 618, 621, 630, 631, 636, 642, 643, 644, 645, 654, 655, 656, 664, 667, 668, 669, 670, 671, 672, 673, 686, 688, 690, 695, 702, 703, 705, 706, 707, 708, 709, 713, 714, 715, 731, 733, 734, 741, 748, 751, 755, 756, 757, 758, 760, 761, 762, 764, 768, 769, 772, 773, 774, 776, 777, 778, 779, 784, 788, 789, 790, 791, 793, 794, 797, 803, 804, 805, 807, 808, 809, 810, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 840, 841, 849, 850, 853, 854, 864, 868, 872, 875, 877, 880, 883, 884, 885, 886, 887, 888, 895, 896, 911, 912, 914, 918, 924, 928, 931, 947, 949, 951, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 969, 971, 972, 973, 978, 980, 983, 987, 988, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "becaus": [4, 5, 19, 25, 27, 40, 47, 50, 70, 81, 85, 115, 117, 122, 146, 150, 153, 156, 166, 167, 169, 176, 182, 189, 196, 202, 204, 214, 231, 242, 253, 256, 257, 262, 274, 276, 293, 294, 295, 298, 302, 303, 316, 326, 334, 339, 340, 341, 344, 350, 354, 355, 362, 368, 371, 374, 377, 378, 379, 385, 388, 389, 391, 395, 396, 397, 398, 399, 401, 412, 426, 427, 440, 444, 454, 460, 461, 462, 512, 514, 530, 532, 534, 536, 538, 540, 543, 546, 548, 566, 569, 585, 586, 589, 610, 611, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 651, 654, 655, 656, 657, 658, 667, 677, 687, 690, 691, 699, 700, 701, 723, 740, 762, 765, 769, 774, 788, 800, 804, 809, 810, 819, 822, 824, 826, 827, 828, 834, 845, 846, 854, 856, 860, 861, 863, 864, 865, 866, 876, 878, 881, 884, 886, 923, 947, 949, 950, 951, 952, 953, 954, 955, 957, 958, 960, 962, 964, 967, 972, 973, 981, 991, 1004, 1005, 1007, 1008, 1009, 1010, 1012], "compar": [4, 5, 19, 24, 25, 27, 36, 37, 43, 49, 54, 56, 57, 63, 67, 71, 80, 83, 85, 86, 94, 98, 103, 105, 108, 110, 111, 113, 118, 119, 122, 127, 129, 133, 146, 153, 161, 162, 164, 166, 168, 169, 174, 178, 180, 184, 185, 191, 193, 196, 199, 202, 204, 206, 213, 214, 215, 217, 218, 221, 224, 227, 230, 235, 237, 239, 243, 244, 249, 251, 253, 261, 263, 265, 267, 272, 277, 281, 285, 286, 290, 291, 296, 297, 299, 303, 304, 308, 339, 340, 341, 348, 350, 356, 362, 364, 367, 368, 388, 389, 391, 393, 394, 395, 396, 398, 400, 401, 404, 420, 421, 422, 424, 425, 427, 428, 429, 431, 437, 442, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 468, 480, 482, 490, 492, 500, 502, 506, 509, 515, 529, 530, 539, 540, 541, 543, 549, 617, 622, 623, 631, 633, 635, 636, 641, 644, 646, 654, 655, 662, 673, 683, 690, 693, 708, 715, 720, 763, 773, 774, 788, 802, 809, 818, 822, 825, 829, 833, 836, 837, 844, 845, 846, 848, 851, 852, 853, 854, 856, 861, 864, 877, 879, 880, 946, 949, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 963, 967, 968, 971, 972, 973, 976, 977, 990, 991, 998, 1000, 1005, 1006, 1011], "onehotencod": [4, 70, 115, 119, 129, 166, 167, 196, 214, 227, 236, 238, 307, 309, 361, 379, 392, 398, 445, 446, 544, 559, 560, 839, 843, 844, 847, 850, 967, 999, 1002, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "linear_model": [4, 7, 8, 10, 13, 25, 27, 30, 54, 70, 72, 74, 85, 115, 129, 131, 132, 135, 137, 145, 146, 149, 161, 164, 166, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 225, 226, 227, 228, 233, 236, 238, 252, 259, 264, 265, 269, 270, 274, 295, 299, 300, 306, 307, 308, 309, 310, 318, 339, 350, 354, 356, 357, 366, 367, 368, 372, 374, 375, 378, 379, 392, 398, 418, 444, 515, 517, 520, 521, 523, 524, 526, 545, 546, 547, 548, 575, 609, 610, 612, 613, 616, 618, 619, 620, 621, 678, 679, 765, 788, 797, 798, 799, 807, 808, 809, 810, 834, 851, 855, 875, 876, 879, 882, 907, 949, 952, 953, 957, 958, 963, 965, 967, 971, 987, 988, 990, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "ridgecv": [4, 74, 129, 146, 166, 233, 379, 398, 546, 621, 650, 653, 953, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "numpi": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 89, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 345, 346, 347, 348, 350, 354, 360, 361, 362, 365, 367, 368, 369, 370, 372, 374, 375, 377, 378, 379, 382, 384, 385, 387, 388, 391, 392, 395, 396, 397, 398, 399, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 463, 468, 471, 472, 474, 481, 484, 486, 487, 509, 512, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 547, 548, 559, 560, 566, 567, 569, 605, 606, 607, 608, 609, 610, 611, 621, 624, 625, 627, 630, 631, 635, 636, 637, 638, 639, 640, 641, 644, 646, 648, 650, 654, 655, 656, 662, 666, 669, 670, 671, 673, 677, 680, 681, 684, 685, 687, 690, 692, 703, 704, 711, 712, 715, 716, 731, 733, 750, 756, 758, 759, 760, 765, 766, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 802, 804, 805, 808, 809, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 839, 840, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 877, 878, 880, 881, 883, 898, 910, 912, 916, 917, 918, 921, 922, 926, 928, 931, 944, 946, 947, 952, 953, 955, 957, 958, 960, 963, 967, 969, 972, 976, 978, 980, 983, 986, 987, 988, 990, 991, 992, 998, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013], "np": [4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 33, 34, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 85, 91, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 109, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 138, 141, 142, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 247, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 295, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 345, 346, 347, 348, 350, 354, 361, 362, 367, 368, 371, 372, 375, 377, 379, 388, 391, 392, 395, 396, 397, 398, 399, 401, 404, 406, 409, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 439, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 463, 474, 475, 486, 487, 498, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 535, 536, 537, 538, 539, 541, 542, 543, 544, 547, 548, 559, 560, 563, 564, 566, 567, 571, 572, 575, 584, 587, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 646, 648, 649, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 669, 670, 673, 680, 681, 684, 685, 687, 690, 692, 693, 703, 704, 711, 712, 715, 716, 718, 731, 733, 740, 746, 750, 755, 758, 759, 760, 765, 766, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 802, 803, 804, 805, 808, 809, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 826, 827, 828, 832, 833, 840, 841, 843, 849, 850, 851, 852, 853, 855, 856, 863, 864, 867, 868, 870, 871, 872, 875, 877, 878, 880, 881, 883, 884, 885, 886, 893, 895, 896, 898, 900, 901, 910, 912, 917, 921, 922, 924, 926, 928, 931, 933, 934, 935, 946, 947, 952, 953, 955, 957, 958, 960, 961, 963, 967, 968, 969, 971, 972, 973, 983, 987, 988, 990, 991, 992, 999, 1001, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "one_hot_encod": [4, 119], "handle_unknown": [4, 70, 115, 119, 129, 167, 168, 227, 236, 238, 307, 310, 849, 850, 967, 1002, 1006, 1010, 1011], "ignor": [4, 6, 8, 17, 44, 49, 61, 70, 112, 115, 119, 126, 129, 167, 184, 188, 196, 205, 211, 227, 236, 238, 247, 293, 294, 307, 310, 331, 340, 345, 367, 368, 370, 372, 379, 382, 391, 392, 398, 399, 409, 410, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 440, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 461, 462, 466, 481, 486, 487, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 529, 535, 536, 537, 538, 541, 542, 543, 544, 556, 559, 560, 561, 566, 567, 568, 569, 580, 581, 605, 606, 607, 608, 610, 611, 613, 617, 621, 627, 628, 629, 632, 633, 634, 636, 642, 643, 654, 655, 656, 666, 667, 668, 669, 670, 685, 691, 692, 703, 706, 707, 715, 732, 733, 740, 746, 751, 755, 760, 761, 764, 765, 772, 773, 775, 776, 777, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 820, 821, 822, 824, 825, 828, 835, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 909, 932, 953, 954, 957, 959, 963, 967, 972, 988, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "sparse_output": [4, 119, 238, 310, 544, 843, 847, 849, 859, 967, 1013], "alpha": [4, 5, 7, 8, 10, 12, 13, 16, 17, 24, 26, 31, 37, 40, 42, 45, 52, 55, 59, 64, 74, 81, 85, 95, 97, 98, 100, 101, 102, 104, 105, 110, 112, 113, 118, 122, 125, 126, 128, 129, 130, 146, 149, 152, 154, 155, 156, 157, 158, 161, 162, 166, 175, 176, 177, 178, 180, 181, 182, 184, 185, 190, 191, 193, 194, 196, 197, 198, 200, 201, 205, 208, 209, 214, 217, 218, 221, 231, 237, 241, 256, 257, 258, 259, 260, 263, 264, 266, 268, 269, 271, 274, 276, 279, 281, 284, 286, 292, 294, 298, 299, 300, 301, 303, 307, 309, 310, 316, 318, 323, 324, 327, 328, 331, 335, 336, 339, 354, 362, 368, 372, 377, 393, 394, 396, 398, 400, 401, 403, 450, 451, 457, 505, 509, 511, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 538, 573, 574, 576, 589, 591, 593, 594, 601, 609, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 665, 700, 725, 811, 812, 813, 815, 833, 834, 871, 883, 884, 885, 886, 946, 952, 953, 957, 959, 961, 965, 970, 971, 972, 973, 987, 990, 992, 995, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1010, 1011, 1012, 1013], "logspac": [4, 12, 72, 77, 103, 135, 136, 146, 150, 155, 166, 189, 200, 201, 229, 231, 245, 257, 269, 271, 280, 292, 300, 326, 334, 946, 952, 953, 987, 988, 990], "naive_linear_pipelin": 4, "142": [4, 57, 398], "014": [4, 57, 264, 340, 372], "184": [4, 196, 295, 372, 990], "020": [4, 48, 965], "three": [4, 7, 26, 40, 41, 46, 57, 77, 89, 90, 110, 115, 116, 119, 121, 130, 131, 132, 143, 157, 166, 188, 193, 196, 198, 205, 207, 231, 241, 244, 307, 330, 355, 360, 364, 382, 388, 391, 395, 396, 397, 399, 430, 441, 476, 687, 914, 950, 952, 953, 954, 957, 960, 967, 971, 972, 976, 983, 991, 998], "higher": [4, 56, 79, 98, 103, 113, 115, 122, 125, 149, 151, 156, 157, 167, 168, 172, 196, 197, 214, 221, 222, 247, 250, 254, 256, 259, 270, 281, 326, 339, 340, 341, 350, 354, 362, 365, 368, 388, 391, 393, 398, 400, 401, 402, 424, 427, 428, 450, 457, 487, 510, 517, 521, 526, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 551, 566, 569, 585, 586, 597, 605, 609, 613, 615, 624, 625, 630, 631, 638, 639, 640, 641, 654, 656, 657, 682, 701, 705, 729, 762, 772, 774, 777, 778, 780, 788, 795, 800, 803, 822, 825, 851, 867, 868, 869, 877, 878, 879, 880, 881, 888, 949, 953, 954, 956, 957, 960, 964, 967, 971, 972, 990, 992, 999, 1004, 1006, 1013], "suspect": 4, "origin": [4, 5, 13, 16, 20, 21, 30, 46, 47, 48, 51, 55, 57, 73, 74, 95, 97, 98, 105, 127, 142, 143, 149, 151, 153, 154, 161, 162, 167, 172, 184, 185, 217, 218, 219, 221, 222, 229, 230, 231, 247, 253, 259, 284, 295, 299, 315, 332, 339, 341, 350, 362, 364, 366, 367, 368, 370, 371, 377, 379, 388, 392, 395, 396, 398, 399, 401, 402, 403, 414, 421, 423, 424, 425, 426, 429, 438, 442, 443, 444, 454, 460, 461, 462, 471, 472, 473, 479, 497, 509, 512, 513, 515, 516, 517, 518, 519, 521, 522, 531, 532, 533, 534, 537, 539, 540, 541, 543, 545, 546, 547, 548, 551, 559, 562, 572, 585, 586, 592, 608, 610, 616, 619, 620, 621, 627, 649, 670, 674, 679, 705, 740, 746, 801, 822, 836, 840, 841, 844, 845, 849, 850, 852, 853, 854, 856, 864, 867, 868, 869, 872, 877, 880, 893, 895, 896, 900, 901, 928, 931, 950, 951, 953, 954, 956, 957, 960, 963, 968, 969, 970, 971, 974, 977, 981, 983, 992, 1001, 1002, 1004, 1006, 1008, 1010, 1012], "mere": [4, 256, 379, 803, 971], "min": [4, 9, 10, 11, 12, 13, 25, 27, 31, 52, 57, 74, 89, 95, 98, 112, 118, 121, 122, 127, 138, 151, 153, 154, 155, 162, 166, 178, 184, 185, 191, 198, 199, 202, 210, 218, 229, 230, 232, 274, 282, 283, 289, 292, 294, 298, 300, 301, 319, 325, 332, 335, 375, 391, 394, 396, 460, 461, 462, 463, 490, 512, 513, 516, 518, 519, 527, 528, 541, 605, 609, 610, 632, 633, 634, 635, 660, 661, 682, 718, 734, 757, 777, 778, 825, 833, 834, 846, 855, 861, 912, 924, 953, 957, 960, 967, 1004, 1007, 1009, 1010, 1013], "properli": [4, 25, 126, 154, 251, 306, 356, 365, 367, 370, 374, 382, 397, 875, 876, 877, 878, 879, 880, 881, 946, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "automat": [4, 8, 12, 46, 62, 64, 70, 103, 135, 145, 175, 199, 241, 242, 254, 257, 298, 307, 311, 318, 328, 355, 357, 362, 365, 367, 368, 370, 374, 379, 382, 387, 391, 392, 393, 396, 398, 399, 400, 413, 429, 431, 435, 441, 443, 444, 446, 474, 477, 493, 519, 527, 529, 535, 539, 542, 566, 569, 572, 580, 621, 623, 624, 625, 630, 631, 636, 637, 638, 639, 640, 641, 644, 645, 646, 650, 652, 653, 654, 656, 659, 662, 665, 666, 669, 673, 776, 791, 794, 802, 812, 833, 834, 837, 838, 840, 849, 850, 867, 868, 875, 877, 880, 883, 885, 889, 901, 928, 931, 946, 948, 951, 956, 961, 967, 971, 973, 977, 978, 987, 998, 1001, 1002, 1003, 1009, 1012, 1013], "term": [4, 13, 14, 25, 32, 57, 100, 113, 119, 122, 154, 184, 185, 196, 198, 200, 210, 213, 214, 254, 258, 292, 309, 334, 339, 341, 356, 357, 367, 368, 370, 377, 385, 390, 391, 393, 395, 396, 398, 401, 423, 426, 428, 431, 438, 441, 502, 513, 516, 518, 522, 525, 527, 566, 567, 568, 569, 582, 585, 586, 610, 611, 618, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 650, 651, 652, 653, 654, 656, 658, 665, 673, 804, 805, 833, 834, 851, 855, 857, 875, 876, 877, 878, 879, 880, 881, 946, 948, 951, 952, 953, 954, 957, 958, 959, 961, 962, 967, 971, 972, 983, 992, 1006, 1012, 1013], "raw": [4, 12, 14, 37, 80, 97, 129, 154, 166, 172, 295, 316, 341, 354, 362, 374, 379, 389, 390, 391, 393, 396, 399, 448, 453, 479, 480, 481, 537, 538, 539, 541, 560, 566, 567, 568, 569, 612, 655, 668, 672, 683, 763, 822, 879, 954, 957, 961, 963, 964, 967, 970, 989, 991, 999, 1003, 1006, 1009], "recogn": [4, 29, 35, 85, 117, 164, 197, 309, 372, 391, 399, 480, 675, 691, 802, 880, 957, 983], "increas": [4, 7, 14, 26, 37, 43, 56, 57, 60, 74, 98, 111, 113, 118, 126, 142, 149, 153, 154, 155, 158, 166, 167, 172, 176, 178, 196, 197, 198, 200, 214, 222, 229, 243, 256, 257, 258, 263, 269, 292, 299, 300, 308, 315, 326, 334, 340, 341, 344, 354, 355, 356, 366, 374, 375, 379, 389, 391, 393, 396, 398, 399, 402, 420, 424, 431, 442, 457, 510, 514, 531, 532, 537, 538, 539, 540, 545, 546, 566, 569, 605, 613, 614, 615, 623, 628, 629, 632, 633, 634, 636, 637, 644, 646, 654, 655, 656, 660, 661, 663, 664, 670, 684, 685, 690, 759, 766, 777, 778, 805, 824, 826, 827, 828, 831, 833, 834, 875, 876, 912, 946, 948, 952, 953, 954, 956, 957, 960, 971, 972, 973, 981, 998, 1000, 1003, 1007, 1009, 1010, 1013], "strong": [4, 164, 166, 174, 189, 193, 200, 202, 215, 231, 390, 396, 398, 401, 502, 627, 650, 950, 951, 953, 954, 956, 964, 972, 990], "similar": [4, 5, 7, 12, 17, 25, 26, 37, 49, 51, 56, 59, 74, 85, 95, 99, 122, 145, 149, 156, 166, 167, 168, 196, 198, 210, 217, 219, 220, 221, 225, 231, 247, 253, 256, 259, 262, 263, 264, 274, 276, 298, 309, 325, 334, 340, 341, 350, 354, 359, 361, 363, 365, 366, 367, 368, 371, 372, 375, 377, 379, 385, 388, 389, 391, 394, 395, 396, 398, 399, 400, 401, 402, 420, 421, 423, 424, 425, 429, 431, 433, 434, 481, 486, 487, 514, 560, 567, 568, 569, 588, 655, 670, 673, 681, 683, 693, 697, 702, 705, 706, 708, 711, 715, 717, 732, 737, 738, 763, 767, 768, 771, 772, 773, 798, 803, 848, 868, 871, 875, 876, 877, 878, 896, 946, 949, 950, 952, 953, 954, 956, 958, 960, 961, 963, 964, 967, 969, 970, 971, 972, 973, 977, 978, 983, 991, 994, 998, 1002, 1003, 1004, 1006, 1010, 1011], "magnitud": [4, 105, 112, 150, 162, 166, 213, 261, 298, 303, 309, 354, 362, 372, 391, 398, 401, 591, 630, 682, 856, 953, 957, 961, 967, 971, 973, 1000, 1007], "discret": [4, 46, 105, 108, 133, 148, 159, 164, 167, 196, 214, 297, 301, 304, 356, 359, 362, 363, 370, 378, 379, 391, 396, 398, 399, 401, 418, 419, 427, 431, 439, 440, 441, 470, 492, 493, 498, 500, 531, 537, 549, 566, 567, 570, 573, 574, 577, 578, 585, 586, 588, 589, 590, 594, 595, 596, 635, 636, 719, 771, 774, 785, 802, 811, 812, 815, 837, 841, 849, 850, 853, 856, 864, 875, 880, 883, 884, 922, 946, 953, 954, 955, 957, 958, 960, 973, 977, 983, 994, 1000, 1003, 1011, 1012, 1013], "manner": [4, 74, 95, 143, 167, 172, 243, 310, 311, 355, 367, 372, 391, 396, 398, 399, 687, 816, 817, 946, 957, 973, 1001, 1008], "uniqu": [4, 16, 24, 30, 42, 47, 48, 56, 57, 62, 66, 116, 117, 123, 124, 166, 168, 211, 214, 243, 265, 285, 317, 339, 340, 341, 361, 368, 375, 379, 391, 392, 395, 398, 399, 420, 429, 433, 435, 443, 446, 474, 527, 528, 529, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 588, 611, 612, 613, 644, 646, 654, 675, 687, 731, 759, 774, 776, 788, 799, 804, 805, 808, 814, 823, 828, 833, 847, 849, 850, 859, 875, 877, 883, 884, 885, 886, 900, 912, 922, 923, 953, 958, 981, 990, 1006, 1009, 1010, 1012], "decid": [4, 11, 56, 59, 70, 247, 253, 256, 263, 362, 367, 380, 399, 401, 429, 436, 537, 538, 613, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 649, 659, 662, 772, 818, 819, 820, 822, 824, 826, 827, 828, 839, 956, 963, 981, 1011], "therebi": [4, 395, 398, 949, 1008], "assumpt": [4, 9, 25, 27, 36, 67, 77, 78, 98, 154, 164, 196, 225, 298, 372, 377, 378, 381, 389, 390, 391, 393, 395, 396, 399, 401, 426, 430, 432, 466, 481, 490, 510, 512, 519, 628, 632, 773, 774, 777, 778, 788, 813, 867, 868, 951, 953, 957, 958, 959, 960, 962, 963, 964, 967, 970, 973, 1005, 1011], "impli": [4, 149, 339, 340, 341, 396, 398, 401, 453, 551, 560, 588, 589, 600, 712, 899, 953, 954, 992, 1009], "give": [4, 12, 13, 24, 25, 39, 44, 49, 59, 61, 63, 69, 70, 74, 97, 121, 149, 154, 158, 161, 166, 167, 185, 187, 193, 196, 197, 198, 225, 247, 253, 258, 265, 276, 278, 282, 285, 295, 309, 310, 318, 354, 356, 362, 364, 366, 367, 368, 372, 374, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 396, 398, 399, 403, 414, 426, 428, 430, 438, 451, 474, 477, 481, 511, 516, 527, 528, 529, 530, 535, 536, 542, 543, 544, 571, 572, 575, 585, 586, 616, 625, 639, 643, 654, 698, 713, 716, 769, 774, 777, 778, 788, 797, 798, 799, 801, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 853, 854, 856, 864, 953, 957, 960, 961, 962, 964, 965, 967, 971, 972, 973, 977, 981, 983, 985, 990, 991, 992, 998, 1002, 1005, 1006, 1008, 1009, 1010, 1012], "lot": [4, 81, 166, 362, 367, 368, 374, 396, 398, 777, 778, 867, 868, 946, 969, 971, 972, 977, 978, 981, 991, 992, 998, 1003, 1005, 1006, 1007, 1008, 1010], "addit": [4, 5, 7, 12, 13, 14, 65, 70, 81, 95, 98, 110, 114, 116, 119, 120, 145, 154, 155, 156, 162, 166, 167, 175, 180, 185, 197, 198, 221, 235, 258, 265, 270, 274, 298, 307, 308, 316, 341, 346, 350, 354, 355, 359, 360, 361, 362, 363, 365, 366, 367, 368, 371, 372, 374, 377, 378, 380, 382, 385, 390, 391, 393, 395, 396, 399, 400, 401, 402, 413, 421, 422, 424, 425, 429, 436, 448, 453, 474, 481, 509, 510, 512, 514, 515, 517, 519, 520, 521, 527, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 589, 590, 597, 606, 608, 609, 613, 616, 617, 618, 619, 620, 621, 622, 623, 648, 665, 666, 670, 676, 677, 680, 719, 735, 736, 765, 772, 773, 780, 805, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 857, 867, 868, 875, 876, 906, 912, 925, 946, 951, 953, 957, 958, 960, 961, 964, 967, 969, 970, 971, 972, 973, 977, 983, 994, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "level": [4, 9, 11, 12, 16, 27, 41, 53, 95, 115, 118, 138, 146, 148, 153, 154, 156, 159, 164, 167, 207, 208, 209, 210, 211, 214, 225, 229, 245, 256, 259, 265, 266, 282, 289, 324, 325, 327, 328, 330, 332, 340, 348, 354, 362, 364, 365, 367, 372, 379, 381, 382, 389, 396, 399, 405, 433, 471, 472, 481, 499, 509, 514, 515, 525, 539, 540, 545, 546, 589, 600, 603, 644, 645, 646, 654, 655, 656, 665, 668, 670, 672, 694, 700, 705, 762, 797, 798, 799, 801, 804, 805, 832, 833, 834, 888, 946, 953, 957, 958, 960, 965, 971, 973, 977, 978, 992, 1001, 1009, 1012, 1013], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 264, 372], "131": [4, 13, 55, 59, 67, 110, 189, 215, 372, 957, 999], "rate": [4, 109, 114, 119, 141, 167, 196, 203, 214, 229, 234, 253, 256, 263, 265, 266, 293, 294, 295, 356, 367, 391, 392, 396, 400, 445, 514, 531, 532, 537, 538, 539, 540, 570, 573, 574, 576, 577, 578, 584, 622, 623, 646, 654, 655, 656, 670, 676, 680, 704, 759, 766, 832, 833, 834, 869, 946, 953, 954, 957, 960, 961, 971, 973, 981, 1002, 1006, 1007], "better": [4, 5, 9, 19, 24, 31, 50, 73, 74, 77, 78, 79, 80, 85, 89, 95, 98, 113, 121, 122, 129, 141, 153, 154, 155, 157, 158, 161, 168, 176, 182, 185, 196, 197, 198, 204, 211, 213, 214, 221, 230, 231, 246, 250, 256, 258, 259, 262, 265, 266, 295, 302, 310, 311, 326, 339, 340, 341, 344, 350, 354, 362, 366, 367, 368, 371, 372, 374, 379, 381, 385, 389, 391, 393, 395, 396, 397, 398, 399, 401, 428, 429, 516, 518, 525, 537, 538, 539, 540, 585, 586, 608, 649, 655, 670, 687, 702, 711, 716, 719, 740, 773, 801, 811, 812, 813, 814, 815, 816, 817, 822, 833, 834, 853, 854, 864, 867, 868, 875, 876, 925, 946, 947, 949, 950, 951, 953, 954, 956, 957, 959, 960, 961, 965, 967, 970, 971, 973, 978, 980, 981, 985, 987, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "confirm": [4, 85, 113, 119, 122, 168, 196, 198, 259, 262, 265, 341, 370, 946, 967, 1006], "progress": [4, 7, 8, 95, 132, 146, 162, 189, 281, 310, 364, 367, 370, 371, 380, 382, 387, 391, 537, 538, 670, 805, 807, 810, 825, 833, 834, 981, 990, 992, 998, 1000, 1007, 1012], "veri": [4, 25, 27, 39, 40, 42, 44, 50, 52, 59, 61, 79, 80, 81, 84, 91, 98, 101, 122, 127, 135, 154, 161, 166, 167, 168, 185, 196, 197, 198, 201, 204, 214, 221, 225, 231, 241, 258, 259, 262, 263, 265, 266, 271, 276, 294, 298, 309, 314, 317, 326, 336, 339, 341, 350, 354, 362, 366, 367, 368, 371, 372, 374, 377, 378, 379, 385, 389, 391, 393, 395, 396, 397, 398, 399, 400, 401, 422, 426, 431, 441, 450, 451, 457, 478, 482, 488, 535, 536, 539, 540, 542, 543, 545, 546, 567, 568, 600, 628, 629, 632, 633, 634, 642, 660, 661, 663, 669, 670, 673, 683, 720, 723, 767, 772, 774, 782, 784, 788, 791, 794, 816, 817, 841, 845, 846, 847, 856, 867, 868, 877, 880, 883, 884, 885, 886, 912, 946, 949, 950, 952, 953, 954, 955, 956, 957, 960, 961, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 990, 991, 998, 1003, 1004, 1006, 1009, 1011, 1013], "new": [4, 7, 8, 10, 50, 55, 57, 59, 69, 70, 103, 109, 112, 114, 115, 122, 128, 129, 143, 146, 149, 155, 162, 168, 169, 196, 202, 210, 225, 255, 258, 263, 280, 282, 307, 310, 315, 318, 325, 350, 355, 356, 361, 362, 364, 365, 366, 368, 369, 370, 372, 374, 375, 378, 379, 380, 382, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 478, 479, 480, 482, 483, 486, 487, 488, 490, 501, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 559, 560, 561, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 682, 686, 691, 692, 696, 699, 700, 701, 702, 704, 705, 708, 711, 716, 717, 718, 720, 723, 730, 731, 734, 738, 743, 744, 746, 755, 762, 765, 766, 772, 773, 774, 777, 778, 780, 787, 788, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 893, 895, 896, 898, 906, 907, 911, 912, 922, 925, 927, 932, 938, 944, 946, 947, 949, 953, 957, 958, 960, 961, 962, 963, 967, 969, 970, 971, 972, 978, 981, 983, 984, 987, 990, 992, 996, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 362, 367, 954, 976], "1440": 4, "caus": [4, 25, 27, 122, 150, 194, 196, 201, 214, 341, 350, 365, 371, 389, 391, 396, 397, 399, 401, 423, 426, 428, 438, 487, 510, 560, 567, 588, 589, 811, 812, 813, 815, 840, 849, 851, 854, 855, 895, 896, 946, 947, 953, 957, 965, 967, 970, 978, 983, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "signific": [4, 122, 142, 164, 214, 249, 256, 272, 274, 339, 350, 361, 362, 377, 391, 394, 395, 398, 482, 510, 512, 527, 528, 605, 636, 637, 644, 646, 654, 655, 656, 793, 801, 875, 877, 878, 879, 880, 881, 956, 957, 960, 998, 1000, 1001, 1002, 1006], "overfit": [4, 115, 122, 164, 167, 168, 175, 225, 243, 249, 251, 257, 261, 271, 272, 292, 299, 300, 302, 326, 344, 346, 347, 362, 379, 389, 395, 398, 417, 466, 467, 545, 546, 635, 774, 777, 778, 788, 798, 799, 833, 834, 836, 851, 855, 952, 961, 963, 965, 973, 981, 990, 1001], "avoid": [4, 7, 12, 44, 56, 61, 71, 115, 166, 167, 198, 205, 214, 220, 238, 251, 257, 261, 279, 284, 286, 287, 302, 322, 323, 340, 355, 365, 367, 368, 370, 371, 372, 379, 380, 382, 385, 389, 391, 393, 395, 398, 399, 402, 420, 422, 424, 431, 441, 447, 471, 472, 473, 477, 486, 487, 512, 515, 517, 521, 524, 563, 564, 612, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 667, 669, 671, 673, 690, 774, 775, 779, 785, 788, 797, 798, 799, 836, 839, 845, 846, 848, 853, 854, 855, 856, 858, 860, 861, 862, 864, 865, 866, 868, 873, 912, 951, 954, 956, 957, 960, 961, 963, 965, 967, 972, 973, 978, 992, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "kbinsdiscret": [4, 53, 164, 196, 214, 297, 300, 304, 311, 490, 635, 839, 855, 884, 967, 1006, 1010, 1011, 1012], "re": [4, 8, 13, 26, 55, 69, 70, 119, 152, 214, 242, 246, 259, 261, 265, 307, 339, 341, 355, 367, 370, 374, 378, 380, 395, 399, 448, 449, 450, 451, 452, 453, 454, 455, 533, 534, 539, 540, 541, 624, 630, 638, 640, 776, 791, 794, 883, 884, 885, 886, 953, 958, 960, 967, 972, 978, 981, 992, 998, 1002, 1003, 1005, 1007], "fine": [4, 37, 118, 212, 247, 254, 346, 347, 364, 370, 379, 399, 912, 960, 963, 978, 1008], "grain": [4, 31, 37, 230, 247, 300, 372, 399, 978], "still": [4, 32, 44, 53, 56, 61, 81, 99, 117, 119, 122, 129, 149, 155, 166, 168, 175, 196, 198, 214, 230, 259, 265, 298, 308, 309, 339, 340, 350, 356, 361, 366, 367, 368, 370, 371, 372, 374, 377, 379, 391, 395, 398, 399, 402, 420, 424, 433, 453, 474, 557, 605, 610, 613, 615, 695, 733, 755, 758, 767, 768, 777, 778, 791, 794, 854, 856, 875, 893, 946, 947, 951, 953, 956, 960, 963, 965, 972, 973, 976, 978, 981, 998, 1000, 1003, 1004, 1006, 1007, 1008, 1011, 1012, 1013], "express": [4, 7, 12, 149, 154, 166, 256, 257, 308, 323, 341, 361, 362, 367, 372, 391, 396, 399, 429, 435, 436, 566, 567, 569, 694, 774, 780, 788, 797, 798, 799, 800, 803, 823, 953, 957, 961, 967, 968, 973, 1006], "advantag": [4, 5, 39, 56, 95, 100, 196, 197, 225, 242, 257, 310, 350, 379, 389, 395, 396, 399, 401, 421, 425, 439, 512, 567, 627, 652, 653, 740, 804, 805, 806, 836, 837, 875, 876, 877, 878, 879, 880, 881, 946, 949, 952, 953, 954, 957, 958, 960, 961, 967, 971, 972, 973, 1001], "final": [4, 26, 40, 42, 69, 70, 79, 81, 85, 90, 100, 109, 111, 113, 115, 119, 120, 123, 129, 132, 143, 154, 162, 167, 172, 175, 184, 185, 193, 196, 198, 213, 214, 218, 225, 238, 245, 254, 262, 306, 307, 326, 354, 356, 365, 367, 370, 378, 379, 388, 389, 391, 392, 395, 398, 399, 417, 422, 426, 427, 431, 438, 441, 443, 514, 533, 534, 545, 546, 548, 605, 625, 631, 637, 657, 668, 672, 697, 774, 804, 805, 836, 837, 872, 875, 946, 947, 953, 954, 957, 960, 963, 964, 967, 970, 981, 990, 1003, 1006, 1007, 1008, 1009, 1011], "observ": [4, 5, 7, 9, 11, 13, 16, 24, 27, 37, 40, 43, 53, 61, 70, 77, 79, 80, 81, 96, 97, 100, 103, 109, 113, 114, 116, 122, 125, 128, 137, 138, 146, 149, 152, 154, 155, 156, 158, 166, 167, 168, 175, 176, 191, 192, 194, 196, 197, 198, 200, 210, 214, 221, 222, 228, 229, 252, 256, 258, 259, 263, 282, 289, 303, 317, 325, 326, 331, 334, 339, 340, 341, 346, 347, 362, 364, 379, 389, 391, 392, 393, 394, 395, 396, 397, 400, 401, 421, 423, 425, 426, 428, 438, 448, 449, 450, 451, 452, 453, 454, 455, 502, 510, 529, 530, 541, 588, 589, 624, 630, 635, 679, 694, 696, 735, 795, 814, 822, 855, 953, 956, 957, 961, 962, 963, 964, 970, 971, 972, 973, 980, 984, 986, 987, 989, 999, 1011, 1012, 1013], "complet": [4, 37, 38, 39, 44, 49, 52, 57, 61, 85, 127, 141, 143, 146, 164, 168, 169, 202, 224, 225, 239, 254, 306, 340, 350, 362, 367, 370, 371, 374, 377, 392, 395, 396, 398, 399, 421, 425, 428, 431, 441, 442, 443, 446, 473, 514, 515, 516, 517, 522, 524, 536, 547, 548, 559, 565, 566, 567, 569, 605, 606, 607, 608, 627, 635, 649, 651, 682, 683, 693, 694, 695, 708, 713, 714, 734, 763, 770, 804, 807, 810, 819, 835, 836, 837, 838, 898, 942, 946, 951, 953, 957, 958, 960, 972, 973, 983, 992, 998, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "induct": [4, 36, 67, 122, 164, 379, 391, 398, 405, 421, 490, 542, 605, 870, 871, 919, 941, 953, 970, 1000], "bia": [4, 27, 77, 108, 116, 117, 122, 133, 164, 168, 175, 176, 178, 200, 261, 292, 334, 350, 362, 368, 379, 389, 393, 397, 398, 401, 502, 534, 537, 538, 585, 586, 592, 620, 626, 627, 636, 637, 647, 648, 658, 833, 834, 849, 851, 855, 860, 861, 863, 864, 865, 866, 884, 952, 953, 956, 957, 961, 962, 965, 971, 990], "preserv": [4, 48, 100, 221, 229, 251, 368, 369, 390, 395, 396, 399, 559, 566, 567, 569, 624, 630, 674, 677, 751, 755, 792, 793, 794, 859, 895, 896, 947, 953, 954, 967, 969, 987, 998, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "smooth": [4, 46, 47, 54, 154, 189, 197, 212, 326, 364, 380, 391, 397, 401, 427, 428, 515, 516, 517, 524, 535, 536, 537, 538, 542, 543, 544, 568, 569, 597, 600, 654, 811, 812, 813, 815, 853, 864, 883, 884, 885, 886, 953, 959, 967, 971, 972, 973, 992], "local": [4, 39, 56, 60, 95, 98, 126, 154, 155, 164, 167, 197, 216, 219, 221, 223, 225, 234, 277, 290, 346, 347, 355, 364, 365, 367, 370, 372, 374, 382, 391, 396, 398, 399, 401, 426, 431, 441, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 480, 516, 518, 522, 525, 527, 537, 538, 541, 544, 588, 589, 666, 667, 668, 669, 670, 671, 673, 674, 735, 736, 819, 822, 825, 827, 837, 846, 868, 871, 879, 955, 956, 960, 961, 973, 991, 993, 994, 1002, 1006, 1010], "attempt": [4, 54, 167, 192, 202, 251, 339, 354, 366, 379, 391, 403, 429, 436, 447, 609, 666, 667, 671, 792, 818, 819, 820, 822, 824, 826, 827, 828, 854, 856, 873, 895, 896, 953, 954, 960, 973, 983, 1005, 1010], "each": [4, 7, 8, 10, 11, 12, 14, 17, 25, 26, 27, 32, 34, 37, 41, 43, 44, 47, 49, 53, 57, 59, 60, 69, 70, 72, 73, 74, 84, 85, 88, 90, 91, 95, 96, 100, 103, 104, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 127, 128, 129, 130, 131, 132, 142, 144, 146, 151, 153, 158, 161, 162, 166, 167, 169, 172, 175, 182, 183, 185, 190, 194, 196, 197, 198, 200, 201, 204, 211, 214, 218, 225, 226, 229, 230, 231, 232, 235, 236, 238, 241, 244, 246, 250, 251, 252, 254, 256, 257, 259, 261, 262, 265, 266, 274, 276, 279, 281, 285, 287, 289, 292, 293, 295, 298, 299, 300, 301, 306, 308, 309, 310, 314, 315, 316, 319, 326, 332, 334, 340, 341, 344, 345, 348, 350, 354, 355, 356, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 497, 500, 501, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 685, 686, 688, 691, 697, 702, 705, 706, 707, 715, 716, 722, 723, 725, 727, 728, 730, 731, 735, 736, 739, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 753, 755, 756, 757, 758, 760, 761, 762, 764, 765, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 901, 906, 907, 912, 914, 915, 925, 933, 934, 935, 938, 947, 949, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 981, 983, 987, 989, 990, 991, 992, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "sine": [4, 149, 154, 155, 164, 190, 202, 240, 248, 346, 363, 593, 772, 773, 956, 973], "cosin": [4, 40, 270, 276, 281, 359, 362, 379, 391, 396, 397, 421, 425, 429, 436, 513, 568, 569, 598, 674, 737, 738, 739, 742, 747, 748, 751, 755, 756, 757, 816, 817, 821, 848, 960, 973, 994, 1008], "match": [4, 37, 45, 95, 98, 102, 164, 172, 174, 196, 215, 219, 228, 341, 362, 365, 368, 370, 391, 396, 398, 399, 411, 428, 443, 445, 486, 487, 493, 504, 509, 515, 520, 526, 529, 545, 546, 550, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 636, 642, 643, 663, 664, 677, 681, 682, 683, 691, 693, 697, 711, 763, 816, 817, 821, 825, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 875, 882, 899, 925, 954, 956, 957, 959, 960, 979, 983, 992, 994, 998, 1004, 1005, 1006, 1008, 1010, 1011], "togeth": [4, 12, 51, 59, 70, 118, 129, 149, 155, 166, 177, 218, 221, 252, 310, 329, 345, 350, 368, 370, 377, 378, 379, 385, 391, 398, 399, 406, 430, 432, 545, 546, 667, 693, 774, 788, 836, 837, 953, 954, 958, 964, 967, 973, 974, 981, 984, 986, 1004], "equival": [4, 14, 56, 119, 125, 145, 149, 154, 166, 214, 246, 265, 341, 350, 354, 365, 372, 375, 378, 379, 391, 392, 393, 394, 395, 396, 398, 400, 401, 421, 423, 424, 425, 426, 428, 429, 436, 448, 453, 487, 512, 519, 536, 537, 539, 540, 541, 543, 566, 569, 591, 594, 597, 599, 602, 624, 625, 626, 630, 632, 636, 637, 644, 645, 646, 647, 650, 654, 655, 658, 661, 665, 666, 671, 686, 687, 700, 711, 718, 724, 725, 726, 738, 747, 756, 757, 772, 773, 777, 778, 782, 784, 807, 810, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 833, 839, 845, 846, 848, 851, 852, 853, 854, 856, 863, 865, 866, 899, 910, 943, 946, 951, 953, 954, 955, 957, 963, 967, 971, 972, 973, 1006, 1007, 1008, 1009, 1011, 1012], "importantli": [4, 13, 96, 167, 172, 298, 391], "jump": [4, 197, 298, 364, 367, 399, 855], "functiontransform": [4, 69, 115, 196, 214, 318, 444, 967, 1003, 1004, 1006, 1011, 1012, 1013], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 24, 25, 27, 33, 34, 37, 40, 48, 53, 55, 60, 69, 74, 91, 101, 103, 105, 113, 115, 121, 122, 125, 129, 152, 155, 157, 162, 175, 176, 184, 185, 188, 196, 197, 204, 205, 206, 214, 234, 237, 238, 244, 246, 251, 252, 253, 254, 255, 256, 257, 259, 260, 263, 270, 276, 281, 286, 289, 295, 298, 300, 306, 322, 326, 339, 341, 344, 348, 354, 360, 361, 362, 367, 368, 372, 373, 375, 377, 379, 389, 390, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 938, 941, 942, 943, 944, 945, 947, 957, 960, 964, 965, 972, 973, 978, 983, 988, 990, 992, 995, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lambda": [4, 7, 8, 10, 19, 55, 72, 121, 136, 176, 214, 256, 257, 302, 318, 387, 391, 396, 398, 399, 622, 623, 624, 625, 840, 852, 953, 967, 987, 1006, 1012], "sin": [4, 13, 19, 39, 96, 111, 121, 122, 126, 128, 141, 149, 155, 156, 158, 175, 176, 190, 197, 202, 219, 231, 247, 288, 299, 307, 333, 346, 347, 401, 494, 593, 677, 741, 991], "pi": [4, 13, 34, 39, 40, 96, 105, 126, 128, 141, 149, 176, 184, 190, 197, 219, 241, 242, 243, 246, 247, 270, 289, 307, 347, 382, 397, 401, 494, 495, 496, 593, 620, 951, 952, 953, 959, 991], "cos_transform": 4, "co": [4, 12, 13, 18, 22, 39, 40, 126, 128, 154, 164, 166, 197, 219, 256, 270, 310, 347, 370, 397, 399, 428, 430, 432, 466, 489, 569, 677, 697, 741, 770, 952, 967, 981, 993, 994], "effect": [4, 6, 27, 37, 39, 40, 45, 46, 53, 56, 61, 68, 75, 85, 98, 100, 122, 124, 126, 145, 149, 150, 154, 156, 164, 166, 167, 169, 196, 197, 198, 201, 202, 216, 221, 223, 242, 246, 256, 257, 258, 261, 264, 265, 295, 297, 299, 304, 307, 313, 320, 326, 331, 334, 335, 336, 339, 340, 341, 350, 355, 365, 367, 368, 371, 377, 379, 389, 391, 392, 396, 397, 398, 399, 401, 402, 429, 444, 468, 474, 478, 492, 502, 503, 535, 536, 537, 538, 542, 543, 544, 566, 567, 568, 569, 584, 587, 627, 636, 637, 650, 651, 652, 665, 669, 670, 681, 730, 762, 772, 779, 785, 793, 802, 822, 833, 834, 840, 845, 846, 848, 852, 853, 854, 856, 861, 864, 872, 875, 876, 880, 883, 884, 885, 886, 895, 896, 912, 931, 946, 951, 953, 954, 956, 957, 958, 964, 967, 970, 972, 973, 988, 990, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "expans": [4, 161, 308, 429, 851, 1007], "synthet": [4, 13, 25, 27, 31, 37, 42, 49, 116, 122, 127, 149, 154, 156, 167, 186, 198, 213, 292, 300, 334, 350, 354, 360, 369, 380, 391, 393, 400, 636, 637, 875, 876, 882, 951, 990, 1004], "beyond": [4, 27, 197, 198, 354, 356, 366, 367, 377, 389, 398, 880, 954, 958, 967, 972, 978, 1006], "pd": [4, 12, 25, 70, 72, 116, 122, 126, 154, 161, 166, 167, 168, 175, 185, 196, 204, 214, 234, 235, 238, 246, 254, 256, 257, 259, 267, 268, 309, 310, 334, 339, 340, 371, 379, 392, 443, 445, 605, 606, 607, 608, 610, 755, 893, 895, 896, 946, 947, 964, 967, 1009, 1011, 1012, 1013], "hour_df": 4, "datafram": [4, 25, 69, 70, 72, 119, 122, 126, 154, 161, 166, 167, 168, 175, 185, 204, 214, 235, 238, 246, 254, 256, 257, 259, 267, 268, 309, 310, 311, 334, 339, 340, 361, 362, 367, 368, 371, 379, 392, 413, 422, 423, 425, 426, 428, 443, 445, 446, 447, 460, 461, 462, 463, 467, 468, 469, 470, 474, 478, 479, 480, 482, 483, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 560, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 666, 667, 774, 777, 778, 788, 802, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 891, 918, 928, 931, 946, 947, 978, 992, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "arang": [4, 11, 13, 16, 40, 57, 59, 64, 71, 72, 78, 79, 103, 106, 109, 118, 119, 120, 121, 123, 124, 127, 131, 142, 149, 151, 156, 157, 161, 162, 169, 180, 196, 199, 201, 205, 220, 228, 230, 251, 256, 259, 264, 267, 274, 276, 289, 292, 300, 309, 314, 315, 317, 319, 326, 333, 339, 341, 346, 347, 348, 350, 377, 388, 395, 399, 444, 522, 802, 851, 855, 952, 953, 961, 967, 971, 988], "reshap": [4, 5, 6, 9, 13, 16, 24, 30, 32, 34, 46, 47, 48, 50, 51, 53, 54, 57, 71, 79, 84, 95, 98, 105, 113, 117, 118, 127, 138, 144, 149, 151, 152, 153, 154, 155, 156, 158, 175, 187, 193, 209, 210, 212, 213, 218, 220, 222, 225, 230, 233, 245, 254, 280, 282, 289, 292, 294, 295, 299, 300, 301, 306, 309, 310, 319, 325, 326, 330, 331, 332, 335, 336, 377, 388, 396, 398, 399, 425, 444, 562, 609, 802, 851, 855, 953, 967, 988, 991, 1003], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 14, 19, 44, 49, 52, 53, 57, 61, 89, 96, 99, 106, 127, 172, 187, 212, 214, 217, 218, 219, 220, 221, 222, 228, 229, 232, 234, 276, 280, 293, 298, 299, 306, 309, 311, 326, 339, 340, 341, 350, 359, 362, 368, 371, 372, 379, 387, 392, 396, 399, 400, 407, 413, 422, 423, 425, 426, 428, 443, 445, 447, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 666, 667, 668, 669, 670, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 947, 949, 953, 958, 960, 967, 968, 969, 983, 988, 991, 992, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012], "hour_co": 4, "2d": [4, 36, 44, 47, 48, 49, 53, 60, 61, 67, 93, 107, 127, 164, 190, 197, 202, 217, 219, 222, 225, 228, 229, 323, 326, 361, 363, 367, 368, 375, 379, 391, 392, 396, 399, 401, 421, 431, 441, 443, 446, 466, 468, 469, 470, 471, 472, 478, 479, 480, 482, 488, 492, 511, 519, 527, 562, 564, 613, 621, 635, 650, 669, 715, 756, 797, 801, 805, 843, 891, 895, 896, 911, 922, 943, 944, 951, 953, 954, 957, 964, 968, 973, 983, 989, 998, 1002, 1005, 1006, 1007, 1010, 1012], "scatter": [4, 9, 11, 12, 16, 24, 30, 31, 34, 38, 39, 42, 43, 44, 45, 49, 52, 55, 56, 57, 58, 59, 61, 66, 79, 85, 89, 90, 91, 97, 99, 100, 101, 102, 104, 111, 112, 118, 125, 127, 128, 130, 138, 141, 149, 150, 151, 153, 155, 156, 157, 158, 166, 172, 176, 179, 186, 188, 192, 193, 194, 197, 198, 199, 205, 208, 209, 210, 213, 217, 218, 219, 220, 221, 222, 225, 230, 231, 232, 241, 242, 243, 244, 245, 246, 247, 251, 257, 259, 270, 276, 282, 283, 284, 285, 286, 287, 288, 292, 298, 300, 301, 303, 310, 316, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 339, 345, 346, 347, 393, 609, 679, 951, 953, 990], "color": [4, 7, 8, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 33, 34, 36, 38, 40, 42, 44, 45, 46, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 71, 77, 78, 79, 80, 81, 85, 90, 91, 94, 95, 96, 97, 99, 102, 103, 104, 105, 109, 111, 118, 119, 120, 121, 124, 125, 126, 127, 129, 131, 135, 138, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 166, 168, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 192, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 210, 213, 214, 218, 219, 220, 222, 225, 229, 230, 231, 232, 235, 241, 242, 243, 244, 245, 246, 247, 251, 255, 257, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 274, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 298, 299, 300, 302, 303, 307, 316, 317, 319, 324, 325, 326, 327, 328, 330, 332, 333, 335, 345, 346, 361, 362, 364, 374, 391, 398, 399, 426, 471, 472, 484, 561, 562, 756, 931, 971, 973, 1003, 1008, 1010], "map": [4, 5, 10, 11, 17, 19, 26, 53, 100, 114, 121, 124, 127, 136, 149, 164, 172, 196, 217, 219, 224, 239, 257, 260, 265, 279, 284, 287, 289, 297, 298, 304, 318, 326, 332, 340, 341, 361, 377, 379, 389, 390, 391, 392, 395, 396, 398, 399, 405, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 474, 476, 480, 487, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 739, 742, 772, 773, 774, 777, 778, 785, 786, 788, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 863, 864, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 917, 946, 949, 954, 957, 959, 969, 972, 1006, 1007, 1008, 1010, 1011, 1012], "space": [4, 8, 10, 19, 31, 46, 48, 53, 56, 57, 59, 60, 62, 64, 69, 73, 85, 95, 97, 104, 106, 115, 118, 122, 127, 143, 149, 155, 172, 197, 217, 218, 219, 221, 229, 230, 231, 234, 235, 242, 247, 264, 267, 268, 276, 285, 286, 300, 308, 339, 340, 341, 348, 350, 354, 359, 362, 363, 364, 367, 373, 377, 378, 379, 388, 390, 391, 394, 396, 397, 398, 399, 401, 423, 426, 427, 428, 431, 441, 443, 444, 445, 446, 460, 461, 462, 476, 510, 512, 513, 516, 517, 518, 519, 521, 522, 527, 551, 560, 566, 567, 569, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 610, 611, 616, 618, 619, 620, 621, 666, 667, 668, 670, 671, 672, 674, 677, 774, 777, 778, 788, 806, 816, 817, 824, 825, 826, 827, 836, 841, 842, 848, 853, 867, 868, 869, 888, 916, 949, 950, 951, 952, 953, 955, 957, 958, 960, 961, 962, 963, 967, 968, 969, 970, 971, 972, 973, 977, 978, 983, 990, 992, 993, 994, 998, 999, 1001, 1006, 1007, 1008, 1012], "akin": [4, 197, 379], "sort": [4, 8, 10, 12, 19, 20, 24, 59, 69, 113, 119, 122, 128, 146, 175, 196, 197, 214, 233, 256, 257, 260, 270, 288, 333, 339, 346, 347, 367, 370, 374, 375, 379, 395, 398, 399, 401, 512, 519, 533, 544, 559, 588, 595, 675, 690, 696, 706, 707, 715, 731, 760, 761, 764, 766, 774, 799, 811, 812, 813, 814, 815, 816, 817, 824, 826, 827, 828, 831, 841, 847, 849, 850, 853, 855, 864, 877, 880, 912, 917, 953, 960, 963, 967, 981, 992, 998, 1002, 1008, 1009, 1010, 1012, 1013], "analog": [4, 124, 372, 398, 957, 958, 972, 1007], "clock": 4, "25th": [4, 854], "back": [4, 100, 236, 355, 367, 368, 380, 385, 392, 399, 414, 423, 426, 438, 460, 461, 462, 486, 487, 511, 512, 513, 516, 518, 519, 522, 559, 608, 636, 637, 644, 646, 654, 655, 656, 705, 841, 843, 844, 845, 849, 850, 851, 853, 854, 856, 867, 868, 875, 953, 957, 961, 978, 983, 992, 1001, 1006, 1008, 1009, 1012], "natur": [4, 31, 122, 156, 166, 167, 172, 196, 197, 213, 214, 221, 241, 247, 265, 339, 367, 368, 379, 396, 398, 399, 402, 424, 429, 436, 529, 568, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 670, 682, 718, 732, 734, 818, 819, 820, 822, 824, 826, 827, 828, 855, 910, 953, 954, 956, 957, 960, 962, 967, 971, 977, 980, 998, 1006], "sp": [4, 166, 947, 991], "c": [4, 6, 7, 8, 11, 12, 16, 19, 24, 25, 27, 30, 31, 34, 39, 40, 42, 43, 45, 52, 55, 56, 58, 59, 60, 64, 70, 71, 73, 85, 89, 90, 91, 100, 101, 102, 110, 112, 113, 118, 119, 125, 127, 128, 130, 131, 136, 138, 144, 150, 151, 152, 153, 157, 172, 179, 181, 186, 187, 188, 189, 191, 193, 194, 200, 203, 205, 207, 208, 209, 210, 212, 213, 217, 218, 219, 221, 222, 230, 231, 232, 236, 242, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 259, 261, 265, 267, 276, 279, 281, 282, 284, 285, 286, 287, 288, 289, 292, 293, 295, 298, 299, 300, 306, 307, 308, 309, 310, 311, 316, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 339, 345, 346, 347, 354, 355, 361, 362, 364, 365, 367, 368, 369, 371, 374, 375, 377, 382, 388, 389, 391, 392, 394, 395, 396, 398, 400, 417, 422, 423, 426, 428, 438, 447, 501, 506, 512, 516, 518, 519, 525, 527, 528, 568, 585, 586, 588, 609, 617, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 650, 651, 657, 663, 664, 666, 667, 670, 671, 686, 692, 693, 696, 708, 712, 718, 719, 735, 736, 774, 788, 801, 811, 812, 813, 814, 815, 816, 817, 823, 825, 832, 847, 849, 850, 851, 855, 870, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 890, 895, 896, 922, 946, 949, 950, 953, 954, 955, 957, 959, 960, 962, 964, 967, 969, 971, 972, 973, 977, 981, 983, 987, 988, 990, 991, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "colorbar": [4, 11, 30, 40, 95, 106, 117, 125, 144, 150, 152, 153, 155, 167, 217, 229, 245, 267, 298, 326, 675, 1010], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 53, 79, 116, 133, 205, 215, 309, 428, 512, 946, 957, 967], "166": [4, 237, 239, 295, 372, 957, 998], "simpl": [4, 16, 27, 70, 74, 77, 84, 85, 95, 120, 156, 164, 167, 197, 213, 237, 257, 277, 290, 310, 322, 339, 341, 345, 350, 365, 367, 368, 369, 370, 371, 373, 377, 378, 379, 380, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 405, 411, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 492, 500, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 763, 765, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 949, 951, 952, 953, 954, 956, 957, 960, 967, 969, 971, 973, 978, 981, 983, 992, 995, 998], "wors": [4, 85, 150, 167, 202, 256, 264, 350, 391, 401, 412, 444, 460, 461, 462, 530, 532, 534, 536, 538, 540, 543, 546, 548, 588, 589, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 648, 650, 651, 656, 657, 658, 683, 699, 700, 701, 705, 762, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 957, 967, 1007], "further": [4, 25, 42, 77, 85, 95, 113, 118, 120, 145, 149, 154, 166, 168, 175, 217, 222, 253, 256, 257, 263, 311, 326, 340, 348, 354, 367, 377, 379, 390, 391, 393, 396, 398, 399, 401, 431, 441, 493, 510, 513, 560, 592, 600, 606, 636, 637, 644, 646, 654, 655, 656, 669, 673, 714, 751, 755, 758, 767, 768, 812, 818, 819, 826, 827, 854, 856, 875, 877, 880, 912, 956, 957, 959, 960, 961, 963, 967, 971, 972, 990, 992, 1007, 1011], "analyz": [4, 7, 17, 258, 265, 311, 339, 341, 371, 372, 391, 399, 481, 566, 567, 569, 765, 954, 957, 964, 965, 973, 992, 998, 1007], "reason": [4, 8, 12, 42, 53, 69, 122, 146, 166, 167, 172, 196, 197, 204, 214, 225, 229, 230, 234, 253, 256, 257, 262, 276, 299, 340, 341, 350, 354, 355, 356, 362, 366, 367, 368, 370, 374, 377, 378, 379, 380, 391, 392, 393, 396, 398, 399, 401, 486, 510, 552, 616, 624, 630, 632, 650, 665, 670, 740, 774, 788, 820, 825, 832, 851, 872, 946, 947, 952, 953, 954, 957, 959, 960, 961, 963, 967, 971, 972, 981, 992, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "disappoint": 4, "outcom": [4, 166, 379, 547, 636, 687, 719, 769, 804, 870, 871, 872, 877, 880, 953, 957, 973, 980, 992, 1002, 1006, 1008], "end": [4, 11, 26, 52, 73, 80, 85, 115, 129, 201, 204, 244, 251, 256, 260, 308, 309, 314, 317, 318, 340, 365, 367, 368, 370, 377, 379, 382, 388, 391, 392, 394, 398, 429, 435, 447, 466, 467, 486, 487, 515, 524, 535, 536, 537, 538, 542, 543, 544, 623, 624, 625, 628, 629, 630, 631, 632, 633, 638, 639, 640, 641, 659, 660, 661, 662, 774, 777, 778, 788, 795, 797, 834, 836, 873, 883, 884, 885, 886, 916, 917, 941, 946, 953, 954, 956, 957, 967, 969, 971, 981, 989, 992, 1003, 1005, 1008, 1011, 1012], "altern": [4, 26, 70, 85, 116, 117, 123, 129, 168, 180, 196, 214, 226, 244, 247, 265, 306, 339, 340, 341, 350, 362, 365, 370, 372, 377, 379, 382, 386, 388, 389, 391, 392, 393, 395, 396, 398, 399, 401, 421, 422, 425, 426, 431, 442, 477, 516, 518, 519, 525, 531, 532, 535, 536, 537, 538, 542, 543, 544, 560, 566, 567, 569, 595, 598, 621, 670, 684, 686, 748, 751, 755, 758, 776, 805, 840, 846, 849, 861, 868, 870, 883, 884, 885, 886, 925, 951, 953, 954, 956, 957, 960, 961, 965, 967, 969, 970, 972, 973, 978, 987, 992, 994, 1003, 1005, 1011, 1012], "larger": [4, 7, 27, 37, 39, 42, 47, 79, 81, 91, 105, 113, 123, 150, 155, 156, 162, 166, 167, 172, 176, 211, 212, 213, 222, 229, 231, 241, 247, 257, 259, 265, 266, 278, 292, 293, 295, 298, 326, 340, 341, 360, 362, 367, 372, 377, 379, 388, 389, 391, 392, 393, 395, 396, 398, 399, 401, 420, 423, 428, 429, 431, 433, 435, 493, 505, 519, 522, 539, 540, 541, 545, 546, 560, 567, 621, 630, 650, 651, 652, 653, 657, 665, 670, 682, 697, 713, 772, 821, 822, 853, 855, 856, 864, 869, 911, 912, 928, 931, 949, 950, 953, 954, 956, 957, 960, 961, 965, 967, 971, 972, 990, 992, 1002, 1003, 1006, 1007, 1008, 1011, 1012], "periodic_spline_transform": 4, "n_spline": [4, 855], "none": [4, 8, 9, 10, 16, 17, 26, 33, 39, 41, 42, 44, 52, 54, 55, 61, 97, 100, 105, 114, 118, 119, 121, 124, 138, 150, 156, 157, 169, 175, 196, 197, 204, 207, 214, 217, 231, 232, 250, 256, 257, 268, 276, 281, 283, 287, 302, 308, 309, 315, 318, 324, 326, 327, 330, 331, 333, 339, 340, 362, 364, 367, 368, 373, 375, 379, 391, 395, 398, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 685, 686, 687, 689, 690, 691, 692, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 712, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 898, 899, 900, 901, 904, 906, 911, 912, 915, 916, 917, 918, 922, 925, 926, 928, 931, 932, 938, 941, 942, 944, 946, 953, 957, 967, 970, 973, 983, 987, 992, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "degre": [4, 16, 34, 97, 112, 154, 161, 167, 172, 175, 184, 185, 197, 231, 236, 241, 242, 243, 246, 247, 256, 270, 295, 308, 309, 323, 333, 396, 400, 431, 476, 513, 519, 617, 618, 621, 634, 752, 772, 774, 822, 851, 855, 877, 878, 879, 880, 881, 949, 950, 952, 953, 954, 955, 957, 958, 960, 963, 964, 967, 970, 972, 990, 1001, 1007, 1011, 1012], "n_knot": [4, 197, 309, 855, 967, 1011], "include_bia": [4, 175, 270, 851, 855, 1012], "knot": [4, 197, 309, 855, 967, 1011], "linspac": [4, 8, 9, 10, 11, 13, 24, 26, 30, 34, 37, 38, 40, 42, 49, 79, 80, 94, 96, 105, 111, 120, 122, 149, 150, 152, 153, 154, 155, 156, 158, 167, 175, 176, 178, 186, 190, 196, 197, 198, 202, 206, 207, 208, 209, 210, 214, 222, 225, 228, 229, 231, 232, 245, 256, 258, 259, 263, 264, 265, 266, 270, 281, 282, 288, 289, 299, 301, 310, 311, 325, 326, 329, 331, 332, 334, 335, 336, 609, 610, 780, 800, 816, 817, 991], "again": [4, 66, 71, 122, 153, 155, 157, 158, 166, 221, 257, 339, 350, 370, 375, 379, 380, 391, 392, 393, 398, 399, 451, 545, 546, 612, 625, 629, 631, 633, 639, 641, 643, 670, 946, 953, 957, 971, 995, 998, 1006], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 41, 46, 47, 48, 51, 52, 53, 54, 57, 59, 60, 65, 69, 73, 74, 79, 84, 94, 95, 96, 98, 101, 111, 116, 117, 118, 119, 122, 123, 124, 127, 128, 138, 142, 144, 150, 151, 153, 155, 156, 161, 162, 164, 167, 168, 180, 184, 185, 196, 198, 203, 205, 208, 209, 210, 211, 212, 216, 218, 220, 223, 225, 228, 229, 230, 231, 233, 234, 241, 243, 245, 246, 247, 254, 256, 258, 259, 262, 263, 265, 266, 276, 281, 282, 286, 289, 292, 294, 300, 301, 306, 308, 311, 316, 317, 319, 323, 325, 326, 329, 330, 331, 332, 335, 336, 339, 340, 348, 354, 360, 361, 362, 367, 368, 379, 388, 389, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 900, 901, 906, 910, 912, 914, 917, 921, 923, 926, 928, 932, 933, 934, 935, 936, 937, 938, 947, 952, 953, 957, 958, 959, 960, 961, 963, 967, 968, 969, 970, 971, 972, 973, 988, 989, 991, 992, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1012], "concat": [4, 161, 185, 214], "cmap": [4, 5, 6, 11, 12, 13, 16, 20, 21, 31, 32, 34, 39, 40, 46, 47, 50, 51, 53, 54, 57, 79, 81, 88, 89, 95, 98, 102, 106, 112, 117, 118, 138, 144, 152, 153, 167, 175, 179, 187, 188, 205, 208, 209, 210, 212, 218, 219, 220, 229, 230, 233, 250, 251, 276, 279, 280, 282, 284, 285, 287, 289, 292, 294, 295, 298, 300, 314, 315, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 336, 345, 675, 988, 989], "cm": [4, 6, 11, 12, 13, 16, 20, 21, 24, 25, 27, 31, 32, 34, 38, 39, 46, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 66, 79, 81, 88, 89, 95, 98, 102, 112, 117, 118, 138, 144, 152, 153, 167, 179, 188, 205, 208, 209, 210, 212, 218, 219, 220, 226, 229, 230, 233, 238, 250, 251, 276, 280, 282, 286, 289, 292, 294, 295, 298, 300, 308, 311, 314, 315, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 336, 345, 364, 392, 675, 888, 957, 967, 973, 988, 989], "tab20b": 4, "stai": [4, 26, 37, 105, 166, 340, 366, 367, 370, 379, 380, 962, 1004], "midnight": 4, "fewer": [4, 13, 26, 110, 118, 120, 196, 354, 400, 401, 427, 440, 531, 572, 674, 806, 916, 953, 958, 960, 1003, 1004, 1005], "most": [4, 6, 8, 12, 13, 19, 24, 27, 52, 53, 61, 77, 84, 85, 104, 116, 123, 129, 141, 142, 143, 145, 146, 154, 162, 166, 167, 168, 169, 172, 196, 197, 214, 235, 241, 247, 253, 254, 259, 263, 264, 266, 285, 298, 306, 309, 315, 326, 339, 340, 341, 350, 354, 355, 356, 362, 363, 365, 367, 368, 370, 371, 372, 374, 377, 379, 380, 382, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 423, 424, 429, 435, 436, 439, 447, 474, 481, 499, 502, 510, 512, 517, 521, 527, 529, 539, 540, 544, 545, 566, 567, 569, 571, 582, 589, 605, 608, 627, 636, 650, 652, 654, 656, 665, 666, 670, 673, 702, 705, 723, 735, 736, 740, 762, 769, 772, 773, 777, 778, 793, 804, 805, 818, 819, 820, 822, 824, 825, 826, 827, 828, 851, 853, 860, 861, 863, 864, 865, 866, 873, 911, 912, 914, 922, 925, 946, 947, 951, 952, 953, 954, 955, 956, 957, 958, 960, 963, 964, 965, 970, 971, 972, 973, 976, 977, 978, 981, 988, 990, 992, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 231, 364], "132": [4, 13, 55, 110, 398], "013": [4, 264, 340], "successfulli": [4, 13, 302, 366, 370, 399, 971], "reduc": [4, 7, 42, 45, 46, 47, 48, 53, 71, 77, 113, 120, 122, 124, 127, 143, 166, 175, 176, 194, 201, 204, 227, 229, 234, 257, 263, 285, 300, 311, 340, 341, 350, 359, 361, 364, 367, 372, 377, 379, 389, 390, 391, 393, 395, 396, 398, 399, 400, 402, 424, 425, 429, 436, 439, 471, 512, 522, 527, 533, 534, 535, 536, 541, 542, 543, 551, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 605, 621, 630, 650, 651, 652, 653, 665, 670, 673, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 803, 853, 864, 867, 868, 883, 884, 885, 886, 946, 949, 951, 952, 953, 954, 957, 960, 969, 970, 974, 983, 991, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1012], "choic": [4, 7, 40, 46, 64, 69, 77, 103, 149, 150, 156, 161, 185, 197, 234, 250, 254, 256, 259, 281, 308, 339, 340, 350, 354, 365, 368, 371, 377, 382, 391, 393, 395, 397, 398, 400, 401, 431, 441, 450, 451, 452, 453, 454, 455, 457, 516, 518, 519, 525, 537, 616, 625, 626, 634, 636, 637, 639, 647, 658, 670, 683, 805, 818, 819, 824, 826, 827, 853, 856, 864, 866, 875, 876, 899, 946, 951, 953, 954, 955, 957, 958, 963, 965, 970, 971, 972, 973, 1005, 1008, 1009, 1013], "arbitrari": [4, 85, 95, 96, 97, 115, 156, 175, 196, 213, 214, 254, 298, 302, 308, 339, 348, 355, 367, 377, 379, 392, 395, 396, 398, 399, 403, 429, 434, 436, 444, 510, 511, 537, 538, 559, 617, 626, 647, 658, 666, 775, 776, 781, 783, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 840, 842, 855, 946, 948, 949, 953, 954, 957, 960, 967, 978, 992, 998, 999, 1002, 1004, 1005, 1006, 1008, 1012], "held": [4, 8, 70, 103, 123, 168, 204, 243, 259, 264, 274, 398, 537, 538, 539, 540, 679, 774, 777, 778, 788, 833, 834, 846, 946, 947, 956, 965, 992], "point": [4, 9, 11, 13, 16, 26, 31, 37, 38, 40, 41, 48, 49, 52, 57, 59, 63, 66, 79, 80, 84, 89, 90, 91, 93, 98, 100, 101, 107, 112, 118, 119, 127, 151, 156, 157, 164, 166, 167, 168, 175, 179, 185, 188, 190, 192, 194, 196, 197, 198, 202, 205, 208, 209, 213, 214, 217, 218, 219, 220, 221, 225, 228, 230, 234, 243, 247, 250, 253, 257, 258, 263, 265, 266, 274, 276, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 299, 300, 302, 314, 315, 319, 322, 325, 326, 327, 328, 330, 331, 335, 336, 339, 340, 341, 345, 350, 354, 355, 356, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 377, 379, 380, 390, 391, 396, 397, 398, 399, 402, 403, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 448, 451, 453, 476, 482, 490, 492, 493, 497, 500, 503, 508, 511, 513, 519, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 588, 589, 606, 609, 610, 611, 615, 616, 617, 622, 623, 629, 633, 635, 648, 649, 651, 653, 654, 656, 657, 660, 661, 666, 667, 668, 669, 670, 671, 672, 677, 679, 684, 685, 688, 691, 695, 700, 702, 708, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 741, 756, 757, 772, 773, 774, 788, 797, 806, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 833, 834, 841, 855, 869, 870, 871, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 893, 949, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 969, 970, 972, 973, 977, 978, 987, 990, 991, 992, 998, 999, 1000, 1002, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 115, 298], "insight": [4, 7, 166, 167, 197, 198, 214, 294, 298, 339, 348, 389, 774, 777, 778, 788, 799, 964, 973, 981], "last_hour": 4, "slice": [4, 17, 118, 205, 219, 222, 230, 279, 284, 287, 309, 310, 322, 362, 368, 375, 392, 443, 446, 471, 472, 486, 524, 617, 751, 755, 758, 891, 915, 916, 928, 1010, 1012], "suptitl": [4, 5, 14, 32, 33, 34, 39, 40, 50, 53, 56, 59, 66, 74, 95, 98, 106, 118, 119, 126, 129, 158, 166, 167, 190, 195, 211, 212, 217, 218, 219, 233, 244, 252, 295, 298, 300, 306, 308, 314, 315, 319, 333, 334, 345], "label": [4, 6, 7, 11, 12, 13, 16, 20, 24, 25, 26, 27, 32, 33, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 55, 57, 59, 62, 63, 64, 65, 66, 71, 72, 74, 77, 78, 79, 80, 84, 85, 90, 91, 94, 97, 99, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 136, 142, 149, 150, 154, 155, 156, 157, 158, 161, 164, 166, 169, 172, 175, 176, 178, 179, 180, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 211, 213, 214, 218, 219, 220, 225, 230, 231, 232, 234, 235, 243, 250, 251, 254, 255, 257, 258, 259, 260, 262, 265, 266, 267, 268, 269, 270, 271, 274, 281, 283, 285, 288, 293, 295, 298, 299, 303, 306, 307, 310, 313, 317, 318, 319, 320, 333, 334, 339, 340, 344, 345, 346, 347, 356, 359, 360, 361, 366, 367, 368, 371, 375, 379, 380, 388, 389, 390, 401, 402, 408, 409, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 444, 448, 465, 466, 467, 471, 472, 473, 474, 480, 481, 486, 487, 490, 492, 493, 497, 500, 501, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 547, 548, 570, 571, 572, 573, 574, 576, 577, 578, 582, 583, 584, 587, 588, 609, 636, 637, 644, 645, 646, 651, 652, 653, 654, 655, 656, 675, 676, 678, 680, 681, 682, 683, 685, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 702, 703, 704, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 731, 732, 733, 734, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 823, 825, 826, 833, 834, 836, 840, 843, 844, 847, 849, 850, 859, 870, 871, 872, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 895, 900, 901, 922, 923, 928, 946, 953, 954, 958, 959, 960, 961, 963, 964, 967, 971, 972, 973, 977, 979, 983, 988, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "actual": [4, 27, 46, 59, 74, 85, 110, 172, 185, 196, 204, 243, 252, 259, 341, 350, 354, 356, 364, 365, 367, 368, 371, 372, 377, 378, 379, 389, 391, 396, 399, 400, 414, 487, 493, 494, 505, 516, 518, 525, 540, 541, 623, 626, 636, 637, 644, 645, 646, 647, 648, 650, 652, 654, 655, 656, 658, 665, 669, 673, 679, 682, 687, 693, 699, 700, 701, 762, 772, 777, 778, 793, 794, 822, 853, 875, 881, 903, 904, 905, 932, 949, 956, 957, 960, 964, 965, 1005, 1006, 1012, 1013], "black": [4, 9, 10, 11, 26, 34, 44, 49, 55, 79, 80, 91, 95, 110, 118, 141, 149, 150, 154, 155, 158, 162, 166, 167, 175, 184, 185, 186, 188, 192, 196, 197, 198, 202, 205, 208, 209, 214, 225, 241, 244, 279, 281, 292, 293, 295, 319, 336, 345, 346, 347, 367, 382, 384, 391, 398, 401, 533, 534, 609, 963, 964, 973, 977, 983], "One": [4, 9, 12, 24, 30, 49, 90, 100, 103, 117, 119, 122, 125, 164, 169, 174, 211, 215, 225, 235, 246, 256, 263, 266, 285, 299, 321, 323, 337, 340, 354, 364, 367, 378, 379, 391, 394, 396, 397, 398, 399, 402, 424, 428, 451, 453, 457, 490, 544, 617, 636, 644, 646, 651, 653, 654, 655, 765, 781, 782, 804, 805, 806, 837, 838, 849, 879, 922, 947, 949, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 967, 972, 979, 994, 1002, 1004, 1011, 1013], "legend": [4, 7, 8, 9, 11, 24, 26, 33, 37, 40, 60, 71, 72, 74, 77, 78, 79, 80, 84, 85, 94, 97, 99, 103, 104, 105, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 142, 149, 150, 154, 155, 156, 157, 158, 166, 167, 172, 175, 176, 178, 180, 181, 184, 185, 186, 190, 196, 197, 198, 199, 202, 203, 204, 205, 206, 209, 210, 211, 213, 214, 220, 228, 229, 230, 231, 232, 235, 243, 251, 253, 255, 256, 258, 259, 260, 261, 263, 265, 266, 268, 269, 270, 271, 281, 282, 283, 288, 293, 299, 303, 307, 310, 316, 325, 328, 333, 339, 344, 345, 346, 347, 678], "draw": [4, 7, 16, 59, 158, 166, 192, 235, 258, 263, 326, 373, 394, 396, 397, 398, 533, 534, 535, 536, 541, 542, 543, 544, 589, 612, 679, 780, 887, 889, 956, 977, 986, 1011, 1012], "conclus": [4, 100, 166, 168, 196, 198, 256, 258, 350, 398, 986], "abov": [4, 25, 26, 37, 44, 65, 69, 112, 115, 120, 122, 132, 145, 146, 166, 167, 169, 182, 196, 198, 202, 207, 229, 232, 256, 262, 281, 300, 303, 307, 309, 340, 341, 348, 350, 354, 355, 356, 361, 362, 364, 365, 366, 367, 368, 370, 372, 377, 379, 380, 391, 392, 393, 395, 396, 397, 399, 401, 421, 425, 443, 446, 467, 473, 474, 475, 501, 568, 612, 682, 732, 774, 786, 788, 797, 839, 840, 853, 858, 864, 872, 922, 946, 947, 949, 951, 953, 954, 957, 960, 962, 964, 967, 971, 972, 973, 978, 983, 984, 990, 991, 992, 1004], "problemat": [4, 252, 392, 947, 1006], "captur": [4, 9, 12, 37, 39, 85, 122, 126, 141, 154, 175, 196, 247, 307, 326, 374, 398, 399, 400, 549, 566, 567, 569, 822, 957, 962, 970, 974, 990, 1010], "big": [4, 44, 59, 61, 200, 201, 218, 247, 355, 367, 372, 380, 393, 399, 403, 516, 539, 540, 780, 800, 811, 812, 813, 814, 815, 978, 981, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "goe": [4, 37, 115, 348, 367, 398, 450, 451, 457, 535, 536, 542, 543, 544, 883, 884, 885, 886, 967, 971], "artifact": [4, 13, 46, 47, 298, 356, 370], "discontinu": [4, 377], "fail": [4, 54, 65, 96, 103, 157, 158, 175, 256, 306, 355, 365, 367, 368, 369, 370, 374, 380, 382, 394, 395, 420, 451, 453, 654, 655, 656, 833, 834, 906, 946, 954, 998, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "intra": [4, 566, 569, 767, 768], "variat": [4, 12, 37, 126, 154, 155, 164, 166, 201, 240, 242, 247, 248, 253, 274, 307, 326, 364, 395, 396, 401, 423, 426, 438, 514, 621, 650, 652, 653, 772, 773, 792, 793, 795, 946, 957, 967, 970, 973, 977, 988, 990, 993, 994, 1001, 1003, 1004], "harmon": [4, 37, 263, 340, 391, 513, 519, 706, 707, 713, 760, 770, 957], "phase": [4, 190, 354, 605, 949, 954, 960, 981, 1006, 1008], "potenti": [4, 77, 162, 167, 175, 282, 283, 292, 341, 354, 355, 379, 382, 391, 395, 398, 399, 447, 460, 461, 462, 463, 474, 502, 527, 535, 536, 539, 540, 542, 543, 551, 584, 589, 612, 740, 865, 866, 873, 883, 884, 885, 886, 925, 963, 971, 992, 1001, 1008, 1009, 1012], "fix": [4, 6, 8, 25, 34, 46, 105, 115, 118, 149, 150, 154, 157, 166, 198, 214, 247, 259, 264, 292, 306, 307, 308, 309, 310, 311, 340, 354, 355, 361, 363, 365, 366, 367, 368, 370, 374, 377, 379, 380, 392, 395, 396, 398, 399, 401, 431, 441, 451, 482, 490, 509, 515, 518, 520, 526, 527, 537, 538, 542, 543, 566, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 608, 631, 641, 648, 662, 665, 669, 673, 685, 762, 772, 788, 795, 818, 819, 821, 824, 826, 827, 843, 859, 883, 884, 912, 946, 953, 956, 957, 960, 967, 978, 980, 988, 992, 996, 997, 999, 1000, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "two": [4, 7, 9, 11, 14, 24, 26, 30, 37, 39, 40, 59, 63, 69, 70, 74, 79, 84, 85, 89, 90, 91, 95, 97, 98, 100, 104, 108, 111, 117, 118, 119, 122, 125, 126, 127, 130, 133, 143, 146, 149, 150, 151, 152, 155, 156, 161, 162, 164, 166, 167, 168, 175, 179, 184, 185, 186, 187, 192, 196, 197, 198, 204, 205, 208, 213, 214, 219, 221, 222, 225, 230, 232, 234, 241, 242, 243, 245, 246, 247, 251, 253, 257, 263, 279, 281, 284, 285, 287, 289, 298, 300, 303, 306, 307, 309, 310, 316, 322, 323, 326, 327, 328, 335, 339, 340, 341, 345, 350, 360, 361, 362, 363, 364, 365, 367, 368, 370, 372, 373, 374, 377, 379, 380, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 436, 438, 443, 448, 449, 450, 451, 452, 453, 454, 455, 466, 468, 469, 470, 471, 472, 474, 476, 478, 479, 480, 481, 482, 483, 485, 488, 492, 497, 500, 514, 516, 518, 522, 525, 527, 528, 531, 538, 548, 559, 562, 568, 569, 570, 573, 574, 576, 577, 578, 580, 581, 584, 585, 586, 588, 589, 598, 599, 602, 606, 610, 617, 621, 623, 648, 649, 651, 670, 677, 681, 682, 683, 690, 693, 694, 697, 699, 700, 701, 708, 709, 712, 713, 715, 718, 720, 731, 732, 734, 740, 741, 748, 751, 754, 755, 756, 757, 758, 762, 763, 769, 770, 771, 772, 805, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 833, 834, 840, 841, 848, 849, 850, 851, 869, 870, 871, 875, 883, 885, 886, 922, 936, 937, 943, 946, 947, 949, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 983, 987, 990, 991, 992, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "onc": [4, 8, 50, 143, 146, 149, 218, 254, 257, 306, 310, 339, 341, 348, 350, 354, 356, 361, 362, 367, 370, 371, 372, 373, 374, 378, 379, 380, 391, 392, 394, 395, 396, 398, 399, 400, 401, 428, 430, 432, 451, 486, 487, 516, 522, 529, 537, 538, 568, 569, 575, 597, 605, 625, 629, 631, 633, 639, 641, 643, 644, 645, 646, 654, 655, 656, 675, 690, 694, 696, 713, 758, 775, 779, 782, 792, 811, 812, 813, 814, 815, 887, 953, 954, 960, 967, 971, 972, 973, 983, 992, 995, 998, 1006, 1008, 1009, 1010, 1011], "specif": [4, 11, 12, 27, 44, 61, 64, 69, 71, 129, 154, 157, 166, 167, 172, 214, 251, 256, 298, 306, 307, 311, 339, 340, 341, 350, 354, 355, 362, 367, 369, 370, 371, 372, 374, 377, 379, 382, 387, 390, 391, 392, 395, 396, 398, 399, 400, 401, 474, 481, 512, 529, 535, 542, 545, 546, 547, 548, 552, 566, 569, 571, 575, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 603, 618, 621, 624, 625, 630, 636, 650, 665, 675, 690, 691, 723, 774, 775, 776, 781, 782, 783, 788, 799, 812, 904, 906, 907, 922, 933, 934, 935, 951, 953, 954, 956, 957, 959, 960, 962, 964, 967, 971, 973, 974, 975, 976, 992, 994, 998, 1002, 1006, 1007, 1008, 1009, 1012, 1013], "furthermor": [4, 37, 155, 167, 168, 235, 237, 339, 340, 354, 356, 373, 391, 396, 398, 399, 540, 568, 584, 597, 682, 713, 723, 732, 734, 770, 875, 953, 965, 1001, 1005], "enforc": [4, 12, 53, 95, 154, 190, 285, 354, 367, 393, 396, 398, 401, 486, 505, 509, 515, 517, 520, 521, 523, 524, 526, 539, 540, 855, 895, 896, 947, 954, 1000, 1006, 1008, 1010], "behav": [4, 12, 48, 52, 56, 251, 298, 308, 326, 350, 367, 372, 377, 378, 391, 395, 856, 953, 967, 972, 974, 978, 992, 998, 1005, 1007, 1011, 1012], "similarli": [4, 12, 37, 91, 125, 167, 185, 196, 226, 256, 292, 298, 326, 350, 355, 363, 365, 368, 370, 371, 379, 380, 388, 394, 395, 399, 952, 954, 955, 957, 964, 971, 972, 974, 983, 987, 1006, 1012], "spiki": 4, "instanc": [4, 8, 10, 24, 26, 27, 53, 55, 57, 113, 143, 146, 162, 167, 168, 179, 227, 252, 254, 265, 267, 268, 279, 287, 306, 319, 322, 323, 329, 339, 340, 341, 353, 354, 355, 361, 362, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 379, 382, 388, 389, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 405, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 441, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 466, 469, 470, 473, 474, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 554, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 598, 605, 606, 607, 608, 610, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 685, 698, 706, 707, 715, 748, 751, 755, 756, 757, 758, 760, 761, 764, 765, 766, 767, 768, 772, 773, 774, 776, 777, 778, 779, 780, 781, 783, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 895, 896, 898, 906, 907, 911, 912, 925, 926, 927, 928, 931, 941, 942, 946, 947, 953, 954, 957, 959, 960, 963, 965, 967, 971, 972, 973, 978, 980, 983, 990, 991, 992, 994, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "shorter": [4, 155, 244, 377, 391, 396, 401, 429, 436, 541, 675, 959, 963, 992, 1009], "necessarili": [4, 31, 71, 98, 196, 204, 214, 230, 231, 242, 276, 300, 339, 340, 361, 370, 389, 391, 398, 605, 824, 826, 827, 828, 951, 954, 956, 957], "59": [4, 172, 214, 223, 364, 372, 392, 488, 957, 998], "37": [4, 259, 314, 339, 362, 398, 694, 856, 998], "creat": [4, 5, 8, 11, 16, 21, 26, 27, 30, 32, 37, 39, 41, 44, 46, 49, 52, 57, 59, 61, 70, 71, 79, 85, 97, 100, 112, 115, 118, 119, 122, 125, 128, 144, 145, 149, 151, 154, 155, 156, 158, 162, 167, 175, 177, 179, 182, 192, 197, 198, 208, 209, 219, 230, 235, 237, 246, 251, 252, 254, 256, 266, 274, 279, 284, 286, 287, 300, 302, 306, 309, 310, 319, 322, 323, 327, 328, 331, 334, 335, 336, 341, 344, 346, 347, 350, 355, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 378, 379, 382, 389, 391, 392, 395, 397, 398, 399, 401, 418, 430, 432, 444, 445, 477, 493, 494, 495, 496, 524, 531, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 566, 567, 569, 575, 606, 608, 609, 610, 611, 675, 676, 678, 679, 680, 766, 774, 776, 780, 784, 788, 792, 797, 798, 799, 806, 837, 849, 877, 880, 883, 884, 885, 886, 890, 893, 915, 916, 920, 930, 942, 947, 953, 956, 957, 958, 960, 964, 967, 968, 969, 971, 972, 973, 977, 978, 981, 988, 990, 991, 995, 998, 999, 1001, 1004, 1008, 1011, 1012, 1013], "turn": [4, 32, 77, 161, 162, 166, 187, 211, 212, 230, 256, 280, 341, 354, 356, 362, 377, 379, 380, 390, 391, 392, 394, 396, 399, 400, 401, 559, 560, 567, 585, 586, 805, 809, 877, 880, 898, 947, 951, 959, 962, 967, 981, 992, 1003, 1005, 1006, 1011], "downstream": [4, 79, 341, 399, 509, 512, 515, 519, 520, 584, 849, 967, 1008], "freedom": [4, 97, 154, 184, 185, 187, 256, 519, 634, 772, 953, 1001], "underfit": [4, 122, 149, 164, 168, 249, 271, 272, 292, 635, 774, 777, 778, 788, 798, 799, 836, 851, 952, 953], "approxim": [4, 5, 27, 33, 46, 53, 79, 99, 100, 105, 114, 121, 122, 150, 166, 173, 176, 192, 196, 197, 210, 214, 224, 225, 228, 231, 239, 247, 256, 261, 270, 277, 285, 290, 298, 300, 301, 306, 309, 339, 341, 346, 347, 350, 357, 359, 364, 375, 377, 379, 388, 389, 392, 394, 395, 396, 398, 401, 403, 404, 405, 413, 428, 448, 449, 452, 453, 454, 455, 460, 461, 462, 469, 474, 480, 499, 502, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 537, 538, 560, 567, 588, 589, 597, 616, 617, 618, 619, 620, 635, 636, 637, 650, 652, 654, 655, 657, 665, 670, 735, 736, 741, 772, 775, 792, 797, 801, 802, 816, 817, 820, 824, 826, 827, 828, 832, 836, 837, 842, 846, 848, 849, 853, 864, 875, 880, 911, 912, 931, 950, 951, 952, 953, 954, 956, 960, 961, 962, 963, 964, 965, 969, 971, 972, 973, 977, 978, 992, 994, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "especi": [4, 8, 55, 119, 122, 196, 311, 330, 340, 350, 355, 361, 367, 374, 377, 379, 389, 391, 399, 423, 428, 479, 516, 535, 536, 537, 538, 542, 543, 544, 624, 625, 626, 628, 630, 631, 632, 636, 637, 638, 639, 640, 641, 647, 658, 673, 683, 723, 811, 812, 813, 814, 815, 883, 884, 885, 886, 953, 959, 960, 965, 967, 981, 1001, 1006, 1010, 1011, 1012], "sharp": [4, 167, 964, 967], "rush": [4, 367], "flatter": [4, 25], "accur": [4, 9, 21, 25, 26, 79, 95, 124, 149, 156, 166, 167, 211, 214, 256, 263, 267, 310, 339, 340, 350, 366, 389, 391, 393, 396, 398, 399, 400, 417, 423, 426, 430, 432, 438, 509, 516, 518, 520, 521, 523, 524, 525, 585, 586, 612, 777, 778, 816, 817, 911, 912, 949, 954, 957, 973, 1012], "tend": [4, 12, 27, 37, 39, 52, 56, 167, 185, 196, 200, 201, 214, 241, 244, 253, 257, 274, 295, 341, 354, 356, 367, 368, 379, 389, 391, 393, 396, 398, 400, 417, 427, 631, 822, 853, 864, 912, 953, 954, 960, 973, 992], "under": [4, 7, 11, 24, 25, 27, 41, 66, 77, 78, 103, 119, 122, 167, 196, 225, 234, 256, 263, 265, 266, 299, 334, 361, 367, 368, 370, 372, 374, 379, 382, 385, 389, 391, 393, 395, 396, 399, 400, 430, 432, 449, 450, 451, 452, 453, 454, 455, 510, 517, 519, 521, 632, 633, 634, 680, 684, 685, 686, 693, 719, 731, 765, 766, 772, 773, 821, 953, 954, 955, 957, 960, 967, 971, 972, 973, 977, 978, 992, 998, 1000, 1001, 1003, 1006, 1010], "These": [4, 5, 7, 27, 51, 95, 97, 101, 115, 118, 164, 167, 185, 196, 197, 198, 200, 226, 263, 274, 276, 280, 295, 298, 305, 310, 315, 317, 350, 354, 355, 360, 363, 364, 367, 368, 370, 373, 375, 377, 379, 382, 385, 388, 389, 390, 391, 394, 396, 398, 399, 400, 401, 422, 427, 476, 486, 487, 493, 516, 545, 546, 580, 581, 646, 654, 655, 684, 710, 733, 755, 769, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 821, 822, 841, 946, 948, 951, 953, 954, 957, 958, 968, 970, 972, 977, 983, 987, 992, 998, 1004, 1006, 1007, 1008, 1011], "systemat": [4, 256, 368, 690, 705, 957, 1013], "reveal": [4, 166, 168, 339, 372, 388, 954], "form": [4, 9, 19, 32, 42, 59, 66, 95, 132, 156, 157, 166, 231, 247, 256, 314, 350, 361, 364, 367, 368, 370, 379, 380, 388, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 438, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 677, 772, 773, 774, 777, 778, 779, 782, 784, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 901, 946, 948, 950, 951, 953, 954, 957, 958, 961, 962, 963, 967, 972, 977, 983, 990, 1004, 1008, 1010], "explain": [4, 5, 12, 55, 72, 84, 85, 104, 122, 149, 154, 155, 167, 168, 196, 214, 225, 247, 266, 269, 339, 340, 355, 365, 367, 370, 385, 387, 394, 396, 401, 471, 499, 502, 512, 519, 522, 527, 603, 626, 634, 647, 658, 699, 700, 701, 705, 762, 953, 960, 973, 976, 977, 988, 990, 991, 1009, 1011, 1012], "lack": [4, 367, 368, 377, 395, 801, 890, 972, 1012], "deriv": [4, 19, 105, 106, 121, 154, 157, 168, 184, 185, 189, 197, 355, 362, 368, 389, 393, 395, 397, 398, 399, 401, 403, 421, 425, 444, 511, 584, 595, 600, 626, 647, 654, 658, 833, 834, 849, 855, 875, 876, 951, 953, 954, 957, 961, 963, 972, 998, 999, 1000, 1005, 1006, 1007, 1013], "address": [4, 48, 339, 362, 367, 391, 399, 635, 953, 954, 959, 960, 961, 962, 963, 967, 981, 990, 1006], "section": [4, 37, 95, 100, 113, 129, 135, 136, 137, 138, 154, 158, 166, 167, 175, 184, 185, 198, 221, 226, 236, 254, 256, 259, 265, 308, 339, 340, 341, 350, 360, 362, 365, 367, 368, 370, 371, 372, 373, 374, 385, 389, 390, 392, 394, 395, 396, 398, 399, 400, 401, 419, 423, 438, 512, 592, 597, 600, 615, 623, 765, 773, 877, 880, 946, 951, 953, 957, 958, 960, 961, 963, 964, 971, 972, 974, 976, 990, 992, 998, 1000, 1001, 1002, 1005], "margin": [4, 12, 25, 27, 150, 151, 153, 154, 155, 164, 166, 167, 174, 215, 256, 298, 321, 324, 326, 328, 337, 364, 389, 390, 396, 398, 401, 490, 588, 589, 623, 654, 712, 805, 853, 864, 877, 880, 953, 957, 959, 963, 964, 967, 971, 972, 990, 1005, 1007], "construct": [4, 11, 69, 71, 110, 112, 114, 117, 129, 214, 226, 236, 274, 289, 299, 301, 307, 310, 361, 364, 368, 375, 379, 391, 395, 396, 398, 399, 402, 414, 421, 422, 424, 425, 429, 431, 436, 442, 444, 446, 497, 513, 519, 522, 533, 534, 559, 565, 617, 666, 668, 669, 788, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 835, 836, 837, 838, 840, 880, 894, 896, 911, 912, 922, 946, 947, 949, 953, 954, 957, 958, 960, 967, 970, 972, 973, 978, 983, 987, 1003, 1005, 1006, 1009, 1012], "polynomialfeatur": [4, 175, 196, 197, 202, 236, 270, 308, 855, 953, 967, 1002, 1006, 1007, 1008, 1011, 1012], "coars": [4, 118, 372, 427, 440], "too": [4, 7, 12, 17, 44, 50, 56, 61, 69, 73, 81, 99, 122, 161, 168, 197, 218, 229, 242, 250, 254, 263, 271, 294, 326, 339, 346, 347, 354, 364, 367, 372, 374, 377, 379, 391, 393, 395, 398, 399, 400, 403, 417, 428, 516, 566, 569, 657, 670, 685, 811, 812, 813, 814, 815, 841, 854, 856, 952, 954, 956, 957, 959, 960, 964, 990, 999, 1002, 1005, 1006, 1007, 1008, 1010], "mani": [4, 7, 10, 19, 55, 73, 77, 81, 116, 117, 118, 120, 123, 142, 146, 168, 196, 217, 229, 242, 250, 256, 263, 264, 268, 298, 303, 306, 307, 308, 309, 310, 339, 350, 354, 356, 362, 364, 366, 367, 378, 379, 380, 388, 391, 392, 393, 396, 398, 399, 400, 401, 403, 481, 531, 532, 535, 536, 537, 538, 542, 543, 544, 566, 569, 584, 587, 605, 617, 628, 632, 636, 637, 644, 646, 654, 655, 656, 670, 673, 677, 751, 755, 774, 778, 788, 833, 834, 849, 854, 856, 875, 883, 884, 885, 886, 946, 947, 949, 953, 954, 956, 957, 958, 959, 960, 963, 964, 965, 967, 970, 972, 974, 976, 977, 978, 981, 990, 992, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1013], "featureunion": [4, 73, 359, 379, 390, 443, 607, 838, 947, 978, 981, 994, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "hour_workday_interact": 4, "interaction_onli": [4, 851, 953, 967], "combin": [4, 12, 25, 27, 60, 69, 70, 72, 73, 95, 104, 105, 108, 120, 124, 133, 149, 155, 162, 164, 166, 196, 213, 214, 221, 225, 230, 256, 257, 265, 267, 268, 285, 293, 308, 309, 311, 329, 341, 345, 354, 359, 363, 364, 367, 371, 378, 379, 388, 389, 391, 392, 395, 396, 397, 398, 399, 400, 401, 403, 404, 425, 443, 445, 446, 452, 454, 455, 458, 459, 467, 474, 486, 487, 493, 499, 502, 504, 509, 515, 516, 518, 520, 525, 527, 538, 540, 543, 545, 546, 588, 592, 594, 599, 602, 608, 612, 621, 624, 625, 630, 631, 636, 637, 638, 639, 640, 641, 644, 646, 650, 651, 652, 653, 654, 656, 657, 659, 662, 707, 765, 774, 777, 778, 785, 786, 797, 799, 803, 835, 837, 841, 849, 850, 851, 856, 875, 931, 946, 949, 950, 953, 957, 958, 960, 963, 967, 970, 971, 974, 981, 988, 990, 992, 998, 1003, 1006, 1009, 1010, 1011, 1013], "ones": [4, 11, 34, 43, 70, 80, 125, 149, 172, 201, 225, 228, 256, 264, 267, 283, 302, 315, 336, 354, 355, 367, 374, 391, 393, 395, 398, 429, 510, 544, 559, 588, 589, 622, 623, 636, 637, 648, 654, 681, 771, 776, 781, 792, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 851, 855, 917, 953, 957, 962, 963, 967, 972, 990, 998, 1006, 1007, 1008], "previou": [4, 43, 53, 70, 95, 113, 119, 122, 129, 149, 154, 155, 166, 167, 182, 197, 229, 231, 256, 259, 263, 298, 310, 339, 340, 341, 350, 354, 362, 367, 368, 371, 372, 374, 377, 379, 382, 391, 398, 399, 447, 524, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 608, 624, 626, 630, 631, 636, 638, 640, 644, 645, 646, 647, 654, 655, 656, 658, 685, 793, 807, 810, 825, 833, 834, 872, 889, 953, 957, 961, 967, 978, 983, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "nice": [4, 66, 197, 298, 354, 370, 396, 992], "improvemnt": 4, "cyclic_spline_interactions_pipelin": 4, "078": [4, 209, 215], "009": [4, 264, 340, 372], "104": [4, 24], "highlight": [4, 79, 91, 149, 150, 155, 214, 302, 312, 339, 341, 357, 367, 370, 371, 372, 374, 377, 401, 423, 426, 443, 446, 468, 469, 474, 479, 482, 490, 493, 502, 516, 539, 540, 542, 543, 545, 577, 580, 606, 608, 612, 618, 624, 626, 630, 636, 647, 658, 666, 695, 725, 765, 774, 777, 778, 788, 802, 818, 820, 837, 841, 846, 849, 850, 851, 855, 856, 872, 873, 875, 880, 884, 907, 954, 957, 965, 967, 972, 1008, 1009, 1010, 1011, 1012, 1013], "anoth": [4, 37, 95, 100, 124, 146, 149, 157, 162, 166, 185, 204, 222, 225, 235, 242, 256, 258, 259, 262, 266, 286, 303, 339, 341, 344, 350, 354, 356, 361, 362, 365, 367, 368, 372, 377, 379, 385, 388, 391, 395, 396, 398, 399, 400, 402, 422, 424, 431, 434, 441, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 486, 516, 518, 525, 651, 654, 670, 687, 697, 780, 835, 836, 946, 952, 953, 954, 957, 958, 960, 963, 967, 971, 972, 983, 990, 991, 992, 1007, 1008], "either": [4, 10, 30, 70, 118, 119, 166, 184, 186, 226, 251, 260, 265, 281, 339, 348, 354, 355, 359, 362, 365, 367, 368, 372, 379, 385, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 422, 426, 431, 465, 474, 490, 502, 511, 512, 514, 515, 522, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 560, 561, 562, 566, 567, 568, 569, 571, 572, 575, 580, 585, 586, 588, 589, 600, 605, 608, 610, 611, 628, 632, 634, 642, 654, 656, 660, 661, 668, 675, 676, 680, 684, 685, 689, 690, 698, 701, 703, 704, 705, 712, 716, 717, 719, 729, 733, 746, 751, 755, 759, 762, 765, 766, 769, 774, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 803, 806, 865, 866, 872, 875, 876, 883, 884, 885, 886, 890, 919, 946, 953, 957, 958, 959, 960, 961, 962, 965, 967, 971, 972, 983, 991, 992, 998, 1001, 1007, 1008, 1009, 1012], "after": [4, 17, 20, 21, 26, 46, 53, 69, 70, 74, 80, 97, 110, 120, 127, 129, 132, 142, 146, 154, 156, 158, 161, 166, 172, 189, 196, 234, 235, 238, 244, 256, 265, 284, 286, 298, 299, 302, 303, 339, 340, 356, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 377, 379, 380, 385, 387, 388, 391, 392, 395, 396, 399, 400, 401, 403, 422, 426, 429, 430, 431, 432, 435, 441, 493, 510, 514, 531, 532, 537, 538, 539, 540, 575, 605, 608, 636, 637, 644, 645, 646, 651, 653, 654, 655, 656, 670, 690, 703, 733, 769, 772, 773, 777, 778, 825, 832, 836, 855, 875, 880, 881, 946, 947, 951, 953, 957, 961, 962, 967, 969, 971, 972, 973, 978, 983, 990, 992, 998, 1001, 1005, 1006, 1009, 1010], "quadrat": [4, 29, 35, 154, 158, 164, 210, 258, 309, 390, 420, 437, 440, 527, 528, 601, 626, 636, 637, 647, 654, 658, 694, 880, 881, 953, 954, 957, 960, 963, 967, 971, 972, 979, 994, 999], "tractabl": [4, 395, 612, 977, 1011], "nystr\u00f6m": 4, "latter": [4, 14, 246, 256, 265, 266, 284, 334, 356, 364, 367, 379, 395, 398, 399, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 719, 772, 773, 774, 777, 778, 783, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 960, 1007], "kernel_approxim": [4, 161, 164, 171, 172, 210, 225, 230, 308, 357, 655, 735, 736, 842, 949, 983, 999, 1005], "nystroem": [4, 161, 210, 225, 230, 359, 618, 619, 620, 655, 842, 880, 881, 994, 999, 1005, 1008, 1010, 1011, 1012], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 138, 172, 256, 323, 330, 333, 431, 513, 598, 742, 751, 774, 851, 877, 878, 879, 880, 881, 953, 967, 990], "n_compon": [4, 5, 6, 12, 14, 44, 52, 56, 57, 58, 69, 72, 73, 84, 85, 89, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 127, 172, 195, 217, 218, 219, 220, 221, 222, 225, 229, 230, 232, 236, 241, 242, 243, 244, 245, 246, 247, 255, 280, 285, 295, 303, 308, 310, 340, 368, 371, 372, 379, 394, 396, 403, 430, 431, 441, 443, 460, 461, 462, 463, 504, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 617, 618, 619, 620, 666, 667, 668, 669, 670, 671, 672, 673, 674, 772, 773, 825, 832, 835, 867, 868, 869, 912, 949, 951, 954, 956, 960, 988, 991, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "300": [4, 20, 21, 34, 38, 50, 57, 98, 110, 111, 112, 162, 186, 222, 225, 229, 245, 259, 286, 301, 308, 314, 332, 334, 368, 423, 426, 427, 438, 440, 617, 622, 623, 657, 668, 670, 672, 833, 953, 1008], "random_st": [4, 5, 6, 7, 10, 12, 14, 19, 20, 21, 24, 25, 26, 27, 30, 31, 38, 42, 43, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 69, 70, 74, 81, 85, 91, 95, 97, 100, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 142, 143, 145, 149, 158, 161, 162, 166, 167, 168, 169, 172, 175, 177, 178, 182, 188, 195, 196, 199, 200, 202, 203, 204, 208, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 230, 232, 233, 234, 235, 237, 238, 241, 243, 244, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 274, 276, 280, 284, 285, 286, 292, 293, 294, 295, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 317, 324, 326, 327, 328, 334, 335, 339, 340, 344, 348, 350, 368, 371, 375, 378, 379, 387, 391, 392, 395, 396, 398, 399, 403, 414, 417, 418, 420, 423, 426, 428, 430, 431, 432, 433, 437, 438, 439, 441, 448, 453, 466, 469, 470, 473, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 562, 571, 572, 585, 586, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 605, 610, 611, 612, 613, 616, 617, 618, 619, 620, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 654, 655, 656, 657, 665, 667, 668, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 712, 765, 768, 772, 773, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 800, 801, 802, 804, 806, 807, 808, 809, 810, 821, 825, 832, 833, 834, 836, 841, 853, 864, 867, 868, 875, 876, 877, 880, 883, 884, 885, 886, 888, 889, 911, 912, 926, 928, 931, 946, 947, 949, 952, 957, 958, 959, 960, 961, 964, 965, 967, 972, 973, 983, 987, 988, 992, 995, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "053": [4, 78, 82, 364, 372], "002": [4, 12, 146, 149, 293, 296, 340, 364], "076": [4, 863], "004": [4, 340], "almost": [4, 120, 121, 198, 204, 270, 317, 350, 360, 362, 370, 372, 377, 378, 379, 391, 395, 396, 449, 450, 451, 452, 454, 455, 456, 772, 946, 952, 953, 956, 957, 972, 991, 992, 1006, 1011], "rival": [4, 872, 970], "intermedi": [4, 7, 52, 115, 122, 326, 399, 537, 538, 597, 836, 957, 1010], "compound": [4, 214, 399, 588, 590, 658, 701, 729, 953, 992], "one_hot_poly_pipelin": 4, "082": 4, "006": [4, 340, 372], "111": [4, 7, 8, 16, 66, 89, 101, 102, 109, 178, 193, 211, 215, 221, 256, 828, 1001], "competit": [4, 122, 339, 622, 960], "low": [4, 11, 12, 37, 50, 80, 85, 97, 99, 103, 113, 125, 146, 168, 189, 191, 196, 198, 210, 217, 219, 225, 229, 234, 241, 242, 244, 247, 250, 256, 258, 262, 263, 271, 282, 283, 294, 302, 317, 325, 326, 339, 348, 363, 364, 367, 371, 374, 379, 382, 388, 389, 390, 395, 396, 399, 422, 428, 499, 502, 513, 560, 567, 581, 657, 670, 674, 683, 703, 719, 766, 821, 912, 924, 925, 946, 949, 952, 953, 954, 956, 957, 960, 962, 963, 964, 965, 967, 969, 972, 973, 979, 994, 999, 1002, 1003, 1004, 1006, 1007, 1012, 1013], "rank": [4, 17, 25, 79, 99, 103, 116, 144, 168, 169, 214, 254, 256, 264, 363, 386, 388, 389, 393, 394, 396, 398, 399, 486, 487, 499, 502, 527, 528, 571, 572, 584, 626, 635, 647, 658, 674, 677, 698, 703, 704, 716, 717, 733, 769, 777, 778, 912, 946, 948, 949, 954, 965, 967, 981, 994, 999, 1004, 1007, 1008, 1012, 1013], "fact": [4, 11, 19, 25, 80, 85, 122, 168, 229, 238, 339, 361, 373, 377, 379, 394, 396, 397, 398, 399, 567, 627, 646, 648, 682, 951, 953, 960, 967, 971, 972, 978, 981, 1012], "smoother": [4, 5, 122, 167, 294, 397], "allow": [4, 55, 57, 73, 74, 99, 100, 113, 114, 127, 149, 154, 156, 158, 190, 196, 214, 218, 226, 229, 235, 237, 238, 241, 256, 274, 306, 307, 308, 309, 311, 331, 339, 348, 350, 354, 361, 365, 367, 368, 370, 373, 375, 379, 380, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 421, 424, 425, 443, 445, 446, 501, 502, 512, 531, 532, 537, 538, 539, 540, 545, 546, 571, 572, 575, 581, 588, 589, 593, 605, 606, 608, 612, 621, 624, 625, 630, 631, 636, 638, 639, 640, 641, 654, 656, 659, 660, 661, 662, 666, 670, 739, 742, 751, 755, 758, 767, 768, 772, 773, 774, 776, 777, 778, 781, 783, 785, 788, 795, 802, 822, 831, 838, 842, 843, 859, 868, 870, 871, 872, 875, 876, 883, 884, 885, 886, 893, 895, 896, 906, 907, 923, 946, 947, 949, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 967, 969, 970, 971, 972, 973, 977, 978, 981, 983, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "find": [4, 5, 6, 12, 17, 40, 46, 47, 48, 49, 52, 53, 56, 64, 72, 79, 80, 95, 97, 99, 100, 106, 120, 129, 149, 153, 155, 157, 158, 167, 184, 185, 198, 204, 217, 219, 221, 222, 228, 246, 255, 256, 257, 267, 284, 285, 286, 306, 328, 329, 334, 339, 340, 344, 355, 364, 365, 367, 368, 371, 372, 375, 377, 378, 379, 380, 388, 391, 393, 394, 396, 398, 399, 400, 402, 421, 424, 425, 429, 430, 431, 432, 441, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 536, 543, 560, 567, 588, 589, 625, 628, 631, 632, 633, 634, 636, 637, 649, 666, 685, 706, 707, 715, 759, 760, 761, 764, 765, 769, 774, 788, 818, 819, 820, 822, 824, 826, 827, 828, 849, 850, 855, 867, 868, 869, 883, 884, 886, 892, 911, 912, 914, 946, 947, 949, 952, 953, 954, 956, 957, 958, 961, 963, 967, 971, 972, 973, 976, 978, 981, 983, 985, 987, 988, 990, 991, 992, 998, 1005, 1006, 1007, 1008, 1010, 1012, 1013], "function": [4, 5, 6, 7, 8, 14, 20, 21, 37, 46, 53, 54, 56, 58, 65, 69, 74, 93, 95, 98, 100, 107, 109, 115, 119, 121, 122, 123, 124, 142, 149, 152, 153, 154, 155, 156, 157, 162, 164, 166, 167, 174, 175, 178, 183, 194, 196, 197, 202, 204, 209, 210, 212, 214, 215, 217, 226, 228, 231, 235, 237, 246, 254, 256, 257, 258, 259, 264, 265, 270, 292, 298, 306, 307, 309, 310, 319, 323, 324, 325, 326, 327, 328, 332, 334, 336, 339, 340, 345, 350, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 377, 378, 379, 382, 385, 389, 391, 392, 393, 394, 396, 397, 399, 400, 402, 403, 417, 420, 423, 424, 425, 426, 427, 429, 431, 433, 436, 437, 438, 439, 440, 443, 444, 448, 450, 451, 453, 457, 466, 467, 469, 470, 473, 475, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 550, 553, 559, 560, 566, 567, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 585, 586, 587, 588, 589, 593, 595, 597, 598, 600, 601, 605, 606, 609, 610, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 680, 681, 682, 684, 689, 690, 694, 697, 699, 700, 701, 705, 709, 711, 712, 715, 717, 718, 719, 727, 732, 734, 738, 739, 740, 742, 745, 748, 751, 755, 756, 757, 758, 759, 760, 762, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 780, 785, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 845, 846, 848, 852, 853, 854, 855, 856, 859, 861, 864, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 893, 902, 904, 905, 906, 911, 912, 925, 927, 928, 931, 932, 941, 946, 947, 948, 950, 952, 954, 955, 958, 960, 961, 962, 963, 964, 965, 967, 970, 971, 973, 977, 978, 979, 983, 986, 987, 988, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "abl": [4, 5, 9, 24, 47, 60, 81, 85, 99, 100, 126, 155, 185, 196, 212, 214, 221, 262, 267, 326, 350, 354, 355, 356, 361, 365, 367, 368, 370, 371, 377, 393, 395, 399, 463, 481, 512, 801, 848, 946, 947, 953, 956, 957, 958, 963, 967, 970, 973, 974, 978, 983, 991, 992, 1004, 1005, 1009], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 39, 172, 278, 334, 341, 354, 387, 393, 399, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 784, 816, 817, 883, 884, 885, 886, 946, 957, 960, 973, 981, 986, 990, 1001, 1002], "depth": [4, 109, 115, 119, 123, 125, 130, 344, 346, 347, 348, 354, 365, 367, 370, 378, 398, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 816, 817, 821, 883, 884, 885, 886, 887, 889, 917, 962, 963, 973, 1000, 1001, 1009], "accuraci": [4, 6, 7, 8, 16, 25, 30, 31, 32, 33, 69, 71, 72, 110, 116, 120, 121, 127, 142, 143, 145, 150, 169, 172, 196, 204, 211, 212, 243, 254, 255, 256, 257, 258, 260, 262, 271, 278, 284, 285, 286, 295, 300, 303, 314, 315, 317, 326, 329, 350, 354, 368, 378, 379, 390, 391, 395, 398, 399, 400, 408, 417, 428, 448, 450, 451, 457, 510, 512, 519, 527, 528, 529, 531, 533, 535, 536, 537, 539, 542, 543, 545, 547, 588, 612, 636, 637, 644, 646, 649, 652, 653, 654, 670, 675, 681, 686, 691, 696, 711, 715, 720, 731, 740, 764, 769, 771, 800, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 818, 823, 825, 826, 833, 870, 871, 875, 877, 880, 883, 885, 911, 912, 946, 951, 952, 953, 954, 958, 960, 961, 965, 969, 971, 973, 987, 992, 1006, 1007], "On": [4, 12, 17, 26, 66, 70, 84, 85, 100, 109, 113, 115, 116, 117, 122, 125, 126, 129, 132, 141, 143, 153, 154, 166, 167, 168, 177, 184, 185, 198, 226, 227, 228, 229, 231, 235, 236, 237, 238, 241, 243, 246, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 268, 295, 298, 300, 302, 307, 308, 310, 311, 316, 326, 348, 354, 365, 368, 370, 377, 379, 385, 389, 391, 395, 396, 398, 400, 401, 621, 634, 669, 712, 738, 946, 950, 953, 956, 957, 959, 963, 970, 972, 987, 990], "contrari": [4, 13, 166, 218, 222, 241, 259, 298, 339, 361, 391, 474, 522, 584, 791, 953, 959, 963], "significantli": [4, 24, 25, 37, 77, 78, 120, 146, 166, 167, 168, 196, 204, 212, 214, 256, 307, 308, 340, 341, 350, 355, 391, 396, 398, 399, 404, 448, 453, 458, 516, 518, 525, 536, 543, 624, 625, 630, 631, 638, 639, 640, 641, 662, 670, 816, 817, 949, 953, 954, 960, 965, 972, 998, 1000, 1001, 1005, 1006, 1011, 1012, 1013], "over": [4, 7, 8, 9, 16, 24, 26, 27, 31, 37, 50, 55, 71, 73, 95, 113, 125, 141, 145, 149, 157, 161, 167, 178, 190, 196, 204, 214, 225, 256, 257, 259, 261, 263, 264, 265, 268, 281, 289, 292, 293, 300, 309, 310, 314, 339, 340, 354, 355, 356, 362, 363, 366, 367, 368, 372, 378, 379, 387, 389, 390, 391, 392, 395, 396, 397, 398, 399, 401, 403, 428, 443, 451, 487, 511, 512, 514, 515, 516, 517, 524, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 566, 567, 569, 572, 580, 610, 611, 612, 622, 623, 624, 625, 630, 631, 636, 638, 639, 640, 641, 643, 644, 645, 646, 654, 655, 656, 663, 664, 675, 694, 696, 716, 740, 765, 768, 772, 774, 777, 778, 780, 785, 786, 788, 797, 798, 799, 800, 801, 803, 832, 833, 834, 835, 851, 855, 875, 892, 901, 925, 946, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 973, 977, 978, 981, 988, 991, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "compet": 4, "access": [4, 49, 77, 242, 247, 339, 348, 354, 355, 367, 368, 374, 377, 379, 380, 391, 393, 394, 398, 399, 401, 429, 436, 443, 514, 545, 546, 547, 548, 595, 677, 835, 836, 890, 920, 953, 956, 957, 963, 964, 965, 971, 972, 978, 981, 983, 991, 992, 998, 1000, 1004, 1005, 1006, 1007, 1010, 1012, 1013], "requir": [4, 7, 13, 25, 45, 46, 48, 53, 56, 57, 66, 69, 89, 99, 101, 102, 115, 119, 123, 125, 129, 146, 167, 185, 193, 196, 214, 217, 219, 226, 229, 238, 257, 265, 267, 276, 278, 298, 303, 308, 309, 339, 340, 341, 361, 364, 365, 367, 368, 370, 372, 374, 377, 379, 380, 382, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 408, 417, 418, 419, 424, 429, 431, 436, 441, 443, 446, 448, 460, 461, 462, 474, 486, 499, 502, 513, 519, 527, 528, 529, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 550, 556, 558, 559, 588, 589, 597, 605, 610, 611, 612, 621, 636, 637, 644, 646, 649, 652, 653, 654, 655, 656, 664, 667, 669, 670, 671, 673, 677, 701, 706, 707, 719, 724, 726, 729, 740, 761, 764, 774, 777, 778, 781, 783, 788, 799, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 833, 836, 837, 838, 840, 850, 851, 852, 854, 856, 863, 867, 868, 870, 871, 875, 876, 877, 880, 883, 884, 885, 886, 943, 946, 951, 952, 953, 954, 957, 958, 959, 960, 961, 963, 964, 967, 971, 972, 973, 978, 983, 990, 992, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "geograph": [4, 11, 289, 362, 476], "repartit": 4, "immobil": 4, "quant": 4, "ncol": [4, 5, 32, 53, 56, 65, 95, 100, 106, 167, 196, 197, 198, 204, 214, 217, 218, 228, 252, 258, 259, 267, 276, 293, 299, 300, 302, 303, 311, 333, 334, 340], "sharei": [4, 74, 91, 100, 106, 130, 158, 167, 196, 198, 204, 258, 267, 281, 299, 333, 334, 340], "pred": [4, 7, 11, 32, 335, 339, 362, 626, 647, 658, 675, 680, 684, 696, 706, 707, 715, 760, 761, 764, 765, 957], "zip": [4, 5, 8, 12, 24, 26, 31, 32, 37, 38, 40, 42, 45, 49, 62, 63, 64, 71, 74, 85, 91, 95, 96, 99, 104, 105, 106, 110, 112, 114, 129, 130, 155, 161, 164, 166, 167, 168, 181, 187, 188, 196, 204, 205, 217, 229, 242, 246, 247, 254, 258, 259, 260, 263, 265, 276, 281, 284, 292, 293, 294, 300, 302, 303, 318, 323, 334, 335, 345, 365, 398, 800, 992], "perfect": [4, 26, 37, 69, 80, 98, 100, 192, 196, 339, 340, 367, 370, 391, 395, 531, 532, 668, 672, 682, 683, 686, 695, 703, 705, 708, 714, 720, 733, 734, 762, 763, 770, 953, 957, 960, 972, 981, 990, 1012], "xlim": [4, 9, 12, 26, 34, 44, 57, 61, 72, 77, 78, 79, 89, 97, 110, 112, 113, 114, 128, 135, 150, 151, 166, 175, 186, 188, 195, 202, 205, 210, 225, 232, 242, 247, 251, 266, 270, 282, 283, 325, 330, 331, 335, 347], "ylim": [4, 9, 12, 24, 26, 34, 37, 44, 57, 61, 71, 77, 78, 79, 89, 97, 110, 112, 113, 119, 120, 122, 128, 131, 136, 150, 151, 166, 183, 185, 186, 188, 189, 190, 202, 205, 206, 210, 225, 232, 242, 247, 251, 255, 259, 266, 269, 270, 271, 282, 283, 325, 330, 331, 335, 339, 347], "showseem": [4, 9, 46, 122, 167, 196, 221, 225, 257, 293, 302, 339, 340, 366, 367, 371, 395, 479, 953, 957], "regim": [4, 379, 875, 876, 956], "overal": [4, 48, 113, 129, 154, 214, 253, 340, 354, 366, 367, 372, 388, 389, 398, 401, 426, 428, 443, 450, 451, 457, 527, 954, 957, 973, 981, 1008], "closer": [4, 27, 37, 98, 100, 128, 149, 167, 175, 341, 389, 391, 396, 428, 531, 606, 690, 818, 819, 824, 826, 827, 828, 972, 1005], "diagon": [4, 25, 40, 81, 84, 214, 234, 243, 246, 247, 250, 326, 388, 391, 393, 401, 432, 457, 459, 489, 491, 505, 510, 528, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 628, 629, 632, 633, 634, 660, 661, 679, 693, 767, 772, 773, 820, 828, 951, 953, 956, 957, 960, 967, 1004, 1006, 1007, 1008], "obtain": [4, 7, 9, 12, 27, 48, 56, 57, 70, 73, 74, 100, 103, 119, 122, 123, 127, 135, 146, 151, 153, 166, 167, 196, 198, 210, 221, 241, 242, 243, 252, 256, 257, 258, 262, 265, 276, 309, 324, 340, 341, 348, 350, 362, 364, 377, 385, 389, 391, 393, 394, 396, 398, 399, 400, 401, 417, 422, 448, 474, 510, 511, 533, 534, 535, 536, 537, 538, 541, 542, 543, 571, 584, 592, 623, 637, 639, 644, 646, 650, 652, 654, 655, 665, 686, 690, 703, 716, 733, 768, 780, 801, 804, 805, 808, 822, 833, 853, 864, 877, 880, 883, 884, 912, 947, 949, 951, 953, 954, 956, 957, 958, 960, 961, 963, 964, 967, 971, 972, 1004, 1006, 1009, 1011, 1012, 1013], "slightli": [4, 25, 63, 81, 113, 119, 122, 125, 129, 146, 149, 150, 151, 168, 175, 196, 220, 222, 264, 306, 323, 341, 366, 367, 377, 389, 391, 398, 399, 401, 403, 404, 566, 567, 569, 616, 636, 777, 778, 875, 877, 880, 911, 912, 946, 953, 967, 971, 972, 1007, 1011, 1012], "cost": [4, 39, 98, 149, 164, 172, 217, 230, 258, 265, 306, 326, 340, 341, 343, 349, 367, 372, 374, 377, 389, 391, 398, 457, 478, 515, 516, 517, 524, 535, 536, 537, 538, 542, 543, 588, 597, 605, 624, 625, 630, 631, 638, 639, 640, 641, 646, 650, 652, 654, 656, 665, 666, 670, 802, 875, 876, 877, 880, 883, 884, 885, 886, 912, 949, 953, 954, 957, 960, 970, 971, 972, 979, 994, 1004, 1007, 1008], "durat": [4, 8, 196, 214, 276, 278, 341, 355, 953], "regressor": [4, 74, 85, 123, 128, 129, 132, 149, 154, 162, 164, 166, 174, 176, 178, 196, 199, 213, 214, 215, 307, 308, 354, 367, 368, 377, 379, 389, 392, 401, 412, 416, 444, 460, 461, 462, 463, 502, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 543, 544, 545, 546, 547, 548, 583, 584, 587, 589, 610, 611, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 645, 647, 648, 650, 651, 656, 657, 679, 804, 805, 808, 809, 810, 819, 827, 832, 833, 834, 837, 843, 851, 856, 876, 878, 881, 883, 884, 885, 886, 889, 904, 906, 946, 947, 953, 957, 958, 960, 965, 971, 979, 987, 994, 998, 999, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1013], "mlpregressor": [4, 167, 235, 356, 832, 833, 961, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "hidden": [4, 167, 294, 295, 374, 388, 396, 832, 833, 834, 961, 962, 977, 998, 1009], "layer": [4, 164, 167, 212, 235, 291, 294, 295, 296, 354, 374, 398, 492, 493, 500, 545, 802, 832, 833, 834, 837, 856, 962, 979, 994, 1004], "cyclic": [4, 624, 625, 630, 631, 638, 639, 640, 641, 1010], "within": [4, 59, 115, 116, 117, 128, 143, 145, 146, 192, 197, 198, 208, 214, 235, 254, 255, 259, 269, 298, 299, 308, 324, 327, 334, 341, 350, 354, 362, 367, 370, 375, 377, 379, 380, 388, 391, 392, 395, 397, 398, 402, 424, 427, 440, 442, 443, 448, 453, 493, 527, 545, 546, 547, 548, 571, 572, 610, 670, 674, 677, 688, 702, 758, 772, 773, 779, 780, 792, 793, 800, 801, 816, 817, 818, 819, 824, 826, 827, 828, 835, 836, 837, 849, 860, 861, 863, 864, 865, 866, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 951, 953, 954, 960, 963, 967, 970, 972, 973, 978, 981, 983, 987, 990, 992, 1000, 1001, 1005, 1006, 1011, 1012], "finer": [4, 37, 278, 326, 355, 391, 395, 946, 960, 1008], "resolut": [4, 11, 17, 105, 167, 288, 289, 326, 380, 983, 1008], "taken": [4, 7, 31, 42, 53, 124, 154, 166, 229, 230, 244, 262, 300, 362, 364, 366, 367, 370, 379, 385, 390, 391, 395, 399, 401, 403, 420, 511, 561, 562, 624, 625, 628, 630, 631, 632, 636, 637, 638, 639, 640, 641, 655, 657, 659, 662, 673, 849, 850, 869, 872, 878, 879, 957, 959, 967, 969, 1004, 1007, 1010, 1011], "everi": [4, 95, 161, 194, 197, 218, 231, 242, 247, 265, 309, 350, 362, 365, 367, 368, 370, 374, 379, 380, 391, 393, 395, 396, 399, 420, 433, 486, 514, 517, 523, 535, 537, 538, 542, 568, 569, 581, 624, 625, 627, 630, 631, 637, 638, 639, 640, 641, 642, 643, 644, 646, 650, 651, 652, 653, 654, 663, 664, 665, 670, 674, 731, 748, 756, 757, 787, 825, 883, 885, 887, 889, 901, 950, 952, 957, 958, 959, 967, 973, 981, 987, 998, 1002, 1004, 1007, 1011], "offer": [4, 368, 374, 377, 378, 382, 395, 396, 398, 399, 946, 947, 958, 961, 973, 977, 978, 981, 1004], "view": [4, 16, 30, 42, 46, 77, 97, 167, 193, 198, 236, 354, 356, 367, 391, 399, 514, 623, 635, 816, 817, 890, 953, 954], "gaussian": [4, 5, 9, 27, 30, 31, 34, 44, 46, 47, 56, 60, 77, 78, 79, 80, 81, 90, 96, 97, 98, 105, 111, 112, 122, 125, 159, 162, 175, 186, 225, 229, 243, 244, 248, 281, 289, 302, 323, 357, 359, 363, 368, 371, 379, 391, 393, 396, 397, 403, 431, 448, 449, 450, 451, 452, 453, 454, 455, 474, 482, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 508, 510, 522, 527, 528, 541, 588, 589, 591, 592, 593, 595, 596, 597, 600, 601, 603, 605, 621, 622, 650, 655, 658, 681, 701, 718, 729, 753, 772, 773, 774, 788, 811, 812, 813, 814, 815, 816, 817, 821, 852, 856, 863, 867, 868, 869, 951, 953, 954, 955, 963, 979, 981, 991, 993, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1012], "random": [4, 5, 6, 7, 11, 12, 13, 20, 21, 24, 25, 26, 27, 31, 33, 34, 37, 39, 40, 44, 45, 48, 50, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 70, 74, 77, 78, 79, 80, 81, 84, 85, 91, 96, 97, 98, 101, 102, 103, 108, 111, 113, 115, 116, 117, 118, 121, 122, 124, 125, 126, 129, 132, 133, 138, 141, 142, 145, 149, 150, 153, 155, 156, 158, 161, 162, 164, 165, 170, 175, 176, 177, 178, 180, 185, 186, 190, 191, 194, 195, 196, 197, 198, 199, 202, 203, 205, 209, 210, 213, 214, 217, 218, 220, 221, 222, 224, 225, 230, 231, 233, 234, 239, 241, 242, 244, 245, 246, 247, 249, 251, 253, 256, 257, 259, 261, 263, 265, 266, 267, 268, 270, 272, 274, 276, 281, 282, 283, 288, 292, 299, 301, 302, 307, 308, 310, 314, 315, 318, 319, 325, 326, 328, 329, 331, 332, 333, 334, 336, 339, 340, 346, 347, 354, 355, 357, 359, 363, 369, 371, 377, 378, 379, 386, 389, 391, 399, 400, 414, 420, 423, 426, 428, 430, 431, 432, 433, 437, 438, 439, 441, 443, 448, 449, 450, 451, 452, 453, 454, 455, 466, 467, 469, 470, 473, 474, 475, 480, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 515, 516, 517, 518, 519, 522, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 560, 561, 562, 567, 585, 586, 588, 589, 605, 608, 610, 612, 617, 618, 619, 620, 621, 624, 625, 627, 628, 630, 631, 632, 636, 638, 639, 640, 641, 648, 649, 650, 654, 655, 656, 657, 667, 668, 669, 670, 671, 672, 673, 679, 682, 683, 686, 708, 720, 758, 768, 772, 773, 774, 776, 777, 778, 779, 786, 788, 789, 790, 791, 792, 793, 794, 795, 801, 802, 807, 809, 810, 811, 812, 813, 815, 816, 817, 821, 825, 832, 833, 834, 836, 839, 841, 850, 853, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 898, 911, 912, 928, 931, 947, 949, 952, 954, 956, 957, 961, 962, 963, 965, 967, 972, 973, 977, 978, 979, 983, 987, 988, 990, 991, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "constant": [4, 105, 113, 152, 156, 162, 166, 184, 197, 198, 200, 214, 227, 236, 259, 288, 293, 295, 299, 301, 307, 334, 336, 350, 359, 368, 375, 379, 388, 398, 401, 412, 444, 460, 461, 462, 489, 491, 512, 516, 518, 525, 527, 528, 529, 530, 532, 534, 536, 538, 540, 543, 546, 548, 568, 584, 587, 589, 591, 605, 608, 610, 611, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 654, 655, 656, 657, 658, 665, 667, 671, 673, 699, 700, 701, 705, 752, 754, 762, 809, 810, 819, 827, 833, 834, 841, 852, 855, 863, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 951, 953, 954, 957, 959, 960, 967, 971, 973, 994, 1001, 1006, 1008, 1010, 1011, 1012], "varianc": [4, 5, 27, 44, 56, 61, 72, 77, 79, 84, 85, 95, 96, 97, 100, 103, 104, 106, 108, 124, 133, 156, 158, 164, 166, 174, 176, 185, 196, 198, 201, 214, 215, 246, 253, 256, 259, 265, 266, 269, 285, 292, 298, 303, 340, 350, 359, 363, 375, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 401, 403, 421, 425, 428, 442, 499, 502, 510, 511, 512, 519, 522, 527, 528, 533, 534, 536, 537, 538, 543, 581, 585, 586, 589, 603, 621, 622, 623, 630, 634, 635, 638, 640, 650, 651, 652, 653, 654, 665, 688, 705, 762, 772, 773, 814, 825, 840, 846, 852, 854, 856, 861, 863, 865, 866, 884, 886, 932, 933, 934, 938, 951, 952, 953, 955, 960, 961, 962, 969, 971, 972, 973, 974, 979, 988, 990, 991, 994, 998, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "poisson": [4, 164, 174, 215, 232, 363, 398, 443, 444, 474, 501, 530, 536, 540, 543, 626, 647, 650, 658, 684, 701, 722, 726, 727, 729, 802, 836, 837, 840, 841, 849, 850, 851, 856, 884, 886, 916, 953, 973, 1008, 1009, 1010, 1011, 1012], "gamma": [4, 5, 6, 7, 9, 11, 16, 31, 32, 100, 130, 138, 172, 210, 225, 230, 231, 254, 256, 258, 261, 267, 271, 308, 314, 315, 317, 319, 323, 325, 326, 329, 330, 332, 333, 336, 394, 396, 401, 431, 513, 597, 598, 617, 618, 619, 621, 622, 623, 626, 658, 663, 669, 701, 724, 729, 736, 743, 752, 753, 754, 772, 785, 788, 870, 871, 872, 877, 878, 879, 880, 881, 946, 949, 952, 953, 955, 970, 972, 983, 987, 988, 990, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1013], "achiev": [4, 12, 17, 19, 27, 31, 98, 110, 118, 120, 127, 157, 172, 196, 204, 253, 256, 263, 317, 326, 329, 334, 339, 350, 354, 356, 361, 362, 364, 368, 372, 377, 379, 388, 389, 391, 395, 396, 398, 399, 531, 536, 543, 618, 627, 654, 656, 685, 717, 740, 777, 778, 812, 856, 946, 947, 949, 953, 957, 967, 970, 972, 980, 992, 1011], "gridsearchcv": [4, 54, 68, 70, 72, 73, 75, 77, 103, 164, 231, 236, 246, 249, 254, 255, 256, 257, 261, 264, 267, 272, 278, 280, 295, 300, 308, 326, 350, 355, 368, 377, 379, 392, 395, 480, 498, 518, 519, 553, 577, 582, 631, 681, 719, 785, 788, 836, 875, 883, 946, 953, 957, 961, 971, 972, 977, 978, 987, 988, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "tweedieregressor": [4, 307, 310, 626, 647, 953, 1009, 1012, 1013], "power": [4, 7, 17, 120, 197, 214, 247, 259, 264, 280, 298, 299, 302, 314, 323, 354, 355, 378, 389, 391, 394, 397, 398, 399, 402, 424, 460, 461, 462, 510, 513, 519, 522, 608, 658, 672, 677, 701, 724, 726, 729, 818, 819, 826, 827, 829, 830, 851, 852, 853, 863, 864, 911, 912, 953, 954, 957, 965, 967, 971, 972, 981, 1001, 1004, 1006, 1008, 1009, 1011], "param_grid": [4, 6, 70, 71, 72, 73, 122, 231, 236, 246, 254, 255, 256, 260, 261, 264, 267, 278, 300, 326, 379, 392, 398, 719, 774, 777, 785, 786, 946, 957, 987, 988], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 349, 355, 361, 362, 364, 372, 388, 391, 397, 399, 402, 412, 424, 444, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 482, 483, 488, 490, 492, 493, 497, 500, 501, 514, 515, 522, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 561, 562, 568, 572, 574, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 648, 649, 650, 651, 654, 655, 656, 657, 675, 682, 683, 691, 706, 707, 708, 711, 715, 716, 734, 746, 760, 761, 764, 769, 770, 771, 774, 788, 797, 798, 799, 809, 810, 811, 812, 819, 821, 827, 834, 851, 855, 876, 878, 881, 883, 884, 885, 886, 912, 946, 953, 954, 957, 958, 959, 960, 967, 971, 972, 973, 988, 992, 999, 1004, 1006], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 350, 355, 367, 368, 369, 370, 372, 377, 379, 382, 399, 978, 980, 992], "721": [4, 15, 516, 518, 525], "secondplot_cyclical_feature_engin": [4, 15], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 355, 365, 367, 370, 372, 374, 379, 382, 399, 402, 420, 424, 433, 440, 444, 476, 508, 622, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 845, 846, 848, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 907, 957, 977, 990, 992, 998, 1000, 1004, 1008, 1012], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 392, 447, 873, 973, 978, 1009, 1012], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 362, 367, 368, 379, 382, 384, 988, 998, 1002, 1005], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 24, 25, 26, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 344, 345, 346, 347, 348, 367, 370, 379, 382, 384, 992, 998, 1005], "kernelpca": [5, 392, 396, 511, 512, 519, 522, 666, 668, 670, 842, 967, 999, 1000, 1004, 1007, 1008, 1009, 1010, 1011, 1012], "take": [5, 8, 27, 30, 46, 53, 56, 65, 74, 79, 89, 91, 95, 110, 118, 149, 151, 154, 158, 166, 172, 179, 204, 205, 221, 243, 244, 251, 257, 261, 265, 266, 274, 276, 279, 282, 283, 284, 286, 287, 298, 310, 317, 322, 323, 326, 336, 340, 341, 345, 354, 355, 356, 361, 362, 365, 367, 368, 371, 372, 373, 374, 377, 379, 380, 389, 391, 392, 394, 395, 396, 398, 399, 400, 401, 403, 417, 423, 426, 428, 429, 431, 436, 437, 438, 440, 442, 448, 497, 511, 516, 517, 518, 524, 525, 559, 570, 573, 574, 576, 577, 578, 588, 589, 594, 598, 599, 602, 610, 621, 627, 649, 651, 652, 653, 654, 657, 669, 670, 677, 683, 685, 687, 697, 706, 707, 715, 719, 720, 733, 748, 751, 755, 756, 757, 758, 760, 761, 764, 765, 774, 775, 779, 780, 788, 792, 800, 818, 819, 820, 822, 824, 825, 826, 827, 828, 840, 870, 871, 875, 876, 877, 878, 879, 880, 881, 899, 927, 946, 949, 953, 954, 956, 957, 958, 960, 962, 963, 964, 967, 972, 973, 981, 983, 987, 989, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "exact": [5, 7, 81, 100, 154, 200, 230, 350, 354, 355, 361, 367, 368, 375, 377, 378, 379, 391, 400, 401, 414, 460, 461, 462, 466, 474, 512, 513, 519, 539, 540, 616, 620, 624, 670, 774, 788, 797, 798, 799, 877, 880, 946, 949, 953, 954, 963, 967, 971, 972, 1005, 1006, 1008], "usp": 5, "digit": [5, 29, 35, 36, 51, 67, 71, 87, 92, 134, 139, 144, 164, 187, 203, 212, 216, 221, 223, 229, 230, 254, 255, 258, 280, 285, 291, 293, 294, 296, 313, 320, 360, 367, 372, 391, 397, 398, 400, 421, 425, 426, 480, 519, 522, 527, 544, 636, 666, 667, 668, 669, 670, 682, 683, 691, 695, 696, 714, 768, 770, 798, 802, 818, 825, 832, 836, 837, 846, 856, 861, 868, 871, 880, 887, 888, 889, 946, 952, 954, 957, 960, 962, 970, 983, 987, 990, 991, 994, 1002], "reproduc": [5, 12, 59, 110, 166, 172, 184, 265, 295, 355, 357, 366, 367, 368, 369, 374, 377, 379, 385, 391, 395, 396, 399, 403, 419, 420, 433, 439, 448, 453, 466, 469, 470, 473, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 531, 532, 533, 534, 537, 538, 539, 540, 541, 585, 586, 588, 589, 612, 617, 618, 619, 620, 624, 625, 628, 630, 631, 632, 638, 639, 640, 641, 644, 645, 646, 649, 654, 656, 657, 667, 668, 670, 671, 672, 768, 772, 773, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 800, 801, 802, 806, 807, 810, 821, 825, 832, 833, 834, 841, 853, 864, 867, 868, 875, 876, 877, 880, 911, 912, 928, 931, 949, 977, 980, 998, 1006, 1011, 1012], "sect": 5, "bak\u0131r": [5, 396, 513], "g\u00f6khan": [5, 396, 513], "h": [5, 6, 48, 57, 95, 96, 109, 110, 111, 127, 151, 166, 243, 281, 284, 292, 300, 310, 319, 322, 341, 364, 372, 391, 393, 396, 397, 398, 399, 402, 424, 497, 510, 513, 516, 518, 525, 531, 545, 546, 560, 568, 585, 586, 667, 671, 682, 686, 734, 811, 815, 816, 817, 822, 832, 847, 856, 949, 951, 953, 954, 955, 957, 959, 961, 962, 971, 973, 988, 1004, 1009], "jason": [5, 396, 513, 871, 1004, 1006, 1010, 1013], "weston": [5, 396, 513, 571, 572, 871], "bernhard": [5, 396, 513, 807, 842, 871, 958, 963, 972, 1004], "sch\u00f6lkopf": [5, 396, 513, 842, 963, 967, 972], "pre": [5, 70, 119, 166, 185, 298, 341, 357, 365, 367, 379, 382, 393, 395, 396, 398, 399, 400, 402, 403, 423, 424, 426, 438, 511, 513, 668, 690, 740, 839, 880, 957, 962, 967, 972, 973, 977, 978, 994, 1001, 1006, 1012], "advanc": [5, 164, 224, 226, 239, 256, 356, 391, 396, 467, 479, 513, 610, 617, 760, 772, 825, 834, 837, 856, 884, 949, 960, 967, 981, 995, 1000], "neural": [5, 6, 31, 256, 294, 357, 377, 379, 385, 395, 396, 398, 403, 511, 513, 516, 518, 525, 545, 546, 617, 623, 674, 718, 772, 825, 832, 833, 834, 842, 949, 953, 954, 955, 957, 960, 963, 967, 971, 973, 977, 979, 981, 988, 993, 994, 998, 1010], "system": [5, 100, 256, 263, 350, 354, 355, 356, 362, 364, 367, 368, 369, 374, 377, 382, 391, 396, 398, 402, 424, 457, 513, 517, 521, 528, 617, 623, 628, 629, 632, 633, 634, 660, 661, 703, 733, 746, 772, 825, 870, 871, 925, 953, 957, 960, 969, 977, 978, 981, 992, 998, 1006, 1007], "2004": [5, 146, 256, 362, 364, 391, 393, 396, 452, 513, 585, 586, 667, 671, 683, 720, 760, 871, 951, 953, 954, 959, 972, 990], "449": [5, 85, 86, 396, 513], "456": [5, 396, 513], "author": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 32, 37, 39, 40, 42, 46, 47, 48, 52, 53, 54, 55, 56, 60, 64, 65, 66, 69, 70, 71, 73, 74, 81, 95, 97, 99, 100, 101, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 175, 176, 178, 181, 183, 184, 185, 187, 188, 189, 190, 196, 197, 198, 200, 201, 203, 204, 211, 212, 213, 214, 217, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 244, 255, 257, 259, 260, 262, 269, 274, 276, 278, 281, 288, 289, 292, 295, 298, 299, 301, 302, 314, 315, 316, 317, 319, 334, 339, 340, 341, 361, 367, 370, 374, 377, 379, 395, 430, 512, 843, 949, 975, 977, 1001], "fr": [5, 7, 8, 9, 10, 24, 25, 30, 37, 42, 54, 56, 74, 81, 155, 175, 181, 183, 187, 189, 190, 201, 218, 219, 225, 228, 257, 259, 262, 269, 288, 334, 339, 340, 341, 509, 515, 636, 642, 663, 664, 735, 736, 955, 957], "licenc": [5, 361], "bsd": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 314, 315, 316, 317, 319, 330, 331, 334, 335, 339, 340, 341, 372], "claus": [5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 25, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 225, 230, 231, 232, 234, 241, 243, 257, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 298, 299, 300, 301, 302, 303, 330, 331, 334, 335, 339, 340, 341], "normal": [5, 12, 17, 19, 26, 29, 34, 35, 37, 40, 44, 46, 56, 60, 61, 65, 72, 74, 77, 78, 79, 84, 85, 96, 101, 110, 111, 113, 121, 122, 125, 126, 141, 152, 155, 156, 162, 164, 166, 174, 175, 176, 177, 178, 180, 186, 189, 191, 194, 198, 199, 200, 202, 210, 215, 220, 234, 241, 246, 247, 250, 253, 256, 262, 281, 282, 297, 299, 303, 304, 307, 310, 317, 326, 340, 341, 350, 357, 359, 362, 363, 364, 367, 371, 375, 378, 379, 388, 389, 391, 392, 394, 397, 398, 399, 403, 419, 420, 428, 430, 431, 432, 441, 443, 444, 454, 460, 461, 462, 467, 474, 490, 493, 497, 504, 505, 511, 514, 519, 520, 522, 526, 527, 530, 531, 532, 535, 536, 537, 538, 540, 541, 542, 543, 544, 556, 557, 558, 560, 566, 567, 568, 569, 589, 603, 605, 617, 628, 629, 632, 633, 634, 636, 637, 642, 643, 647, 650, 654, 658, 665, 669, 673, 675, 681, 682, 684, 696, 701, 703, 711, 713, 718, 722, 726, 727, 729, 732, 733, 734, 738, 747, 769, 770, 771, 777, 778, 802, 804, 813, 815, 821, 822, 825, 836, 837, 840, 841, 844, 845, 846, 849, 850, 851, 852, 853, 854, 856, 860, 861, 863, 864, 865, 866, 870, 871, 883, 884, 885, 886, 911, 912, 916, 933, 934, 939, 940, 946, 951, 953, 954, 955, 956, 959, 963, 968, 970, 972, 973, 988, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "pixel": [5, 6, 13, 32, 47, 48, 53, 95, 108, 133, 144, 164, 172, 229, 254, 294, 295, 364, 391, 396, 398, 399, 400, 471, 472, 473, 542, 563, 564, 585, 586, 612, 960, 962, 973, 988, 991], "train_test_split": [5, 6, 7, 10, 24, 25, 27, 31, 32, 70, 74, 85, 100, 109, 115, 116, 120, 121, 122, 123, 124, 125, 128, 142, 143, 166, 168, 169, 172, 191, 196, 203, 204, 211, 212, 214, 226, 237, 238, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 318, 344, 348, 350, 371, 378, 392, 395, 398, 417, 418, 536, 538, 545, 546, 675, 676, 678, 680, 774, 804, 807, 825, 833, 834, 836, 885, 886, 946, 947, 957, 959, 960, 965, 967, 972, 988, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1011], "data_id": [5, 119, 154, 166, 196, 214, 226, 361, 474], "41082": 5, "return_x_i": [5, 7, 14, 57, 69, 70, 71, 72, 95, 119, 120, 132, 135, 136, 137, 142, 161, 162, 168, 172, 181, 183, 184, 185, 187, 192, 193, 203, 211, 212, 226, 233, 237, 238, 252, 255, 258, 263, 264, 271, 274, 278, 285, 293, 294, 295, 303, 306, 308, 310, 311, 317, 329, 341, 344, 360, 371, 372, 378, 385, 391, 392, 395, 398, 400, 466, 467, 468, 469, 470, 472, 473, 474, 475, 478, 479, 480, 482, 483, 488, 510, 511, 512, 513, 536, 539, 540, 545, 546, 570, 573, 574, 576, 577, 578, 580, 588, 597, 598, 600, 601, 616, 617, 636, 637, 646, 651, 652, 653, 666, 667, 668, 669, 679, 765, 777, 778, 780, 804, 809, 820, 825, 828, 884, 885, 886, 947, 952, 957, 958, 959, 960, 967, 983, 987, 988, 990, 991, 995, 1004, 1006, 1008, 1011], "idea": [5, 53, 79, 80, 146, 154, 166, 197, 217, 281, 326, 344, 354, 355, 367, 371, 372, 393, 394, 395, 396, 397, 398, 400, 585, 586, 953, 954, 957, 960, 963, 976, 981, 992], "noisi": [5, 33, 49, 61, 96, 142, 149, 155, 195, 198, 200, 220, 228, 247, 257, 263, 265, 266, 346, 347, 350, 391, 399, 402, 424, 429, 499, 502, 912, 952, 954, 960, 972, 977], "100": [5, 7, 10, 12, 16, 17, 19, 25, 27, 30, 34, 37, 42, 50, 53, 56, 60, 65, 70, 71, 74, 78, 79, 95, 97, 98, 105, 111, 125, 128, 131, 150, 154, 157, 158, 166, 167, 169, 172, 175, 176, 178, 180, 182, 186, 187, 188, 190, 195, 196, 197, 198, 205, 206, 207, 209, 211, 212, 214, 219, 220, 222, 228, 229, 230, 231, 235, 241, 243, 247, 251, 252, 254, 256, 259, 261, 266, 267, 270, 281, 282, 283, 295, 299, 300, 302, 309, 318, 319, 324, 325, 327, 328, 329, 333, 334, 336, 339, 340, 344, 347, 348, 354, 356, 362, 364, 367, 368, 371, 372, 388, 391, 392, 395, 396, 397, 398, 399, 417, 421, 425, 428, 450, 451, 457, 468, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 506, 508, 509, 512, 514, 515, 517, 522, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 588, 609, 610, 611, 617, 618, 619, 620, 624, 625, 626, 627, 630, 631, 636, 637, 638, 639, 640, 641, 643, 645, 647, 649, 658, 659, 662, 666, 667, 668, 669, 671, 723, 772, 773, 776, 800, 801, 806, 811, 812, 813, 815, 816, 817, 821, 833, 834, 852, 854, 865, 946, 947, 950, 954, 957, 958, 964, 967, 969, 983, 987, 991, 992, 1006, 1007, 1008, 1011, 1012], "nois": [5, 10, 13, 20, 21, 27, 31, 33, 40, 44, 49, 52, 54, 60, 61, 66, 74, 85, 95, 96, 98, 100, 103, 111, 113, 122, 126, 127, 148, 149, 154, 159, 164, 175, 177, 178, 180, 185, 186, 191, 194, 195, 198, 199, 201, 213, 220, 222, 225, 227, 228, 231, 256, 264, 269, 270, 288, 292, 293, 300, 307, 333, 346, 347, 350, 363, 368, 371, 389, 391, 396, 398, 400, 402, 424, 431, 489, 491, 492, 493, 494, 495, 496, 500, 502, 503, 508, 510, 512, 519, 585, 586, 589, 591, 592, 593, 594, 595, 599, 600, 602, 603, 622, 623, 627, 628, 629, 631, 632, 633, 634, 641, 642, 643, 649, 657, 670, 853, 864, 870, 950, 952, 953, 954, 957, 960, 970, 990, 991, 999, 1004, 1009, 1011, 1012], "approach": [5, 8, 57, 62, 65, 99, 146, 149, 161, 166, 169, 178, 184, 196, 198, 204, 214, 217, 339, 340, 341, 356, 366, 367, 372, 375, 379, 382, 385, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 417, 423, 427, 431, 441, 498, 510, 560, 567, 613, 636, 637, 652, 653, 805, 821, 912, 946, 947, 953, 954, 957, 958, 960, 961, 967, 971, 972, 976, 977, 981, 985, 990, 991, 1002], "copi": [5, 12, 17, 44, 61, 74, 98, 113, 161, 162, 166, 167, 168, 182, 189, 202, 212, 214, 218, 314, 315, 317, 319, 340, 345, 355, 364, 367, 368, 370, 371, 372, 377, 379, 414, 417, 420, 422, 423, 424, 426, 428, 433, 438, 460, 461, 462, 463, 478, 480, 488, 510, 511, 512, 513, 519, 526, 531, 532, 537, 539, 540, 550, 568, 575, 585, 586, 588, 589, 606, 608, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 649, 650, 652, 657, 659, 662, 663, 664, 709, 746, 774, 788, 816, 817, 831, 839, 842, 845, 846, 847, 848, 852, 853, 854, 856, 858, 860, 861, 862, 863, 864, 865, 866, 870, 871, 875, 877, 878, 879, 880, 881, 890, 893, 895, 896, 928, 930, 931, 967, 972, 973, 978, 984, 987, 992, 998, 1001, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "add": [5, 12, 16, 17, 25, 26, 27, 32, 33, 40, 44, 54, 74, 79, 80, 85, 96, 118, 121, 142, 146, 149, 154, 155, 156, 161, 162, 178, 180, 185, 191, 197, 199, 211, 220, 225, 229, 231, 263, 265, 266, 276, 288, 300, 302, 306, 308, 309, 329, 333, 334, 340, 354, 365, 366, 367, 368, 370, 372, 374, 379, 382, 389, 395, 398, 399, 400, 493, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 580, 605, 606, 608, 610, 636, 637, 672, 675, 795, 816, 817, 872, 902, 925, 946, 947, 956, 963, 967, 970, 971, 978, 990, 991, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "corrupt": [5, 103, 180, 202, 213, 377, 832, 953, 965], "uncorrupt": 5, "base": [5, 12, 14, 17, 25, 26, 27, 49, 55, 56, 57, 66, 69, 70, 74, 79, 95, 96, 109, 111, 121, 122, 123, 127, 129, 132, 140, 143, 147, 149, 154, 155, 157, 167, 168, 169, 185, 196, 197, 204, 213, 214, 217, 225, 232, 253, 254, 259, 276, 289, 295, 298, 299, 301, 308, 310, 319, 324, 340, 344, 354, 355, 357, 361, 362, 363, 364, 365, 368, 369, 374, 379, 380, 381, 389, 392, 396, 397, 399, 401, 402, 403, 417, 424, 426, 427, 428, 429, 431, 435, 436, 440, 442, 443, 444, 445, 446, 465, 479, 486, 487, 510, 511, 513, 514, 515, 516, 517, 519, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 555, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 584, 585, 586, 588, 589, 594, 595, 596, 599, 602, 610, 611, 613, 614, 623, 624, 626, 628, 629, 630, 632, 633, 634, 642, 647, 649, 650, 651, 652, 653, 658, 660, 661, 663, 664, 665, 668, 670, 682, 695, 703, 712, 713, 714, 716, 718, 732, 733, 734, 770, 774, 776, 777, 778, 780, 781, 783, 788, 792, 793, 794, 800, 806, 807, 810, 818, 819, 820, 822, 824, 826, 827, 828, 833, 834, 838, 841, 848, 849, 851, 855, 864, 867, 868, 870, 871, 872, 877, 878, 879, 880, 881, 883, 884, 885, 886, 898, 906, 920, 925, 926, 946, 948, 949, 951, 952, 954, 957, 958, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 972, 973, 976, 977, 978, 979, 981, 987, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "solv": [5, 6, 65, 149, 185, 230, 256, 366, 367, 368, 371, 377, 391, 393, 395, 396, 401, 426, 432, 441, 457, 509, 515, 516, 517, 521, 523, 524, 525, 526, 613, 615, 624, 630, 632, 633, 642, 643, 648, 650, 652, 655, 663, 664, 665, 806, 875, 876, 879, 912, 948, 951, 953, 954, 957, 958, 971, 972, 973, 976, 977, 981, 985, 988, 992, 1004, 1008, 1011], "x_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 210, 211, 212, 214, 226, 233, 237, 238, 243, 245, 250, 253, 254, 259, 263, 265, 269, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 317, 318, 325, 339, 344, 348, 350, 354, 361, 368, 371, 378, 392, 395, 398, 417, 418, 487, 536, 537, 538, 545, 546, 675, 676, 678, 680, 802, 804, 807, 825, 833, 834, 836, 885, 886, 947, 957, 959, 960, 961, 963, 965, 967, 971, 972, 987, 988, 995], "x_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 77, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 154, 157, 166, 167, 168, 169, 172, 176, 180, 186, 191, 193, 194, 202, 203, 204, 210, 211, 212, 214, 226, 228, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 270, 274, 282, 284, 285, 292, 294, 295, 300, 302, 303, 306, 307, 308, 317, 318, 325, 339, 344, 346, 347, 348, 350, 354, 361, 368, 371, 378, 392, 395, 398, 418, 449, 450, 451, 452, 453, 454, 455, 487, 536, 537, 538, 545, 546, 675, 676, 678, 680, 802, 804, 807, 825, 833, 834, 836, 885, 886, 947, 957, 959, 960, 961, 963, 967, 971, 972, 987, 988, 990, 995, 998], "y_train": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 155, 156, 157, 158, 166, 167, 168, 169, 172, 176, 180, 191, 193, 194, 197, 203, 204, 211, 212, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 306, 307, 308, 314, 315, 317, 318, 319, 339, 344, 348, 350, 354, 361, 368, 371, 378, 392, 395, 398, 417, 418, 536, 537, 538, 545, 546, 675, 676, 678, 680, 802, 804, 807, 825, 833, 834, 836, 885, 886, 947, 957, 959, 960, 965, 967, 972, 987, 988, 995], "y_test": [5, 6, 7, 8, 10, 24, 25, 26, 27, 31, 32, 69, 70, 74, 84, 85, 100, 109, 110, 113, 115, 116, 120, 121, 122, 123, 124, 125, 128, 137, 138, 142, 143, 157, 166, 167, 168, 169, 172, 180, 191, 193, 196, 202, 203, 204, 211, 212, 214, 226, 233, 237, 238, 243, 250, 253, 254, 259, 263, 265, 269, 274, 284, 285, 292, 294, 295, 300, 303, 306, 307, 308, 317, 318, 339, 344, 348, 350, 361, 371, 378, 392, 395, 398, 418, 536, 537, 538, 545, 546, 675, 676, 678, 680, 802, 804, 807, 825, 833, 834, 836, 885, 886, 957, 959, 960, 967, 972, 987, 988, 995, 998], "stratifi": [5, 100, 116, 125, 142, 168, 211, 226, 238, 251, 256, 259, 265, 284, 285, 306, 368, 379, 529, 537, 545, 546, 580, 637, 644, 646, 654, 774, 777, 778, 780, 788, 789, 790, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 807, 810, 825, 833, 928, 957, 960, 987, 1003, 1004, 1005, 1007, 1008, 1011], "train_siz": [5, 7, 10, 128, 150, 172, 212, 231, 258, 269, 308, 311, 334, 776, 780, 791, 794, 800, 802, 952, 987, 998, 999, 1004, 1005], "1_000": [5, 48, 100, 149, 154, 156, 167, 229, 253, 679], "rng": [5, 20, 21, 31, 37, 50, 80, 85, 95, 97, 103, 111, 122, 125, 126, 128, 149, 150, 153, 155, 156, 158, 161, 162, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 225, 231, 233, 234, 241, 251, 259, 262, 267, 268, 292, 302, 307, 308, 310, 314, 315, 319, 329, 334, 346, 347, 350, 355, 368, 371, 449, 453, 454, 455, 621, 627, 648, 650, 656, 786, 811, 812, 813, 815, 816, 817, 821, 824, 826, 827, 828, 853, 864, 867, 868, 870, 871, 872, 881, 983], "randomst": [5, 13, 20, 21, 24, 31, 37, 50, 60, 80, 81, 85, 95, 97, 103, 111, 121, 122, 125, 126, 128, 142, 149, 150, 153, 155, 156, 158, 161, 162, 168, 175, 176, 177, 178, 185, 190, 197, 198, 203, 210, 220, 225, 231, 234, 241, 244, 251, 259, 262, 263, 265, 266, 267, 268, 276, 292, 299, 301, 302, 307, 308, 310, 314, 315, 319, 329, 334, 346, 347, 368, 371, 375, 379, 396, 403, 420, 423, 426, 428, 430, 431, 432, 433, 437, 438, 439, 441, 448, 449, 453, 454, 455, 466, 469, 470, 473, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 561, 562, 585, 586, 588, 589, 605, 610, 612, 617, 618, 619, 620, 621, 624, 625, 627, 628, 630, 631, 632, 636, 637, 638, 639, 640, 641, 644, 645, 646, 648, 649, 650, 652, 654, 655, 656, 657, 665, 667, 668, 669, 670, 671, 672, 673, 679, 758, 768, 772, 773, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 800, 801, 802, 806, 807, 810, 811, 812, 813, 815, 816, 817, 821, 825, 832, 833, 834, 841, 853, 864, 867, 868, 870, 871, 872, 875, 876, 877, 880, 881, 883, 884, 885, 886, 898, 911, 912, 926, 928, 931, 967, 983, 994], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 98, 214, 267, 360, 368, 369, 372, 378, 379, 395, 553, 987, 988, 998, 1005, 1006, 1007, 1011], "qualit": [5, 6, 53, 60, 122, 196, 311, 362, 391, 419, 679, 988, 1013], "assess": [5, 37, 59, 120, 122, 196, 214, 234, 252, 253, 255, 259, 389, 398, 679, 720, 956, 957, 963, 978, 1013], "plot_digit": 5, "small": [5, 11, 21, 27, 39, 48, 49, 53, 69, 77, 81, 85, 90, 100, 111, 113, 119, 121, 122, 154, 156, 166, 167, 176, 182, 186, 187, 197, 202, 211, 213, 214, 243, 256, 263, 268, 278, 289, 293, 295, 298, 300, 302, 308, 314, 319, 326, 331, 339, 340, 356, 360, 362, 364, 367, 369, 375, 379, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 421, 423, 425, 426, 428, 437, 438, 442, 454, 474, 476, 516, 518, 525, 533, 534, 535, 539, 540, 542, 560, 567, 568, 585, 586, 628, 632, 633, 634, 636, 637, 657, 660, 661, 723, 777, 778, 792, 801, 804, 833, 834, 841, 868, 877, 880, 912, 946, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 969, 970, 973, 978, 981, 990, 991, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013], "nrow": [5, 32, 56, 65, 72, 95, 158, 167, 196, 198, 204, 214, 217, 218, 221, 258, 259, 276, 300, 302, 311, 315, 333, 334, 988], "img": [5, 50, 65, 484, 564], "ravel": [5, 9, 13, 16, 17, 19, 26, 30, 34, 42, 53, 54, 57, 79, 105, 111, 113, 118, 122, 127, 128, 129, 138, 149, 151, 153, 154, 155, 156, 166, 175, 186, 187, 189, 196, 209, 210, 218, 222, 225, 229, 231, 238, 243, 245, 259, 263, 265, 276, 281, 282, 288, 289, 292, 293, 294, 295, 300, 301, 310, 319, 325, 326, 330, 331, 332, 333, 335, 336, 339, 346, 347, 444, 471, 472, 473, 609, 696, 944, 957], "imshow": [5, 6, 13, 30, 32, 40, 46, 47, 48, 50, 51, 53, 54, 57, 81, 88, 95, 98, 106, 151, 152, 153, 157, 169, 187, 212, 218, 233, 267, 280, 295, 314, 315, 326, 332, 335, 361, 610, 675, 988, 989, 1012], "grei": [5, 34, 266, 298, 362], "off": [5, 12, 13, 37, 39, 40, 47, 48, 52, 53, 77, 81, 84, 95, 218, 230, 233, 250, 255, 257, 258, 298, 315, 319, 326, 336, 339, 362, 367, 368, 391, 393, 398, 400, 422, 531, 532, 537, 538, 566, 569, 612, 634, 670, 693, 772, 773, 774, 777, 778, 788, 799, 916, 956, 962, 972, 978, 998, 1002, 1003, 1005], "fontsiz": [5, 8, 10, 14, 34, 50, 59, 90, 98, 118, 141, 152, 153, 155, 158, 167, 176, 186, 195, 207, 218, 219, 244, 251, 260, 261, 262, 267, 268, 295, 302, 333, 889], "mse": [5, 7, 77, 78, 122, 123, 161, 162, 196, 198, 202, 270, 625, 631, 727, 957, 973, 1009, 1011], "quantit": [5, 6, 25, 60, 122, 132, 146, 252, 270, 364, 988], "nmse": [5, 270], "2f": [5, 8, 11, 19, 31, 39, 42, 44, 46, 50, 52, 61, 63, 66, 84, 91, 98, 105, 122, 128, 129, 141, 166, 167, 169, 172, 176, 185, 187, 192, 196, 211, 212, 213, 214, 225, 229, 255, 259, 260, 262, 264, 265, 266, 284, 285, 292, 300, 310, 326, 339, 340, 350, 392, 395, 398, 800], "linear": [5, 10, 13, 16, 27, 29, 30, 31, 35, 37, 56, 73, 74, 84, 85, 95, 100, 104, 109, 113, 115, 127, 129, 132, 135, 136, 138, 141, 144, 146, 153, 155, 161, 162, 165, 167, 170, 172, 178, 182, 184, 185, 186, 191, 193, 194, 197, 198, 204, 208, 210, 212, 213, 214, 215, 216, 219, 221, 223, 228, 231, 232, 233, 236, 250, 252, 253, 254, 256, 259, 261, 262, 263, 264, 265, 266, 270, 281, 284, 285, 295, 298, 299, 300, 308, 309, 321, 323, 326, 327, 328, 330, 331, 334, 335, 337, 339, 346, 347, 355, 357, 359, 363, 364, 365, 368, 369, 371, 379, 381, 389, 391, 394, 395, 396, 397, 398, 399, 400, 401, 403, 422, 434, 444, 446, 454, 460, 461, 462, 474, 479, 480, 490, 493, 499, 502, 510, 511, 512, 513, 514, 517, 519, 521, 522, 526, 527, 528, 532, 544, 560, 567, 571, 572, 584, 587, 592, 598, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 671, 685, 694, 727, 730, 742, 744, 751, 762, 774, 785, 789, 799, 802, 816, 817, 821, 825, 832, 833, 834, 837, 842, 843, 846, 849, 851, 853, 854, 855, 856, 864, 868, 875, 876, 877, 878, 879, 880, 881, 946, 948, 949, 950, 952, 957, 960, 961, 962, 963, 964, 965, 971, 972, 977, 979, 981, 983, 986, 987, 992, 993, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012], "radial": [5, 100, 149, 154, 156, 326, 359, 431, 600, 669, 955, 972, 994], "rbf": [5, 6, 10, 11, 16, 30, 31, 100, 130, 138, 149, 150, 151, 153, 154, 155, 156, 158, 164, 210, 224, 225, 231, 239, 254, 256, 258, 261, 319, 321, 323, 330, 332, 333, 337, 359, 392, 396, 398, 427, 431, 480, 482, 513, 519, 588, 589, 590, 591, 594, 597, 598, 599, 601, 602, 617, 618, 619, 620, 621, 654, 669, 742, 751, 753, 774, 785, 788, 794, 836, 856, 870, 871, 875, 877, 878, 879, 880, 881, 946, 949, 950, 954, 957, 963, 967, 970, 983, 988, 994, 1004, 1009], "decomposit": [5, 6, 14, 17, 57, 69, 71, 72, 73, 85, 86, 89, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 127, 133, 217, 218, 220, 230, 232, 236, 255, 280, 285, 303, 310, 340, 356, 357, 360, 372, 375, 379, 388, 392, 398, 428, 430, 431, 432, 441, 460, 461, 462, 473, 527, 534, 589, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 650, 651, 652, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 772, 773, 825, 832, 835, 838, 854, 884, 911, 912, 953, 954, 957, 974, 977, 979, 986, 988, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "kernel_pca": [5, 100, 392], "400": [5, 26, 50, 95, 109, 124, 128, 149, 162, 202, 222, 268, 276, 293, 340, 362, 396, 473, 992], "1e": [5, 6, 7, 10, 17, 26, 46, 95, 149, 152, 154, 155, 156, 157, 158, 161, 166, 176, 189, 196, 197, 203, 210, 214, 220, 225, 231, 235, 241, 244, 247, 254, 264, 267, 294, 309, 318, 324, 326, 334, 339, 372, 403, 423, 426, 431, 438, 441, 450, 451, 457, 460, 461, 462, 509, 510, 511, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 537, 538, 539, 540, 570, 575, 589, 591, 592, 593, 597, 598, 600, 601, 603, 605, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 630, 631, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 665, 667, 668, 669, 670, 671, 672, 673, 705, 718, 762, 772, 773, 788, 811, 812, 813, 814, 815, 816, 817, 825, 833, 834, 841, 870, 871, 875, 876, 877, 878, 879, 880, 881, 943, 946, 957, 961, 965, 967, 971, 988, 992, 1006, 1011, 1012, 1013], "fit_inverse_transform": [5, 100, 513, 1007], "5e": [5, 95, 181, 573, 574, 576], "inde": [5, 7, 25, 39, 40, 53, 57, 81, 85, 100, 113, 145, 146, 149, 166, 168, 175, 184, 185, 196, 198, 258, 259, 263, 265, 298, 340, 350, 354, 366, 371, 378, 379, 380, 393, 398, 545, 546, 953, 967, 971, 1012], "least": [5, 14, 79, 80, 83, 86, 98, 120, 123, 146, 157, 164, 174, 175, 189, 196, 198, 201, 204, 213, 214, 215, 229, 256, 274, 308, 309, 326, 340, 341, 354, 360, 362, 364, 366, 367, 372, 374, 377, 379, 380, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 402, 424, 427, 429, 435, 436, 437, 440, 453, 460, 461, 462, 463, 472, 494, 509, 515, 517, 519, 520, 521, 523, 524, 525, 526, 527, 535, 536, 537, 538, 540, 542, 543, 544, 571, 580, 613, 621, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 654, 656, 657, 658, 660, 661, 662, 663, 664, 665, 670, 675, 690, 694, 696, 762, 775, 779, 780, 786, 788, 789, 790, 792, 793, 795, 797, 800, 801, 802, 833, 834, 837, 848, 856, 880, 883, 884, 885, 886, 904, 922, 947, 950, 954, 957, 960, 969, 971, 972, 973, 978, 979, 981, 990, 994, 998, 1000, 1001, 1004, 1005, 1009], "hope": [5, 214, 379, 390, 1007], "remov": [5, 14, 16, 17, 54, 69, 74, 146, 161, 162, 166, 169, 257, 298, 306, 307, 308, 339, 340, 344, 350, 359, 362, 366, 367, 370, 371, 375, 379, 391, 392, 395, 398, 399, 401, 402, 417, 419, 422, 424, 426, 438, 466, 467, 512, 513, 515, 517, 519, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 556, 557, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 589, 608, 610, 622, 626, 628, 629, 632, 633, 634, 636, 642, 643, 647, 649, 654, 658, 670, 677, 745, 800, 823, 835, 836, 840, 841, 849, 853, 854, 856, 864, 878, 879, 881, 883, 884, 885, 886, 890, 906, 907, 909, 920, 947, 954, 960, 973, 979, 984, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "think": [5, 37, 167, 303, 339, 340, 367, 397, 956, 978, 980, 981, 983], "happen": [5, 115, 184, 298, 340, 350, 354, 355, 366, 367, 370, 371, 372, 377, 379, 380, 382, 391, 393, 395, 398, 417, 493, 550, 636, 762, 854, 856, 875, 953, 957, 958, 972, 978, 992, 1006, 1010, 1011], "ridg": [5, 10, 13, 54, 74, 129, 146, 148, 159, 161, 164, 166, 167, 174, 175, 196, 197, 215, 224, 233, 239, 339, 354, 357, 377, 396, 398, 502, 513, 517, 521, 589, 593, 600, 603, 621, 622, 623, 625, 627, 635, 639, 651, 652, 653, 656, 665, 679, 727, 774, 788, 809, 881, 952, 957, 965, 967, 971, 972, 979, 990, 994, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1011, 1012, 1013], "x_reconstructed_kernel_pca": [5, 100], "inverse_transform": [5, 51, 54, 100, 143, 280, 340, 396, 399, 425, 444, 460, 461, 462, 511, 512, 513, 516, 517, 518, 519, 521, 522, 559, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 608, 774, 777, 778, 788, 836, 840, 841, 843, 844, 845, 846, 847, 849, 850, 852, 853, 854, 856, 867, 868, 967, 968, 969, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "x_reconstructed_pca": [5, 100], "lower": [5, 16, 26, 30, 31, 57, 78, 85, 95, 97, 103, 109, 110, 113, 118, 122, 125, 149, 151, 153, 155, 157, 167, 168, 181, 182, 186, 196, 197, 198, 199, 209, 217, 221, 228, 229, 233, 243, 247, 255, 256, 258, 259, 263, 264, 266, 269, 280, 282, 283, 300, 310, 317, 326, 332, 339, 340, 341, 345, 362, 367, 389, 390, 391, 394, 395, 396, 397, 398, 399, 402, 424, 427, 443, 446, 476, 487, 510, 512, 519, 522, 531, 537, 538, 539, 540, 541, 566, 567, 569, 581, 589, 591, 592, 593, 595, 597, 598, 600, 601, 603, 610, 611, 613, 615, 655, 657, 690, 694, 702, 705, 711, 716, 772, 773, 822, 824, 826, 827, 828, 830, 877, 878, 879, 882, 899, 952, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 969, 971, 972, 973, 990, 1000, 1001, 1006, 1013], "analysi": [5, 7, 9, 25, 29, 35, 36, 56, 62, 67, 93, 96, 97, 99, 100, 102, 104, 107, 119, 164, 166, 167, 185, 218, 240, 248, 253, 256, 257, 261, 277, 290, 298, 303, 340, 357, 359, 362, 364, 367, 368, 380, 388, 391, 393, 398, 399, 403, 419, 426, 427, 452, 454, 455, 460, 461, 463, 480, 482, 490, 493, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 533, 534, 616, 666, 668, 669, 670, 671, 688, 697, 702, 703, 733, 765, 766, 767, 768, 772, 774, 798, 802, 818, 825, 836, 837, 842, 852, 856, 863, 911, 912, 947, 953, 954, 956, 957, 967, 976, 977, 979, 981, 984, 993, 994, 998, 999, 1000, 1002, 1007], "favor": [5, 81, 241, 247, 377, 393, 398, 707, 782, 784, 835, 906, 946, 965, 1000, 1002, 1004, 1005, 1007, 1010, 1011, 1012, 1013], "background": [5, 11, 47, 65, 125, 295, 300, 362, 367, 374, 391, 471, 472, 954, 962, 971, 1008], "492": [5, 15, 621, 950, 990], "plot_digits_denois": [5, 15], "dataset": [6, 7, 9, 10, 11, 13, 14, 16, 19, 20, 21, 26, 30, 31, 33, 36, 37, 38, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 66, 67, 70, 71, 72, 73, 74, 79, 80, 81, 85, 92, 93, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 142, 143, 144, 145, 146, 148, 157, 159, 161, 162, 168, 169, 172, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 195, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 215, 219, 221, 222, 224, 226, 229, 231, 232, 233, 234, 237, 238, 239, 241, 243, 244, 245, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 271, 274, 276, 278, 279, 280, 284, 285, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 321, 322, 324, 326, 327, 328, 329, 330, 334, 335, 336, 337, 340, 341, 343, 344, 346, 347, 348, 349, 350, 355, 356, 357, 368, 369, 370, 372, 378, 379, 381, 382, 385, 387, 388, 389, 391, 392, 395, 396, 397, 398, 399, 400, 406, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 448, 449, 452, 453, 454, 455, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 524, 527, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 561, 562, 566, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 606, 609, 610, 611, 612, 613, 616, 617, 618, 621, 624, 625, 627, 629, 630, 631, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 657, 666, 667, 668, 669, 670, 675, 676, 678, 679, 680, 681, 682, 686, 706, 732, 734, 764, 765, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 832, 833, 834, 836, 837, 840, 841, 849, 850, 854, 856, 857, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 895, 896, 900, 901, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 977, 978, 980, 981, 984, 986, 987, 988, 991, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "excerpt": [6, 969, 988], "wild": [6, 360, 471, 472, 486, 487, 988, 994, 998], "aka": [6, 292, 339, 377, 399, 431, 514, 516, 518, 522, 525, 559, 560, 593, 600, 629, 630, 632, 633, 634, 636, 637, 640, 644, 645, 646, 648, 654, 655, 656, 718, 843, 847, 849, 953, 961, 971, 983, 988, 1000, 1012], "lfw": [6, 362, 471, 472, 988, 998], "vi": [6, 8, 362, 677, 988, 1006, 1009], "www": [6, 70, 172, 196, 212, 214, 226, 274, 294, 361, 362, 367, 370, 372, 374, 382, 391, 395, 422, 428, 465, 486, 487, 509, 512, 515, 519, 622, 636, 642, 649, 663, 664, 825, 832, 883, 884, 953, 970, 988], "umass": [6, 362, 988], "edu": [6, 8, 11, 17, 46, 120, 146, 156, 172, 178, 217, 244, 255, 281, 289, 302, 339, 361, 362, 364, 391, 428, 465, 480, 486, 487, 488, 512, 619, 622, 627, 636, 644, 645, 654, 657, 660, 661, 811, 813, 814, 815, 825, 832, 868, 870, 883, 884, 953, 955, 988], "funnel": [6, 471, 472, 988], "tgz": [6, 988], "233mb": [6, 988], "randomizedsearchcv": [6, 149, 257, 264, 308, 350, 378, 553, 946, 957, 971, 977, 988, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013], "fetch_lfw_peopl": [6, 362, 988, 1013], "classification_report": [6, 32, 69, 143, 254, 295, 314, 315, 957, 988, 992, 1000, 1002, 1006, 1007, 1008, 1010], "confusionmatrixdisplai": [6, 32, 250, 309, 314, 339, 609, 696, 957, 988, 1008, 1009, 1011, 1012, 1013], "standardscal": [6, 10, 31, 44, 49, 57, 61, 70, 72, 85, 106, 129, 166, 175, 184, 185, 187, 196, 212, 214, 226, 227, 235, 236, 238, 253, 263, 284, 285, 292, 300, 303, 306, 307, 309, 310, 311, 326, 329, 350, 356, 367, 368, 371, 375, 378, 392, 395, 411, 445, 446, 545, 628, 629, 632, 633, 634, 642, 643, 654, 656, 836, 837, 840, 853, 866, 875, 876, 877, 878, 880, 881, 947, 954, 961, 967, 971, 972, 974, 988, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011], "svc": [6, 16, 25, 27, 30, 31, 32, 69, 73, 130, 136, 138, 144, 164, 172, 230, 232, 236, 250, 254, 256, 258, 261, 262, 263, 266, 267, 271, 300, 306, 308, 317, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 354, 368, 372, 379, 385, 392, 395, 398, 447, 493, 533, 675, 676, 678, 680, 774, 791, 803, 805, 836, 872, 873, 875, 877, 945, 946, 952, 955, 957, 958, 967, 983, 987, 988, 990, 995, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "util": [6, 8, 10, 11, 48, 55, 60, 88, 129, 149, 196, 198, 204, 212, 219, 228, 233, 244, 262, 264, 276, 300, 306, 317, 326, 339, 355, 357, 361, 362, 365, 367, 368, 369, 370, 372, 377, 378, 379, 387, 391, 392, 395, 396, 399, 432, 447, 549, 550, 551, 554, 648, 677, 774, 796, 802, 803, 843, 946, 952, 955, 957, 958, 967, 968, 977, 981, 984, 988, 994, 998, 999, 1001, 1002, 1004, 1005], "loguniform": [6, 149, 264, 946, 988, 1008], "disk": [6, 13, 362, 365, 367, 371, 379, 385, 988], "arrai": [6, 7, 8, 10, 11, 12, 13, 16, 19, 32, 33, 34, 40, 44, 46, 48, 53, 54, 60, 61, 63, 69, 71, 80, 84, 91, 96, 97, 110, 121, 123, 125, 128, 131, 136, 143, 146, 150, 151, 152, 157, 166, 175, 177, 189, 190, 193, 196, 197, 203, 213, 218, 219, 225, 229, 235, 238, 241, 242, 243, 245, 246, 251, 252, 254, 256, 257, 260, 261, 265, 274, 289, 301, 306, 309, 310, 315, 322, 329, 339, 347, 348, 350, 354, 355, 360, 361, 362, 367, 368, 369, 371, 372, 374, 376, 377, 378, 379, 385, 388, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 493, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 559, 560, 561, 562, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 892, 893, 895, 896, 897, 900, 901, 909, 910, 911, 912, 913, 914, 916, 917, 918, 921, 922, 923, 928, 929, 930, 931, 932, 933, 934, 935, 943, 944, 947, 952, 953, 955, 957, 958, 960, 961, 963, 964, 967, 968, 969, 971, 972, 973, 976, 981, 987, 988, 989, 990, 991, 992, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lfw_peopl": [6, 362, 988], "min_faces_per_person": [6, 362, 472, 988], "resiz": [6, 46, 47, 235, 362, 471, 472, 988], "n_sampl": [6, 7, 10, 14, 24, 25, 26, 27, 32, 33, 37, 38, 39, 41, 42, 43, 44, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 69, 74, 77, 78, 79, 80, 81, 85, 91, 95, 96, 100, 103, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 137, 138, 145, 146, 158, 161, 162, 175, 177, 178, 180, 182, 184, 186, 188, 190, 191, 195, 196, 197, 199, 200, 204, 208, 211, 213, 214, 217, 218, 219, 220, 221, 222, 225, 229, 230, 242, 244, 245, 246, 247, 253, 254, 256, 259, 260, 263, 265, 266, 267, 268, 269, 270, 276, 286, 300, 301, 302, 307, 308, 310, 316, 324, 327, 328, 334, 339, 340, 350, 360, 364, 367, 368, 371, 375, 377, 378, 379, 391, 393, 394, 395, 396, 398, 402, 403, 404, 406, 408, 409, 410, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 479, 482, 486, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 599, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 747, 748, 749, 750, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 900, 901, 912, 914, 916, 921, 926, 928, 931, 932, 933, 934, 935, 936, 937, 938, 946, 949, 953, 957, 958, 960, 961, 967, 968, 969, 971, 972, 973, 983, 988, 989, 990, 991, 992, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "w": [6, 12, 13, 16, 30, 34, 40, 42, 45, 48, 57, 63, 102, 105, 161, 180, 195, 200, 213, 232, 241, 242, 243, 246, 247, 267, 295, 309, 310, 331, 334, 341, 350, 362, 364, 372, 391, 392, 396, 398, 399, 403, 448, 451, 453, 501, 516, 518, 525, 539, 540, 566, 567, 569, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 649, 650, 655, 658, 659, 660, 661, 662, 671, 677, 702, 703, 733, 774, 788, 822, 868, 909, 914, 953, 957, 961, 962, 967, 969, 971, 972, 988, 992, 1008, 1012, 1013], "info": [6, 42, 70, 95, 166, 167, 254, 364, 366, 370, 379, 399, 988], "n_featur": [6, 8, 14, 25, 26, 27, 30, 31, 32, 33, 40, 52, 57, 59, 60, 77, 78, 79, 80, 81, 84, 90, 91, 95, 103, 110, 112, 114, 116, 143, 145, 146, 161, 162, 172, 175, 178, 180, 182, 190, 191, 195, 199, 200, 211, 213, 218, 225, 229, 230, 241, 246, 253, 259, 263, 265, 266, 268, 269, 286, 292, 300, 306, 307, 308, 310, 334, 339, 340, 341, 350, 354, 360, 361, 367, 368, 371, 377, 378, 379, 391, 393, 394, 396, 398, 399, 402, 403, 404, 406, 408, 409, 410, 412, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 479, 482, 486, 487, 490, 493, 494, 497, 499, 501, 502, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 688, 702, 735, 736, 737, 738, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 912, 932, 933, 934, 935, 936, 937, 938, 949, 953, 958, 960, 961, 967, 971, 972, 973, 983, 988, 989, 991, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "id": [6, 214, 289, 348, 361, 362, 367, 374, 393, 395, 399, 472, 473, 474, 887, 889, 907, 988, 992, 1006, 1007, 1010], "person": [6, 259, 362, 366, 395, 399, 471, 472, 473, 967, 988, 1006], "target_nam": [6, 19, 52, 99, 104, 205, 218, 243, 250, 257, 265, 266, 279, 318, 339, 345, 360, 362, 466, 467, 469, 470, 471, 472, 474, 475, 478, 480, 481, 482, 483, 488, 691, 957, 973, 983, 988, 992, 1008], "n_class": [6, 30, 37, 90, 91, 110, 112, 116, 118, 143, 145, 211, 218, 230, 232, 243, 263, 264, 265, 285, 286, 306, 345, 350, 367, 368, 379, 398, 417, 466, 467, 480, 493, 497, 501, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 547, 571, 572, 582, 588, 612, 617, 636, 637, 644, 645, 646, 652, 653, 654, 655, 675, 685, 694, 696, 712, 715, 718, 731, 765, 769, 774, 777, 778, 788, 797, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 818, 823, 825, 826, 833, 836, 843, 844, 847, 850, 859, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 885, 900, 901, 953, 957, 958, 961, 968, 971, 972, 980, 988, 1003, 1004, 1005, 1007, 1008, 1009], "1288": [6, 362], "1850": [6, 362], "scaler": [6, 70, 72, 164, 212, 230, 236, 238, 284, 297, 303, 304, 311, 326, 329, 350, 371, 392, 395, 468, 636, 637, 650, 652, 665, 836, 845, 846, 848, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 866, 961, 967, 971, 988, 998, 1003, 1006, 1011], "unlabel": [6, 232, 308, 314, 315, 316, 318, 319, 379, 390, 391, 870, 871, 872, 956, 983, 986, 988, 990, 1010], "unsupervis": [6, 12, 37, 49, 71, 72, 85, 95, 115, 127, 225, 232, 282, 283, 325, 339, 340, 350, 357, 359, 362, 368, 378, 379, 390, 391, 396, 397, 398, 399, 413, 422, 425, 509, 510, 512, 514, 515, 517, 520, 521, 527, 541, 544, 545, 546, 547, 548, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 606, 608, 612, 613, 616, 617, 618, 619, 620, 655, 719, 774, 777, 778, 780, 788, 800, 803, 818, 819, 822, 824, 825, 826, 827, 832, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 867, 868, 872, 879, 954, 957, 963, 970, 979, 983, 984, 986, 988, 994, 998, 1001, 1011], "dimension": [6, 9, 10, 19, 31, 40, 44, 54, 56, 57, 61, 68, 72, 73, 75, 84, 85, 91, 95, 103, 110, 115, 127, 137, 138, 149, 151, 152, 156, 164, 192, 197, 213, 216, 218, 219, 221, 223, 225, 229, 230, 232, 242, 243, 277, 280, 290, 300, 323, 339, 350, 354, 359, 362, 363, 364, 367, 375, 379, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 425, 426, 428, 444, 448, 452, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 482, 483, 488, 493, 497, 510, 512, 513, 516, 517, 518, 519, 522, 525, 527, 541, 544, 551, 577, 582, 609, 618, 619, 620, 630, 666, 667, 668, 669, 670, 671, 672, 674, 677, 688, 702, 772, 773, 774, 802, 816, 817, 818, 821, 824, 825, 832, 836, 837, 840, 851, 856, 867, 868, 869, 875, 879, 912, 943, 948, 949, 952, 953, 958, 959, 963, 969, 970, 971, 972, 973, 979, 981, 983, 984, 986, 988, 989, 991, 992, 993, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1010, 1013], "reduct": [6, 19, 54, 56, 68, 72, 75, 85, 95, 113, 127, 164, 216, 218, 219, 223, 229, 232, 277, 290, 310, 323, 350, 354, 359, 390, 391, 392, 394, 396, 398, 400, 447, 460, 461, 462, 463, 480, 508, 510, 512, 513, 516, 517, 518, 519, 522, 525, 527, 531, 532, 535, 536, 537, 538, 542, 543, 544, 577, 582, 636, 637, 666, 667, 668, 669, 670, 671, 758, 774, 802, 818, 825, 832, 836, 837, 856, 873, 875, 883, 884, 885, 886, 949, 954, 969, 973, 978, 979, 981, 988, 994, 999, 1000, 1001, 1004, 1012, 1013], "top": [6, 12, 13, 14, 16, 17, 30, 34, 37, 39, 41, 42, 43, 44, 45, 51, 61, 63, 70, 90, 97, 115, 118, 129, 132, 166, 196, 198, 207, 211, 225, 234, 235, 241, 243, 244, 247, 253, 257, 265, 266, 281, 298, 300, 307, 314, 315, 326, 339, 350, 365, 367, 370, 372, 377, 388, 389, 391, 396, 397, 398, 465, 565, 566, 569, 577, 703, 733, 769, 887, 889, 946, 949, 953, 955, 965, 981, 988, 991, 992, 1012], "t0": [6, 8, 11, 14, 17, 39, 42, 44, 46, 48, 50, 52, 57, 61, 63, 98, 182, 211, 212, 213, 219, 222, 225, 229, 231, 257, 339, 340, 341, 654, 655, 656, 988], "svd_solver": [6, 95, 103, 396, 513, 519, 988, 1004], "whiten": [6, 95, 96, 97, 280, 396, 403, 511, 512, 519, 854, 856, 988, 1002, 1004, 1012, 1013], "done": [6, 8, 9, 11, 14, 17, 19, 48, 50, 52, 53, 98, 143, 146, 154, 166, 167, 172, 175, 182, 213, 231, 246, 254, 257, 260, 265, 301, 308, 339, 340, 341, 350, 355, 361, 365, 367, 368, 370, 372, 373, 374, 375, 377, 379, 391, 393, 395, 396, 398, 421, 422, 425, 429, 431, 451, 460, 461, 462, 463, 467, 513, 539, 540, 560, 584, 606, 608, 610, 612, 621, 622, 623, 637, 718, 772, 773, 774, 788, 793, 794, 840, 854, 942, 946, 947, 950, 953, 954, 957, 959, 960, 961, 967, 970, 971, 972, 973, 978, 983, 987, 988, 990, 992, 998, 1000, 1005, 1008, 1010], "components_": [6, 14, 57, 85, 95, 97, 98, 101, 106, 229, 230, 295, 303, 310, 379, 392, 396, 424, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 522, 617, 825, 832, 867, 868, 969, 988, 1002, 1004, 1010, 1013], "project": [6, 8, 11, 13, 17, 45, 57, 66, 89, 93, 95, 97, 99, 101, 102, 107, 164, 167, 193, 217, 218, 219, 221, 224, 230, 232, 239, 280, 285, 289, 323, 340, 354, 357, 359, 361, 365, 366, 370, 371, 372, 375, 379, 380, 382, 388, 394, 396, 397, 403, 420, 430, 431, 441, 453, 460, 461, 462, 463, 467, 480, 482, 509, 511, 512, 513, 515, 517, 519, 520, 521, 522, 526, 527, 551, 560, 567, 619, 620, 627, 666, 669, 673, 674, 806, 825, 853, 867, 868, 869, 911, 912, 951, 953, 954, 955, 958, 960, 961, 963, 970, 973, 975, 980, 981, 983, 988, 991, 994, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "orthonorm": [6, 375, 911, 988], "x_train_pca": [6, 988], "x_test_pca": [6, 100, 988], "966": [6, 8], "080": 6, "010": [6, 143, 147, 337, 372, 965], "classifi": [6, 7, 8, 9, 23, 26, 28, 29, 30, 32, 35, 55, 69, 70, 71, 72, 100, 109, 111, 112, 114, 116, 117, 118, 121, 127, 130, 131, 142, 143, 145, 164, 168, 172, 174, 186, 187, 188, 194, 203, 205, 208, 211, 215, 225, 230, 237, 250, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 273, 275, 278, 279, 284, 285, 287, 292, 295, 300, 303, 308, 309, 313, 314, 315, 317, 318, 320, 321, 322, 325, 327, 328, 329, 334, 335, 336, 337, 341, 362, 364, 367, 368, 371, 377, 379, 391, 392, 395, 399, 400, 401, 408, 415, 417, 418, 419, 466, 467, 474, 482, 490, 492, 493, 500, 509, 514, 515, 520, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 571, 572, 580, 584, 588, 600, 607, 609, 610, 611, 627, 636, 637, 644, 646, 649, 650, 651, 652, 653, 654, 675, 676, 678, 680, 681, 685, 686, 687, 690, 691, 696, 698, 703, 704, 706, 707, 711, 712, 715, 716, 717, 718, 719, 720, 731, 733, 759, 760, 761, 764, 765, 766, 769, 771, 774, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 824, 826, 827, 832, 833, 834, 836, 837, 843, 856, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 904, 906, 946, 947, 949, 952, 953, 954, 957, 958, 959, 962, 965, 967, 970, 971, 972, 973, 977, 978, 979, 981, 983, 984, 986, 987, 988, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "1e3": [6, 7, 10, 149, 155, 161, 231, 267, 946, 988], "1e5": [6, 154, 177, 179, 186, 267, 591, 592, 593, 597, 598, 600, 601, 603, 864, 869, 969, 988, 990], "clf": [6, 9, 10, 11, 12, 16, 24, 25, 26, 27, 31, 32, 38, 48, 51, 54, 57, 62, 70, 89, 101, 102, 114, 121, 124, 125, 130, 135, 138, 142, 143, 145, 151, 153, 169, 186, 188, 189, 193, 194, 200, 203, 205, 208, 209, 210, 212, 220, 226, 227, 230, 232, 234, 238, 245, 253, 257, 261, 262, 264, 267, 268, 279, 282, 283, 284, 287, 292, 300, 306, 307, 308, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 344, 345, 348, 354, 362, 378, 379, 385, 392, 395, 398, 400, 418, 527, 528, 531, 533, 535, 537, 539, 541, 542, 545, 571, 572, 575, 610, 612, 616, 617, 618, 619, 620, 622, 623, 626, 630, 636, 637, 638, 639, 640, 644, 646, 647, 650, 651, 652, 653, 654, 655, 658, 675, 676, 678, 680, 765, 774, 777, 778, 788, 804, 805, 806, 808, 811, 812, 813, 814, 815, 822, 823, 833, 875, 877, 879, 880, 883, 887, 889, 947, 949, 953, 957, 958, 960, 961, 963, 964, 971, 972, 973, 983, 987, 988, 992], "class_weight": [6, 328, 379, 535, 539, 542, 636, 637, 644, 646, 652, 653, 654, 655, 875, 877, 878, 879, 880, 881, 882, 883, 885, 946, 971, 972, 988, 998, 999, 1001, 1002, 1003, 1004, 1006, 1012, 1013], "n_iter": [6, 17, 149, 175, 204, 217, 218, 222, 257, 264, 276, 295, 328, 368, 372, 378, 403, 433, 457, 510, 511, 515, 517, 522, 523, 524, 525, 622, 623, 624, 625, 630, 631, 638, 639, 640, 641, 659, 660, 661, 662, 663, 664, 665, 670, 672, 777, 778, 786, 788, 832, 834, 911, 912, 946, 971, 988, 999, 1004, 1005, 1006, 1010, 1012, 1013], "found": [6, 19, 20, 21, 106, 116, 145, 149, 153, 155, 157, 158, 200, 232, 254, 257, 258, 259, 306, 309, 311, 326, 341, 354, 356, 361, 364, 366, 367, 368, 372, 377, 379, 380, 388, 391, 394, 395, 396, 398, 399, 401, 414, 421, 424, 425, 438, 451, 535, 536, 537, 538, 542, 543, 566, 568, 588, 589, 606, 614, 625, 629, 631, 633, 639, 641, 643, 649, 650, 652, 654, 656, 665, 666, 690, 697, 774, 777, 778, 788, 813, 818, 819, 825, 847, 849, 850, 883, 884, 885, 886, 890, 941, 945, 946, 949, 953, 954, 956, 958, 959, 960, 961, 967, 971, 972, 978, 980, 983, 988, 992, 998, 1001, 1002, 1005, 1006, 1008, 1012], "grid": [6, 8, 10, 11, 25, 26, 27, 42, 54, 60, 70, 71, 73, 77, 81, 118, 120, 127, 153, 164, 166, 167, 185, 214, 222, 230, 231, 235, 241, 246, 249, 253, 255, 257, 260, 261, 272, 274, 278, 280, 281, 289, 295, 300, 301, 303, 323, 326, 332, 339, 368, 373, 377, 379, 386, 392, 395, 397, 398, 399, 401, 427, 440, 443, 451, 476, 480, 493, 500, 609, 610, 611, 625, 628, 631, 632, 634, 637, 639, 641, 654, 691, 705, 719, 762, 765, 774, 777, 778, 785, 788, 790, 802, 803, 880, 950, 952, 957, 960, 964, 978, 983, 984, 986, 988, 990, 994, 998, 1001, 1002, 1003, 1005, 1006, 1012], "search": [6, 46, 54, 70, 71, 72, 73, 122, 143, 149, 164, 214, 231, 246, 249, 257, 260, 261, 268, 272, 278, 280, 295, 300, 311, 326, 339, 350, 357, 364, 365, 367, 368, 377, 379, 386, 391, 392, 395, 398, 399, 400, 401, 402, 423, 427, 429, 431, 436, 437, 440, 443, 450, 451, 457, 480, 493, 500, 535, 536, 537, 538, 542, 543, 544, 556, 577, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 606, 631, 654, 666, 667, 670, 671, 691, 705, 762, 765, 774, 777, 778, 785, 786, 788, 790, 802, 803, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 880, 883, 884, 885, 886, 917, 945, 950, 952, 954, 957, 960, 961, 971, 973, 977, 978, 983, 984, 986, 988, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012], "best_estimator_": [6, 54, 72, 73, 77, 103, 231, 246, 257, 260, 280, 774, 777, 778, 788, 946, 987, 988, 1005], "531": [6, 294, 296], "76823": 6, "03433306453": 6, "003418945823095797": 6, "y_pred": [6, 7, 25, 30, 32, 34, 44, 56, 61, 69, 74, 109, 122, 123, 129, 143, 166, 196, 198, 203, 206, 211, 213, 214, 225, 226, 234, 252, 254, 259, 283, 287, 295, 317, 318, 350, 367, 373, 379, 398, 412, 419, 444, 460, 461, 462, 527, 530, 532, 534, 536, 538, 540, 543, 545, 546, 548, 589, 609, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 675, 676, 678, 679, 680, 681, 686, 690, 691, 696, 699, 700, 701, 705, 706, 707, 711, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 760, 761, 762, 764, 765, 771, 774, 777, 778, 788, 797, 807, 809, 810, 819, 827, 834, 836, 875, 876, 877, 878, 879, 880, 881, 884, 886, 957, 959, 988, 1004, 1005, 1007, 1009, 1013], "from_estim": [6, 25, 27, 31, 55, 112, 115, 125, 126, 130, 167, 179, 188, 205, 231, 235, 237, 250, 253, 258, 259, 263, 266, 279, 284, 287, 306, 307, 308, 309, 311, 322, 323, 324, 327, 328, 345, 373, 389, 418, 609, 610, 611, 675, 676, 678, 679, 680, 696, 704, 759, 761, 764, 765, 766, 780, 952, 957, 964, 988, 995, 1011, 1012, 1013], "display_label": [6, 250, 675, 988, 1010], "xticks_rot": [6, 675, 988], "vertic": [6, 17, 59, 121, 169, 185, 229, 230, 260, 274, 298, 301, 331, 333, 379, 388, 391, 396, 493, 675, 758, 988], "tight_layout": [6, 8, 25, 27, 31, 34, 40, 52, 64, 72, 74, 85, 95, 96, 106, 112, 116, 118, 123, 127, 129, 131, 151, 153, 158, 161, 166, 168, 169, 175, 176, 186, 194, 196, 204, 207, 211, 214, 217, 230, 234, 251, 252, 268, 274, 276, 278, 288, 299, 300, 301, 302, 303, 306, 310, 324, 340, 344, 345, 988], "precis": [6, 25, 32, 69, 74, 81, 95, 143, 155, 156, 164, 172, 226, 249, 250, 254, 272, 295, 298, 314, 315, 367, 368, 379, 388, 390, 391, 393, 396, 398, 423, 448, 449, 450, 451, 452, 453, 454, 455, 457, 482, 501, 510, 512, 519, 522, 622, 623, 624, 626, 628, 629, 630, 632, 633, 634, 647, 650, 652, 658, 660, 661, 665, 678, 684, 685, 686, 691, 704, 706, 707, 708, 716, 740, 759, 760, 761, 764, 765, 772, 773, 802, 805, 816, 817, 822, 837, 856, 859, 875, 880, 887, 889, 912, 951, 953, 960, 961, 972, 988, 992, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "recal": [6, 25, 32, 69, 100, 143, 164, 226, 249, 254, 272, 295, 314, 315, 367, 379, 391, 482, 582, 678, 684, 685, 686, 690, 691, 704, 706, 707, 708, 759, 760, 761, 764, 765, 802, 805, 837, 856, 859, 875, 953, 973, 988, 992, 1001, 1002, 1005, 1007, 1008, 1010, 1011, 1012], "f1": [6, 25, 32, 69, 143, 254, 295, 314, 315, 318, 395, 691, 706, 707, 715, 760, 957, 958, 988, 992, 1002], "support": [6, 7, 8, 9, 10, 16, 24, 27, 30, 32, 46, 69, 71, 94, 108, 114, 120, 128, 133, 142, 143, 167, 197, 206, 207, 208, 214, 230, 231, 237, 250, 254, 261, 263, 276, 295, 298, 302, 310, 314, 315, 318, 319, 322, 323, 326, 327, 329, 331, 334, 337, 354, 355, 356, 357, 361, 365, 367, 368, 370, 371, 373, 375, 376, 378, 379, 380, 391, 395, 396, 399, 401, 417, 420, 429, 431, 432, 443, 445, 446, 448, 453, 465, 474, 490, 516, 518, 519, 522, 525, 527, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 591, 592, 593, 595, 597, 598, 600, 601, 603, 605, 610, 611, 621, 623, 635, 636, 637, 648, 649, 650, 652, 653, 654, 655, 656, 665, 668, 672, 685, 691, 706, 707, 715, 720, 745, 755, 756, 757, 760, 761, 764, 765, 774, 777, 778, 780, 788, 799, 800, 808, 809, 814, 816, 817, 820, 822, 823, 828, 836, 837, 841, 847, 849, 850, 852, 856, 863, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 901, 906, 907, 945, 946, 947, 949, 950, 951, 953, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 971, 973, 975, 977, 978, 979, 981, 983, 986, 988, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ariel": [6, 362, 998, 1004], "sharon": [6, 362], "69": [6, 8, 187, 315, 391, 450, 451, 585, 586, 733, 957, 967, 990], "colin": [6, 362, 1004], "powel": [6, 362], "87": [6, 32, 69, 158, 254, 295, 315, 575, 645, 765, 774, 852, 863, 957, 992], "donald": [6, 362, 391, 702, 947], "rumsfeld": [6, 362], "63": [6, 219, 364, 398, 535, 536, 543, 544, 703, 774, 788, 885, 886, 957], "georg": [6, 362, 391, 1004, 1010, 1011, 1012, 1013], "bush": [6, 362], "95": [6, 14, 30, 32, 44, 50, 52, 56, 66, 90, 101, 102, 118, 122, 156, 166, 175, 196, 198, 203, 214, 243, 244, 247, 256, 257, 281, 289, 295, 300, 310, 315, 326, 350, 398, 505, 610, 611, 614, 625, 639, 725, 872, 953, 957, 958, 970, 992, 1001], "92": [6, 32, 34, 50, 98, 143, 172, 254, 295, 314, 315, 326, 362, 364, 516, 518, 525, 540, 575, 774, 788, 952, 992], "146": [6, 231, 398], "gerhard": [6, 362], "schroeder": [6, 362], "hugo": [6, 362, 1004, 1009, 1010, 1011, 1012], "chavez": [6, 362], "90": [6, 8, 10, 14, 32, 73, 105, 106, 121, 122, 123, 143, 154, 169, 176, 187, 193, 195, 198, 203, 214, 241, 265, 267, 295, 300, 314, 315, 350, 354, 367, 372, 395, 541, 758, 774, 800, 805, 952, 957, 988, 992], "toni": [6, 362, 541, 856, 963, 1011, 1012], "blair": [6, 362], "93": [6, 19, 32, 196, 238, 254, 295, 315, 339, 364, 765, 774, 800, 883, 952, 957, 988, 992], "83": [6, 30, 34, 39, 69, 295, 314, 364, 368, 401, 685, 763, 957, 988, 992, 1001], "85": [6, 16, 17, 32, 50, 69, 98, 143, 211, 214, 267, 295, 315, 350, 398, 419, 478, 533, 534, 575, 630, 636, 722, 730, 765, 774, 800, 957, 958, 988, 998], "322": [6, 90, 326, 337, 450, 451], "macro": [6, 32, 69, 143, 254, 295, 306, 314, 315, 362, 395, 685, 691, 706, 707, 715, 760, 761, 764, 765, 957, 992, 998, 1006], "avg": [6, 32, 69, 143, 254, 295, 314, 315, 547, 682, 691, 957, 988, 992], "weight": [6, 13, 14, 19, 24, 32, 54, 69, 106, 110, 122, 130, 131, 142, 143, 154, 162, 164, 166, 174, 185, 187, 196, 200, 201, 210, 211, 212, 214, 215, 236, 241, 254, 259, 263, 265, 279, 288, 291, 292, 295, 296, 303, 306, 309, 314, 315, 321, 328, 337, 339, 340, 341, 350, 363, 364, 375, 377, 379, 391, 393, 394, 396, 397, 400, 402, 408, 412, 417, 420, 423, 424, 426, 428, 432, 438, 442, 443, 444, 446, 448, 453, 460, 461, 462, 474, 493, 502, 516, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 564, 567, 568, 569, 571, 575, 580, 581, 588, 589, 606, 612, 613, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 667, 671, 675, 676, 677, 678, 680, 681, 685, 686, 687, 690, 691, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 712, 713, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 735, 736, 746, 759, 760, 761, 762, 764, 765, 766, 769, 770, 771, 772, 773, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 855, 856, 870, 871, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 900, 901, 914, 932, 938, 947, 948, 953, 954, 956, 957, 959, 960, 961, 962, 964, 970, 971, 972, 973, 978, 983, 990, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "plot_galleri": [6, 95, 988], "n_row": [6, 19, 95, 388, 406, 430, 432, 489, 491, 988], "n_col": [6, 19, 95, 233, 406, 430, 432, 489, 491, 610, 988], "portrait": [6, 396, 988], "figur": [6, 7, 8, 9, 10, 12, 13, 16, 24, 25, 26, 27, 30, 31, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 66, 71, 77, 81, 84, 88, 89, 90, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 127, 128, 132, 135, 136, 138, 141, 142, 145, 150, 151, 152, 153, 156, 157, 162, 166, 167, 168, 175, 181, 186, 189, 190, 193, 195, 197, 198, 200, 202, 207, 210, 211, 212, 213, 219, 220, 221, 225, 229, 230, 231, 232, 233, 235, 241, 243, 244, 247, 250, 255, 260, 261, 270, 281, 285, 286, 289, 292, 295, 298, 300, 301, 306, 308, 314, 315, 316, 324, 326, 330, 331, 345, 346, 347, 367, 391, 397, 398, 399, 401, 418, 609, 610, 675, 676, 678, 679, 680, 780, 889, 946, 950, 953, 956, 957, 960, 961, 964, 971, 972, 973, 988, 990, 991, 1011], "subplots_adjust": [6, 7, 13, 14, 30, 34, 39, 42, 44, 45, 50, 51, 54, 61, 63, 79, 81, 90, 91, 97, 98, 105, 110, 112, 113, 129, 166, 195, 196, 211, 214, 225, 232, 241, 243, 244, 247, 251, 267, 269, 281, 289, 292, 295, 300, 308, 315, 323, 326, 988], "bottom": [6, 8, 12, 13, 14, 30, 37, 39, 42, 44, 45, 51, 53, 61, 63, 90, 91, 120, 127, 132, 196, 207, 225, 241, 243, 244, 247, 253, 256, 267, 281, 298, 315, 317, 326, 367, 389, 391, 397, 565, 887, 951, 953, 957, 978, 988, 991], "left": [6, 7, 12, 13, 14, 16, 24, 39, 42, 44, 45, 51, 61, 63, 71, 74, 80, 81, 90, 91, 97, 98, 110, 113, 115, 116, 119, 122, 129, 131, 152, 158, 162, 166, 181, 189, 196, 197, 198, 200, 207, 209, 210, 213, 214, 225, 229, 232, 234, 235, 241, 243, 244, 247, 252, 253, 254, 255, 257, 265, 266, 268, 281, 282, 283, 289, 292, 295, 298, 310, 315, 325, 326, 348, 367, 368, 370, 388, 391, 394, 395, 397, 398, 399, 401, 451, 460, 461, 462, 463, 471, 476, 527, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 565, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 613, 617, 621, 629, 633, 772, 773, 774, 777, 778, 781, 788, 849, 856, 883, 884, 885, 886, 887, 899, 912, 928, 931, 946, 949, 951, 953, 955, 957, 959, 964, 969, 971, 973, 987, 988, 990, 991, 1005, 1007, 1012], "01": [6, 8, 10, 13, 15, 16, 28, 35, 40, 44, 51, 61, 67, 75, 84, 95, 97, 98, 113, 120, 121, 123, 126, 127, 133, 146, 154, 158, 159, 166, 167, 170, 177, 180, 187, 203, 208, 209, 214, 215, 217, 218, 225, 229, 231, 235, 239, 243, 247, 248, 250, 255, 256, 257, 261, 263, 264, 272, 281, 290, 293, 296, 298, 303, 304, 307, 312, 320, 328, 337, 340, 346, 347, 349, 362, 364, 371, 391, 400, 428, 450, 493, 510, 517, 521, 573, 574, 576, 620, 624, 632, 636, 656, 674, 693, 774, 788, 869, 926, 953, 957, 961, 967, 969, 971, 988, 992], "right": [6, 7, 11, 12, 13, 14, 16, 31, 39, 42, 43, 44, 45, 51, 53, 59, 61, 63, 78, 79, 81, 90, 91, 97, 98, 100, 103, 105, 109, 110, 112, 113, 114, 122, 123, 124, 131, 142, 149, 152, 162, 186, 197, 198, 199, 200, 202, 203, 206, 207, 225, 228, 229, 241, 243, 244, 246, 247, 251, 252, 256, 259, 263, 266, 267, 269, 281, 289, 292, 295, 298, 300, 303, 315, 326, 328, 334, 336, 339, 340, 345, 348, 350, 357, 367, 377, 380, 388, 391, 394, 396, 397, 398, 401, 443, 460, 461, 462, 463, 512, 519, 522, 535, 536, 537, 538, 539, 540, 542, 543, 544, 565, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 613, 654, 656, 841, 883, 884, 885, 886, 887, 899, 912, 946, 949, 951, 953, 955, 957, 959, 960, 964, 969, 971, 972, 973, 977, 978, 981, 984, 988, 990, 991, 1000, 1006, 1012], "99": [6, 25, 32, 44, 51, 61, 95, 214, 225, 229, 241, 243, 254, 257, 295, 298, 315, 355, 360, 364, 370, 395, 398, 399, 470, 625, 639, 649, 765, 823, 926, 952, 957, 967, 971, 988, 994, 1000], "hspace": [6, 13, 14, 44, 45, 61, 95, 214, 225, 241, 243, 244, 247, 281, 308, 315, 323, 988], "grai": [6, 13, 46, 47, 50, 51, 53, 95, 98, 124, 194, 196, 214, 229, 232, 233, 263, 294, 364, 396, 471, 472, 480, 499, 988, 991, 1009], "ytick": [6, 11, 30, 40, 44, 46, 50, 51, 52, 57, 58, 61, 81, 84, 89, 98, 120, 123, 136, 142, 151, 152, 153, 157, 179, 186, 192, 209, 225, 232, 242, 243, 244, 247, 251, 270, 280, 289, 295, 314, 326, 330, 331, 332, 339, 988], "portion": [6, 8, 80, 265, 354, 362, 364, 367, 372, 379, 765, 797, 814, 946, 956, 960, 988, 992], "pred_nam": [6, 988], "rsplit": [6, 17, 257, 988], "true_nam": [6, 988], "ntrue": [6, 314, 315, 988], "prediction_titl": [6, 988], "signif": [6, 988], "eigenface_titl": [6, 988], "convolut": [6, 157, 988], "network": [6, 294, 354, 355, 356, 357, 361, 362, 377, 379, 380, 385, 391, 396, 398, 403, 474, 511, 513, 545, 546, 674, 718, 833, 834, 925, 953, 955, 957, 971, 973, 977, 979, 988, 993, 994, 998, 1012], "famili": [6, 354, 356, 379, 391, 394, 396, 398, 399, 400, 570, 573, 574, 576, 577, 578, 584, 626, 647, 658, 833, 834, 852, 863, 953, 967, 971, 988, 990, 1002, 1012], "outsid": [6, 9, 19, 118, 197, 198, 228, 377, 399, 613, 855, 963, 988, 1006], "scope": [6, 354, 356, 367, 377, 399, 977, 978, 988], "scikit": [6, 8, 10, 12, 16, 17, 27, 31, 32, 50, 69, 84, 112, 115, 129, 143, 146, 153, 155, 157, 158, 162, 164, 166, 184, 185, 188, 205, 214, 224, 237, 238, 249, 253, 272, 276, 281, 283, 305, 312, 331, 339, 340, 344, 345, 350, 355, 356, 357, 359, 361, 362, 363, 364, 366, 367, 369, 372, 373, 374, 375, 378, 379, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 405, 406, 408, 409, 410, 412, 413, 418, 423, 426, 429, 436, 438, 443, 444, 446, 447, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 481, 482, 490, 493, 502, 516, 539, 540, 542, 543, 545, 559, 560, 563, 564, 577, 580, 589, 604, 606, 608, 612, 618, 624, 626, 630, 636, 647, 658, 666, 678, 679, 695, 725, 755, 756, 757, 765, 774, 775, 776, 777, 778, 779, 780, 788, 791, 792, 793, 794, 795, 802, 804, 805, 818, 820, 837, 841, 843, 846, 849, 850, 851, 855, 856, 859, 872, 873, 875, 880, 884, 906, 907, 946, 947, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 967, 970, 971, 972, 973, 976, 980, 986, 987, 988, 990, 991, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "librari": [6, 256, 309, 311, 346, 350, 359, 361, 362, 365, 366, 367, 372, 377, 378, 379, 382, 387, 636, 875, 876, 877, 878, 880, 881, 925, 953, 957, 972, 973, 977, 978, 981, 988, 992, 996, 1001, 1005, 1006, 1007, 1008, 1009, 1011], "reader": [6, 42, 309, 356, 367, 988], "pytorch": [6, 377, 977, 978, 988], "tensorflow": [6, 377, 977, 988], "implement": [6, 7, 13, 16, 17, 46, 55, 80, 95, 162, 172, 181, 185, 210, 214, 217, 225, 231, 254, 256, 265, 278, 281, 301, 306, 307, 308, 309, 310, 339, 341, 354, 355, 356, 361, 362, 364, 365, 367, 368, 371, 372, 374, 375, 379, 382, 385, 387, 388, 390, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 417, 422, 423, 424, 426, 427, 428, 429, 471, 474, 486, 510, 511, 512, 513, 514, 516, 519, 520, 521, 531, 532, 533, 535, 536, 539, 540, 541, 545, 550, 560, 561, 566, 567, 569, 571, 575, 579, 588, 589, 610, 611, 618, 619, 623, 624, 631, 635, 636, 637, 641, 642, 646, 649, 650, 652, 653, 654, 655, 656, 662, 663, 664, 665, 666, 669, 670, 673, 685, 689, 698, 712, 715, 755, 759, 765, 766, 772, 774, 777, 778, 780, 788, 792, 793, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 818, 819, 821, 824, 826, 827, 832, 833, 834, 836, 839, 848, 857, 865, 866, 872, 875, 876, 877, 878, 879, 880, 881, 911, 912, 924, 925, 926, 928, 946, 947, 949, 951, 953, 954, 955, 956, 958, 959, 961, 962, 963, 967, 969, 970, 973, 974, 975, 977, 978, 979, 981, 983, 988, 989, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "605": [6, 15, 22], "plot_face_recognit": [6, 15], "demonstr": [7, 19, 20, 21, 25, 36, 40, 60, 67, 69, 71, 114, 123, 143, 157, 164, 197, 237, 238, 243, 247, 249, 259, 262, 265, 270, 272, 278, 281, 288, 297, 300, 302, 304, 308, 313, 315, 316, 319, 320, 324, 334, 339, 341, 350, 356, 362, 363, 367, 371, 377, 387, 391, 395, 398, 426, 480, 490, 498, 681, 691, 719, 773, 774, 841, 871, 883, 946, 947, 951, 957, 958, 959, 960, 967, 970, 973, 976], "diabet": [7, 123, 132, 134, 139, 146, 162, 164, 183, 184, 185, 192, 193, 252, 360, 398, 479, 630, 631, 774, 779, 797, 798, 799, 965, 983, 987, 994], "regress": [7, 10, 13, 25, 27, 30, 54, 68, 70, 75, 79, 80, 83, 86, 98, 108, 113, 115, 120, 128, 133, 146, 148, 159, 161, 162, 164, 166, 167, 174, 178, 180, 182, 186, 190, 191, 193, 197, 199, 200, 201, 212, 215, 224, 226, 233, 238, 239, 252, 269, 270, 274, 277, 290, 295, 299, 303, 308, 309, 310, 311, 321, 337, 339, 343, 349, 355, 356, 357, 359, 360, 362, 364, 367, 368, 371, 374, 375, 377, 378, 379, 386, 393, 394, 395, 396, 400, 412, 417, 443, 444, 453, 462, 467, 468, 470, 474, 479, 480, 482, 483, 490, 494, 495, 496, 502, 506, 509, 513, 515, 517, 519, 520, 521, 523, 524, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 548, 549, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 584, 587, 588, 589, 592, 593, 600, 601, 603, 610, 611, 612, 613, 615, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 679, 684, 699, 700, 701, 705, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 762, 774, 777, 778, 780, 788, 799, 800, 802, 803, 807, 809, 810, 818, 819, 824, 826, 827, 833, 834, 836, 837, 840, 841, 843, 849, 850, 851, 853, 856, 859, 864, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 889, 895, 898, 900, 916, 946, 947, 949, 952, 954, 964, 965, 967, 968, 977, 978, 979, 980, 981, 983, 986, 989, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "patient": [7, 132, 146, 162, 364, 374, 395, 953, 990], "diseas": [7, 132, 146, 162, 259, 364, 690, 957, 990], "newsgroup": [7, 14, 19, 229, 257, 318, 340, 341, 360, 388, 399, 466, 467, 984, 994], "post": [7, 14, 19, 69, 164, 310, 339, 340, 341, 343, 349, 354, 362, 366, 367, 370, 371, 378, 391, 427, 466, 467, 478, 690, 802, 883, 957, 973, 981, 992, 1009], "written": [7, 29, 35, 88, 164, 203, 309, 355, 364, 367, 368, 372, 374, 377, 379, 392, 397, 465, 480, 486, 691, 802, 880, 887, 951, 953, 957, 961, 962, 971, 976, 983, 984, 989, 992, 1007], "about": [7, 11, 29, 44, 53, 56, 61, 69, 85, 88, 118, 143, 158, 164, 166, 169, 213, 225, 253, 254, 256, 258, 263, 281, 306, 308, 309, 310, 311, 315, 339, 341, 348, 350, 354, 355, 357, 360, 362, 366, 367, 370, 371, 378, 379, 380, 385, 395, 396, 399, 401, 418, 470, 472, 473, 474, 475, 478, 479, 480, 482, 483, 488, 493, 539, 540, 571, 572, 585, 586, 592, 618, 654, 656, 720, 774, 788, 805, 896, 947, 953, 954, 956, 958, 960, 963, 964, 967, 968, 970, 972, 973, 975, 977, 981, 983, 984, 990, 992, 1003, 1004], "sgdclassifi": [7, 8, 203, 204, 205, 206, 207, 208, 209, 230, 264, 318, 328, 339, 350, 354, 356, 372, 379, 389, 390, 399, 616, 618, 619, 620, 624, 636, 644, 646, 875, 880, 949, 953, 958, 971, 972, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013], "stochast": [7, 57, 121, 124, 164, 172, 174, 215, 219, 221, 225, 230, 284, 285, 291, 296, 309, 391, 396, 398, 441, 466, 474, 480, 481, 482, 492, 500, 514, 522, 537, 538, 549, 582, 605, 617, 636, 637, 646, 650, 652, 654, 655, 656, 657, 665, 666, 667, 668, 670, 802, 825, 832, 833, 834, 837, 846, 879, 911, 912, 931, 946, 960, 961, 963, 979, 993, 994, 998, 999, 1002, 1003, 1005, 1007, 1009], "gradient": [7, 46, 65, 108, 115, 126, 129, 132, 133, 154, 155, 164, 174, 215, 225, 230, 298, 379, 391, 401, 431, 441, 445, 446, 466, 474, 479, 481, 482, 493, 498, 531, 532, 537, 538, 539, 540, 549, 564, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 612, 613, 617, 626, 627, 636, 637, 646, 647, 650, 652, 654, 655, 656, 658, 665, 670, 672, 673, 718, 719, 725, 727, 777, 778, 779, 799, 802, 832, 833, 834, 837, 849, 850, 879, 931, 954, 957, 960, 961, 962, 963, 977, 979, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1013], "descent": [7, 13, 164, 174, 181, 215, 225, 230, 309, 396, 398, 450, 451, 457, 466, 474, 481, 509, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 549, 617, 624, 625, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 646, 650, 652, 654, 655, 656, 659, 660, 661, 662, 665, 672, 802, 833, 834, 837, 875, 879, 931, 954, 961, 963, 972, 979, 990, 994, 998, 1001, 1002, 1003, 1005, 1007, 1009, 1011, 1012], "nusvr": [7, 354, 881, 972, 1000, 1006, 1008, 1009, 1010, 1012, 1013], "nu": [7, 9, 11, 158, 210, 225, 325, 354, 398, 401, 597, 655, 877, 878, 879, 963, 971, 972, 1009, 1013], "vector": [7, 8, 9, 10, 12, 14, 16, 19, 20, 26, 27, 30, 32, 36, 40, 48, 67, 71, 88, 95, 97, 142, 149, 157, 177, 183, 200, 201, 208, 212, 230, 231, 234, 237, 254, 256, 257, 261, 282, 295, 298, 319, 322, 323, 325, 326, 327, 329, 330, 331, 334, 336, 337, 340, 354, 356, 357, 371, 372, 375, 377, 379, 388, 389, 391, 393, 394, 395, 396, 398, 401, 402, 403, 417, 423, 424, 425, 426, 428, 429, 430, 432, 443, 444, 446, 447, 460, 461, 462, 463, 465, 467, 475, 487, 490, 499, 502, 509, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 529, 530, 545, 546, 547, 548, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 598, 600, 601, 603, 616, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 650, 651, 652, 653, 654, 655, 656, 664, 665, 666, 667, 669, 670, 671, 673, 677, 697, 712, 740, 745, 746, 747, 748, 750, 751, 752, 754, 755, 774, 777, 778, 788, 800, 803, 804, 805, 811, 812, 813, 814, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 833, 834, 841, 843, 848, 856, 859, 862, 873, 875, 876, 877, 878, 879, 880, 881, 882, 895, 909, 911, 912, 922, 926, 946, 949, 950, 951, 953, 954, 955, 957, 958, 959, 961, 962, 963, 967, 971, 973, 979, 983, 986, 989, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1011], "gradientboostingregressor": [7, 122, 123, 129, 132, 354, 371, 377, 398, 532, 540, 610, 611, 953, 957, 958, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "forward": [7, 146, 308, 354, 367, 400, 486, 487, 517, 521, 531, 537, 538, 563, 564, 580, 663, 664, 840, 953, 978, 1010], "wise": [7, 26, 48, 157, 197, 225, 266, 298, 340, 354, 379, 389, 391, 395, 396, 400, 437, 509, 512, 515, 519, 523, 524, 527, 528, 531, 533, 534, 537, 538, 570, 573, 574, 576, 577, 578, 584, 618, 630, 678, 731, 804, 853, 865, 866, 869, 930, 932, 933, 934, 935, 938, 949, 951, 957, 958, 971, 978, 998, 1003, 1006, 1007, 1008], "fashion": [7, 115, 120, 204, 265, 355, 379, 388, 389, 396, 398, 531, 535, 536, 537, 538, 542, 543, 544, 580, 605, 802, 825, 840, 843, 849, 859, 883, 884, 885, 886, 928, 947, 953, 967, 1007], "notic": [7, 25, 26, 53, 56, 79, 113, 115, 122, 145, 175, 225, 237, 253, 254, 256, 257, 259, 265, 266, 339, 340, 341, 350, 371, 395, 474, 519, 541, 946, 956, 957, 963, 992, 995, 1011], "faster": [7, 19, 39, 63, 72, 95, 110, 115, 119, 122, 146, 167, 172, 182, 196, 198, 211, 212, 214, 231, 276, 278, 294, 307, 309, 310, 339, 340, 341, 354, 361, 367, 374, 375, 379, 390, 391, 396, 400, 401, 403, 423, 426, 428, 430, 431, 432, 441, 486, 509, 510, 511, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 531, 537, 538, 539, 540, 621, 624, 625, 630, 631, 636, 637, 638, 639, 640, 641, 650, 652, 662, 665, 669, 673, 677, 703, 733, 755, 756, 757, 816, 817, 821, 833, 834, 851, 853, 855, 864, 868, 912, 926, 946, 950, 953, 958, 960, 961, 964, 969, 971, 972, 973, 977, 980, 988, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "10_000": [7, 25, 74, 115, 122, 172, 229, 259, 537, 538, 853], "vari": [7, 34, 44, 46, 61, 74, 116, 118, 145, 164, 166, 167, 185, 187, 190, 194, 222, 230, 246, 252, 256, 259, 291, 296, 298, 303, 313, 320, 326, 329, 350, 354, 356, 362, 379, 421, 425, 478, 486, 492, 493, 500, 537, 538, 542, 543, 624, 625, 628, 629, 630, 631, 632, 633, 638, 639, 640, 641, 659, 662, 681, 740, 793, 800, 802, 803, 833, 837, 841, 856, 872, 880, 883, 884, 931, 949, 952, 953, 957, 960, 961, 970, 973, 981, 1005, 1006], "relev": [7, 9, 19, 76, 82, 144, 164, 175, 190, 256, 257, 263, 350, 354, 356, 362, 364, 366, 367, 368, 370, 371, 372, 379, 393, 394, 400, 401, 449, 453, 512, 519, 623, 633, 703, 717, 733, 777, 778, 805, 854, 856, 887, 889, 957, 958, 963, 974, 978, 1001, 1006, 1010, 1012], "select": [7, 9, 36, 44, 56, 61, 67, 68, 70, 73, 75, 81, 91, 93, 107, 112, 117, 119, 122, 129, 136, 143, 147, 154, 156, 166, 167, 169, 172, 174, 176, 204, 211, 214, 215, 218, 225, 229, 231, 240, 241, 248, 254, 255, 256, 257, 261, 280, 298, 308, 314, 315, 318, 321, 326, 334, 337, 339, 340, 341, 350, 354, 355, 357, 362, 364, 365, 367, 368, 370, 374, 378, 379, 388, 391, 392, 393, 396, 398, 399, 401, 423, 425, 426, 428, 430, 432, 437, 438, 439, 443, 445, 446, 451, 452, 455, 466, 467, 470, 471, 474, 475, 479, 480, 482, 490, 493, 510, 512, 513, 518, 519, 522, 527, 529, 536, 537, 538, 541, 543, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 605, 609, 610, 623, 624, 625, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 649, 651, 654, 656, 660, 661, 669, 670, 675, 690, 694, 696, 731, 767, 768, 772, 773, 774, 777, 778, 779, 780, 788, 798, 799, 800, 802, 804, 818, 819, 820, 822, 824, 826, 827, 828, 836, 837, 841, 846, 852, 856, 872, 875, 876, 880, 883, 884, 885, 886, 891, 926, 927, 951, 952, 954, 957, 958, 960, 961, 963, 967, 970, 971, 972, 973, 974, 977, 978, 979, 981, 983, 984, 986, 990, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "ham": [7, 429, 436, 559, 677, 681, 687, 711, 718, 755, 756, 757, 771], "loss": [7, 24, 25, 26, 27, 93, 107, 120, 121, 122, 123, 124, 149, 150, 164, 174, 178, 186, 189, 198, 201, 203, 204, 208, 214, 215, 231, 264, 293, 294, 309, 318, 323, 324, 328, 334, 339, 377, 379, 389, 390, 396, 401, 443, 444, 474, 486, 487, 510, 516, 517, 518, 521, 525, 530, 531, 532, 536, 537, 538, 539, 540, 543, 621, 624, 627, 636, 637, 644, 645, 646, 647, 648, 649, 650, 654, 655, 656, 657, 681, 684, 687, 700, 711, 712, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 771, 774, 777, 778, 788, 798, 799, 802, 833, 834, 836, 837, 840, 841, 849, 850, 851, 856, 875, 876, 881, 882, 884, 886, 912, 916, 950, 953, 961, 965, 970, 971, 972, 973, 992, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "eustach": [7, 8, 10, 981, 1000, 1001], "diemert": [7, 8, 10, 981, 1000, 1001], "maria": [7, 123, 129, 146, 162, 391, 1009, 1010, 1011, 1012, 1013], "telenczuk": [7, 123, 129, 146, 162, 1007, 1010, 1011, 1013], "github": [7, 8, 12, 26, 70, 109, 115, 116, 117, 123, 125, 126, 129, 132, 143, 154, 162, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 276, 295, 307, 308, 310, 311, 316, 348, 361, 365, 366, 369, 370, 371, 372, 374, 377, 379, 380, 382, 385, 387, 431, 441, 486, 514, 669, 670, 673, 960, 976, 977, 980, 981, 992, 1003, 1008], "com": [7, 8, 11, 12, 14, 16, 20, 21, 24, 42, 48, 50, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 162, 176, 196, 198, 203, 213, 214, 218, 220, 222, 228, 241, 243, 244, 257, 260, 276, 298, 299, 302, 303, 339, 340, 361, 362, 365, 367, 370, 371, 372, 374, 377, 382, 391, 422, 431, 441, 486, 512, 514, 519, 649, 669, 673, 683, 960, 975, 980, 1003, 1005, 1008], "maikia": [7, 123, 129, 162, 1006, 1007, 1009, 1010], "lemaitre58": [7, 129, 149, 154, 156, 158, 218, 298], "gmail": [7, 11, 14, 16, 24, 42, 48, 56, 64, 69, 70, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 149, 152, 154, 156, 158, 176, 196, 198, 213, 214, 218, 220, 228, 241, 243, 244, 257, 260, 298, 303, 339, 340], "licens": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 25, 26, 27, 30, 31, 32, 37, 39, 40, 42, 45, 46, 47, 48, 51, 52, 53, 54, 56, 60, 64, 65, 66, 69, 70, 72, 73, 74, 81, 88, 89, 95, 97, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 128, 129, 146, 149, 150, 152, 153, 154, 155, 156, 158, 162, 172, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 201, 203, 204, 212, 213, 214, 218, 219, 220, 222, 225, 228, 230, 231, 232, 234, 241, 243, 257, 260, 262, 269, 274, 276, 278, 284, 285, 286, 288, 289, 292, 295, 298, 299, 300, 301, 302, 303, 314, 315, 316, 317, 319, 330, 331, 334, 335, 339, 340, 341, 361, 379, 385, 973, 981], "mean_squared_error": [7, 122, 123, 192, 196, 198, 200, 202, 214, 350, 398, 719, 729, 957, 999, 1001, 1008, 1009], "hamming_loss": [7, 681, 771, 957, 1000, 1004, 1007], "seed": [7, 11, 26, 34, 39, 40, 44, 45, 52, 54, 56, 58, 59, 61, 63, 64, 70, 77, 78, 79, 91, 96, 101, 102, 113, 118, 138, 141, 168, 180, 186, 191, 194, 199, 202, 205, 209, 213, 220, 242, 244, 245, 246, 247, 259, 262, 270, 281, 282, 283, 288, 331, 332, 336, 340, 350, 355, 368, 375, 377, 379, 391, 395, 396, 423, 426, 427, 429, 431, 436, 438, 439, 440, 441, 450, 451, 452, 514, 515, 522, 531, 532, 533, 534, 537, 538, 605, 624, 625, 630, 631, 638, 639, 640, 641, 655, 667, 669, 671, 673, 772, 773, 778, 807, 810, 825, 878, 898, 911, 912, 924, 926, 946, 947, 952, 954, 990, 1002, 1003, 1007, 1008], "fetch_20newsgroups_vector": [7, 211, 229, 362, 998, 1008, 1010], "spars": [7, 12, 13, 17, 39, 40, 54, 56, 76, 82, 93, 107, 115, 127, 164, 174, 191, 195, 212, 215, 229, 231, 257, 276, 307, 311, 334, 338, 341, 342, 348, 354, 359, 361, 362, 363, 367, 368, 369, 370, 371, 377, 378, 379, 390, 391, 392, 398, 399, 401, 402, 406, 418, 420, 422, 423, 424, 426, 428, 429, 430, 431, 432, 436, 438, 439, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 465, 466, 467, 474, 475, 481, 486, 501, 502, 504, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 559, 560, 563, 564, 566, 567, 568, 569, 571, 572, 581, 582, 583, 584, 585, 586, 587, 607, 608, 609, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 690, 691, 692, 706, 707, 708, 711, 715, 716, 717, 731, 732, 737, 738, 740, 744, 745, 755, 756, 757, 758, 760, 761, 762, 764, 771, 774, 777, 778, 788, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 843, 845, 846, 847, 848, 849, 851, 853, 854, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 893, 894, 895, 896, 901, 909, 912, 913, 916, 917, 918, 922, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 943, 947, 950, 953, 954, 955, 957, 958, 960, 970, 972, 973, 978, 979, 990, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "generate_data": [7, 33], "load_diabet": [7, 123, 132, 135, 146, 162, 181, 183, 184, 185, 192, 193, 235, 252, 311, 398, 536, 540, 546, 651, 679, 797, 798, 799, 884, 886, 965, 987, 990, 1004, 1009, 1012], "elif": [7, 8, 16, 34, 176, 198, 232, 234, 243, 281, 852], "subset": [7, 19, 26, 27, 32, 69, 70, 79, 80, 116, 118, 119, 135, 143, 185, 197, 211, 212, 213, 214, 228, 230, 233, 234, 254, 257, 259, 265, 266, 268, 308, 314, 318, 339, 340, 341, 350, 362, 367, 374, 377, 379, 388, 389, 391, 392, 395, 398, 399, 401, 408, 417, 428, 443, 445, 446, 448, 466, 467, 470, 471, 475, 486, 527, 528, 529, 531, 533, 534, 535, 537, 539, 540, 541, 542, 545, 547, 580, 588, 607, 617, 618, 619, 620, 629, 633, 636, 644, 646, 649, 652, 653, 654, 655, 656, 657, 675, 681, 682, 691, 694, 696, 708, 711, 732, 734, 768, 771, 776, 800, 802, 804, 805, 806, 807, 811, 812, 813, 814, 815, 818, 823, 826, 833, 842, 870, 871, 875, 877, 880, 883, 885, 891, 926, 946, 953, 957, 958, 968, 970, 972, 973, 992, 1001, 1006, 1007, 1009, 1011], "regression_data": 7, "classification_data": 7, "calcul": [7, 33, 46, 58, 79, 108, 114, 130, 133, 162, 164, 169, 192, 201, 213, 255, 256, 262, 266, 270, 274, 324, 331, 350, 354, 373, 379, 388, 389, 391, 395, 396, 398, 402, 418, 421, 423, 424, 425, 427, 429, 430, 432, 434, 435, 450, 451, 457, 459, 514, 531, 542, 547, 575, 589, 598, 610, 611, 612, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 650, 651, 652, 653, 657, 659, 662, 666, 668, 670, 672, 685, 694, 706, 707, 712, 713, 715, 721, 731, 741, 746, 748, 749, 750, 751, 755, 758, 760, 761, 764, 765, 766, 767, 768, 770, 781, 783, 797, 801, 814, 816, 817, 854, 855, 856, 861, 865, 875, 876, 901, 914, 949, 951, 953, 954, 955, 957, 959, 960, 961, 965, 967, 970, 972, 987, 990, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "given": [7, 10, 11, 27, 37, 49, 57, 59, 77, 84, 96, 100, 125, 127, 129, 149, 156, 166, 167, 196, 197, 214, 218, 225, 229, 230, 233, 235, 252, 256, 257, 258, 259, 265, 282, 283, 284, 300, 309, 334, 339, 340, 341, 347, 354, 356, 362, 366, 367, 368, 370, 372, 374, 375, 377, 379, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 408, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 435, 437, 438, 439, 440, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 465, 474, 479, 481, 483, 501, 514, 516, 517, 518, 521, 525, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 566, 567, 568, 569, 571, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 622, 624, 627, 629, 630, 631, 633, 636, 637, 639, 641, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 665, 666, 669, 675, 676, 677, 678, 679, 680, 682, 683, 684, 690, 692, 695, 696, 698, 701, 703, 704, 711, 713, 714, 717, 729, 732, 733, 735, 736, 741, 751, 755, 758, 759, 761, 764, 765, 766, 769, 770, 772, 773, 774, 777, 778, 780, 786, 788, 792, 798, 799, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 843, 846, 847, 849, 850, 851, 852, 853, 855, 856, 861, 862, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 885, 890, 899, 900, 901, 941, 945, 946, 949, 951, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 967, 970, 971, 972, 973, 981, 983, 987, 988, 990, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "round": [7, 9, 25, 84, 161, 162, 203, 214, 256, 262, 300, 302, 339, 429, 435, 436, 571, 572, 575, 605, 670, 691, 776, 786, 841, 872, 887, 889, 947, 961, 973, 1000, 1002, 1004, 1006, 1007, 1009, 1011, 1012], "changing_param": 7, "collect": [7, 9, 10, 12, 16, 19, 25, 79, 114, 125, 132, 146, 154, 162, 169, 184, 189, 210, 220, 228, 259, 282, 325, 328, 340, 341, 354, 362, 364, 370, 382, 395, 396, 398, 399, 401, 443, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 547, 548, 559, 561, 562, 566, 567, 568, 569, 610, 776, 780, 781, 783, 928, 931, 946, 952, 953, 957, 963, 968, 978, 981, 987, 992, 1000, 1010], "chang": [7, 16, 25, 26, 95, 99, 100, 113, 123, 150, 161, 166, 169, 197, 198, 200, 201, 235, 236, 251, 256, 263, 266, 302, 303, 306, 307, 308, 309, 310, 311, 315, 326, 341, 350, 354, 355, 356, 362, 365, 368, 369, 370, 371, 374, 377, 379, 380, 389, 391, 395, 398, 399, 401, 417, 420, 426, 428, 431, 433, 438, 441, 447, 450, 451, 457, 471, 472, 474, 482, 486, 487, 490, 491, 492, 500, 509, 513, 514, 515, 516, 517, 518, 524, 525, 527, 528, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 566, 567, 569, 571, 572, 575, 580, 588, 589, 591, 592, 593, 595, 597, 598, 600, 601, 603, 605, 613, 625, 627, 628, 629, 631, 632, 633, 634, 636, 637, 639, 641, 642, 643, 648, 650, 652, 657, 665, 670, 678, 682, 685, 690, 694, 695, 706, 707, 713, 714, 718, 732, 733, 734, 755, 761, 762, 764, 770, 772, 773, 774, 775, 776, 777, 778, 779, 788, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 808, 809, 811, 812, 813, 815, 816, 817, 822, 823, 835, 838, 840, 849, 863, 864, 869, 870, 873, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 893, 895, 896, 907, 912, 925, 927, 946, 947, 948, 956, 957, 958, 960, 967, 970, 971, 972, 973, 975, 978, 983, 990, 992, 996, 997], "affect": [7, 25, 79, 156, 166, 200, 221, 235, 259, 266, 350, 354, 355, 356, 363, 379, 381, 391, 394, 395, 397, 399, 402, 424, 429, 436, 452, 454, 458, 527, 528, 547, 690, 765, 774, 777, 778, 779, 788, 792, 793, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 856, 866, 880, 956, 960, 972, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 27, 370, 389, 395, 811, 959, 1012], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 12, 16, 17, 25, 33, 37, 40, 44, 50, 60, 70, 103, 110, 113, 114, 120, 122, 136, 162, 169, 189, 200, 201, 203, 204, 211, 214, 230, 231, 256, 259, 265, 266, 269, 274, 292, 293, 317, 326, 329, 339, 340, 341, 344, 348, 372, 379, 392, 399, 636, 637, 875, 876, 882, 902, 967, 987], "start_tim": [7, 10, 19, 116, 117, 129, 149, 185, 218], "elapsed_tim": [7, 39, 66, 116, 117, 129, 213], "float": [7, 10, 12, 16, 19, 41, 45, 46, 47, 48, 53, 59, 60, 64, 65, 66, 70, 98, 102, 138, 157, 166, 182, 186, 220, 255, 256, 260, 264, 334, 341, 354, 361, 362, 367, 375, 379, 391, 392, 399, 400, 402, 403, 404, 408, 410, 412, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 470, 471, 472, 474, 476, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 561, 562, 566, 569, 570, 571, 572, 573, 574, 575, 576, 580, 581, 588, 589, 591, 592, 593, 594, 595, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 736, 743, 746, 752, 753, 754, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 788, 791, 794, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 836, 839, 842, 843, 849, 850, 852, 854, 856, 857, 858, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 893, 895, 896, 899, 909, 910, 922, 932, 938, 943, 947, 957, 958, 960, 961, 967, 972, 973, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 113, 121, 123, 211, 212, 214], "prediction_performance_label": 7, "dictionari": [7, 8, 36, 67, 93, 107, 126, 164, 195, 340, 341, 360, 361, 362, 368, 377, 379, 391, 399, 428, 443, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 504, 509, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 545, 546, 547, 548, 559, 560, 562, 565, 566, 567, 610, 611, 612, 642, 663, 664, 679, 691, 774, 777, 778, 785, 786, 788, 799, 835, 840, 849, 883, 884, 885, 886, 890, 900, 946, 953, 957, 972, 983, 992, 993, 994, 998, 1006, 1009, 1010, 1011, 1012, 1013], "necessari": [7, 13, 114, 196, 201, 241, 256, 257, 263, 278, 346, 354, 362, 365, 366, 367, 368, 369, 370, 372, 374, 377, 391, 393, 398, 431, 441, 466, 467, 469, 470, 471, 472, 473, 475, 512, 622, 623, 624, 630, 634, 635, 638, 639, 640, 641, 642, 643, 649, 651, 653, 654, 669, 673, 770, 839, 848, 858, 862, 868, 946, 949, 953, 956, 959, 967, 973, 992, 998, 1006], "defin": [7, 9, 12, 27, 53, 56, 65, 69, 70, 72, 85, 95, 100, 109, 110, 111, 129, 146, 149, 156, 157, 158, 167, 168, 175, 197, 200, 204, 213, 214, 225, 229, 235, 237, 241, 246, 256, 257, 259, 263, 265, 266, 267, 268, 298, 307, 326, 334, 339, 340, 354, 363, 366, 367, 368, 372, 373, 375, 377, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 401, 407, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 438, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 467, 497, 498, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 605, 606, 607, 608, 610, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 674, 675, 677, 686, 688, 694, 699, 700, 701, 702, 705, 708, 715, 718, 722, 723, 725, 727, 728, 730, 731, 734, 737, 743, 758, 762, 767, 768, 772, 773, 774, 777, 778, 780, 788, 799, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 862, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 899, 901, 904, 910, 941, 946, 947, 953, 954, 955, 956, 958, 959, 960, 962, 963, 964, 965, 967, 969, 971, 972, 973, 978, 988, 991, 994, 995, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "complexity_label": [7, 10], "type": [7, 16, 53, 54, 68, 69, 75, 80, 89, 105, 118, 121, 154, 164, 166, 167, 172, 196, 198, 238, 240, 243, 246, 248, 251, 262, 263, 265, 266, 330, 334, 339, 341, 348, 350, 355, 357, 360, 361, 362, 364, 365, 367, 369, 370, 371, 372, 377, 378, 382, 385, 387, 388, 392, 399, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 474, 486, 487, 493, 545, 550, 559, 560, 563, 564, 566, 567, 569, 595, 605, 607, 608, 616, 634, 636, 650, 652, 657, 665, 667, 670, 671, 679, 685, 692, 694, 706, 707, 715, 718, 760, 761, 764, 765, 772, 773, 774, 780, 788, 800, 802, 803, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 836, 837, 838, 841, 843, 849, 850, 856, 877, 878, 879, 880, 881, 891, 893, 895, 896, 899, 903, 904, 922, 923, 928, 931, 944, 947, 949, 954, 956, 957, 958, 959, 960, 961, 967, 969, 973, 980, 981, 985, 990, 991, 992, 998, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 13, 54, 84, 142, 143, 146, 166, 175, 178, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 201, 205, 211, 212, 232, 238, 269, 310, 324, 331, 335, 339, 350, 362, 368, 379, 394, 400, 444, 460, 461, 462, 527, 571, 572, 575, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 875, 876, 877, 878, 879, 880, 881, 941, 951, 953, 971, 972, 990, 998, 1000, 1003, 1005, 1010, 1012], "toarrai": [7, 276, 318, 348, 392, 399, 544, 560, 566, 568, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 849, 865, 866, 928, 931, 947, 960, 967], "count_nonzero": [7, 10, 354], "configur": [7, 10, 71, 167, 236, 238, 339, 353, 365, 367, 368, 372, 374, 377, 379, 382, 387, 392, 399, 400, 413, 422, 423, 425, 426, 428, 431, 441, 443, 447, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 560, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 604, 605, 606, 607, 608, 610, 613, 616, 617, 618, 619, 620, 666, 667, 668, 669, 672, 673, 765, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 954, 957, 967, 972, 977, 992, 994, 1002, 1005, 1006, 1007, 1008, 1010, 1012], "penalti": [7, 10, 30, 81, 164, 174, 175, 185, 189, 196, 211, 212, 215, 227, 264, 292, 309, 318, 331, 339, 354, 374, 377, 390, 393, 396, 400, 450, 451, 452, 453, 454, 455, 457, 480, 509, 515, 516, 517, 518, 520, 521, 525, 526, 575, 621, 624, 625, 626, 627, 630, 631, 632, 635, 636, 637, 638, 639, 640, 646, 647, 648, 650, 654, 656, 658, 659, 665, 788, 856, 875, 876, 878, 880, 881, 882, 946, 953, 956, 961, 967, 971, 972, 990, 992, 1000, 1003, 1005, 1007, 1008, 1010, 1011, 1013], "elasticnet": [7, 10, 177, 187, 264, 269, 354, 372, 377, 396, 625, 630, 635, 636, 637, 638, 639, 640, 641, 646, 654, 656, 659, 953, 971, 998, 999, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012], "001": [7, 13, 32, 44, 61, 94, 149, 166, 205, 225, 241, 254, 256, 258, 317, 340, 364, 372, 395, 514, 515, 517, 524, 605, 622, 623, 624, 625, 630, 631, 638, 639, 640, 641, 644, 645, 646, 654, 655, 656, 657, 659, 662, 667, 668, 671, 672, 772, 773, 833, 834, 870, 871, 877, 878, 879, 880, 881, 946, 983, 992], "modified_hub": [7, 654, 971], "fit_intercept": [7, 175, 176, 182, 201, 210, 225, 264, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 875, 876, 882, 953, 971, 1002, 1006, 1007, 1008, 1010, 1011, 1012], "tol": [7, 10, 17, 72, 95, 120, 161, 176, 187, 189, 203, 204, 210, 212, 225, 235, 244, 295, 309, 334, 339, 368, 372, 398, 403, 423, 426, 428, 431, 438, 441, 450, 451, 457, 460, 461, 462, 509, 510, 511, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 537, 538, 539, 540, 580, 605, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 650, 652, 654, 655, 656, 657, 658, 660, 661, 663, 664, 665, 666, 667, 669, 671, 673, 772, 773, 788, 825, 833, 834, 870, 871, 875, 876, 877, 878, 879, 880, 881, 943, 953, 971, 972, 988, 992, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "n_iter_no_chang": [7, 120, 204, 309, 339, 371, 379, 398, 537, 538, 539, 540, 644, 645, 646, 654, 655, 656, 833, 834, 971, 1006, 1009], "l1_ratio": [7, 10, 14, 180, 181, 187, 264, 269, 354, 377, 396, 516, 518, 525, 624, 625, 630, 636, 637, 638, 639, 640, 641, 646, 654, 656, 659, 953, 971, 999, 1001, 1003, 1010, 1012], "non_zero": [7, 12], "coeffici": [7, 10, 38, 49, 57, 59, 77, 78, 81, 95, 98, 143, 164, 165, 170, 174, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 198, 199, 211, 214, 215, 238, 294, 308, 309, 310, 339, 340, 341, 354, 363, 367, 368, 379, 381, 390, 393, 394, 396, 400, 401, 404, 412, 431, 444, 446, 452, 454, 455, 457, 458, 459, 460, 461, 462, 474, 502, 504, 505, 509, 513, 515, 517, 520, 521, 526, 530, 532, 534, 536, 538, 540, 543, 546, 548, 560, 567, 571, 575, 587, 589, 592, 605, 613, 614, 617, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 669, 681, 694, 697, 706, 711, 715, 720, 727, 730, 752, 754, 762, 763, 767, 768, 771, 789, 799, 802, 809, 810, 819, 827, 834, 837, 849, 856, 875, 876, 877, 878, 879, 880, 881, 884, 886, 948, 951, 953, 971, 972, 990, 998, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "misclassif": [7, 771, 971, 972, 973, 999], "ratio": [7, 53, 65, 72, 104, 164, 229, 231, 244, 249, 272, 354, 367, 391, 393, 395, 398, 429, 435, 471, 472, 493, 519, 527, 528, 529, 636, 688, 690, 694, 702, 713, 716, 759, 760, 761, 764, 770, 799, 802, 822, 868, 926, 951, 963, 973, 988, 1013], "sparsifi": [7, 180, 354, 636, 637, 644, 646, 654, 655, 656, 875, 941, 1000], "05": [7, 8, 14, 24, 26, 30, 37, 44, 52, 59, 61, 63, 64, 66, 67, 74, 82, 84, 90, 100, 113, 120, 122, 127, 139, 142, 147, 154, 157, 158, 166, 170, 176, 177, 195, 198, 210, 221, 222, 225, 241, 243, 244, 247, 248, 256, 257, 263, 265, 266, 267, 272, 281, 284, 289, 298, 300, 306, 310, 315, 317, 320, 331, 337, 340, 342, 364, 400, 429, 435, 570, 573, 574, 576, 591, 592, 593, 597, 598, 600, 601, 603, 610, 611, 627, 668, 672, 733, 774, 825, 875, 876, 953, 961, 967], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 30, 31, 32, 37, 38, 41, 43, 44, 49, 50, 51, 59, 60, 61, 62, 63, 64, 69, 71, 98, 101, 105, 106, 110, 113, 118, 119, 120, 137, 138, 144, 145, 149, 157, 162, 167, 169, 195, 196, 214, 220, 225, 228, 229, 230, 233, 234, 241, 243, 244, 251, 254, 256, 257, 264, 265, 267, 270, 274, 276, 283, 285, 286, 292, 299, 300, 301, 314, 315, 318, 326, 333, 336, 339, 340, 341, 348, 377, 401, 417, 425, 429, 435, 443, 485, 493, 528, 547, 548, 560, 575, 610, 611, 759, 774, 788, 798, 802, 804, 807, 870, 871, 990, 991, 992, 1007, 1010], "support_vectors_": [7, 10, 16, 327, 330, 331, 877, 878, 879, 880, 881, 972], "squared_error": [7, 105, 122, 123, 309, 398, 536, 537, 538, 540, 543, 649, 654, 656, 671, 884, 886, 971, 1011], "learning_r": [7, 109, 110, 121, 122, 123, 124, 222, 276, 293, 295, 307, 309, 398, 531, 532, 537, 538, 539, 540, 646, 654, 655, 656, 670, 832, 833, 834, 954, 964, 971, 999, 1007, 1011], "max_depth": [7, 31, 109, 110, 111, 112, 115, 118, 121, 122, 123, 124, 127, 128, 130, 161, 218, 253, 268, 308, 309, 344, 346, 347, 348, 378, 379, 398, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 777, 778, 800, 883, 884, 885, 886, 887, 888, 889, 946, 964, 973, 1007, 1009], "n_estim": [7, 10, 26, 31, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 127, 128, 131, 161, 169, 218, 233, 237, 243, 253, 268, 300, 306, 308, 354, 378, 379, 398, 400, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 610, 777, 778, 946, 963, 964, 995, 1006], "n_tree": [7, 276], "loop": [7, 8, 113, 122, 166, 251, 261, 339, 348, 354, 367, 372, 391, 395, 400, 624, 625, 630, 631, 637, 638, 639, 640, 641, 946, 970, 971, 987, 1001, 1002, 1005, 1010, 1011], "previous": [7, 53, 56, 70, 155, 166, 254, 263, 310, 362, 374, 377, 382, 391, 396, 399, 420, 423, 433, 502, 512, 519, 627, 636, 637, 644, 646, 654, 655, 656, 875, 925, 953, 967, 977, 995, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "subsequ": [7, 32, 57, 74, 98, 143, 184, 198, 258, 261, 278, 326, 350, 367, 368, 372, 379, 391, 392, 398, 401, 417, 474, 486, 531, 532, 537, 539, 540, 644, 646, 654, 777, 778, 804, 805, 808, 811, 812, 813, 814, 815, 833, 851, 855, 947, 956, 958, 1007, 1008, 1012], "relax": [7, 391, 399, 432, 970, 1005], "sgd": [7, 8, 164, 174, 203, 210, 215, 225, 264, 293, 294, 309, 339, 350, 356, 482, 490, 627, 644, 645, 646, 649, 654, 655, 656, 657, 833, 834, 946, 961, 979, 994, 998, 1001, 1002, 1003, 1005, 1009, 1011], "svr": [7, 10, 164, 224, 239, 306, 321, 337, 354, 534, 545, 546, 571, 572, 621, 656, 774, 876, 878, 880, 950, 990, 998, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "optim": [7, 13, 27, 53, 54, 56, 59, 71, 77, 78, 95, 109, 121, 123, 145, 149, 150, 153, 154, 155, 156, 157, 158, 184, 185, 189, 204, 212, 231, 254, 261, 264, 269, 274, 276, 280, 295, 298, 310, 317, 328, 334, 339, 340, 341, 350, 354, 357, 361, 364, 367, 368, 369, 377, 379, 382, 386, 388, 389, 391, 393, 395, 396, 398, 400, 401, 402, 424, 427, 428, 429, 431, 436, 440, 441, 451, 452, 458, 509, 512, 513, 515, 517, 521, 535, 536, 537, 538, 552, 588, 589, 597, 598, 613, 616, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 665, 668, 670, 672, 673, 679, 700, 707, 774, 788, 818, 819, 820, 822, 824, 825, 826, 827, 828, 833, 834, 852, 863, 867, 868, 875, 876, 877, 878, 879, 880, 881, 949, 950, 951, 952, 953, 957, 958, 959, 960, 961, 962, 971, 972, 973, 977, 981, 987, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "few": [7, 14, 19, 39, 46, 52, 99, 119, 152, 155, 156, 185, 194, 196, 214, 231, 241, 258, 259, 263, 294, 298, 302, 306, 307, 308, 309, 310, 311, 314, 334, 341, 354, 362, 363, 364, 367, 368, 378, 380, 385, 388, 389, 391, 395, 396, 400, 401, 417, 428, 539, 540, 566, 569, 633, 670, 673, 868, 912, 925, 953, 954, 956, 957, 960, 961, 970, 972, 973, 981, 983, 990, 991, 992, 1004], "drawn": [7, 52, 79, 113, 145, 149, 158, 235, 263, 280, 339, 363, 391, 397, 398, 401, 403, 448, 449, 450, 451, 452, 453, 454, 455, 493, 501, 511, 533, 534, 541, 589, 605, 610, 619, 812, 867, 868, 885, 886, 953, 967, 969, 1001], "boost": [7, 108, 109, 110, 111, 115, 126, 129, 132, 133, 164, 372, 379, 400, 427, 445, 446, 474, 479, 482, 493, 498, 531, 532, 537, 538, 539, 540, 610, 611, 612, 613, 718, 719, 725, 727, 777, 778, 779, 799, 802, 837, 849, 850, 953, 957, 977, 979, 994, 998, 999, 1001, 1003, 1004, 1005, 1007, 1011], "detriment": [7, 145, 355, 400, 953], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 56, 59, 64, 66, 72, 74, 79, 91, 119, 162, 169, 196, 226, 228, 235, 241, 259, 267, 299, 303, 317, 339, 340, 988], "add_subplot": [7, 16, 25, 27, 42, 45, 63, 66, 89, 101, 102, 109, 167, 193, 211, 219, 221, 314, 315, 373], "line1": [7, 12, 220], "tab": [7, 53, 126, 129, 149, 154, 156, 184, 185, 307, 392, 1005], "blue": [7, 20, 21, 26, 34, 91, 95, 113, 116, 124, 126, 129, 131, 144, 154, 156, 172, 176, 184, 185, 192, 194, 220, 229, 250, 251, 256, 293, 303, 307, 316, 364, 391, 396], "set_xlabel": [7, 10, 45, 53, 59, 72, 74, 89, 91, 100, 109, 158, 161, 162, 167, 168, 172, 185, 191, 193, 194, 196, 198, 211, 212, 230, 234, 256, 258, 262, 267, 268, 281, 298, 299, 303, 317, 340, 341, 344], "y1_label": 7, "set_ylabel": [7, 8, 10, 45, 53, 59, 64, 72, 74, 79, 89, 91, 100, 106, 109, 116, 158, 167, 172, 185, 187, 191, 193, 194, 196, 198, 211, 230, 234, 241, 256, 258, 262, 267, 268, 274, 281, 298, 299, 303, 306, 317, 334, 340, 344, 988], "spine": [7, 14, 207, 298], "set_color": [7, 207], "get_color": 7, "yaxi": [7, 10, 45, 59, 89, 101, 102, 193, 217, 219, 222, 241, 276, 281, 339], "tick_param": [7, 14, 132, 241, 256, 302, 317], "ax2": [7, 56, 59, 64, 66, 79, 91, 119, 162, 169, 196, 226, 235, 241, 259, 267, 286, 299, 303, 317, 339], "sharex": [7, 14, 72, 91, 100, 130, 158, 167, 198, 258, 281, 317, 988], "frameon": [7, 202], "line2": [7, 12, 220, 335], "orang": [7, 53, 91, 96, 97, 103, 124, 126, 156, 162, 184, 185, 206, 232, 244, 279, 287, 307, 347, 958], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "loc": [7, 8, 9, 24, 26, 33, 40, 71, 74, 78, 79, 80, 84, 94, 97, 99, 103, 104, 105, 109, 112, 113, 114, 120, 121, 122, 123, 124, 126, 129, 131, 132, 136, 142, 149, 150, 156, 158, 166, 167, 178, 180, 181, 186, 190, 196, 197, 198, 199, 202, 203, 206, 209, 210, 213, 214, 220, 228, 229, 230, 231, 232, 243, 244, 251, 254, 255, 256, 259, 260, 263, 266, 269, 270, 271, 281, 282, 283, 293, 299, 302, 303, 307, 310, 316, 325, 328, 333, 339, 345, 347, 788, 853, 864], "upper": [7, 9, 24, 71, 74, 78, 79, 80, 109, 112, 113, 114, 121, 122, 123, 124, 129, 131, 142, 153, 155, 158, 166, 190, 196, 202, 203, 206, 210, 213, 214, 229, 232, 233, 255, 256, 257, 281, 282, 283, 293, 303, 317, 325, 328, 333, 391, 397, 442, 566, 567, 569, 573, 591, 592, 593, 595, 597, 598, 600, 601, 603, 610, 611, 613, 615, 628, 632, 655, 712, 849, 877, 878, 879, 899, 956, 957, 960, 967, 971, 972, 973, 1006], "__name__": [7, 16, 25, 60, 161, 196, 198, 238, 251, 258, 276, 300, 318, 339, 340, 341, 373, 377], "prediction_perform": 7, "4948": 7, "2675": 7, "066661": 7, "1847": 7, "3264": 7, "050418": 7, "997": [7, 40], "3383": 7, "041818": 7, "802": [7, 364], "3582": 7, "038671": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000177": 7, "5289": 7, "8022": [7, 379, 452, 1007], "000259": 7, "5193": 7, "8353": 7, "000434": 7, "124": [7, 72, 75, 398, 1000], "5131": [7, 1003], "3279": 7, "000682": 7, "178": [7, 288, 290, 364, 372, 488, 820], "5149": 7, "0779": 7, "000959": 7, "4066": 7, "4812": 7, "000140": 7, "3551": 7, "1723": 7, "000162": 7, "3445": 7, "2171": 7, "000186": 7, "3433": 7, "0358": 7, "000220": 7, "3456": 7, "0602": 7, "000256": 7, "deduc": 7, "guarante": [7, 8, 79, 80, 166, 204, 229, 274, 298, 340, 350, 356, 361, 374, 375, 391, 395, 396, 399, 514, 623, 636, 637, 646, 650, 652, 654, 656, 665, 672, 791, 794, 816, 817, 854, 856, 868, 869, 882, 949, 953, 954, 956, 960, 965, 969, 973, 991, 1008], "aspect": [7, 57, 85, 95, 153, 167, 217, 225, 285, 332, 354, 355, 356, 367, 379, 391, 636, 637, 973, 981], "614": [7, 15], "plot_model_complexity_influ": [7, 15], "doesn": [8, 196, 242, 294, 326, 374, 379, 391, 399, 400, 414, 454, 560, 610, 611, 644, 646, 654, 694, 808, 818, 819, 833, 956, 957, 973, 1002], "t": [8, 11, 12, 16, 17, 26, 30, 34, 39, 40, 42, 43, 44, 52, 54, 57, 69, 77, 78, 79, 81, 84, 91, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 120, 121, 122, 123, 124, 128, 129, 146, 150, 152, 153, 154, 157, 158, 164, 166, 167, 168, 169, 175, 177, 183, 190, 193, 194, 196, 197, 214, 216, 218, 219, 220, 221, 223, 232, 242, 245, 247, 255, 256, 288, 289, 294, 306, 309, 310, 314, 315, 317, 322, 323, 326, 327, 330, 331, 334, 339, 340, 341, 347, 348, 350, 354, 355, 361, 362, 364, 367, 368, 370, 372, 374, 377, 378, 379, 382, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 414, 426, 427, 429, 435, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 473, 474, 491, 492, 493, 497, 498, 503, 508, 510, 512, 515, 519, 522, 531, 533, 534, 537, 538, 539, 540, 560, 568, 569, 572, 585, 586, 605, 606, 608, 609, 610, 611, 613, 617, 624, 625, 626, 628, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 651, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 674, 682, 688, 694, 695, 703, 713, 714, 732, 733, 734, 744, 765, 766, 769, 770, 774, 777, 778, 788, 804, 805, 806, 808, 818, 819, 822, 823, 832, 833, 834, 842, 847, 849, 850, 856, 868, 877, 880, 883, 884, 885, 886, 912, 923, 946, 951, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 971, 972, 973, 980, 983, 990, 991, 992, 993, 994, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "memori": [8, 54, 70, 71, 99, 120, 166, 167, 278, 306, 308, 310, 311, 339, 340, 341, 355, 356, 361, 367, 369, 375, 379, 392, 395, 396, 399, 402, 403, 421, 422, 423, 424, 425, 426, 428, 429, 433, 436, 438, 447, 452, 458, 474, 481, 486, 511, 512, 513, 515, 516, 533, 534, 535, 536, 541, 542, 543, 559, 560, 566, 567, 569, 624, 625, 626, 630, 631, 636, 637, 638, 639, 640, 641, 644, 646, 647, 654, 655, 656, 657, 658, 659, 662, 755, 756, 757, 758, 774, 780, 788, 797, 798, 799, 800, 803, 804, 805, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 836, 837, 854, 856, 865, 866, 868, 873, 875, 876, 883, 884, 885, 886, 896, 926, 942, 953, 959, 960, 967, 969, 970, 972, 973, 977, 978, 981, 983, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "onlin": [8, 14, 36, 67, 95, 98, 164, 174, 210, 215, 356, 362, 366, 371, 379, 391, 396, 399, 401, 422, 426, 428, 473, 480, 509, 514, 515, 516, 517, 523, 524, 560, 562, 636, 644, 645, 646, 654, 656, 802, 811, 812, 813, 814, 815, 818, 819, 824, 826, 827, 845, 846, 856, 875, 876, 949, 953, 961, 963, 976, 979, 981, 990, 994, 998, 1002, 1003, 1005], "partial_fit": [8, 50, 95, 310, 356, 368, 379, 391, 396, 422, 428, 512, 514, 515, 516, 567, 575, 636, 637, 644, 645, 646, 654, 655, 656, 804, 805, 808, 809, 811, 812, 813, 814, 815, 832, 833, 834, 845, 846, 856, 875, 953, 959, 961, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013], "fed": [8, 129, 350, 362, 399, 946, 962, 967, 1009], "batch": [8, 11, 63, 95, 99, 289, 310, 356, 375, 379, 399, 420, 422, 426, 428, 430, 432, 509, 511, 512, 514, 515, 516, 517, 518, 520, 521, 523, 524, 642, 663, 664, 779, 792, 793, 811, 812, 813, 814, 815, 833, 834, 845, 846, 856, 868, 915, 961, 962, 971, 998, 1002, 1003, 1006, 1007, 1008, 1009, 1011], "remain": [8, 25, 27, 70, 116, 121, 123, 145, 166, 196, 212, 241, 254, 258, 262, 265, 388, 392, 393, 395, 399, 443, 446, 493, 494, 499, 506, 512, 548, 588, 589, 677, 740, 746, 776, 777, 778, 779, 782, 784, 811, 812, 813, 815, 916, 946, 947, 956, 957, 961, 967, 973, 978, 1000, 1006, 1012], "hashingvector": [8, 341, 356, 467, 566, 568, 999, 1005, 1006, 1007, 1008, 1011], "where": [8, 11, 12, 13, 16, 17, 19, 24, 25, 26, 32, 53, 56, 79, 85, 91, 95, 98, 101, 105, 106, 109, 112, 114, 119, 120, 122, 126, 143, 146, 149, 155, 158, 162, 166, 175, 180, 188, 197, 205, 206, 207, 209, 213, 214, 217, 219, 220, 225, 226, 229, 232, 236, 247, 252, 253, 256, 258, 262, 263, 265, 267, 268, 295, 298, 300, 301, 302, 306, 308, 309, 315, 316, 324, 334, 335, 336, 339, 344, 345, 350, 354, 355, 356, 361, 363, 364, 366, 367, 368, 370, 372, 373, 374, 377, 378, 379, 382, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 412, 417, 424, 426, 427, 431, 440, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 465, 474, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 560, 561, 562, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 587, 588, 589, 591, 593, 597, 600, 601, 603, 605, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 666, 669, 670, 671, 674, 677, 685, 690, 694, 702, 706, 707, 708, 716, 719, 732, 740, 745, 746, 747, 750, 758, 759, 760, 761, 764, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 797, 799, 800, 801, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 819, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 839, 846, 849, 851, 852, 855, 856, 861, 863, 869, 870, 871, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 903, 904, 905, 906, 912, 942, 946, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 978, 980, 983, 984, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "word": [8, 14, 19, 69, 149, 229, 232, 326, 340, 341, 354, 362, 363, 367, 368, 371, 379, 388, 391, 393, 394, 395, 396, 432, 489, 501, 512, 514, 519, 566, 567, 569, 674, 805, 815, 872, 951, 955, 959, 962, 967, 970, 971, 981, 990, 991, 998, 1006], "federicov": 8, "itertool": [8, 42, 44, 61, 130, 167, 181, 242, 247, 256, 263, 265, 398], "pathlib": [8, 1013], "path": [8, 16, 17, 164, 174, 181, 185, 215, 344, 361, 365, 367, 370, 374, 375, 379, 421, 425, 429, 464, 465, 466, 477, 478, 479, 481, 482, 483, 486, 487, 526, 535, 536, 541, 542, 543, 544, 571, 572, 575, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 659, 660, 661, 662, 663, 664, 666, 836, 837, 882, 883, 884, 885, 886, 917, 946, 953, 954, 963, 977, 978, 998, 999, 1002, 1004, 1005, 1007, 1008, 1010, 1011, 1013], "hashlib": 8, "sha256": [8, 1013], "tarfil": 8, "sy": [8, 12, 16, 19, 204, 229, 276, 318, 341, 362, 377, 595], "rcparam": [8, 225, 230], "htmlparser": 8, "urllib": [8, 17], "request": [8, 17, 46, 196, 214, 309, 355, 361, 365, 366, 369, 379, 380, 385, 396, 399, 400, 428, 550, 589, 610, 677, 960, 992, 1004, 1005, 1006], "urlretriev": 8, "get_data_hom": 8, "feature_extract": [8, 14, 19, 46, 47, 50, 51, 54, 65, 69, 98, 164, 257, 318, 338, 339, 340, 341, 356, 357, 362, 391, 392, 399, 443, 481, 522, 849, 955, 991, 992, 998, 999, 1000, 1001, 1004, 1005], "passiveaggressiveclassifi": [8, 203, 354, 356, 953, 958, 999, 1002, 1003, 1005, 1006, 1009, 1011], "perceptron": [8, 164, 167, 203, 206, 212, 235, 291, 296, 356, 377, 399, 492, 493, 500, 644, 654, 802, 832, 833, 834, 837, 856, 955, 958, 962, 971, 979, 994, 1002, 1004, 1005, 1006, 1010], "naive_bay": [8, 24, 25, 27, 31, 127, 131, 257, 258, 303, 339, 350, 356, 357, 362, 392, 398, 417, 547, 837, 951, 958, 959, 992, 999, 1000, 1002, 1003, 1004, 1005], "multinomialnb": [8, 356, 362, 392, 399, 811, 812, 813, 814, 959, 992, 1000, 1002, 1005, 1006, 1010, 1011, 1013], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 16, 70, 125, 152, 155, 157, 167, 196, 214, 218, 226, 254, 298, 348, 350, 355, 362, 365, 366, 367, 368, 370, 371, 372, 379, 392, 393, 395, 396, 398, 400, 403, 419, 420, 422, 430, 432, 433, 438, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 466, 469, 470, 474, 475, 481, 486, 487, 492, 500, 505, 509, 510, 515, 516, 517, 518, 520, 523, 524, 526, 530, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 559, 566, 567, 568, 569, 575, 580, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 609, 610, 611, 613, 614, 615, 616, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 668, 672, 673, 675, 676, 678, 680, 682, 690, 719, 738, 744, 751, 755, 766, 774, 777, 778, 779, 780, 788, 792, 793, 796, 799, 800, 802, 805, 807, 810, 811, 812, 813, 815, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 833, 834, 840, 862, 875, 876, 877, 878, 879, 880, 881, 887, 889, 893, 895, 896, 897, 899, 911, 912, 930, 941, 945, 946, 947, 952, 953, 957, 962, 963, 969, 971, 972, 981, 1005, 1006, 1007], "builder": [8, 10, 370], "__file__": [8, 10, 1011], "global": [8, 10, 42, 56, 95, 196, 217, 218, 238, 265, 294, 307, 350, 354, 355, 372, 377, 379, 391, 401, 422, 431, 441, 447, 568, 604, 610, 666, 669, 670, 673, 685, 706, 707, 715, 760, 761, 764, 765, 792, 871, 873, 925, 927, 946, 954, 957, 963, 973, 981, 1006], "21578": [8, 1011], "uci": [8, 303, 361, 364, 478, 480, 482, 488], "ml": [8, 361, 364, 371, 478, 480, 488, 953, 955, 977, 978, 981], "uncompress": [8, 486, 487, 992], "reuterspars": 8, "pars": [8, 17, 354, 361, 362, 486], "sgml": [8, 354], "file": [8, 12, 15, 16, 22, 28, 32, 35, 48, 50, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 215, 223, 239, 248, 272, 275, 290, 296, 304, 312, 320, 337, 339, 340, 342, 349, 354, 356, 361, 362, 364, 365, 367, 370, 371, 372, 374, 377, 385, 392, 396, 465, 471, 472, 474, 481, 486, 487, 512, 556, 558, 566, 567, 569, 887, 960, 973, 977, 980, 984, 998, 999, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "yield": [8, 9, 25, 45, 77, 78, 79, 80, 120, 122, 191, 196, 211, 214, 261, 274, 292, 298, 323, 328, 339, 340, 350, 354, 356, 361, 371, 379, 388, 391, 393, 395, 396, 398, 399, 400, 401, 417, 428, 447, 451, 486, 487, 515, 516, 517, 519, 524, 531, 532, 537, 538, 539, 540, 545, 546, 572, 580, 625, 629, 630, 631, 633, 639, 641, 643, 651, 653, 664, 677, 703, 758, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 803, 807, 810, 867, 868, 906, 913, 915, 916, 949, 951, 953, 954, 957, 972, 973, 987, 1003, 1004, 1006, 1009, 1011], "__init__": [8, 16, 55, 157, 276, 326, 367, 368, 370, 371, 372, 373, 379, 399, 405, 919, 999, 1004, 1006, 1011, 1012, 1013], "self": [8, 16, 19, 25, 27, 55, 157, 164, 276, 313, 319, 320, 326, 339, 361, 367, 368, 371, 372, 373, 374, 391, 399, 401, 405, 408, 412, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 478, 486, 487, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 681, 772, 773, 774, 777, 778, 788, 793, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 919, 931, 960, 978, 979, 981, 994, 1000, 1005, 1012], "latin": [8, 399], "_reset": 8, "handle_starttag": 8, "tag": [8, 49, 70, 225, 316, 361, 366, 369, 370, 374, 377, 379, 399, 474, 804, 978, 980, 1003, 1007, 1008, 1009, 1012, 1013], "attr": [8, 55], "start_": 8, "getattr": [8, 298, 379], "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 69, 146, 235, 311, 364], "topic_d": 8, "fd": 8, "chunk": [8, 50, 354, 355, 391, 396, 402, 424, 428, 447, 516, 755, 758, 804, 805, 811, 812, 813, 814, 815, 873, 959, 1005, 1006, 1007, 1008, 1009], "feed": [8, 85, 197, 341, 362, 371, 377, 391, 399, 849, 958], "decod": [8, 289, 362, 379, 481, 547, 566, 567, 569, 998, 999], "close": [8, 12, 17, 24, 25, 27, 38, 39, 46, 54, 59, 65, 77, 78, 81, 100, 113, 119, 122, 125, 129, 149, 150, 153, 154, 155, 156, 157, 158, 166, 168, 202, 218, 225, 231, 234, 241, 247, 256, 257, 282, 283, 298, 303, 306, 326, 331, 340, 350, 362, 367, 368, 374, 377, 379, 380, 389, 390, 391, 394, 395, 398, 401, 429, 434, 451, 486, 487, 510, 541, 606, 621, 625, 639, 650, 652, 665, 683, 723, 772, 792, 793, 811, 812, 813, 815, 822, 896, 946, 950, 951, 953, 954, 956, 957, 958, 960, 963, 964, 967, 972, 981, 990, 1001, 1005, 1006, 1007], "handle_data": 8, "start_reut": 8, "attribut": [8, 25, 32, 49, 70, 84, 104, 116, 117, 120, 142, 146, 196, 204, 234, 246, 254, 255, 260, 268, 285, 289, 309, 341, 348, 356, 357, 360, 361, 362, 364, 367, 369, 373, 377, 387, 388, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 406, 407, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 675, 676, 678, 679, 680, 713, 770, 772, 773, 774, 777, 778, 780, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 919, 920, 941, 951, 953, 958, 960, 961, 963, 967, 970, 971, 972, 973, 981, 983, 989, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "end_reut": 8, "sub": [8, 37, 48, 53, 56, 59, 69, 105, 233, 241, 308, 314, 315, 323, 326, 335, 362, 367, 368, 372, 392, 398, 399, 514, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 649, 920, 953, 957, 971, 992, 1008, 1012], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 14, 17, 31, 46, 71, 81, 95, 98, 110, 113, 118, 120, 121, 123, 124, 146, 158, 161, 164, 175, 176, 204, 211, 243, 244, 249, 251, 267, 272, 292, 294, 295, 300, 308, 315, 317, 318, 326, 367, 368, 372, 374, 375, 378, 379, 386, 391, 394, 396, 398, 400, 403, 417, 420, 421, 423, 425, 426, 427, 428, 431, 433, 438, 440, 441, 442, 450, 451, 457, 460, 461, 462, 489, 493, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 537, 538, 539, 540, 542, 545, 546, 559, 560, 566, 567, 569, 571, 572, 580, 588, 605, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 810, 825, 832, 833, 834, 835, 836, 840, 847, 849, 851, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 890, 911, 912, 918, 947, 953, 954, 956, 957, 960, 961, 962, 970, 971, 972, 973, 978, 981, 987, 991, 992, 994, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "archiv": [8, 361, 362, 364, 365, 385, 391, 422, 480, 488, 735, 736, 955, 972, 992], "exist": [8, 9, 17, 19, 53, 214, 256, 294, 298, 361, 366, 368, 369, 372, 377, 379, 380, 382, 385, 391, 395, 396, 398, 399, 401, 406, 417, 430, 432, 447, 477, 527, 533, 534, 535, 536, 542, 543, 560, 563, 567, 575, 581, 610, 611, 623, 654, 655, 656, 658, 676, 678, 680, 739, 742, 746, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 821, 836, 841, 849, 850, 941, 949, 954, 956, 957, 961, 963, 964, 967, 977, 981, 991, 998, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "str": [8, 10, 16, 57, 59, 104, 106, 118, 214, 234, 256, 268, 286, 324, 339, 361, 362, 375, 399, 402, 403, 407, 411, 418, 419, 421, 422, 423, 424, 425, 426, 428, 429, 431, 436, 443, 444, 445, 446, 447, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 529, 539, 540, 544, 545, 546, 547, 548, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 595, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 637, 644, 645, 649, 651, 653, 654, 656, 666, 667, 670, 674, 675, 676, 677, 678, 680, 682, 685, 687, 689, 691, 704, 706, 707, 709, 710, 715, 734, 748, 751, 755, 756, 757, 758, 759, 760, 761, 764, 766, 767, 768, 774, 777, 778, 780, 785, 786, 788, 797, 798, 799, 800, 801, 803, 808, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 873, 887, 888, 889, 891, 894, 895, 896, 899, 902, 904, 908, 920, 922, 941, 942, 945], "kei": [8, 9, 10, 17, 19, 42, 119, 129, 161, 214, 237, 257, 259, 260, 307, 308, 309, 310, 311, 356, 360, 368, 371, 372, 373, 377, 379, 382, 391, 392, 395, 401, 443, 451, 539, 540, 545, 546, 547, 548, 566, 569, 572, 595, 604, 610, 612, 637, 774, 777, 778, 786, 788, 799, 835, 836, 890, 900, 924, 978, 992, 995, 1004, 1010, 1011, 1013], "download_url": 8, "ic": [8, 167, 308, 361, 364, 381, 480, 488, 610, 611, 994, 1010, 1011], "databas": [8, 354, 356, 362, 364, 391, 396, 398, 399, 402, 422, 424, 488, 533, 534, 868, 969], "reuters21578": 8, "mld": 8, "tar": [8, 370], "gz": [8, 370, 382, 486, 487], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "els": [8, 11, 12, 16, 19, 41, 44, 49, 55, 61, 81, 99, 113, 118, 122, 157, 166, 167, 185, 198, 214, 218, 225, 229, 231, 232, 233, 256, 257, 260, 267, 276, 281, 289, 292, 293, 300, 339, 340, 348, 367, 370, 372, 398, 399, 401, 403, 417, 428, 486, 498, 511, 547, 603, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 648, 650, 651, 652, 654, 657, 659, 660, 661, 662, 681, 687, 745, 765, 769, 771, 777, 778, 802, 849, 852, 862, 875, 876, 890, 921, 923, 944, 973], "mkdir": [8, 374], "parent": [8, 367, 370, 379, 391, 422, 442, 998], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 215, 223, 229, 239, 248, 272, 275, 290, 296, 304, 312, 320, 337, 339, 341, 342, 349, 362, 372, 877, 878, 879, 880, 881, 972], "1e6": [8, 10, 189, 229, 339, 341, 354, 514, 869, 957, 969], "current_sz_mb": 8, "stdout": [8, 95, 204, 805, 825, 833, 834], "write": [8, 17, 162, 339, 354, 355, 361, 365, 366, 369, 370, 371, 372, 374, 375, 377, 379, 382, 392, 396, 399, 968, 978, 992, 999, 1011], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 318, 362, 372, 385, 466, 478, 481, 482, 485, 566, 567, 569, 992, 998, 1003, 1006, 1007], "reporthook": 8, "tamper": 8, "assert": [8, 17, 48, 96, 229, 256, 265, 355, 369, 978], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 219, 361, 362, 366, 367, 370, 372, 377, 378, 380, 382, 385, 392, 399, 465, 474, 486, 487, 947, 981, 986, 1001, 1005, 1006, 1008], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 399, 481, 566, 567, 569, 1000], "alternate_sign": [8, 399, 560, 567, 1005], "data_stream": 8, "binari": [8, 13, 25, 27, 109, 114, 125, 127, 143, 157, 166, 172, 187, 189, 196, 204, 218, 226, 237, 253, 254, 259, 265, 271, 274, 280, 326, 332, 348, 350, 361, 362, 363, 368, 370, 371, 379, 382, 385, 388, 389, 390, 391, 398, 399, 401, 417, 418, 419, 431, 465, 478, 486, 487, 498, 501, 527, 528, 531, 533, 537, 539, 540, 544, 545, 546, 559, 566, 567, 569, 571, 572, 580, 588, 605, 606, 607, 608, 610, 611, 636, 637, 644, 646, 651, 652, 653, 654, 678, 681, 685, 686, 687, 690, 691, 693, 696, 698, 704, 706, 707, 711, 712, 715, 716, 717, 718, 719, 720, 759, 760, 761, 764, 765, 766, 769, 771, 774, 775, 777, 778, 779, 780, 788, 792, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 811, 822, 832, 843, 847, 849, 859, 875, 877, 880, 922, 947, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 971, 972, 973, 980, 983, 995, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1013], "acq": 8, "chosen": [8, 46, 72, 129, 150, 166, 167, 185, 197, 200, 213, 232, 250, 251, 253, 259, 340, 350, 354, 377, 391, 393, 394, 398, 401, 420, 428, 430, 432, 433, 439, 474, 501, 513, 535, 536, 537, 538, 542, 543, 625, 631, 634, 636, 637, 639, 641, 649, 654, 655, 656, 657, 658, 668, 672, 769, 772, 773, 774, 777, 778, 788, 806, 825, 875, 883, 884, 885, 886, 912, 946, 949, 951, 953, 954, 956, 958, 963, 964, 971, 987, 988, 990, 991, 1006], "evenli": [8, 39, 52, 122, 251, 399, 916, 992], "care": [8, 123, 354, 356, 370, 372, 377, 379, 380, 389, 391, 393, 399, 417, 439, 448, 618, 636, 637, 644, 646, 654, 655, 656, 673, 875, 954, 972, 981], "all_class": 8, "positive_class": [8, 690], "partial_fit_classifi": 8, "max_it": [8, 14, 17, 25, 30, 31, 71, 72, 95, 98, 115, 131, 135, 137, 158, 161, 162, 166, 182, 188, 189, 203, 204, 205, 208, 209, 211, 217, 218, 219, 220, 235, 236, 241, 243, 244, 247, 269, 286, 292, 293, 294, 308, 309, 310, 314, 315, 323, 339, 340, 372, 379, 398, 403, 420, 423, 426, 427, 428, 433, 438, 440, 450, 451, 457, 460, 461, 462, 509, 510, 511, 513, 514, 515, 516, 517, 518, 521, 523, 524, 525, 526, 539, 540, 605, 616, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 650, 652, 654, 655, 656, 657, 658, 660, 661, 665, 666, 667, 668, 671, 672, 772, 773, 788, 825, 833, 834, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 947, 949, 953, 960, 961, 970, 971, 988, 992, 999, 1002, 1005, 1006, 1007, 1008, 1010, 1012, 1013], "nb": [8, 103, 127, 350, 813, 959], "multinomi": [8, 30, 164, 174, 211, 215, 232, 251, 265, 362, 363, 367, 396, 398, 474, 490, 501, 529, 531, 537, 539, 547, 636, 637, 718, 802, 810, 811, 812, 813, 814, 815, 856, 898, 957, 958, 973, 979, 992, 994, 998, 1002, 1004, 1005, 1006, 1011, 1012], "passiv": [8, 203, 644, 645, 979, 994, 999], "aggress": [8, 203, 644, 645, 777, 778, 979, 994, 999], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 44, 391, 396, 428, 512, 654, 832, 833, 834, 977, 998], "tupl": [8, 48, 49, 105, 167, 214, 360, 361, 362, 368, 379, 395, 403, 414, 430, 432, 443, 446, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 486, 488, 490, 491, 492, 500, 511, 515, 524, 539, 540, 545, 546, 547, 548, 560, 561, 562, 565, 566, 567, 569, 605, 610, 611, 612, 690, 697, 758, 760, 772, 774, 788, 799, 816, 817, 835, 836, 846, 847, 851, 854, 861, 865, 877, 878, 879, 880, 881, 890, 896, 897, 899, 903, 904, 905, 906, 920, 941, 964, 1004, 1005, 1009, 1010, 1011], "x_text": 8, "befor": [8, 12, 25, 42, 69, 71, 74, 85, 129, 142, 156, 158, 160, 163, 164, 166, 167, 169, 177, 184, 185, 189, 256, 263, 278, 299, 302, 303, 309, 329, 350, 354, 355, 362, 365, 367, 368, 369, 371, 372, 374, 375, 377, 379, 380, 381, 385, 391, 392, 393, 395, 396, 400, 403, 404, 423, 426, 427, 428, 438, 440, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 468, 479, 512, 515, 516, 517, 518, 519, 522, 524, 525, 539, 540, 543, 545, 547, 548, 554, 566, 567, 569, 589, 605, 606, 608, 628, 629, 632, 633, 634, 642, 643, 644, 645, 646, 649, 654, 656, 665, 670, 672, 677, 772, 773, 779, 780, 792, 793, 795, 798, 800, 802, 816, 817, 824, 825, 826, 827, 828, 831, 836, 837, 840, 843, 850, 854, 855, 856, 860, 861, 863, 864, 865, 866, 872, 883, 884, 912, 941, 947, 953, 954, 957, 963, 967, 971, 972, 973, 978, 992, 998, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "exclud": [8, 19, 298, 367, 370, 379, 445, 706, 707, 715, 760, 761, 764, 787, 795, 851, 932, 957, 960, 1007], "invalid": [8, 196, 379, 555, 649, 690, 751, 953, 957, 1004, 1006, 1008, 1009, 1011, 1012], "assign": [8, 17, 37, 46, 49, 56, 57, 59, 115, 125, 127, 142, 151, 209, 214, 225, 230, 232, 292, 300, 319, 334, 340, 362, 367, 368, 379, 388, 395, 396, 398, 399, 400, 401, 420, 421, 422, 423, 425, 426, 427, 428, 431, 433, 435, 438, 440, 441, 493, 514, 539, 540, 571, 572, 585, 586, 588, 636, 637, 644, 645, 646, 654, 655, 656, 682, 683, 693, 694, 695, 698, 708, 716, 720, 732, 734, 763, 768, 769, 770, 774, 777, 778, 780, 783, 788, 797, 798, 799, 800, 803, 820, 826, 828, 829, 830, 843, 870, 871, 875, 876, 877, 878, 879, 880, 881, 951, 956, 957, 958, 959, 960, 961, 962, 967, 970, 981, 983, 992, 998, 1003, 1005, 1006], "format": [8, 11, 12, 19, 20, 21, 48, 54, 57, 60, 69, 79, 95, 105, 113, 118, 121, 123, 135, 141, 142, 169, 172, 176, 182, 187, 196, 214, 251, 261, 263, 264, 267, 270, 280, 281, 284, 285, 302, 306, 333, 344, 348, 354, 360, 366, 367, 368, 369, 374, 375, 378, 379, 392, 395, 398, 399, 413, 422, 423, 425, 426, 428, 429, 431, 438, 443, 447, 460, 461, 462, 463, 465, 467, 474, 475, 476, 486, 487, 488, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 529, 535, 536, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 624, 630, 636, 637, 638, 640, 644, 646, 654, 655, 656, 666, 667, 675, 691, 698, 716, 717, 728, 745, 805, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 862, 867, 868, 873, 875, 887, 895, 896, 917, 921, 928, 931, 933, 934, 935, 936, 937, 938, 947, 957, 960, 965, 967, 968, 971, 973, 977, 983, 984, 994, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1013], "islic": [8, 44, 61], "asarrai": [8, 17, 196, 214, 295, 316, 339, 340, 368, 379, 387, 563, 564, 703, 733, 824, 826, 827, 828, 967, 972], "int": [8, 10, 13, 16, 17, 19, 37, 44, 61, 80, 113, 121, 125, 137, 138, 150, 151, 152, 158, 162, 177, 187, 189, 196, 214, 222, 225, 231, 234, 241, 251, 254, 255, 256, 276, 281, 283, 289, 315, 341, 362, 367, 368, 377, 379, 389, 392, 395, 399, 402, 403, 406, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 463, 466, 469, 470, 472, 473, 474, 475, 480, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 585, 586, 588, 589, 595, 605, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 685, 687, 691, 692, 695, 703, 704, 706, 707, 708, 711, 713, 714, 715, 732, 733, 734, 746, 751, 752, 755, 756, 757, 758, 759, 760, 761, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 891, 895, 896, 898, 899, 911, 912, 914, 915, 916, 917, 924, 926, 928, 931, 936, 937, 953, 964, 998, 1004, 1008, 1009], "iter_minibatch": 8, "minibatch_s": [8, 356], "statist": [8, 80, 109, 113, 114, 124, 135, 136, 137, 138, 141, 145, 146, 164, 167, 168, 184, 249, 253, 255, 258, 265, 272, 298, 308, 350, 357, 360, 362, 364, 367, 372, 379, 391, 392, 393, 395, 396, 398, 400, 414, 448, 453, 471, 472, 494, 495, 496, 498, 500, 515, 519, 524, 537, 538, 540, 582, 583, 584, 587, 605, 608, 612, 613, 622, 627, 634, 668, 672, 674, 688, 694, 699, 700, 701, 708, 720, 765, 774, 790, 806, 833, 834, 852, 853, 854, 856, 860, 863, 864, 866, 880, 883, 884, 932, 946, 947, 951, 953, 954, 956, 957, 958, 959, 964, 967, 971, 972, 973, 974, 975, 976, 984, 990, 991, 1003, 1006, 1009, 1010, 1012], "test_stat": 8, "n_test": [8, 10, 33, 113, 256, 998, 1001], "n_test_po": 8, "hold": [8, 16, 26, 27, 196, 257, 348, 360, 367, 368, 389, 391, 395, 398, 399, 401, 481, 539, 540, 567, 610, 611, 612, 713, 774, 777, 778, 788, 812, 843, 844, 849, 850, 859, 947, 951, 957, 961, 971, 972, 973, 980, 983, 992, 1006, 1010], "n_test_docu": 8, "tick": [8, 43, 59, 152, 235, 267, 610, 800], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 26, 60, 80, 91, 98, 105, 121, 122, 142, 146, 157, 166, 177, 183, 192, 196, 211, 214, 218, 220, 265, 276, 283, 286, 310, 318, 331, 334, 339, 340, 341, 348, 364, 372, 379, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 401, 412, 422, 423, 426, 428, 438, 443, 444, 460, 461, 462, 493, 498, 501, 509, 512, 514, 515, 519, 522, 523, 524, 527, 528, 530, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 548, 568, 569, 589, 591, 601, 603, 613, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 650, 651, 654, 655, 656, 657, 659, 662, 668, 672, 674, 677, 687, 688, 697, 703, 718, 733, 735, 736, 740, 765, 804, 805, 809, 810, 819, 823, 827, 834, 835, 855, 856, 875, 876, 878, 881, 883, 884, 885, 886, 914, 932, 938, 943, 953, 957, 958, 959, 960, 972, 973, 990, 1001, 1002, 1004, 1006, 1007, 1009], "cls_name": [8, 10], "stat": [8, 10, 69, 79, 101, 146, 169, 253, 256, 264, 268, 281, 308, 314, 315, 364, 375, 378, 393, 453, 570, 573, 574, 576, 577, 578, 582, 583, 584, 587, 660, 661, 778, 786, 788, 883, 884, 914, 946, 953, 1005, 1007, 1011], "string": [8, 27, 70, 118, 157, 214, 227, 260, 309, 341, 354, 361, 362, 367, 368, 372, 379, 385, 392, 395, 398, 399, 400, 402, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 467, 468, 474, 483, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 595, 598, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 677, 687, 689, 697, 709, 739, 742, 748, 751, 755, 756, 757, 758, 767, 768, 772, 773, 774, 777, 778, 780, 788, 799, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 893, 895, 896, 903, 904, 905, 923, 925, 941, 942, 946, 947, 957, 970, 972, 983, 990, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "n_train": [8, 10, 33, 113, 256, 998, 1001], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 177, 259, 354, 388, 393, 400, 486, 487, 527, 575, 605, 608, 622, 849, 853, 864, 947, 953, 1006, 1010], "mini": [8, 63, 95, 310, 356, 379, 399, 420, 422, 426, 428, 430, 432, 509, 511, 514, 515, 516, 517, 518, 520, 521, 523, 524, 961, 962, 998, 1009, 1011], "smaller": [8, 24, 40, 46, 81, 154, 155, 158, 161, 181, 185, 187, 200, 229, 282, 283, 292, 298, 326, 334, 340, 367, 388, 390, 391, 393, 395, 396, 398, 400, 401, 419, 420, 429, 433, 435, 492, 512, 513, 535, 536, 537, 538, 542, 543, 571, 588, 597, 611, 624, 625, 627, 628, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 660, 661, 670, 687, 772, 777, 778, 822, 825, 849, 867, 868, 875, 883, 884, 885, 886, 912, 951, 953, 954, 956, 957, 958, 960, 961, 963, 967, 969, 971, 972, 973, 978, 992, 1006, 1011], "bigger": [8, 40, 59, 209, 256, 295, 336, 340, 353, 355, 399, 418, 419, 486, 516, 822, 987, 994], "overhead": [8, 355, 356, 367, 372, 375, 377, 379, 398, 421, 425, 428, 512, 677, 808, 809, 811, 812, 813, 814, 815, 816, 817, 925, 959, 960, 1001, 1006, 1007, 1010], "partial": [8, 12, 50, 83, 86, 126, 164, 165, 170, 214, 224, 239, 308, 311, 364, 379, 381, 393, 394, 396, 398, 401, 443, 460, 461, 462, 463, 474, 479, 512, 514, 519, 540, 567, 610, 611, 635, 765, 802, 804, 805, 832, 833, 834, 837, 849, 850, 853, 856, 884, 954, 961, 971, 992, 994, 995, 999, 1006, 1007, 1011], "stream": [8, 391, 396, 399, 441, 567, 845, 846, 856, 949, 977, 1006, 1009], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "enumer": [8, 9, 10, 11, 12, 13, 14, 17, 19, 25, 27, 30, 31, 34, 37, 39, 40, 41, 42, 43, 44, 45, 50, 58, 59, 60, 61, 69, 71, 78, 80, 81, 85, 94, 96, 98, 105, 109, 113, 120, 121, 123, 124, 135, 151, 153, 158, 169, 176, 178, 187, 196, 218, 219, 222, 225, 230, 233, 234, 241, 242, 243, 244, 246, 247, 251, 258, 259, 265, 266, 276, 281, 285, 286, 288, 295, 300, 301, 314, 315, 317, 319, 324, 326, 333, 334, 339, 345, 362, 537, 538, 542, 543, 758, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795], "item": [8, 9, 10, 11, 12, 17, 19, 30, 43, 74, 114, 119, 122, 129, 166, 194, 198, 204, 218, 231, 233, 243, 253, 257, 259, 310, 315, 340, 360, 367, 368, 375, 392, 443, 504, 539, 540, 566, 567, 569, 610, 786, 849, 870, 871, 890, 891, 917, 949, 970, 978, 983], "updat": [8, 16, 44, 61, 94, 110, 124, 230, 306, 341, 365, 366, 367, 370, 374, 379, 391, 396, 398, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 442, 444, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 890, 932, 953, 960, 961, 962, 971, 980, 981, 999, 1005, 1006, 1007, 1009, 1011, 1013], "accumul": [8, 50, 116, 117, 185, 370, 372, 391, 399, 957, 999, 1006], "acc_histori": 8, "run_histori": 8, "runner": [8, 27, 50, 84, 112, 153, 155, 157, 158, 188, 205, 257, 331, 345], "scikit_learn_data": [8, 50, 362, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477], "469": [8, 111, 133], "982": [8, 261, 272], "1421": 8, "925": [8, 957, 987], "1414": 8, "896": [8, 302, 304, 626], "1396": [8, 954], "923": [8, 159], "1390": 8, "3393": 8, "410": [8, 340], "959": [8, 852, 863], "1909": 8, "947": 8, "1905": [8, 364], "904": [8, 254, 392], "1896": 8, "955": [8, 395, 632], "1893": 8, "6324": 8, "780": [8, 254, 282, 290], "2133": 8, "951": [8, 150, 159], "97": [8, 32, 105, 169, 232, 247, 295, 315, 326, 364, 372, 378, 395, 636, 958, 967, 998], "2131": 8, "919": 8, "98": [8, 32, 34, 42, 44, 54, 61, 63, 81, 98, 225, 254, 292, 295, 300, 303, 315, 364, 370, 395, 398, 637, 811, 952, 959, 987, 992], "2125": 8, "2123": 8, "9103": 8, "1154": 8, "945": [8, 39, 67], "2218": 8, "2216": 8, "932": 8, "2211": [8, 612], "2210": 8, "11910": 8, "1559": 8, "972": [8, 69, 75], "2280": 8, "2279": 8, "936": [8, 417, 957], "2275": 8, "968": [8, 154, 254], "2274": 8, "14797": 8, "1899": 8, "2313": 8, "957": [8, 401, 705, 957], "2312": 8, "41": [8, 67, 107, 167, 196, 362, 364, 401, 448, 470, 509, 599, 602, 613, 636, 642, 663, 664, 758, 811, 959, 963], "2309": 8, "953": [8, 49], "2308": 8, "17717": 8, "2219": 8, "57": [8, 149, 166, 212, 265, 295, 364, 365, 382, 383, 384, 392, 683, 758, 809, 957, 967, 998], "2340": 8, "2339": 8, "58": [8, 65, 78, 295, 364, 393, 454, 741, 967, 988], "2336": [8, 372], "962": [8, 225, 239], "curv": [8, 11, 23, 28, 37, 74, 77, 113, 115, 121, 164, 174, 175, 186, 196, 214, 215, 217, 219, 222, 224, 226, 234, 235, 239, 240, 248, 249, 256, 266, 272, 293, 306, 346, 373, 386, 390, 395, 397, 417, 418, 419, 480, 488, 493, 499, 503, 542, 610, 623, 636, 676, 678, 680, 684, 685, 686, 687, 704, 706, 718, 719, 759, 761, 764, 765, 766, 772, 773, 780, 791, 800, 802, 803, 814, 837, 856, 875, 880, 953, 954, 956, 957, 963, 973, 979, 981, 994, 995, 1000, 1001, 1004, 1008, 1010, 1011, 1012, 1013], "evolut": [8, 10, 268, 354, 356, 515, 524], "cours": [8, 9, 172, 354, 367, 368, 396, 399, 400, 947, 952, 953, 981], "valid": [8, 13, 26, 54, 55, 70, 73, 77, 81, 103, 114, 118, 119, 120, 121, 122, 134, 139, 140, 144, 146, 147, 157, 164, 166, 168, 174, 184, 196, 198, 204, 214, 215, 233, 243, 246, 249, 253, 256, 257, 258, 260, 262, 264, 265, 270, 272, 280, 295, 299, 306, 308, 317, 326, 334, 344, 355, 362, 367, 369, 377, 378, 379, 385, 386, 389, 391, 392, 393, 396, 397, 398, 399, 400, 401, 407, 417, 422, 423, 425, 426, 428, 429, 436, 442, 443, 447, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 471, 479, 480, 482, 493, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 571, 572, 575, 580, 610, 612, 616, 617, 618, 619, 620, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 677, 679, 684, 691, 705, 739, 742, 751, 755, 756, 757, 762, 767, 768, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 810, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 840, 842, 856, 867, 868, 870, 871, 873, 875, 877, 880, 882, 883, 884, 885, 886, 895, 896, 899, 906, 918, 947, 956, 957, 958, 961, 965, 967, 969, 971, 972, 973, 977, 978, 981, 983, 986, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "consumpt": [8, 354, 512, 535, 536, 542, 543, 774, 788, 797, 798, 799, 883, 884, 885, 886, 983, 998, 1000, 1004, 1006, 1007, 1012], "queue": [8, 960, 1001], "up": [8, 11, 37, 44, 46, 47, 48, 52, 56, 61, 69, 79, 80, 88, 91, 115, 162, 175, 189, 197, 212, 213, 234, 243, 258, 261, 289, 295, 299, 310, 315, 323, 339, 341, 356, 361, 362, 367, 370, 372, 373, 374, 375, 377, 379, 389, 391, 396, 398, 399, 423, 426, 427, 428, 429, 431, 435, 438, 439, 440, 486, 487, 514, 527, 528, 535, 536, 537, 538, 539, 540, 542, 543, 544, 588, 605, 610, 611, 617, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 659, 660, 661, 662, 670, 683, 746, 772, 773, 776, 777, 778, 780, 800, 851, 854, 865, 883, 884, 885, 886, 889, 912, 915, 916, 946, 953, 954, 957, 960, 971, 972, 978, 980, 981, 991, 992, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "amount": [8, 12, 45, 53, 65, 77, 80, 95, 99, 111, 113, 155, 166, 214, 230, 308, 314, 317, 319, 326, 334, 341, 354, 355, 356, 377, 390, 391, 393, 396, 398, 399, 400, 423, 433, 448, 516, 517, 519, 521, 541, 574, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 643, 659, 662, 670, 777, 778, 816, 817, 822, 871, 872, 885, 886, 952, 953, 956, 959, 961, 967, 969, 970, 971, 972, 990, 991, 1011], "learner": [8, 109, 111, 120, 129, 356, 535, 536, 537, 538, 542, 543, 544, 560, 567, 608, 818, 819, 824, 826, 827, 959, 962, 973, 977, 978, 992], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 44, 61, 85, 152, 200, 201, 205, 207, 225, 237, 260, 284, 286, 299, 322, 324, 327, 328, 964, 995], "set_ylim": [8, 10, 16, 31, 42, 59, 91, 109, 115, 126, 127, 158, 167, 169, 176, 194, 196, 197, 230, 241, 260, 263, 274, 281, 292, 298, 300, 301, 307, 317, 335], "runtim": [8, 10, 57, 182, 211, 213, 230, 295, 300, 355, 368, 369, 377, 379, 390, 391, 398, 429, 541, 657, 788, 875, 876, 877, 878, 879, 880, 881, 971, 972, 1001, 1005, 1006, 1012, 1013], "gcf": [8, 964], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 14, 71, 116, 119, 120, 123, 131, 142, 146, 157, 161, 167, 175, 241, 246, 255, 257, 261, 274, 310, 311, 340, 368, 394, 559, 610, 626, 647, 658, 957, 964, 971, 973, 1004, 1005, 1006, 1007], "width": [8, 10, 16, 45, 53, 79, 89, 97, 98, 104, 105, 106, 113, 118, 119, 122, 131, 142, 151, 157, 179, 238, 241, 255, 298, 300, 301, 308, 311, 323, 364, 392, 418, 419, 431, 443, 471, 472, 484, 499, 564, 841, 888, 967, 971, 973, 989, 990, 1006], "set_xtick": [8, 10, 16, 31, 34, 43, 59, 63, 106, 127, 131, 167, 169, 187, 212, 230, 241, 267, 268, 274, 292, 294, 300, 301, 323], "set_xticklabel": [8, 10, 79, 106, 131, 152, 167, 169, 267, 268, 274], "ymax": [8, 10, 11, 77, 183, 185, 188, 189, 197, 205, 256, 289], "set_titl": [8, 10, 14, 25, 27, 31, 32, 42, 43, 45, 53, 56, 59, 63, 64, 74, 79, 89, 91, 100, 106, 115, 116, 125, 127, 129, 130, 158, 161, 162, 166, 167, 168, 175, 176, 185, 187, 194, 196, 197, 198, 204, 217, 218, 221, 222, 228, 230, 231, 234, 235, 241, 250, 251, 252, 253, 256, 258, 259, 263, 267, 268, 274, 276, 280, 281, 286, 292, 293, 298, 299, 300, 301, 302, 303, 306, 310, 314, 315, 323, 334, 335, 336, 339, 344], "autolabel": [8, 120], "attach": [8, 120, 339, 414, 821, 999, 1009], "rect": [8, 52, 120, 175], "height": [8, 14, 53, 98, 119, 146, 169, 298, 303, 339, 397, 471, 472, 484, 564], "get_height": [8, 120], "get_x": [8, 120], "get_width": [8, 120], "va": [8, 120, 267, 284, 286, 333], "setp": [8, 10, 180, 267, 270], "rotat": [8, 40, 93, 97, 100, 107, 121, 131, 164, 169, 220, 267, 268, 274, 326, 333, 394, 396, 401, 403, 482, 510, 519, 528, 592, 675, 856, 887, 953, 1009, 1010], "read": [8, 17, 95, 217, 263, 306, 307, 308, 310, 354, 361, 365, 368, 369, 370, 371, 373, 374, 377, 378, 379, 391, 402, 403, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 597, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 908, 946, 953, 957, 958, 977, 981, 992, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "feat": [8, 10, 399], "extr": 8, "hash": [8, 108, 133, 164, 340, 341, 354, 356, 359, 367, 369, 377, 398, 492, 522, 535, 544, 559, 560, 567, 618, 811, 924, 949, 992, 994, 999, 1002, 1005], "vect": [8, 69, 257, 318, 399, 992], "988": [8, 15], "plot_out_of_core_classif": [8, 15], "illustr": [9, 23, 24, 26, 31, 33, 52, 55, 56, 69, 70, 73, 74, 77, 79, 85, 91, 97, 101, 109, 110, 113, 117, 120, 124, 126, 128, 129, 141, 146, 148, 149, 150, 151, 154, 155, 156, 157, 159, 164, 167, 168, 172, 185, 192, 193, 196, 198, 200, 204, 210, 213, 214, 217, 218, 220, 222, 225, 227, 228, 230, 231, 233, 256, 263, 268, 269, 277, 290, 303, 305, 306, 308, 317, 326, 327, 331, 332, 334, 335, 340, 341, 347, 350, 354, 364, 367, 371, 374, 378, 394, 396, 398, 399, 493, 588, 589, 591, 592, 593, 597, 600, 601, 825, 946, 953, 957, 960, 963, 969, 970, 971, 972, 981, 983], "robust": [9, 60, 62, 76, 82, 122, 162, 164, 166, 167, 174, 198, 213, 215, 225, 298, 356, 364, 368, 374, 391, 398, 399, 427, 448, 449, 452, 453, 454, 455, 502, 512, 537, 538, 627, 635, 648, 649, 656, 657, 727, 806, 837, 851, 853, 854, 864, 870, 910, 957, 961, 963, 967, 970, 971, 977, 979, 981, 993, 994, 998, 999, 1001, 1002, 1003, 1004, 1005], "covari": [9, 12, 29, 33, 35, 78, 82, 84, 103, 106, 125, 149, 156, 225, 240, 242, 245, 246, 247, 248, 357, 375, 379, 391, 394, 396, 401, 460, 461, 462, 463, 482, 493, 497, 505, 510, 512, 515, 519, 524, 526, 527, 528, 541, 588, 589, 591, 600, 601, 622, 623, 628, 632, 634, 660, 661, 664, 667, 671, 772, 773, 774, 793, 956, 963, 967, 979, 993, 994, 998, 1000, 1001, 1002, 1003, 1005, 1007], "wine": [9, 237, 303, 360, 488, 994], "kind": [9, 12, 24, 25, 74, 104, 129, 141, 166, 167, 246, 250, 252, 265, 308, 311, 323, 326, 339, 355, 356, 360, 362, 367, 368, 372, 377, 378, 389, 391, 394, 395, 396, 398, 399, 400, 466, 467, 481, 486, 487, 499, 502, 566, 610, 611, 679, 904, 953, 959, 964, 973, 1001, 1010, 1012, 1013], "tool": [9, 11, 254, 259, 350, 360, 361, 362, 365, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 381, 382, 385, 390, 391, 392, 393, 465, 670, 679, 946, 952, 953, 957, 963, 967, 972, 974, 977, 978, 981, 983, 992, 1005, 1008, 1011, 1012, 1013], "purpos": [9, 12, 16, 37, 85, 161, 210, 211, 212, 217, 219, 232, 244, 246, 252, 253, 326, 327, 339, 340, 350, 362, 367, 368, 378, 379, 380, 382, 384, 388, 391, 392, 396, 398, 399, 400, 401, 515, 524, 798, 799, 836, 954, 957, 958, 960, 963, 975, 977, 983, 1010, 1012], "awar": [9, 14, 109, 143, 158, 323, 339, 365, 368, 377, 380, 395, 399, 545, 546, 626, 632, 633, 634, 636, 637, 647, 658, 822, 851, 963, 967, 973, 995, 998, 999, 1012], "thing": [9, 218, 251, 339, 355, 356, 362, 366, 367, 368, 377, 391, 393, 399, 537, 538, 953, 967, 981, 1004], "trivial": [9, 198, 344, 367, 391, 792, 877, 880, 954, 978, 998], "dimens": [9, 12, 14, 37, 40, 53, 81, 84, 89, 95, 151, 153, 155, 157, 158, 167, 179, 194, 200, 219, 221, 225, 229, 230, 235, 242, 243, 280, 281, 285, 301, 339, 340, 341, 362, 364, 379, 390, 391, 396, 397, 401, 403, 422, 423, 425, 426, 427, 428, 431, 443, 444, 460, 461, 462, 471, 472, 493, 502, 503, 507, 508, 511, 519, 527, 560, 561, 562, 563, 565, 567, 575, 597, 600, 619, 622, 637, 668, 669, 670, 672, 673, 677, 741, 797, 816, 817, 821, 835, 867, 868, 869, 877, 878, 879, 880, 881, 895, 896, 897, 922, 928, 931, 947, 949, 951, 953, 954, 955, 958, 960, 961, 963, 969, 972, 983, 990, 991, 1005, 1007, 1008, 1010], "below": [9, 25, 26, 27, 32, 59, 69, 74, 79, 88, 89, 95, 114, 116, 117, 122, 141, 167, 179, 192, 193, 196, 198, 212, 213, 218, 222, 227, 236, 251, 254, 259, 261, 262, 263, 298, 302, 306, 307, 308, 309, 310, 311, 330, 331, 339, 348, 350, 355, 360, 361, 365, 367, 368, 370, 371, 375, 379, 382, 391, 393, 394, 395, 396, 398, 399, 400, 401, 427, 450, 451, 457, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 488, 509, 515, 520, 526, 560, 573, 574, 575, 576, 577, 578, 611, 624, 630, 636, 637, 645, 651, 653, 670, 677, 683, 720, 740, 772, 773, 774, 785, 788, 805, 836, 839, 849, 853, 858, 864, 946, 947, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 971, 972, 973, 974, 977, 985, 992, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "main": [9, 16, 32, 61, 85, 99, 119, 164, 225, 265, 305, 334, 339, 354, 355, 356, 360, 365, 367, 368, 370, 372, 374, 377, 378, 379, 381, 389, 390, 391, 396, 398, 399, 401, 481, 503, 508, 527, 528, 603, 691, 806, 946, 954, 956, 957, 964, 969, 978, 980, 989, 992, 998, 1001, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "empir": [9, 24, 25, 36, 67, 76, 79, 81, 82, 164, 214, 262, 298, 389, 395, 398, 401, 426, 428, 439, 448, 449, 453, 456, 457, 510, 512, 517, 519, 521, 527, 529, 543, 568, 581, 617, 627, 645, 649, 656, 657, 694, 699, 700, 701, 801, 811, 812, 813, 815, 834, 898, 931, 949, 951, 957, 959, 961, 969, 971, 993, 994], "heterogen": [9, 24, 68, 70, 75, 164, 167, 196, 238, 303, 306, 359, 361, 377, 443, 466, 522, 559, 569, 691, 836, 840, 875, 954, 964, 967, 977, 994, 1002, 1006, 1008, 1009], "mode": [9, 10, 46, 47, 79, 196, 225, 276, 278, 295, 306, 367, 369, 374, 375, 377, 388, 394, 398, 402, 423, 424, 426, 428, 431, 438, 441, 450, 451, 457, 460, 465, 486, 487, 535, 539, 542, 570, 573, 574, 576, 577, 578, 588, 605, 622, 623, 636, 637, 644, 646, 651, 652, 653, 654, 657, 660, 661, 667, 671, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 832, 875, 877, 880, 883, 885, 901, 911, 912, 914, 960, 963, 977, 983, 984, 991, 999, 1007, 1012], "stick": [9, 772, 956], "bias": [9, 27, 81, 98, 122, 128, 166, 168, 200, 261, 362, 381, 389, 398, 502, 527, 832, 856, 866, 952, 956, 965, 971, 973], "yet": [9, 56, 214, 246, 257, 341, 356, 362, 366, 377, 381, 382, 395, 396, 398, 399, 401, 427, 431, 440, 441, 554, 755, 941, 946, 953, 957, 963, 971, 978, 1007], "extent": [9, 30, 57, 151, 152, 153, 229, 332, 335, 420, 513, 674, 772, 957], "assum": [9, 56, 156, 162, 166, 185, 196, 214, 225, 228, 234, 247, 256, 265, 298, 341, 355, 366, 367, 368, 370, 372, 377, 378, 379, 381, 385, 388, 389, 391, 393, 395, 396, 398, 399, 401, 402, 407, 411, 417, 419, 424, 429, 436, 442, 448, 449, 450, 451, 452, 453, 454, 455, 481, 486, 487, 510, 520, 526, 527, 539, 540, 545, 546, 565, 566, 567, 569, 598, 610, 621, 622, 624, 625, 630, 636, 637, 638, 639, 640, 644, 645, 646, 649, 650, 654, 655, 656, 659, 663, 665, 666, 670, 687, 703, 712, 718, 733, 741, 746, 751, 755, 758, 774, 777, 778, 788, 812, 818, 819, 822, 823, 824, 826, 827, 832, 843, 856, 933, 934, 935, 947, 951, 953, 955, 956, 957, 959, 960, 962, 963, 964, 967, 971, 972, 973, 1004, 1010], "parametr": [9, 24, 25, 81, 228, 280, 302, 309, 389, 392, 397, 398, 417, 529, 531, 613, 663, 674, 852, 863, 906, 907, 953, 956, 959, 960, 967, 970, 973, 1006, 1008, 1011], "therefor": [9, 13, 24, 37, 52, 53, 70, 71, 74, 79, 85, 100, 105, 110, 113, 115, 122, 127, 129, 145, 168, 196, 212, 213, 241, 246, 247, 257, 259, 276, 294, 298, 314, 326, 335, 339, 340, 348, 354, 361, 365, 371, 377, 391, 392, 393, 395, 396, 398, 399, 417, 474, 513, 527, 529, 531, 532, 537, 538, 542, 543, 582, 584, 636, 637, 643, 646, 649, 654, 656, 657, 679, 690, 712, 734, 772, 836, 837, 849, 853, 864, 875, 876, 947, 951, 953, 954, 957, 959, 960, 961, 962, 965, 967, 972, 973, 978, 983, 990, 991, 992, 1007, 1008, 1011, 1012, 1013], "minimum": [9, 56, 79, 122, 123, 145, 185, 206, 229, 266, 282, 283, 368, 375, 382, 384, 388, 391, 398, 399, 421, 425, 429, 433, 435, 448, 449, 452, 453, 454, 455, 489, 491, 519, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 572, 605, 609, 610, 613, 615, 646, 649, 654, 656, 657, 660, 661, 670, 683, 702, 756, 757, 777, 778, 797, 812, 833, 834, 845, 846, 849, 851, 855, 868, 869, 882, 883, 884, 885, 886, 892, 895, 896, 899, 915, 954, 957, 961, 963, 967, 969, 973, 998, 1001, 1005, 1006, 1010, 1011], "determin": [9, 11, 13, 19, 46, 79, 112, 154, 166, 175, 176, 192, 199, 256, 298, 303, 341, 348, 350, 366, 367, 368, 375, 378, 379, 388, 389, 391, 395, 396, 398, 399, 400, 401, 412, 417, 421, 422, 423, 425, 426, 428, 429, 435, 438, 439, 440, 444, 448, 449, 451, 452, 453, 454, 455, 460, 461, 462, 466, 469, 470, 473, 475, 481, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 515, 517, 520, 521, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 543, 545, 546, 548, 560, 561, 562, 566, 569, 572, 580, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 605, 613, 614, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 665, 667, 668, 670, 671, 672, 685, 689, 700, 706, 707, 715, 760, 761, 762, 764, 765, 768, 774, 776, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 803, 807, 809, 810, 812, 819, 821, 822, 827, 832, 833, 834, 840, 841, 849, 850, 851, 853, 864, 875, 876, 878, 881, 884, 886, 889, 910, 922, 926, 928, 931, 946, 949, 951, 956, 960, 962, 963, 967, 970, 971, 973, 983, 998, 1003, 1006, 1007, 1009, 1010, 1011], "concentr": [9, 100, 110, 127, 154, 164, 222, 240, 247, 248, 300, 316, 363, 367, 398, 401, 423, 497, 772, 956, 963], "cluster": [9, 18, 20, 22, 24, 42, 43, 46, 48, 50, 51, 53, 54, 56, 58, 60, 61, 67, 79, 90, 102, 112, 118, 125, 169, 222, 241, 242, 243, 244, 257, 282, 283, 285, 301, 307, 311, 328, 338, 339, 341, 342, 356, 357, 360, 362, 364, 367, 368, 371, 377, 379, 386, 397, 399, 405, 406, 409, 466, 480, 481, 482, 489, 490, 491, 492, 493, 500, 508, 519, 522, 542, 544, 567, 568, 569, 669, 670, 673, 682, 683, 688, 695, 697, 702, 708, 713, 714, 732, 734, 755, 756, 763, 767, 768, 770, 772, 773, 828, 829, 837, 841, 848, 856, 904, 906, 919, 925, 941, 947, 954, 956, 960, 963, 965, 967, 970, 974, 977, 978, 981, 983, 986, 989, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "outli": [9, 79, 379, 448, 453, 953, 963], "skew": [9, 122, 199, 229, 298, 359, 395, 617, 618, 619, 620, 852, 863, 953, 967, 994, 1001, 1005], "Of": [9, 25, 27, 161, 354, 368, 391, 399, 947], "screen": [9, 1011], "presenc": [9, 59, 61, 79, 80, 298, 365, 379, 393, 396, 690, 703, 733, 746, 805, 839, 847, 849, 941, 947, 953, 957, 958, 971, 1001, 1002, 1004, 1008, 1010, 1012], "mixtur": [9, 44, 56, 243, 244, 248, 357, 362, 363, 379, 391, 396, 397, 401, 601, 774, 977, 978, 993, 994, 998, 1002, 1003, 1004, 1005], "univari": [9, 36, 67, 71, 73, 140, 141, 147, 164, 211, 321, 337, 359, 390, 391, 392, 399, 425, 482, 503, 508, 570, 573, 574, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 605, 606, 607, 608, 623, 774, 779, 798, 802, 836, 837, 846, 851, 855, 856, 875, 880, 953, 972, 974, 979, 991, 994, 998, 1004], "appli": [9, 14, 19, 25, 27, 32, 40, 44, 46, 47, 55, 57, 61, 70, 72, 74, 85, 95, 96, 102, 104, 106, 115, 122, 142, 149, 166, 168, 185, 201, 210, 217, 218, 219, 225, 230, 256, 257, 259, 268, 274, 285, 298, 302, 303, 307, 326, 341, 348, 350, 354, 359, 367, 368, 374, 377, 378, 379, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 401, 403, 420, 431, 441, 443, 444, 446, 448, 453, 460, 461, 462, 463, 486, 487, 494, 495, 496, 502, 509, 510, 511, 512, 513, 515, 517, 519, 520, 521, 526, 527, 528, 531, 532, 535, 536, 537, 538, 542, 543, 544, 566, 567, 568, 569, 605, 610, 611, 616, 617, 619, 620, 636, 637, 646, 654, 655, 656, 669, 677, 679, 685, 703, 733, 735, 736, 758, 765, 767, 768, 774, 788, 802, 805, 811, 812, 813, 814, 815, 825, 835, 836, 845, 852, 853, 856, 860, 861, 863, 864, 865, 866, 871, 882, 883, 884, 885, 886, 895, 901, 904, 911, 912, 929, 947, 949, 953, 954, 955, 956, 957, 959, 961, 963, 967, 971, 972, 973, 974, 976, 981, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012], "ellipticenvelop": [9, 225, 449, 452, 453, 454, 455, 541, 963, 998, 1001, 1005, 1006, 1011], "oneclasssvm": [9, 11, 16, 210, 225, 309, 325, 541, 655, 822, 963, 971, 972, 1000, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "font_manag": [9, 80, 282, 325], "load_win": [9, 237, 303, 820, 828, 995, 1009], "support_fract": [9, 448, 453], "contamin": [9, 79, 80, 225, 234, 282, 283, 448, 541, 822, 963, 1006], "ocsvm": [9, 210], "legend1": 9, "legend2": 9, "x1": [9, 12, 16, 34, 84, 90, 112, 121, 152, 208, 220, 234, 298, 323, 368, 379, 411, 443, 487, 545, 546, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 677, 741, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 991], "frontier": [9, 210, 282, 325, 963, 990], "xx1": [9, 112, 609], "yy1": 9, "meshgrid": [9, 11, 16, 26, 30, 34, 42, 57, 79, 118, 127, 150, 151, 152, 153, 155, 167, 207, 208, 209, 210, 222, 225, 245, 282, 289, 292, 300, 301, 319, 325, 326, 331, 332, 335, 336, 609], "500": [9, 10, 44, 50, 56, 59, 60, 62, 84, 85, 103, 105, 114, 123, 145, 149, 172, 209, 210, 218, 226, 235, 236, 239, 241, 242, 246, 256, 259, 269, 276, 282, 288, 302, 307, 325, 332, 336, 354, 398, 448, 449, 453, 454, 455, 460, 461, 462, 589, 591, 592, 594, 599, 602, 603, 628, 629, 632, 633, 634, 658, 660, 661, 834, 946, 972], "clf_name": [9, 10, 339], "z1": 9, "decision_funct": [9, 11, 16, 25, 27, 55, 112, 125, 138, 208, 209, 210, 226, 234, 263, 282, 283, 292, 300, 324, 325, 326, 330, 331, 332, 336, 368, 379, 389, 398, 417, 448, 527, 528, 531, 533, 537, 539, 541, 545, 571, 572, 609, 610, 611, 636, 637, 644, 646, 652, 653, 654, 655, 676, 678, 680, 685, 698, 703, 704, 712, 716, 717, 719, 733, 759, 765, 766, 769, 774, 777, 778, 788, 797, 804, 805, 806, 807, 822, 836, 843, 872, 875, 877, 879, 880, 953, 957, 963, 964, 971, 972, 990, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "c_": [9, 11, 16, 25, 26, 27, 30, 34, 57, 79, 96, 101, 118, 121, 126, 127, 136, 138, 151, 194, 209, 210, 212, 225, 234, 282, 301, 319, 325, 326, 330, 332, 335, 336, 391, 637, 692, 693, 696, 957, 987, 990, 991], "contour": [9, 11, 16, 34, 46, 47, 79, 118, 138, 152, 153, 155, 207, 208, 209, 210, 225, 245, 282, 289, 324, 325, 327, 328, 330, 331, 332, 364, 609, 610, 963, 971], "linewidth": [9, 24, 33, 34, 37, 40, 57, 72, 77, 85, 91, 111, 122, 126, 149, 153, 157, 185, 186, 190, 191, 192, 194, 197, 199, 202, 210, 213, 225, 232, 234, 265, 269, 282, 286, 299, 307, 324, 325, 327, 332, 346, 988], "legend1_values_list": 9, "legend1_keys_list": 9, "cloud": [9, 84, 93, 101, 107, 164, 374, 396, 511, 519, 670, 957, 976, 977, 991], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 26, 39, 45, 69, 72, 73, 102, 122, 124, 194, 202, 225, 233, 243, 254, 255, 257, 260, 263, 265, 276, 280, 300, 310, 318, 326, 340, 341, 356, 359, 361, 368, 377, 379, 392, 395, 402, 403, 405, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 474, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 675, 676, 678, 679, 680, 691, 739, 742, 748, 756, 757, 772, 773, 774, 777, 778, 780, 785, 786, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 890, 900, 901, 917, 946, 957, 967, 987, 992, 994, 998, 1004, 1005], "boxstyl": [9, 300], "fc": [9, 281, 362], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 26, 49, 263, 289, 331, 382, 624, 625, 628, 630, 631, 632, 638, 639, 640, 641, 642, 659, 660, 661, 662, 664], "xycoord": [9, 26], "textcoord": [9, 172], "xytext": [9, 26, 172], "bbox": [9, 12, 34, 45, 102, 241, 242, 243, 246, 247, 300], "arrowprop": [9, 26], "prop": [9, 33, 72, 80, 202, 243, 282, 325, 348], "fontproperti": [9, 80, 282, 325], "ash": [9, 364, 1001, 1004], "malic_acid": 9, "abil": [9, 60, 79, 122, 155, 161, 166, 168, 196, 214, 225, 339, 356, 382, 398, 399, 759, 760, 761, 764, 954, 957, 960, 963, 973, 978, 998, 1000, 1005, 1007, 1011, 1012], "locat": [9, 25, 53, 54, 71, 79, 80, 190, 289, 308, 326, 360, 365, 367, 371, 374, 375, 382, 391, 393, 397, 427, 439, 440, 448, 449, 450, 451, 452, 453, 454, 455, 466, 478, 479, 482, 483, 490, 493, 942, 947, 953, 958, 963, 967, 973, 1006], "hard": [9, 196, 225, 229, 256, 258, 356, 366, 377, 379, 391, 396, 399, 512, 519, 547, 654, 877, 878, 879, 880, 881, 953, 970, 972, 973, 978, 990, 991, 992, 1007, 1008], "due": [9, 26, 27, 53, 59, 74, 113, 149, 166, 167, 175, 187, 194, 196, 198, 213, 214, 229, 242, 264, 265, 303, 339, 340, 341, 367, 372, 379, 382, 389, 391, 395, 396, 398, 401, 423, 426, 438, 513, 517, 521, 522, 552, 649, 774, 777, 778, 782, 784, 788, 797, 798, 799, 801, 804, 808, 809, 841, 845, 846, 856, 947, 953, 954, 956, 957, 958, 960, 964, 971, 978, 991, 998, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "banana": [9, 957], "anywai": [9, 339, 368, 643, 663, 664], "rid": [9, 971], "difficulti": [9, 27, 214, 298, 356, 367, 389, 833, 834, 956, 960], "adjust": [9, 36, 38, 49, 57, 67, 77, 122, 164, 225, 237, 257, 306, 318, 334, 340, 373, 391, 396, 398, 399, 502, 531, 532, 535, 537, 539, 540, 542, 636, 637, 644, 646, 652, 653, 654, 682, 683, 686, 692, 693, 732, 734, 763, 770, 811, 812, 814, 815, 846, 867, 868, 875, 876, 877, 880, 883, 885, 901, 956, 957, 961, 967, 990, 995, 998, 1004], "bandwidth": [9, 44, 62, 231, 280, 281, 289, 377, 379, 391, 397, 427, 437, 440, 816, 817, 821, 950, 963, 977, 1009, 1013], "compromis": [9, 167, 354, 367, 625, 657, 960, 1001], "risk": [9, 196, 214, 299, 334, 350, 366, 367, 379, 390, 395, 398, 545, 546, 860, 861, 863, 864, 865, 866, 953, 957, 981, 1005], "x2": [9, 16, 84, 90, 112, 121, 152, 208, 234, 368, 392, 566, 607, 677, 741, 991], "xx2": 9, "yy2": 9, "z2": 9, "legend2_values_list": 9, "legend2_keys_list": 9, "color_intens": 9, "flavanoid": [9, 364], "431": [9, 15, 364], "plot_outlier_detection_win": [9, 15], "goal": [10, 17, 52, 56, 85, 161, 167, 172, 196, 211, 214, 233, 234, 253, 254, 339, 355, 356, 362, 368, 371, 372, 379, 380, 381, 396, 398, 400, 520, 526, 568, 571, 716, 957, 960, 962, 963, 971, 972, 973, 975, 981, 983, 986, 990, 992, 1006], "boxplot": [10, 79, 123, 166, 169, 306], "defaultdict": [10, 19, 25, 169, 259, 340, 341], "gc": 10, "make_regress": [10, 74, 175, 177, 178, 182, 199, 200, 269, 307, 350, 363, 368, 369, 378, 532, 534, 538, 543, 613, 624, 625, 627, 629, 631, 633, 641, 642, 643, 645, 649, 657, 834, 876, 957, 958, 960], "randomforestregressor": [10, 128, 129, 132, 161, 162, 308, 378, 398, 535, 536, 538, 540, 544, 546, 548, 610, 611, 885, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "sgdregressor": [10, 207, 354, 356, 377, 390, 624, 627, 645, 649, 654, 657, 834, 876, 881, 953, 971, 1000, 1002, 1004, 1005, 1006, 1009, 1011, 1012, 1013], "shuffl": [10, 14, 20, 21, 24, 27, 32, 48, 59, 60, 95, 109, 116, 118, 129, 162, 204, 205, 210, 225, 257, 261, 262, 269, 276, 314, 315, 316, 317, 328, 339, 340, 350, 362, 375, 379, 386, 448, 453, 466, 467, 469, 470, 473, 475, 481, 489, 490, 491, 492, 493, 497, 500, 502, 509, 515, 517, 518, 524, 525, 531, 532, 533, 534, 542, 543, 545, 546, 580, 636, 637, 644, 645, 646, 650, 652, 654, 655, 656, 665, 774, 776, 777, 778, 779, 780, 788, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 806, 833, 834, 875, 876, 877, 880, 911, 912, 926, 928, 952, 953, 958, 965, 971, 972, 987, 992, 994, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "atomic_benchmark_estim": 10, "verbos": [10, 42, 50, 54, 63, 69, 71, 73, 129, 183, 257, 294, 295, 298, 309, 318, 339, 365, 370, 379, 385, 420, 423, 426, 428, 431, 433, 438, 441, 443, 446, 450, 451, 457, 509, 514, 515, 516, 517, 518, 521, 523, 524, 525, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 571, 572, 605, 608, 610, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 668, 670, 672, 742, 755, 772, 773, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 805, 807, 810, 825, 832, 833, 834, 835, 836, 837, 838, 872, 875, 876, 877, 878, 879, 880, 881, 978, 1000, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1013], "n_instanc": [10, 611], "zero": [10, 11, 13, 27, 34, 37, 40, 41, 52, 54, 78, 80, 81, 94, 95, 98, 100, 109, 112, 113, 121, 123, 124, 128, 143, 162, 175, 182, 187, 189, 190, 195, 196, 197, 200, 201, 202, 206, 211, 214, 229, 232, 241, 245, 247, 253, 256, 261, 265, 266, 281, 298, 303, 307, 308, 334, 340, 341, 344, 348, 354, 355, 362, 368, 372, 379, 389, 390, 391, 393, 396, 398, 399, 400, 401, 404, 431, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 465, 475, 486, 487, 501, 504, 505, 509, 510, 513, 515, 516, 517, 518, 520, 521, 525, 526, 530, 535, 536, 537, 538, 539, 540, 542, 543, 544, 559, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 589, 614, 617, 621, 622, 623, 628, 636, 637, 642, 643, 644, 646, 649, 654, 655, 656, 663, 664, 681, 687, 690, 691, 693, 694, 702, 706, 707, 711, 715, 717, 723, 760, 761, 762, 764, 771, 772, 789, 790, 793, 794, 805, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 839, 846, 848, 849, 851, 852, 853, 855, 856, 861, 862, 863, 864, 868, 875, 883, 884, 885, 886, 910, 943, 947, 953, 955, 956, 959, 960, 961, 967, 968, 969, 971, 972, 973, 983, 990, 992, 998, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "atomic_benchmark": 10, "percentil": [10, 122, 238, 298, 354, 570, 573, 574, 576, 577, 578, 581, 584, 610, 611, 725, 967, 1003, 1011], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 50, 73, 120, 132, 162, 197, 234, 253, 260, 303, 326, 344, 354, 365, 367, 377, 378, 392, 394, 398, 401, 428, 461, 516, 533, 534, 535, 536, 541, 542, 543, 544, 548, 663, 664, 774, 777, 778, 788, 800, 811, 812, 813, 814, 815, 946, 957, 992, 1006, 1008], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 33, 65, 78, 80, 121, 146, 149, 155, 156, 167, 172, 198, 251, 256, 257, 268, 315, 334, 340, 341, 368, 375, 379, 388, 389, 390, 391, 396, 399, 400, 401, 566, 571, 585, 586, 593, 605, 612, 637, 779, 789, 790, 793, 901, 947, 956, 994, 1006, 1008], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 37, 44, 57, 63, 100, 112, 114, 118, 122, 138, 153, 157, 176, 179, 188, 205, 208, 214, 229, 230, 251, 256, 263, 265, 319, 322, 324, 326, 327, 328, 330, 332, 340, 345, 362, 377, 379, 388, 389, 392, 395, 399, 401, 417, 420, 421, 425, 429, 436, 442, 457, 471, 486, 487, 560, 570, 573, 574, 576, 577, 578, 588, 591, 592, 593, 595, 597, 598, 600, 601, 603, 605, 610, 611, 621, 670, 678, 683, 684, 685, 693, 708, 717, 735, 736, 740, 743, 746, 747, 748, 749, 750, 751, 753, 755, 756, 757, 758, 759, 763, 804, 816, 817, 890, 957, 958, 959, 960, 967, 973, 998, 1010, 1011, 1013], "contain": [10, 19, 24, 27, 33, 40, 49, 55, 57, 69, 70, 112, 114, 117, 125, 155, 166, 167, 169, 172, 187, 214, 225, 234, 235, 238, 246, 254, 256, 262, 265, 266, 274, 282, 283, 285, 298, 309, 315, 318, 339, 340, 360, 361, 362, 364, 367, 368, 370, 371, 372, 373, 374, 375, 378, 379, 385, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 403, 405, 413, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 480, 481, 482, 486, 487, 488, 492, 493, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 678, 679, 680, 687, 690, 712, 713, 714, 745, 749, 756, 757, 765, 769, 772, 773, 774, 777, 778, 780, 788, 792, 793, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 894, 895, 896, 915, 916, 918, 922, 926, 946, 947, 949, 955, 958, 961, 963, 967, 968, 970, 973, 983, 992, 998, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "generate_dataset": 10, "coef": [10, 54, 105, 166, 175, 180, 183, 187, 188, 190, 195, 199, 200, 201, 205, 212, 238, 269, 294, 335, 502, 624, 625, 627, 630, 631, 637, 638, 639, 640, 641, 647, 658, 659, 660, 661, 662, 663, 664, 665, 961], "random_se": [10, 91, 118], "x_scaler": 10, "y_scaler": 10, "ok": [10, 367, 963], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 289, 318, 354, 685, 691, 706, 707, 715, 760, 761, 764, 765, 957, 998, 1006, 1007, 1013], "bp": [10, 123, 146, 184, 185, 364, 965], "cls_info": 10, "estimator_conf": 10, "box": [10, 30, 167, 168, 218, 298, 302, 373, 396, 398, 490, 533, 534, 852, 863, 887, 889, 957, 958, 964, 967, 973, 977, 983, 1006], "whisker": 10, "flier": 10, "red": [10, 11, 26, 33, 34, 59, 79, 91, 95, 96, 97, 113, 129, 132, 158, 172, 175, 176, 186, 194, 222, 235, 251, 262, 289, 293, 299, 303, 316, 326, 347, 365, 379, 391, 396, 958], "marker": [10, 11, 17, 27, 30, 34, 37, 38, 42, 52, 57, 58, 59, 62, 63, 84, 90, 91, 97, 101, 128, 156, 157, 172, 184, 189, 191, 193, 194, 196, 198, 199, 211, 213, 218, 241, 243, 244, 251, 256, 258, 259, 260, 298, 303, 316, 344, 367, 370, 399, 1006, 1008, 1009], "linestyl": [10, 11, 16, 33, 59, 72, 79, 103, 105, 110, 121, 131, 135, 138, 149, 152, 154, 156, 158, 168, 181, 183, 184, 185, 196, 197, 198, 202, 206, 208, 209, 214, 232, 234, 253, 255, 259, 260, 265, 281, 289, 293, 299, 324, 327, 328, 330, 331, 332, 988], "major": [10, 14, 263, 298, 302, 306, 307, 308, 309, 310, 311, 341, 354, 362, 366, 367, 369, 372, 377, 380, 391, 395, 397, 399, 401, 529, 547, 548, 672, 706, 707, 715, 760, 761, 764, 887, 889, 957, 960, 971, 978, 981, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 25], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 204, 373, 418, 676, 678, 680, 894], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 642, 663, 664, 953, 957], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 204, 219, 222, 276], "1e2": [10, 149, 156, 231, 247, 326, 723], "randomforest": [10, 118, 354, 398, 883, 884, 1003], "0001": [10, 135, 204, 254, 368, 403, 423, 426, 438, 450, 451, 457, 511, 516, 518, 525, 527, 528, 537, 538, 624, 625, 626, 627, 630, 631, 636, 637, 638, 639, 640, 641, 646, 647, 650, 652, 654, 656, 658, 665, 667, 671, 833, 834, 875, 876, 946], "250": [10, 64, 122, 172, 217, 471, 670, 946, 969, 1005], "613": [10, 15, 235, 239], "plot_prediction_lat": [10, 15], "conserv": [11, 560, 567, 867, 868, 956, 969], "biologi": 11, "south": [11, 166, 289, 397], "american": [11, 12, 69, 80, 362, 391, 393, 397, 398, 399, 448, 453, 708, 856], "mammal": 11, "past": [11, 371, 374, 377, 380, 395, 396, 398, 516, 533, 534, 656, 981, 984], "environment": [11, 214], "unsuccess": 11, "cast": [11, 53, 196, 218, 361, 379, 380, 399, 474, 622, 623, 624, 630, 634, 635, 638, 639, 640, 641, 642, 643, 651, 653, 924, 1005, 1006, 1007, 1008, 1011, 1013], "densiti": [11, 49, 59, 64, 74, 101, 105, 146, 164, 182, 196, 211, 214, 221, 225, 229, 240, 247, 248, 256, 262, 277, 282, 283, 290, 298, 326, 339, 364, 375, 379, 391, 398, 402, 410, 424, 427, 429, 431, 443, 446, 476, 480, 514, 519, 527, 528, 772, 773, 774, 816, 817, 821, 822, 868, 951, 953, 956, 960, 962, 963, 969, 977, 979, 983, 993, 994, 1000, 1002, 1006, 1007, 1013], "phillip": [11, 289, 476], "2006": [11, 289, 398, 401, 441, 476, 535, 536, 543, 544, 588, 589, 592, 597, 600, 627, 644, 645, 718, 765, 766, 772, 811, 868, 885, 886, 953, 957, 959, 962, 969, 970], "basemap": [11, 289], "coast": [11, 289], "line": [11, 17, 40, 59, 69, 95, 100, 121, 148, 159, 161, 162, 164, 166, 167, 184, 185, 186, 188, 191, 192, 194, 197, 198, 199, 204, 205, 207, 208, 225, 229, 230, 232, 234, 253, 260, 262, 263, 286, 289, 299, 308, 325, 330, 331, 335, 336, 339, 361, 362, 365, 367, 368, 370, 371, 372, 373, 374, 377, 396, 397, 398, 418, 465, 466, 467, 486, 487, 520, 531, 532, 533, 534, 588, 591, 592, 610, 648, 664, 679, 780, 925, 951, 957, 961, 964, 971, 977, 980, 990, 992, 1000, 1009, 1011], "nation": [11, 79, 289, 362, 823], "boundari": [11, 13, 25, 26, 27, 31, 34, 57, 59, 108, 112, 118, 127, 133, 150, 153, 164, 167, 179, 197, 225, 230, 232, 259, 279, 284, 286, 287, 289, 292, 298, 300, 313, 320, 323, 324, 326, 328, 335, 336, 345, 363, 389, 398, 399, 401, 429, 435, 482, 514, 527, 528, 547, 566, 567, 569, 609, 805, 818, 824, 826, 827, 828, 855, 871, 872, 879, 880, 883, 899, 951, 960, 963, 967, 970, 971, 972, 998, 1000, 1002, 1011, 1012, 1013], "america": [11, 12, 79, 289, 823, 967], "bradypu": [11, 289, 476], "variegatu": [11, 289, 476], "brown": [11, 91, 289, 476, 606, 947, 1003, 1005, 1006, 1007, 1010], "throat": [11, 289, 476], "sloth": [11, 289, 476], "microryzomi": [11, 289, 476], "minutu": [11, 289, 476], "known": [11, 17, 25, 27, 39, 49, 56, 57, 80, 104, 105, 129, 154, 156, 162, 196, 197, 214, 225, 256, 258, 265, 285, 289, 299, 309, 314, 323, 340, 356, 364, 365, 367, 374, 377, 379, 382, 387, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 401, 418, 442, 460, 462, 476, 486, 487, 522, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 566, 567, 569, 572, 587, 600, 611, 636, 637, 650, 660, 661, 672, 682, 688, 691, 696, 706, 720, 732, 734, 770, 805, 811, 812, 813, 814, 815, 818, 823, 826, 832, 859, 883, 884, 885, 886, 947, 949, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 967, 972, 973, 983, 988, 990, 991], "forest": [11, 27, 31, 108, 115, 118, 124, 125, 127, 129, 132, 133, 161, 164, 165, 170, 172, 225, 234, 253, 289, 308, 339, 350, 360, 378, 379, 389, 400, 442, 443, 469, 473, 474, 476, 493, 533, 534, 535, 536, 538, 541, 542, 543, 544, 608, 612, 802, 809, 836, 850, 879, 883, 884, 885, 946, 947, 958, 965, 977, 978, 979, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007], "rice": [11, 289, 476, 1011], "rat": [11, 289, 476], "rodent": [11, 289, 476], "live": [11, 69, 166, 289, 367, 391, 476, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "peru": [11, 289, 476], "colombia": [11, 289, 476], "ecuador": [11, 289, 476], "venezuela": [11, 289, 476], "entropi": [11, 236, 268, 289, 308, 314, 315, 350, 391, 398, 403, 476, 511, 535, 542, 585, 586, 636, 695, 713, 714, 718, 770, 883, 885, 953, 954, 957, 961, 973, 1000, 1002, 1006, 1007, 1012], "anderson": [11, 289, 476, 1004, 1010], "schapir": [11, 289, 398, 476, 531, 532], "ecolog": [11, 289, 476], "190": [11, 113, 121, 133, 214, 265, 289, 372, 476], "231": [11, 289, 391, 402, 424, 476, 562], "259": [11, 219, 246, 248, 289, 398, 476, 545, 546], "________________________________________________________________________________": [11, 54, 339], "coastlin": [11, 289, 364], "coverag": [11, 122, 196, 214, 289, 369, 387, 476, 605, 698], "area": [11, 34, 125, 196, 214, 234, 253, 256, 263, 265, 266, 326, 331, 335, 364, 367, 370, 377, 389, 391, 398, 399, 680, 684, 685, 686, 719, 765, 766, 954, 957, 960, 976, 1000], "roc": [11, 25, 115, 164, 224, 226, 234, 235, 239, 249, 272, 373, 389, 395, 482, 488, 542, 636, 680, 684, 685, 686, 704, 719, 759, 765, 766, 793, 802, 805, 843, 880, 963, 995, 1000, 1001, 1003, 1004, 1008, 1010], "868443": 11, "993919": 11, "elaps": [11, 47, 66, 116, 117, 354, 443, 446, 547, 548, 835, 836, 837, 838], "astro": [11, 156, 217, 244], "washington": [11, 156, 217, 244, 281, 289], "bunch": [11, 360, 361, 362, 443, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 488, 545, 546, 547, 548, 610, 611, 612, 835, 836, 883, 884, 885, 886, 981, 992, 1003, 1005, 1008, 1010], "fetch_species_distribut": [11, 289, 1007], "ll": [11, 117, 251, 289, 367, 377, 510, 519, 960, 973, 983], "otherwis": [11, 55, 61, 112, 158, 162, 177, 198, 204, 289, 350, 356, 368, 370, 372, 379, 391, 393, 395, 399, 401, 414, 415, 416, 418, 420, 421, 422, 425, 430, 432, 433, 443, 446, 460, 461, 462, 463, 474, 504, 513, 514, 516, 518, 519, 525, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 568, 575, 580, 588, 589, 592, 609, 610, 611, 622, 623, 624, 630, 636, 637, 638, 640, 643, 644, 645, 646, 651, 653, 654, 655, 656, 663, 664, 668, 670, 674, 675, 676, 678, 680, 681, 685, 687, 691, 692, 701, 703, 704, 705, 706, 707, 715, 718, 729, 731, 732, 733, 751, 755, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 776, 777, 778, 779, 780, 788, 792, 793, 800, 805, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 831, 833, 834, 840, 841, 843, 847, 856, 857, 860, 861, 862, 864, 865, 866, 875, 877, 878, 879, 880, 881, 890, 896, 898, 911, 912, 919, 941, 943, 952, 953, 954, 957, 960, 961, 963, 964, 967, 969, 971, 972, 977, 981, 983, 1000, 1006, 1007, 1008, 1011], "improvis": [11, 289], "mpl_toolkit": [11, 45, 66, 89, 101, 102, 167, 193, 217, 219, 289], "except": [11, 16, 44, 53, 98, 204, 211, 225, 264, 276, 289, 293, 294, 298, 300, 311, 357, 360, 367, 368, 369, 370, 371, 377, 379, 385, 388, 392, 395, 396, 398, 399, 401, 412, 439, 444, 460, 461, 462, 487, 532, 534, 535, 536, 538, 540, 542, 543, 546, 548, 589, 605, 608, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 665, 689, 755, 781, 809, 810, 816, 817, 819, 822, 827, 833, 834, 840, 854, 856, 876, 878, 881, 884, 886, 916, 943, 953, 957, 972, 983, 991, 992, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "importerror": [11, 16, 53, 98, 276, 289, 374, 474], "construct_grid": [11, 289], "object": [11, 13, 14, 19, 26, 44, 50, 61, 65, 69, 70, 98, 129, 135, 144, 145, 154, 164, 167, 192, 196, 212, 214, 224, 235, 237, 238, 239, 254, 268, 289, 309, 310, 314, 340, 341, 350, 360, 361, 362, 367, 369, 371, 372, 373, 375, 378, 379, 380, 385, 391, 392, 393, 396, 399, 400, 401, 405, 407, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 689, 696, 709, 710, 719, 735, 736, 758, 759, 766, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 890, 895, 896, 897, 898, 899, 902, 906, 908, 918, 919, 920, 922, 924, 925, 942, 943, 945, 953, 954, 955, 956, 960, 963, 964, 967, 970, 971, 972, 977, 978, 983, 984, 986, 987, 990, 992, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "func": [11, 74, 115, 166, 176, 214, 289, 367, 392, 444, 677, 840, 967, 1002, 1004, 1006, 1007], "xgrid": [11, 289], "ygrid": [11, 289], "correspond": [11, 13, 16, 26, 32, 41, 53, 64, 77, 81, 97, 113, 116, 118, 125, 142, 145, 146, 150, 155, 158, 166, 185, 188, 196, 197, 205, 214, 226, 231, 238, 246, 255, 257, 259, 260, 265, 266, 289, 303, 308, 309, 310, 340, 344, 345, 350, 355, 361, 362, 363, 366, 367, 368, 370, 373, 374, 378, 379, 388, 389, 391, 393, 394, 395, 396, 398, 399, 400, 401, 406, 411, 417, 419, 421, 425, 427, 430, 432, 438, 440, 442, 443, 451, 454, 460, 461, 462, 468, 469, 470, 471, 472, 473, 474, 512, 519, 522, 523, 524, 527, 528, 530, 533, 535, 537, 538, 539, 542, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 595, 608, 610, 611, 613, 621, 624, 625, 626, 630, 636, 637, 638, 639, 640, 646, 647, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 665, 668, 669, 670, 672, 681, 688, 691, 701, 702, 711, 715, 729, 731, 751, 755, 759, 765, 766, 769, 771, 772, 773, 774, 777, 778, 780, 788, 797, 805, 808, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 833, 834, 843, 847, 849, 850, 853, 864, 877, 880, 883, 884, 885, 886, 900, 906, 932, 946, 947, 949, 950, 951, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 967, 968, 971, 972, 976, 983, 989, 992, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "coordin": [11, 12, 13, 54, 100, 128, 153, 181, 217, 257, 289, 354, 396, 401, 423, 426, 427, 428, 440, 450, 451, 457, 509, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 528, 592, 624, 625, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 659, 660, 661, 662, 666, 667, 668, 671, 672, 684, 741, 746, 875, 953, 954, 972, 990, 998, 1001, 1002, 1003, 1007, 1009, 1011, 1012], "corner": [11, 13, 26, 53, 253, 257, 265, 266, 289, 367, 476, 887, 889, 957, 1012], "cell": [11, 12, 26, 32, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 289, 295, 307, 308, 310, 311, 316, 348, 364, 371, 670, 957, 958, 1004, 1012], "xmin": [11, 77, 186, 188, 205, 206, 289], "x_left_lower_corn": [11, 289, 476], "grid_siz": [11, 60, 289, 476], "xmax": [11, 77, 186, 188, 205, 206, 289], "nx": [11, 34, 289, 476], "ymin": [11, 77, 183, 185, 188, 189, 197, 205, 256, 289], "y_left_lower_corn": [11, 289, 476], "ny": [11, 34, 255, 289, 364, 476, 947, 969], "create_species_bunch": 11, "species_nam": [11, 289], "record": [11, 96, 114, 168, 341, 354, 367, 391, 393, 429, 436, 476, 598, 621, 670, 748, 751, 755, 756, 757, 758, 799, 822, 1011, 1012], "join": [11, 12, 19, 161, 214, 256, 300, 362, 380, 442, 992, 998, 1006], "ascii": [11, 289, 399, 465, 566, 567, 569], "pt": [11, 362, 400, 852, 967], "desir": [11, 24, 112, 146, 162, 196, 198, 298, 302, 360, 367, 368, 370, 374, 385, 388, 391, 394, 395, 396, 400, 481, 516, 518, 522, 525, 545, 571, 580, 581, 642, 648, 663, 664, 686, 713, 816, 817, 821, 841, 843, 846, 847, 849, 850, 852, 853, 859, 861, 863, 864, 899, 926, 949, 951, 954, 960, 967, 971, 972, 973, 983, 998, 1006, 1007, 1008, 1011], "pts_": 11, "ix": [11, 265, 333], "searchsort": 11, "dd": [11, 12, 127, 289, 476], "ii": [11, 96, 167, 203, 251, 364, 399, 644, 645, 953, 967, 976], "lat": [11, 289, 476], "cov_": [11, 81], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "randint": [11, 37, 80, 91, 121, 162, 168, 220, 228, 233, 268, 308, 368, 371, 378, 778, 795, 811, 812, 813, 815, 946, 947], "land": [11, 289, 380, 398], "water": 11, "land_refer": [11, 289], "standard": [11, 12, 26, 32, 34, 60, 69, 70, 72, 79, 80, 85, 96, 110, 113, 115, 116, 117, 118, 125, 129, 146, 149, 154, 156, 158, 166, 175, 181, 185, 194, 196, 205, 217, 218, 219, 230, 246, 251, 254, 255, 256, 257, 259, 298, 303, 324, 339, 354, 355, 359, 360, 361, 363, 364, 365, 367, 368, 369, 371, 372, 375, 377, 379, 382, 385, 387, 391, 393, 394, 395, 399, 401, 447, 451, 466, 474, 479, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 502, 503, 508, 510, 513, 519, 530, 568, 572, 589, 612, 622, 623, 628, 629, 632, 633, 634, 642, 643, 650, 651, 652, 653, 654, 656, 665, 667, 671, 765, 780, 795, 813, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 840, 845, 846, 849, 852, 853, 854, 856, 863, 864, 865, 866, 873, 875, 876, 895, 946, 949, 953, 954, 957, 959, 960, 961, 963, 971, 972, 978, 981, 983, 988, 990, 991, 992, 994, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 289], "llcrnrlat": [11, 289], "urcrnrlat": [11, 289], "llcrnrlon": [11, 289], "urcrnrlon": [11, 289], "drawcoastlin": [11, 289], "drawcountri": [11, 289], "9998": [11, 289], "k": [11, 12, 16, 17, 24, 26, 30, 31, 36, 37, 38, 42, 49, 53, 55, 59, 62, 64, 67, 73, 74, 79, 89, 90, 91, 95, 102, 103, 109, 112, 118, 122, 125, 127, 128, 130, 131, 135, 138, 142, 143, 150, 152, 153, 157, 162, 164, 166, 167, 168, 178, 179, 181, 190, 193, 200, 208, 210, 229, 231, 232, 233, 241, 244, 256, 259, 260, 265, 266, 269, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 299, 300, 301, 302, 303, 306, 310, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 338, 339, 341, 342, 350, 355, 361, 362, 364, 367, 374, 375, 379, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 403, 420, 423, 426, 427, 428, 429, 430, 431, 432, 438, 439, 441, 448, 451, 466, 480, 482, 484, 490, 501, 509, 515, 519, 522, 523, 524, 527, 528, 531, 533, 535, 536, 537, 559, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 609, 617, 618, 626, 628, 629, 631, 632, 633, 634, 636, 637, 641, 642, 643, 644, 645, 647, 657, 658, 660, 661, 662, 663, 664, 666, 669, 673, 674, 682, 683, 686, 695, 703, 714, 720, 733, 735, 736, 738, 743, 746, 751, 752, 753, 754, 756, 768, 769, 770, 772, 773, 775, 779, 781, 782, 783, 786, 789, 790, 792, 793, 795, 800, 811, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 837, 841, 842, 843, 847, 848, 849, 851, 852, 856, 863, 868, 882, 890, 898, 907, 912, 931, 946, 947, 949, 950, 951, 953, 954, 955, 956, 959, 961, 962, 963, 965, 970, 971, 972, 973, 977, 980, 987, 993, 994, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "solid": [11, 16, 31, 33, 121, 152, 208, 209, 225, 289, 300, 981], "z": [11, 16, 34, 57, 101, 118, 138, 151, 153, 167, 206, 208, 209, 210, 217, 219, 225, 230, 245, 282, 289, 292, 300, 303, 319, 325, 326, 330, 331, 332, 336, 364, 388, 396, 398, 531, 532, 563, 617, 642, 649, 663, 664, 667, 671, 677, 701, 762, 856, 953, 954, 961, 962, 1013], "float64": [11, 13, 48, 53, 70, 121, 123, 124, 166, 167, 267, 310, 311, 355, 361, 367, 368, 379, 399, 457, 474, 475, 486, 487, 520, 559, 560, 567, 569, 619, 636, 651, 653, 715, 841, 849, 850, 877, 878, 880, 881, 884, 886, 893, 895, 928, 931, 933, 934, 935, 972, 983, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "idx": [11, 16, 19, 30, 45, 105, 112, 118, 130, 158, 167, 169, 180, 188, 195, 196, 205, 218, 234, 345, 392, 395], "9999": [11, 214, 289, 317, 476, 605, 1006], "coverages_land": 11, "contourf": [11, 16, 118, 210, 230, 282, 289, 292, 300, 301, 319, 325, 331, 336, 609, 610], "pts_train": 11, "pts_test": 11, "equal": [11, 12, 26, 37, 39, 53, 59, 79, 85, 110, 122, 152, 166, 197, 198, 200, 207, 213, 235, 243, 246, 250, 254, 256, 265, 286, 300, 326, 328, 335, 340, 362, 363, 367, 368, 379, 388, 389, 391, 395, 396, 398, 399, 404, 417, 420, 421, 422, 423, 425, 426, 428, 433, 438, 442, 448, 453, 458, 481, 490, 493, 497, 510, 511, 512, 517, 519, 521, 522, 527, 528, 529, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 566, 571, 572, 575, 577, 578, 585, 586, 603, 606, 607, 610, 611, 612, 613, 615, 619, 620, 623, 627, 636, 637, 649, 677, 681, 696, 698, 706, 745, 760, 764, 765, 769, 771, 774, 775, 777, 778, 787, 788, 792, 797, 804, 808, 809, 816, 817, 818, 819, 824, 825, 826, 827, 828, 833, 834, 839, 840, 841, 848, 851, 854, 855, 856, 858, 865, 872, 875, 876, 882, 883, 884, 885, 886, 901, 912, 932, 938, 951, 953, 957, 958, 960, 961, 963, 967, 971, 972, 973, 991, 992, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "auc": [11, 25, 196, 214, 234, 253, 256, 260, 263, 265, 266, 680, 686, 765, 957, 1003, 1006, 1010], "pred_background": 11, "pred_test": [11, 303], "cov_test": 11, "r_": [11, 34, 101, 105, 209, 210, 242, 263, 282, 283, 325, 331, 336, 391, 685, 957, 973], "fpr": [11, 226, 234, 253, 265, 266, 373, 570, 574, 676, 680, 684, 704, 766, 957, 995, 998], "tpr": [11, 226, 234, 253, 265, 266, 373, 680, 684, 766, 957, 995, 998], "threshold": [11, 25, 42, 64, 98, 105, 146, 164, 167, 169, 191, 226, 228, 253, 254, 255, 263, 274, 313, 320, 345, 348, 379, 391, 396, 398, 400, 421, 422, 425, 448, 478, 486, 487, 509, 515, 520, 526, 527, 528, 541, 566, 569, 571, 575, 580, 581, 622, 645, 649, 654, 656, 670, 676, 678, 680, 681, 684, 685, 698, 703, 704, 716, 717, 733, 759, 765, 766, 769, 772, 773, 793, 811, 822, 823, 839, 841, 843, 858, 870, 871, 872, 880, 887, 889, 931, 953, 957, 960, 961, 963, 967, 970, 972, 973, 978, 998, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "roc_curv": [11, 226, 253, 265, 680, 684, 704, 759, 765, 957, 998, 999, 1000, 1003, 1004, 1006, 1011], "roc_auc": [11, 256, 260, 265, 266, 373, 612, 680, 957, 995], "ntime": [11, 267], "992": [11, 15], "plot_species_distribution_model": [11, 15, 476], "emploi": [12, 149, 231, 393, 399, 401, 429, 457, 560, 567, 965, 981, 991, 1004], "techniqu": [12, 69, 71, 97, 106, 111, 120, 137, 145, 162, 204, 219, 221, 261, 280, 309, 315, 344, 356, 364, 377, 379, 390, 391, 395, 396, 397, 398, 399, 400, 426, 427, 428, 429, 512, 532, 655, 667, 671, 672, 703, 733, 949, 953, 954, 956, 957, 960, 963, 965, 969, 971, 973, 978, 981, 986, 991, 992, 1011], "histor": [12, 196, 978], "quot": [12, 14, 69, 257, 339, 340, 355, 361, 362, 365, 370, 390, 466, 467, 474, 957, 969, 972, 992], "quantiti": [12, 119, 256, 263, 308, 354, 379, 391, 398, 699, 700, 701, 762, 832, 946, 948, 951, 953, 1003], "daili": [12, 370, 981], "price": [12, 74, 119, 129, 947, 953, 981, 988], "link": [12, 17, 167, 175, 196, 214, 241, 259, 286, 344, 355, 365, 366, 367, 370, 374, 379, 391, 393, 396, 401, 539, 540, 588, 626, 647, 658, 666, 683, 894, 896, 953, 960, 973, 974, 977, 980, 986, 990, 992, 996, 998, 1001, 1002, 1005, 1006, 1009], "fluctuat": [12, 59, 196, 263, 1006], "normalesup": [12, 32, 46, 65, 230], "2003": [12, 388, 391, 396, 399, 430, 431, 441, 491, 493, 667, 671, 811, 813, 953, 954, 959, 969, 1006], "2008": [12, 393, 395, 396, 457, 512, 541, 568, 623, 642, 663, 664, 670, 694, 703, 733, 806, 811, 815, 832, 951, 954, 955, 957, 958, 959, 962, 963, 972], "calm": 12, "ago": [12, 978], "tech": [12, 364, 814], "firm": [12, 391], "crash": [12, 367, 447, 865, 866, 873, 967, 1002, 1006], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 374, 832, 962, 990], "msft": 12, "ibm": [12, 19, 318, 341, 362], "twx": 12, "warner": 12, "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 992], "amzn": 12, "amazon": 12, "tm": [12, 960], "toyota": 12, "caj": 12, "canon": [12, 379, 398, 460, 461, 463, 745, 978, 979, 994], "sne": [12, 164, 216, 217, 218, 219, 221, 223, 492, 503, 670, 993, 994], "soni": [12, 1008, 1010], "ford": 12, "hmc": 12, "honda": [12, 19], "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 833, 834, 961], "boe": 12, "ko": [12, 26, 150], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 79, 80, 393, 448, 453], "mcdonald": 12, "pep": [12, 374, 998], "pepsi": 12, "kellogg": 12, "un": [12, 367, 389, 399, 403, 511, 567, 770, 839, 848, 858, 862, 1007], "unilev": 12, "mar": [12, 975], "marriott": 12, "pg": [12, 372, 627, 953, 1003], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 948, 959, 1010], "electr": [12, 364, 391], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 981], "chase": [12, 998], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 981], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 354, 365, 377, 958, 975], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 69], "instrument": [12, 69, 96], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1008], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 132], "dynam": [12, 167, 533, 534, 541, 556, 558, 654, 655, 656, 973, 977, 981, 1004, 1010], "rtn": 12, "raytheon": 12, "cat": [12, 70, 167, 168, 309, 310, 311, 362, 399, 560, 690, 696, 731, 760, 957, 967, 1007, 1008, 1010], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 341, 355, 368, 393, 399, 477, 560, 566, 567, 569, 887, 889, 977], "fetch": [12, 17, 129, 166, 214, 360, 361, 362, 367, 370, 371, 374, 390, 396, 474, 533, 534, 541, 566, 567, 569, 1006], "histori": [12, 357, 515, 524, 975, 998], "stderr": [12, 805], "url": [12, 17, 146, 361, 364, 370], "githubusercont": 12, "master": [12, 16, 276, 311, 367, 370, 981, 1003], "financi": [12, 391, 398, 953], "csv": [12, 361, 364, 371, 980, 1006, 1011], "read_csv": [12, 371, 1013], "close_pric": 12, "vstack": [12, 26, 56, 64, 152, 153, 178, 241, 245, 276, 289, 331, 609, 958, 1006], "q": [12, 70, 84, 122, 196, 309, 388, 391, 396, 911, 953, 972], "open_pric": 12, "carri": [12, 31, 162, 256, 259, 264, 293, 300, 341, 380, 385, 399, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 981, 991], "invers": [12, 54, 76, 82, 164, 246, 265, 326, 340, 341, 359, 379, 390, 392, 394, 395, 396, 399, 403, 425, 444, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 505, 511, 512, 513, 517, 519, 521, 535, 539, 542, 567, 568, 569, 606, 622, 623, 636, 637, 644, 646, 652, 653, 654, 655, 656, 658, 701, 720, 729, 772, 773, 818, 819, 826, 827, 833, 834, 836, 840, 843, 849, 850, 852, 867, 868, 875, 876, 877, 880, 881, 883, 885, 901, 951, 953, 957, 960, 961, 967, 971, 972, 990, 992, 993, 994, 998, 1001, 1006, 1009, 1010, 1012], "correl": [12, 27, 81, 84, 85, 106, 126, 142, 145, 154, 164, 165, 167, 168, 170, 185, 191, 214, 256, 274, 307, 308, 334, 360, 363, 364, 371, 379, 381, 388, 393, 395, 400, 401, 429, 436, 460, 461, 463, 471, 472, 478, 502, 542, 584, 587, 605, 612, 613, 614, 660, 661, 720, 734, 755, 756, 757, 802, 816, 817, 853, 854, 856, 864, 948, 953, 958, 964, 967, 971, 973, 978, 979, 994, 998, 999, 1000, 1011, 1012], "condition": [12, 27, 196, 389, 393, 735, 951], "connect": [12, 39, 44, 47, 51, 54, 61, 65, 66, 365, 367, 375, 379, 393, 421, 425, 431, 441, 442, 563, 564, 673, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 955, 960, 962, 970, 1002, 1011], "num": [12, 70, 146, 149, 154, 155, 156, 167, 168, 198, 263, 264, 310, 610, 946], "edge_model": 12, "graphicallassocv": [12, 81, 393, 450, 452, 453, 454, 455, 457, 1006, 1010, 1012], "seri": [12, 81, 116, 168, 178, 196, 217, 234, 238, 261, 310, 314, 359, 362, 371, 379, 391, 467, 468, 469, 470, 474, 478, 479, 480, 482, 483, 488, 519, 668, 672, 795, 891, 948, 953, 954, 958, 960, 971, 977, 1001, 1004, 1005, 1006, 1010, 1013], "rather": [12, 53, 81, 113, 161, 166, 196, 197, 210, 302, 339, 340, 350, 355, 363, 367, 368, 371, 372, 374, 377, 378, 379, 380, 391, 395, 396, 398, 399, 401, 427, 440, 442, 543, 559, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 607, 624, 625, 630, 631, 638, 639, 640, 641, 758, 788, 807, 809, 810, 839, 875, 876, 887, 912, 951, 953, 954, 957, 959, 960, 964, 978, 987, 990, 998, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1013], "former": [12, 341, 398, 399, 543, 776, 783, 792, 959, 998, 1004, 1007], "recoveri": [12, 81, 195, 393], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 26, 42, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 374], "trust": [12, 26, 70, 80, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 380, 385, 389, 987, 1012], "unabl": [12, 26, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 196, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 356, 856, 967, 1007], "render": [12, 26, 53, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 191, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348, 367, 370, 371, 372, 379, 529, 567, 609, 853, 864, 887, 889, 956, 973, 1011], "nbviewer": [12, 26, 70, 109, 115, 116, 117, 125, 126, 129, 132, 143, 154, 166, 167, 168, 177, 226, 227, 228, 235, 236, 237, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 311, 316, 348], "graphicallassocvgraphicallassocv": 12, "group": [12, 37, 40, 57, 59, 131, 167, 169, 196, 218, 247, 251, 316, 340, 348, 362, 371, 379, 380, 391, 397, 398, 399, 414, 473, 566, 567, 569, 572, 696, 765, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 803, 849, 885, 886, 953, 954, 956, 957, 958, 973, 974, 975, 977, 983, 986, 987, 1004, 1005, 1006, 1007, 1010, 1011, 1012], "amongst": [12, 973], "indic": [12, 19, 25, 26, 27, 48, 58, 59, 65, 74, 85, 95, 115, 154, 157, 162, 167, 193, 219, 229, 250, 258, 259, 262, 263, 276, 289, 314, 315, 318, 339, 340, 341, 348, 355, 362, 367, 368, 370, 374, 375, 377, 379, 388, 389, 391, 393, 395, 396, 398, 399, 401, 402, 406, 417, 420, 424, 429, 430, 431, 432, 434, 435, 436, 439, 443, 446, 451, 465, 486, 487, 489, 490, 491, 501, 510, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 559, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 598, 605, 606, 607, 608, 610, 611, 617, 625, 628, 629, 631, 632, 633, 639, 641, 643, 651, 653, 660, 661, 668, 670, 672, 674, 681, 685, 690, 691, 696, 697, 698, 702, 705, 706, 707, 708, 711, 715, 716, 717, 718, 731, 748, 755, 756, 757, 758, 760, 761, 762, 764, 765, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 809, 810, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 840, 843, 847, 849, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 891, 895, 896, 901, 916, 922, 923, 947, 952, 953, 954, 957, 958, 959, 960, 961, 964, 965, 967, 968, 971, 972, 978, 983, 987, 990, 992, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1011, 1013], "reflect": [12, 40, 46, 47, 79, 91, 96, 119, 167, 168, 196, 214, 265, 280, 340, 363, 366, 370, 379, 381, 388, 429, 435, 954, 957, 963, 965, 991, 999, 1007], "properti": [12, 25, 156, 157, 198, 213, 242, 278, 303, 348, 354, 357, 360, 367, 368, 382, 388, 391, 393, 396, 398, 400, 401, 406, 422, 425, 430, 431, 432, 443, 444, 460, 461, 462, 520, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 568, 569, 571, 572, 575, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 610, 624, 626, 630, 633, 638, 640, 647, 652, 653, 658, 677, 682, 683, 686, 774, 777, 778, 788, 804, 805, 835, 836, 849, 851, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 949, 952, 953, 954, 957, 958, 960, 963, 967, 970, 972, 973, 974, 978, 983, 1003, 1007, 1008, 1012], "impact": [12, 25, 36, 37, 67, 74, 142, 164, 166, 167, 198, 214, 238, 250, 311, 340, 350, 354, 355, 360, 377, 380, 391, 396, 426, 428, 514, 518, 525, 568, 644, 645, 646, 654, 655, 656, 670, 769, 774, 777, 778, 788, 799, 816, 817, 853, 864, 898, 912, 928, 931, 946, 956, 964, 972, 1005, 1008, 1011], "affinity_propag": [12, 44], "covariance_": [12, 34, 79, 81, 448, 449, 450, 451, 452, 453, 454, 455, 527, 528, 951, 1005], "n_label": [12, 91, 232, 379, 465, 501, 691, 698, 703, 716, 717, 731, 733, 767, 768, 794, 957, 1004, 1006], "lai": [12, 963], "canva": [12, 16], "manifold": [12, 39, 52, 66, 220, 221, 222, 223, 276, 306, 310, 311, 316, 357, 360, 379, 391, 396, 398, 480, 503, 508, 522, 527, 544, 825, 837, 846, 868, 898, 960, 993, 994, 998, 999, 1001, 1002, 1003, 1004, 1005], "dens": [12, 164, 174, 215, 310, 311, 318, 354, 375, 379, 391, 396, 398, 400, 423, 426, 428, 443, 446, 474, 501, 502, 512, 513, 522, 544, 563, 564, 585, 586, 607, 630, 635, 636, 637, 644, 646, 650, 651, 654, 655, 656, 665, 666, 667, 670, 671, 737, 738, 744, 756, 767, 833, 834, 841, 848, 849, 851, 853, 854, 856, 864, 865, 866, 867, 868, 875, 876, 877, 878, 880, 881, 913, 928, 931, 947, 950, 953, 954, 957, 958, 960, 963, 967, 969, 970, 971, 972, 973, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "eigen_solv": [12, 44, 46, 65, 217, 218, 396, 431, 441, 513, 666, 667, 669, 671, 673, 954, 999, 1008, 1011, 1012, 1013], "arpack": [12, 19, 44, 46, 65, 218, 396, 430, 431, 432, 441, 513, 519, 522, 666, 667, 669, 671, 673, 954, 1004, 1005, 1010], "don": [12, 54, 69, 120, 166, 218, 232, 256, 317, 323, 327, 334, 339, 340, 354, 361, 367, 368, 370, 372, 374, 377, 378, 392, 399, 624, 630, 804, 883, 884, 885, 886, 923, 946, 953, 956, 958, 961, 963, 971, 980, 992, 1002, 1007], "control": [12, 16, 60, 99, 100, 135, 154, 156, 197, 204, 228, 229, 257, 259, 278, 307, 309, 344, 346, 347, 354, 355, 360, 363, 367, 368, 371, 374, 377, 379, 382, 385, 390, 391, 394, 395, 396, 397, 400, 401, 414, 420, 428, 433, 450, 451, 457, 509, 514, 515, 516, 517, 518, 521, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 571, 572, 574, 592, 597, 603, 605, 608, 610, 612, 617, 619, 620, 624, 625, 627, 628, 629, 630, 632, 633, 634, 650, 654, 655, 660, 661, 665, 670, 679, 687, 772, 773, 774, 776, 777, 778, 779, 780, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 802, 803, 806, 807, 810, 833, 834, 855, 867, 868, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 889, 944, 946, 953, 954, 956, 957, 958, 960, 963, 964, 969, 971, 972, 973, 977, 978, 979, 990, 994, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "neighbor": [12, 31, 39, 44, 47, 59, 127, 130, 137, 161, 162, 218, 219, 221, 225, 233, 234, 280, 281, 282, 283, 285, 286, 287, 289, 290, 303, 308, 310, 311, 339, 357, 359, 364, 375, 379, 391, 397, 398, 399, 402, 405, 413, 421, 424, 425, 427, 429, 431, 436, 437, 440, 442, 474, 480, 482, 541, 548, 580, 585, 586, 605, 606, 666, 667, 668, 669, 670, 671, 674, 758, 774, 802, 836, 837, 856, 871, 879, 931, 958, 963, 978, 979, 986, 991, 993, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005], "node": [12, 41, 119, 123, 306, 344, 348, 374, 375, 391, 393, 396, 398, 421, 422, 425, 442, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 628, 632, 634, 660, 661, 670, 816, 817, 883, 884, 885, 886, 887, 889, 917, 925, 960, 962, 963, 964, 973, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1012, 1013], "plane": [12, 208, 230, 282, 325, 328, 330, 331, 336, 364, 431, 441, 951, 953, 972, 990], "node_position_model": 12, "locallylinearembed": [12, 217, 218, 219, 310, 666, 668, 670, 954, 960, 1003, 1004, 1012, 1013], "n_neighbor": [12, 44, 61, 66, 130, 161, 217, 218, 219, 221, 225, 234, 276, 278, 279, 282, 283, 284, 285, 287, 288, 306, 308, 339, 398, 431, 580, 585, 586, 606, 666, 667, 669, 671, 674, 818, 819, 820, 822, 824, 825, 829, 870, 871, 947, 954, 960, 963, 970, 1005, 1012], "output": [12, 14, 16, 25, 27, 37, 53, 58, 98, 108, 113, 118, 119, 129, 133, 137, 138, 149, 157, 161, 162, 164, 166, 192, 224, 238, 239, 244, 250, 254, 256, 259, 263, 265, 266, 276, 299, 302, 306, 309, 310, 340, 341, 343, 348, 349, 360, 361, 362, 364, 367, 368, 372, 374, 377, 378, 379, 389, 390, 391, 392, 394, 395, 398, 399, 400, 407, 411, 413, 417, 421, 422, 423, 425, 426, 428, 429, 431, 438, 439, 441, 442, 443, 444, 445, 446, 447, 460, 461, 462, 463, 466, 469, 470, 471, 472, 473, 474, 475, 481, 483, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 618, 619, 620, 624, 625, 628, 630, 631, 632, 635, 636, 638, 639, 640, 641, 644, 645, 646, 649, 651, 652, 654, 656, 657, 659, 660, 661, 662, 666, 667, 668, 670, 672, 674, 677, 678, 691, 692, 699, 700, 701, 703, 705, 712, 719, 722, 723, 725, 727, 728, 729, 730, 731, 733, 738, 744, 749, 762, 765, 772, 773, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 797, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 819, 820, 821, 825, 826, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 863, 864, 867, 868, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 896, 898, 901, 912, 913, 944, 946, 947, 949, 951, 953, 954, 957, 958, 959, 960, 961, 964, 967, 972, 979, 983, 984, 986, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "edg": [12, 26, 46, 65, 98, 119, 220, 263, 374, 379, 388, 391, 393, 432, 539, 540, 563, 564, 566, 567, 569, 772, 813, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 841, 888, 967, 970, 981, 1004, 1006, 1009, 1012], "displai": [12, 25, 27, 34, 37, 46, 48, 59, 70, 80, 81, 84, 85, 88, 95, 120, 125, 126, 129, 164, 166, 167, 181, 183, 200, 214, 224, 225, 234, 239, 245, 253, 257, 258, 263, 270, 286, 307, 308, 330, 345, 354, 367, 369, 373, 375, 382, 392, 396, 399, 400, 418, 443, 446, 447, 474, 519, 542, 608, 609, 610, 636, 665, 675, 676, 678, 679, 680, 691, 696, 759, 766, 774, 780, 788, 802, 836, 837, 849, 851, 856, 873, 880, 887, 888, 889, 903, 944, 957, 961, 977, 994, 1007, 1009, 1010, 1012, 1013], "strength": [12, 129, 156, 196, 200, 257, 306, 354, 394, 398, 545, 546, 621, 626, 627, 630, 636, 637, 647, 650, 651, 652, 653, 654, 656, 658, 665, 760, 833, 834, 875, 876, 880, 881, 946, 953, 960, 963, 971, 972], "plan": [12, 361, 365, 367, 380, 967, 1001], "fair": [12, 398, 668, 672, 805, 958, 981], "crucial": [12, 251, 354, 366, 367, 380, 391, 401, 972], "challeng": [12, 129, 149, 167, 175, 214, 225, 356, 362, 363, 391, 393, 441, 451, 957, 963, 981, 983], "overlap": [12, 37, 110, 123, 145, 220, 243, 340, 365, 388, 391, 395, 398, 399, 565, 767, 768, 775, 779, 781, 782, 783, 784, 792, 954, 967, 1004], "heurist": [12, 14, 121, 339, 355, 391, 400, 428, 431, 440, 441, 486, 487, 515, 517, 524, 654, 655, 656, 669, 673, 777, 778, 877, 878, 879, 880, 881, 900, 954, 955, 960, 971, 973, 981, 990, 998, 999, 1003, 1007, 1010, 1011], "direct": [12, 84, 85, 89, 95, 97, 101, 104, 146, 202, 241, 247, 253, 285, 295, 303, 326, 331, 365, 367, 370, 372, 374, 380, 391, 394, 396, 399, 400, 431, 441, 450, 451, 457, 512, 519, 527, 566, 567, 569, 580, 619, 666, 825, 951, 953, 958, 960, 962, 978, 991, 998, 1001], "nearest": [12, 13, 31, 32, 39, 40, 50, 51, 54, 57, 60, 81, 88, 95, 98, 153, 162, 187, 208, 212, 233, 280, 282, 285, 286, 290, 295, 303, 325, 326, 330, 331, 332, 336, 357, 359, 364, 375, 379, 391, 397, 398, 402, 405, 413, 424, 427, 429, 431, 436, 440, 441, 474, 480, 482, 585, 586, 605, 606, 608, 613, 666, 667, 669, 670, 674, 767, 768, 774, 802, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 841, 856, 931, 954, 963, 972, 978, 979, 986, 994, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "along": [12, 13, 55, 58, 65, 85, 116, 122, 183, 196, 230, 260, 306, 340, 341, 350, 370, 372, 374, 375, 379, 382, 385, 388, 396, 398, 399, 400, 401, 403, 511, 528, 565, 589, 590, 608, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 654, 656, 659, 660, 661, 662, 663, 664, 756, 757, 767, 774, 788, 845, 846, 849, 853, 854, 855, 856, 860, 861, 862, 864, 865, 866, 891, 914, 932, 938, 946, 953, 960, 967, 970, 981, 998, 1003, 1004, 1006, 1010, 1011], "linecollect": [12, 220, 228, 610], "facecolor": [12, 16, 26, 34, 45, 59, 95, 102, 112, 138, 157, 217, 232, 256, 283, 300, 324, 327, 330, 331, 333], "partial_correl": 12, "precision_": [12, 81, 448, 449, 450, 451, 452, 453, 454, 455], "sqrt": [12, 79, 80, 81, 98, 101, 105, 114, 135, 175, 177, 220, 222, 236, 241, 242, 243, 246, 247, 256, 331, 391, 398, 399, 401, 442, 448, 449, 450, 451, 452, 453, 454, 455, 516, 518, 525, 535, 536, 537, 538, 542, 543, 597, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 677, 708, 740, 741, 746, 856, 868, 883, 884, 885, 886, 949, 953, 954, 957, 959, 969, 1012], "diag": [12, 81, 157, 243, 246, 396, 401, 510, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 772, 773, 953, 1013], "newaxi": [12, 13, 19, 24, 42, 81, 105, 111, 150, 177, 186, 192, 197, 198, 199, 201, 202, 213, 228, 230, 270, 281, 288, 334, 346, 347, 388, 514, 953], "ab": [12, 17, 40, 74, 99, 106, 112, 119, 129, 142, 146, 169, 183, 187, 207, 209, 212, 214, 220, 256, 298, 324, 336, 391, 516, 518, 525, 605, 723, 816, 817, 851, 957], "triu": 12, "nipy_spectr": [12, 39, 46, 47, 51, 52, 59, 60, 102], "start_idx": [12, 220], "end_idx": [12, 220], "sequenc": [12, 118, 184, 220, 368, 379, 392, 395, 396, 398, 399, 481, 490, 539, 540, 547, 548, 559, 560, 566, 567, 569, 624, 774, 777, 785, 802, 859, 915, 916, 922, 928, 931, 977, 998, 1001, 1003, 1004], "line0": [12, 220], "linen": [12, 220], "x0": [12, 34, 188, 205, 220, 298, 323, 379, 411, 443, 545, 546, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856], "y0": [12, 220], "y1": [12, 90, 112, 220, 487, 694, 741, 958, 959], "xm": [12, 220], "ym": [12, 220], "segment": [12, 36, 47, 67, 164, 220, 228, 362, 374, 389, 391, 399, 431, 441, 486, 487, 669, 832, 957, 977, 981, 1006, 1008, 1010], "stop": [12, 17, 44, 61, 108, 133, 154, 156, 164, 167, 174, 198, 215, 307, 367, 368, 374, 375, 379, 391, 396, 398, 400, 420, 421, 423, 425, 426, 428, 431, 433, 441, 442, 450, 451, 457, 460, 461, 462, 474, 482, 486, 487, 493, 498, 510, 514, 515, 516, 517, 518, 521, 523, 524, 525, 531, 532, 535, 536, 537, 538, 539, 540, 542, 543, 549, 566, 567, 569, 580, 595, 605, 622, 623, 624, 626, 627, 630, 634, 636, 637, 644, 645, 646, 647, 649, 654, 655, 656, 658, 669, 670, 673, 692, 772, 773, 802, 833, 834, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 917, 931, 946, 953, 961, 962, 972, 973, 978, 979, 981, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013], "lc": [12, 220, 228], "zorder": [12, 34, 57, 97, 126, 138, 150, 158, 186, 194, 218, 220, 228, 231, 241, 307, 330, 331], "hot_r": [12, 298], "norm": [12, 13, 14, 17, 34, 40, 54, 98, 101, 152, 155, 175, 182, 187, 220, 241, 242, 243, 245, 247, 253, 257, 281, 298, 326, 340, 372, 375, 379, 391, 399, 400, 422, 423, 426, 438, 439, 443, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 467, 509, 512, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 567, 568, 569, 575, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 650, 654, 656, 659, 662, 663, 664, 668, 670, 671, 672, 747, 813, 848, 862, 875, 877, 880, 939, 940, 950, 953, 955, 957, 967, 971, 1001, 1003, 1005, 1009], "set_arrai": [12, 220, 228], "set_linewidth": [12, 220, 228], "add_collect": [12, 220, 228], "index": [12, 14, 17, 30, 37, 38, 39, 40, 41, 49, 50, 57, 115, 116, 120, 143, 146, 154, 161, 166, 167, 168, 196, 214, 235, 238, 242, 243, 247, 251, 254, 255, 256, 257, 259, 267, 268, 276, 298, 310, 314, 315, 340, 341, 362, 364, 365, 367, 368, 370, 375, 377, 379, 388, 392, 395, 396, 398, 399, 406, 423, 426, 427, 428, 429, 430, 432, 433, 436, 438, 439, 443, 446, 481, 487, 535, 536, 537, 538, 542, 543, 544, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 595, 610, 611, 618, 675, 682, 683, 690, 694, 696, 708, 715, 734, 756, 757, 763, 765, 769, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 802, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 849, 883, 884, 885, 886, 916, 928, 931, 936, 937, 957, 959, 960, 961, 971, 973, 977, 990, 992, 998, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "dx": [12, 13, 504, 677], "dy": [12, 677], "this_dx": 12, "argmin": [12, 121, 255, 368, 393, 509, 515, 523, 524, 663, 756, 757, 973], "this_di": 12, "horizontalalign": [12, 26, 31, 40, 44, 45, 61, 102, 225, 241, 292, 300], "verticalalign": [12, 26, 39, 40], "edgecolor": [12, 16, 24, 30, 31, 34, 42, 45, 55, 59, 66, 89, 90, 91, 102, 112, 118, 125, 127, 128, 130, 131, 138, 141, 150, 151, 153, 157, 167, 179, 188, 198, 205, 208, 209, 210, 229, 230, 231, 232, 241, 244, 256, 259, 270, 279, 282, 283, 284, 287, 292, 300, 301, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 336, 345, 346, 347, 609], "ptp": 12, "03": [12, 28, 52, 67, 79, 84, 95, 133, 147, 154, 159, 163, 166, 177, 214, 223, 229, 241, 247, 257, 290, 296, 303, 304, 315, 364, 399, 725, 774, 953, 957], "850": [12, 15], "plot_stock_market": [12, 15], "parallel": [13, 108, 114, 118, 133, 164, 167, 198, 257, 307, 308, 310, 331, 348, 353, 359, 367, 369, 370, 377, 379, 392, 400, 402, 403, 417, 424, 427, 428, 429, 431, 436, 437, 440, 443, 446, 451, 473, 509, 511, 512, 513, 515, 517, 519, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 567, 572, 580, 588, 610, 612, 617, 636, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 785, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 835, 838, 870, 871, 925, 927, 978, 987, 992, 994, 998, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "acquir": [13, 117, 258, 1010], "angl": [13, 34, 98, 146, 241, 242, 243, 246, 247, 364, 396, 509, 515, 517, 520, 521, 523, 524, 526, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 656, 660, 661, 662, 663, 664, 670, 954, 955, 979, 994, 998], "Such": [13, 125, 149, 154, 175, 185, 197, 259, 339, 379, 380, 395, 396, 398, 533, 534, 634, 947, 957, 960, 967, 973, 990, 1008, 1013], "ct": [13, 157, 238, 392, 443, 445, 446], "cellular": 13, "materi": [13, 380, 559, 865, 866, 976], "haar": 13, "wavelet": [13, 105, 396], "sparsiti": [13, 81, 164, 174, 189, 211, 212, 215, 231, 340, 354, 379, 393, 396, 398, 400, 479, 480, 505, 509, 515, 516, 517, 518, 521, 523, 524, 525, 624, 630, 635, 636, 654, 656, 699, 700, 701, 845, 851, 856, 860, 950, 953, 960, 967, 986, 991, 1000], "oper": [13, 19, 157, 164, 231, 249, 253, 263, 272, 341, 354, 355, 364, 365, 367, 369, 372, 377, 379, 380, 382, 385, 387, 395, 396, 398, 399, 400, 427, 440, 447, 454, 460, 461, 462, 463, 482, 511, 512, 519, 529, 530, 544, 550, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 594, 599, 602, 608, 613, 621, 636, 667, 671, 680, 684, 685, 686, 704, 751, 758, 759, 765, 766, 793, 802, 805, 816, 817, 839, 843, 848, 858, 859, 873, 880, 883, 914, 925, 930, 953, 960, 967, 972, 977, 981, 990, 1002, 1004, 1005, 1006, 1008, 1009], "fidel": 13, "penal": [13, 30, 81, 129, 185, 189, 196, 212, 214, 334, 391, 393, 396, 400, 448, 449, 450, 451, 452, 453, 454, 455, 457, 625, 630, 631, 639, 641, 654, 683, 693, 711, 763, 770, 849, 875, 882, 953, 957, 959, 961, 971, 972, 990], "account": [13, 97, 104, 154, 161, 166, 214, 256, 285, 334, 336, 340, 354, 363, 367, 379, 380, 385, 391, 394, 395, 396, 398, 399, 442, 545, 546, 605, 606, 608, 610, 611, 627, 651, 657, 682, 685, 705, 706, 707, 715, 720, 733, 760, 761, 764, 765, 775, 779, 792, 949, 951, 955, 957, 958, 959, 960, 971, 973, 1003, 1005, 1006, 1007, 1010, 1011, 1013], "call": [13, 17, 46, 48, 50, 54, 70, 91, 115, 121, 143, 149, 153, 155, 157, 158, 167, 184, 196, 197, 214, 235, 237, 238, 256, 257, 265, 270, 271, 278, 308, 309, 339, 340, 341, 348, 354, 355, 356, 362, 365, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 389, 391, 392, 393, 394, 395, 396, 398, 399, 401, 403, 412, 420, 423, 426, 428, 429, 430, 431, 432, 433, 436, 439, 441, 443, 444, 447, 448, 453, 460, 461, 462, 466, 469, 470, 473, 475, 481, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 554, 563, 564, 566, 567, 569, 575, 580, 585, 586, 588, 589, 592, 595, 598, 605, 606, 607, 608, 609, 610, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 667, 668, 669, 670, 671, 672, 673, 675, 677, 679, 682, 709, 719, 732, 748, 751, 755, 756, 757, 758, 768, 772, 773, 774, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 825, 827, 832, 833, 834, 835, 836, 840, 841, 843, 845, 846, 853, 856, 859, 864, 865, 866, 867, 868, 872, 875, 876, 877, 878, 880, 881, 884, 886, 902, 906, 911, 912, 925, 928, 931, 941, 946, 947, 949, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 967, 969, 970, 972, 973, 977, 981, 983, 987, 990, 991, 992, 994, 995, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "algorithm": [13, 17, 18, 22, 29, 36, 37, 42, 43, 45, 46, 55, 56, 60, 61, 65, 67, 78, 84, 95, 97, 109, 110, 111, 112, 164, 172, 183, 185, 199, 212, 219, 221, 224, 228, 234, 239, 242, 243, 244, 247, 253, 256, 265, 282, 283, 285, 289, 298, 300, 303, 306, 307, 308, 311, 325, 339, 340, 350, 354, 356, 360, 361, 362, 363, 364, 367, 368, 369, 374, 375, 378, 379, 381, 387, 388, 390, 391, 393, 394, 395, 396, 398, 399, 401, 402, 403, 404, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 448, 453, 454, 457, 460, 461, 462, 466, 481, 489, 490, 491, 492, 493, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 525, 526, 531, 532, 533, 534, 537, 538, 541, 569, 581, 582, 588, 589, 613, 615, 617, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 682, 683, 686, 695, 697, 712, 714, 720, 751, 755, 756, 768, 770, 772, 773, 804, 813, 814, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 832, 837, 841, 843, 856, 859, 871, 875, 876, 877, 878, 879, 880, 881, 883, 884, 895, 911, 912, 914, 924, 926, 932, 947, 949, 952, 954, 955, 957, 959, 962, 963, 967, 970, 971, 972, 976, 977, 978, 979, 981, 983, 986, 987, 989, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "computation": [13, 77, 95, 121, 129, 149, 339, 353, 390, 391, 392, 395, 396, 398, 401, 516, 610, 611, 649, 740, 774, 776, 777, 778, 788, 799, 953, 954, 956, 964, 965, 969, 991, 994, 1002], "comparison": [13, 19, 23, 28, 29, 35, 36, 42, 48, 67, 78, 93, 96, 97, 107, 122, 127, 132, 140, 147, 148, 159, 164, 168, 178, 182, 184, 187, 194, 211, 216, 219, 223, 224, 228, 239, 243, 249, 251, 253, 272, 274, 292, 300, 302, 306, 308, 319, 323, 338, 340, 342, 350, 362, 364, 379, 389, 393, 394, 396, 400, 417, 423, 426, 428, 466, 482, 490, 492, 493, 500, 503, 519, 527, 528, 531, 542, 559, 560, 566, 567, 568, 569, 584, 586, 588, 589, 593, 600, 603, 617, 621, 636, 650, 666, 667, 668, 669, 670, 682, 715, 720, 756, 765, 774, 777, 788, 790, 802, 811, 814, 818, 833, 837, 845, 846, 848, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 866, 875, 877, 878, 880, 881, 883, 946, 951, 954, 957, 959, 960, 963, 972, 995], "l2": [13, 30, 40, 81, 84, 164, 174, 181, 187, 196, 207, 211, 212, 214, 215, 257, 276, 298, 318, 339, 340, 368, 375, 377, 391, 393, 396, 399, 421, 425, 429, 436, 502, 516, 518, 525, 536, 539, 540, 543, 567, 568, 569, 621, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 650, 654, 656, 658, 659, 664, 665, 666, 712, 727, 738, 739, 755, 756, 757, 788, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 833, 834, 848, 856, 862, 875, 876, 880, 881, 882, 884, 886, 940, 946, 950, 953, 955, 960, 961, 967, 971, 973, 990, 992, 1000, 1002, 1003, 1005, 1007], "produc": [13, 25, 26, 44, 56, 69, 98, 122, 123, 124, 125, 262, 295, 317, 350, 362, 363, 367, 368, 371, 379, 380, 391, 392, 395, 396, 398, 420, 423, 431, 497, 514, 537, 541, 559, 566, 571, 572, 610, 611, 776, 777, 778, 786, 791, 794, 797, 841, 851, 877, 880, 948, 949, 953, 955, 956, 957, 960, 963, 964, 968, 970, 971, 972, 983, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "circular": 13, "separ": [13, 24, 25, 30, 31, 40, 59, 61, 65, 72, 79, 93, 95, 100, 107, 110, 112, 115, 117, 127, 162, 164, 167, 168, 172, 174, 197, 215, 218, 232, 243, 256, 259, 265, 266, 298, 300, 308, 317, 321, 326, 330, 331, 337, 339, 350, 354, 363, 364, 368, 370, 371, 374, 377, 379, 389, 391, 392, 393, 396, 398, 399, 401, 443, 490, 497, 511, 516, 518, 519, 525, 527, 559, 566, 567, 569, 588, 616, 624, 625, 651, 654, 655, 668, 672, 702, 709, 722, 723, 725, 730, 767, 793, 808, 809, 835, 836, 877, 879, 880, 885, 886, 946, 947, 949, 951, 953, 954, 956, 963, 964, 967, 971, 972, 988, 990, 991, 998, 1001, 1003, 1004, 1008, 1010, 1011], "central": [13, 198, 391, 963, 977], "emmanuel": [13, 65, 998, 1005, 1006, 1007], "gouillart": [13, 65, 998], "nsup": 13, "ndimag": [13, 46, 47, 54, 295, 991], "_weight": [13, 214], "orig": 13, "floor_x": 13, "floor": 13, "astyp": [13, 37, 41, 44, 45, 53, 59, 61, 65, 80, 102, 119, 121, 138, 186, 187, 214, 220, 231, 234, 267, 276, 399, 947, 953, 1005], "hstack": [13, 33, 34, 42, 131, 142, 222, 233, 251, 329, 395, 835], "_generate_center_coordin": 13, "l_x": 13, "mgrid": [13, 138, 330], "build_projection_oper": 13, "n_dir": 13, "endpoint": [13, 299, 329, 613], "data_ind": 13, "camera_ind": 13, "data_unravel_indic": 13, "xrot": 13, "ind": [13, 42, 121, 131, 276, 340, 816, 817], "mask": [13, 42, 65, 117, 196, 204, 254, 255, 318, 375, 379, 392, 398, 448, 453, 539, 540, 559, 563, 564, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 607, 608, 610, 611, 627, 649, 774, 777, 778, 788, 929, 947, 964, 998, 1001, 1003, 1004, 1006, 1008], "logical_and": [13, 122], "proj_oper": 13, "coo_matrix": [13, 182, 431, 563, 564, 928, 931], "generate_synthetic_data": 13, "n_pt": 13, "ogrid": 13, "mask_out": 13, "rand": [13, 24, 37, 38, 39, 40, 44, 49, 57, 61, 103, 113, 126, 128, 141, 175, 219, 220, 225, 231, 270, 288, 307, 308, 318, 319, 333, 334, 340, 346, 347, 375, 522, 682, 683, 693, 734, 758, 763, 867, 868, 870, 871, 872, 969, 983, 998, 1009, 1010], "gaussian_filt": [13, 46, 47, 54, 991], "sigma": [13, 46, 47, 54, 79, 103, 122, 254, 256, 388, 393, 396, 398, 592, 627, 951, 953, 955, 959, 962, 991], "logical_xor": [13, 153, 332], "binary_eros": 13, "128": [13, 14, 162, 163, 196, 354, 514], "proj": [13, 627], "randn": [13, 33, 34, 39, 54, 64, 65, 79, 80, 98, 103, 125, 141, 149, 153, 168, 180, 185, 190, 191, 195, 209, 210, 213, 242, 245, 246, 251, 263, 265, 266, 270, 276, 282, 283, 307, 308, 325, 331, 332, 334, 336, 368, 371, 621, 648, 650, 656, 795, 878, 881], "rgr_ridg": 13, "rec_l2": 13, "cross": [13, 54, 57, 70, 73, 77, 81, 86, 103, 118, 119, 121, 122, 134, 139, 140, 144, 146, 147, 166, 167, 174, 184, 196, 198, 214, 215, 243, 244, 246, 249, 253, 256, 257, 258, 260, 262, 265, 270, 271, 272, 280, 295, 299, 306, 308, 317, 326, 334, 357, 362, 368, 369, 375, 377, 378, 379, 385, 386, 389, 392, 393, 396, 398, 399, 400, 401, 417, 450, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 471, 479, 480, 482, 493, 519, 545, 546, 553, 571, 572, 575, 580, 584, 587, 620, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 650, 651, 652, 653, 654, 656, 657, 659, 660, 661, 662, 663, 664, 679, 684, 691, 705, 718, 762, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 810, 836, 837, 856, 875, 877, 880, 918, 956, 957, 960, 961, 965, 972, 973, 977, 978, 979, 981, 983, 986, 994, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "lassocv": [13, 129, 135, 166, 185, 398, 400, 629, 630, 632, 633, 634, 641, 662, 953, 987, 998, 1001, 1005, 1008, 1009, 1011, 1012], "rgr_lasso": 13, "rec_l1": 13, "interpol": [13, 32, 40, 50, 51, 54, 57, 81, 88, 95, 98, 153, 156, 164, 174, 187, 212, 215, 228, 233, 265, 280, 288, 295, 315, 326, 332, 401, 613, 623, 631, 641, 650, 662, 678, 685, 819, 827, 837, 851, 855, 948, 953, 957, 967, 1005, 1010], "133": [13, 55, 110, 245, 248], "wspace": [13, 14, 39, 44, 45, 61, 79, 95, 110, 112, 196, 214, 225, 241, 243, 244, 247, 281, 289, 315, 323], "637": [13, 15], "plot_tomography_l1_reconstruct": [13, 15], "nmf": [14, 71, 94, 372, 390, 399, 513, 516, 522, 525, 993, 994, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "latentdirichletalloc": [14, 356, 371, 396, 977, 1003, 1005, 1012, 1013], "corpu": [14, 340, 341, 362, 396, 566, 567, 568, 569, 992, 999], "frobeniu": [14, 98, 423, 426, 438, 448, 449, 450, 451, 452, 453, 454, 455, 509, 515, 516, 518, 523, 524, 525, 953, 1005], "kullback": [14, 217, 396, 516, 518, 525, 670, 954, 1005], "leibler": [14, 217, 396, 516, 518, 525, 670, 954, 1005], "diverg": [14, 93, 107, 121, 164, 217, 222, 281, 516, 518, 525, 670, 832, 954, 956, 957, 962, 964, 1005, 1006, 1011], "probabilist": [14, 27, 30, 81, 93, 107, 148, 149, 152, 156, 159, 164, 339, 379, 389, 397, 398, 417, 452, 455, 510, 512, 513, 519, 537, 566, 567, 588, 600, 621, 623, 654, 681, 718, 774, 798, 843, 877, 878, 880, 881, 950, 951, 953, 956, 957, 962, 967, 972, 977, 981, 998, 1001, 1005], "semant": [14, 339, 340, 379, 522, 992, 993, 994, 1000], "runnabl": [14, 370, 371], "coupl": [14, 52, 53, 218, 361, 362, 372, 388, 389, 391, 400, 567, 881, 946, 972], "ten": [14, 19, 110, 146, 218, 247, 362, 364, 398, 498, 880, 1007], "polynomi": [14, 161, 164, 171, 173, 174, 196, 202, 215, 236, 256, 270, 308, 309, 323, 330, 333, 359, 363, 431, 469, 598, 617, 618, 619, 621, 650, 742, 751, 752, 802, 837, 846, 848, 851, 855, 875, 877, 878, 879, 880, 881, 952, 972, 979, 994, 1010, 1011], "lda": [14, 34, 93, 107, 164, 285, 350, 364, 387, 482, 514, 519, 527, 528, 825, 977, 979, 993, 994, 1003], "proport": [14, 26, 40, 145, 182, 196, 203, 209, 225, 259, 283, 286, 336, 354, 362, 389, 391, 393, 395, 396, 398, 399, 418, 419, 448, 453, 493, 527, 528, 533, 535, 537, 538, 539, 540, 541, 542, 561, 562, 566, 569, 605, 610, 636, 637, 644, 645, 646, 652, 653, 654, 656, 674, 679, 690, 775, 776, 777, 778, 791, 794, 802, 822, 833, 834, 850, 875, 876, 877, 880, 881, 883, 885, 887, 889, 901, 946, 956, 957, 960, 963, 971, 972, 973, 1003], "285": [14, 315, 701], "tf": [14, 19, 229, 339, 340, 341, 362, 396, 499, 522, 566, 567, 568, 569, 815, 823, 848, 946, 955, 959, 967, 977, 992], "idf": [14, 19, 229, 339, 340, 341, 362, 396, 499, 522, 566, 567, 568, 569, 815, 823, 848, 946, 955, 959, 967, 992, 998], "267": [14, 998], "260": [14, 255, 339, 1011], "2000": [14, 26, 40, 50, 74, 96, 103, 120, 172, 244, 247, 256, 276, 292, 310, 340, 362, 364, 391, 392, 398, 403, 431, 441, 511, 512, 537, 667, 669, 671, 720, 765, 772, 822, 852, 863, 954, 957, 963, 969, 983, 991], "071": [14, 364, 417], "051": [14, 451], "minibatchnmf": [14, 356, 396, 1012], "batch_siz": [14, 19, 42, 63, 95, 98, 99, 340, 396, 428, 512, 514, 515, 516, 517, 524, 832, 833, 834, 915, 916, 999, 1006, 1009, 1011, 1012], "083": [14, 254], "227": [14, 84, 86, 256, 391, 702], "419": [14, 594], "ensta": [14, 17, 37, 48, 60, 196, 214, 218, 257, 259, 339, 340, 341], "chyi": [14, 1001, 1002, 1003, 1004, 1005], "kwei": [14, 1001, 1002, 1003, 1004, 1005], "yau": [14, 1001, 1002, 1003, 1004, 1005], "chyikwei": 14, "tfidfvector": [14, 19, 69, 257, 339, 362, 396, 399, 467, 566, 567, 568, 998, 1000, 1006, 1007, 1008, 1011, 1012], "countvector": [14, 318, 341, 362, 371, 392, 396, 399, 467, 514, 560, 567, 568, 569, 992, 998, 1000, 1003, 1006, 1007, 1008, 1009, 1010, 1011], "fetch_20newsgroup": [14, 19, 69, 257, 318, 339, 340, 341, 362, 467, 992, 1003, 1008], "n_top_word": 14, "init": [14, 42, 45, 57, 58, 60, 63, 167, 176, 217, 218, 220, 221, 222, 244, 276, 340, 369, 374, 391, 396, 398, 423, 426, 428, 430, 432, 438, 439, 516, 518, 525, 526, 537, 538, 610, 611, 668, 670, 672, 825, 954, 998, 1007, 1010, 1012, 1013], "nndsvda": [14, 396, 516, 518, 525, 1007, 1010], "plot_top_word": 14, "feature_nam": [14, 19, 106, 116, 123, 126, 146, 166, 168, 169, 205, 235, 279, 298, 306, 307, 308, 323, 339, 345, 360, 362, 371, 392, 468, 469, 470, 474, 478, 479, 480, 482, 483, 488, 560, 609, 610, 611, 887, 888, 889, 965, 973], "flatten": [14, 32, 220, 230, 254, 302, 323, 335, 372, 480, 547, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 825], "topic_idx": 14, "top_features_ind": 14, "argsort": [14, 17, 19, 20, 21, 121, 123, 168, 169, 196, 214, 306, 314, 315, 339, 340, 362, 965], "top_featur": 14, "barh": [14, 123, 161, 162, 166, 168, 169, 238, 339, 340, 341], "fontdict": [14, 39], "invert_yaxi": [14, 162, 341], "labels": [14, 302], "set_vis": [14, 280, 286, 298], "filter": [14, 46, 47, 202, 214, 254, 256, 278, 339, 368, 370, 372, 375, 390, 391, 399, 427, 466, 467, 481, 566, 569, 573, 574, 575, 576, 751, 811, 904, 924, 959, 960, 989, 992, 1008], "useless": [14, 118, 259, 372, 400, 493, 506, 636, 690, 953, 967, 1007], "earli": [14, 44, 61, 108, 110, 118, 133, 164, 174, 215, 307, 379, 398, 421, 425, 428, 442, 474, 482, 493, 498, 514, 515, 516, 517, 524, 531, 532, 537, 538, 539, 540, 549, 605, 634, 644, 645, 646, 654, 656, 670, 802, 833, 834, 931, 954, 960, 967, 976, 978, 981, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013], "strip": [14, 214, 340, 354, 361, 362, 474], "header": [14, 69, 257, 339, 340, 362, 365, 399, 466, 467, 774, 777, 778, 788], "footer": [14, 69, 257, 339, 340, 362, 466, 467], "repli": [14, 339, 366, 367, 369], "common": [14, 17, 19, 98, 143, 146, 164, 165, 170, 251, 263, 308, 339, 341, 348, 354, 357, 361, 367, 368, 374, 377, 378, 381, 382, 388, 389, 390, 391, 392, 395, 397, 400, 401, 444, 446, 474, 568, 610, 631, 650, 651, 723, 730, 746, 789, 799, 802, 837, 839, 847, 848, 849, 854, 856, 860, 861, 863, 864, 865, 866, 914, 946, 947, 953, 960, 963, 967, 972, 973, 977, 978, 981, 983, 994, 998, 1006, 1008, 1009, 1013], "english": [14, 19, 69, 339, 340, 341, 371, 399, 566, 567, 569, 977, 978, 992, 1011], "occur": [14, 69, 196, 214, 350, 367, 368, 374, 380, 388, 391, 393, 395, 399, 486, 487, 550, 559, 566, 568, 569, 605, 649, 773, 774, 777, 778, 780, 788, 798, 799, 800, 803, 900, 957, 959, 967, 992, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "data_sampl": 14, "tfidf_vector": 14, "max_df": [14, 257, 318, 339, 340, 566, 569, 1009], "min_df": [14, 19, 69, 257, 318, 339, 340, 399, 566, 569, 998, 1000, 1009], "max_featur": [14, 31, 114, 124, 233, 253, 268, 308, 398, 400, 533, 534, 535, 536, 537, 538, 541, 542, 543, 566, 569, 575, 883, 884, 885, 886, 946, 953, 998, 1000, 1001, 1005, 1006, 1009, 1012], "stop_word": [14, 19, 339, 340, 399, 566, 567, 569], "tfidf": [14, 69, 318, 399, 569, 992], "tf_vector": 14, "beta_loss": [14, 516, 518, 525, 1005], "alpha_w": [14, 396, 516, 518, 525, 1011], "00005": 14, "alpha_h": [14, 396, 516, 518, 525, 1011], "tfidf_feature_nam": 14, "get_feature_names_out": [14, 19, 166, 168, 309, 339, 340, 341, 362, 368, 379, 392, 399, 407, 411, 413, 422, 423, 425, 426, 428, 443, 446, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 967, 1011, 1012, 1013], "solver": [14, 30, 33, 34, 46, 65, 94, 164, 174, 185, 187, 188, 189, 196, 198, 211, 212, 214, 215, 292, 293, 294, 295, 339, 372, 377, 382, 387, 391, 403, 431, 441, 450, 451, 457, 480, 511, 513, 518, 519, 522, 525, 527, 624, 625, 626, 630, 631, 636, 637, 638, 639, 640, 641, 644, 646, 647, 648, 650, 652, 654, 658, 659, 662, 665, 666, 667, 669, 671, 673, 765, 788, 802, 807, 810, 833, 834, 877, 878, 879, 880, 881, 951, 954, 957, 961, 971, 972, 977, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mu": [14, 79, 80, 94, 256, 396, 404, 452, 454, 455, 458, 459, 518, 525, 951, 953, 1005, 1008], "mbnmf": 14, "learning_method": [14, 371, 514], "learning_offset": [14, 514], "tf_feature_nam": 14, "709": [14, 15, 257], "plot_topics_extraction_with_nmf_lda": [14, 15], "650": [15, 389], "execut": [15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 133, 139, 147, 159, 161, 163, 170, 173, 185, 215, 223, 231, 239, 248, 261, 272, 275, 290, 296, 304, 312, 320, 337, 342, 349, 355, 367, 372, 385, 391, 396, 402, 423, 440, 774, 780, 788, 797, 798, 799, 800, 803, 821, 967, 970, 984, 992, 1000, 1003, 1006], "auto_examples_appl": 15, "00": [15, 22, 28, 32, 35, 67, 75, 79, 82, 86, 92, 98, 107, 133, 139, 147, 154, 159, 163, 166, 167, 170, 173, 187, 214, 215, 223, 239, 248, 254, 257, 272, 275, 290, 295, 296, 303, 304, 312, 314, 315, 320, 337, 340, 342, 349, 361, 364, 372, 391, 398, 399, 691, 693, 765, 774, 788, 800, 884, 953, 957, 967, 969, 971, 991], "09": [15, 97, 105, 133, 166, 232, 269, 275, 295, 304, 391, 712, 814, 957, 967, 971], "real": [15, 31, 56, 69, 73, 77, 79, 108, 133, 152, 166, 221, 234, 250, 262, 270, 280, 299, 300, 341, 354, 357, 360, 361, 364, 370, 372, 375, 377, 378, 379, 388, 389, 391, 393, 395, 396, 398, 399, 448, 467, 468, 471, 472, 473, 474, 475, 478, 479, 482, 488, 498, 529, 530, 531, 533, 534, 535, 536, 537, 538, 542, 543, 570, 572, 573, 574, 575, 576, 577, 578, 677, 682, 701, 705, 729, 732, 734, 762, 770, 771, 801, 802, 833, 834, 877, 878, 879, 880, 881, 883, 884, 886, 947, 948, 949, 954, 957, 959, 961, 962, 963, 973, 976, 994, 998, 1011], "svm_gui": [15, 16, 990], "wikipedia_principal_eigenvector": [15, 17], "graphic": [16, 19, 80, 167, 318, 339, 340, 341, 362, 372, 390, 391, 393, 396, 767, 768, 772, 806, 887, 957, 958, 964, 977, 992], "frontend": [16, 372], "mainli": [16, 27, 53, 113, 149, 265, 354, 368, 389, 589, 959, 964], "intend": [16, 56, 57, 99, 197, 339, 367, 368, 373, 377, 395, 447, 560, 651, 677, 845, 846, 856, 873, 952, 953, 957, 961, 968], "didact": [16, 367, 978], "region": [16, 25, 36, 47, 49, 53, 55, 65, 67, 130, 156, 164, 166, 196, 214, 225, 229, 230, 247, 301, 326, 364, 373, 379, 391, 398, 401, 427, 429, 435, 441, 565, 954, 957, 960, 963, 971, 973, 991], "induc": [16, 26, 55, 166, 187, 189, 194, 197, 211, 231, 341, 388, 390, 396, 398, 401, 428, 517, 521, 531, 535, 536, 537, 538, 542, 543, 544, 621, 703, 733, 849, 883, 884, 885, 886, 950, 957, 971, 990], "mous": [16, 361], "button": [16, 367, 374, 990], "prettenho": 16, "tkagg": 16, "backend": [16, 355, 379, 447, 873, 925, 927, 957, 1001, 1006, 1007, 1008, 1009], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 257, 309, 357, 369, 370, 375, 379, 403, 417, 419, 421, 425, 426, 438, 511, 514, 515, 517, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 547, 548, 556, 558, 560, 580, 605, 608, 610, 626, 628, 629, 632, 633, 634, 636, 642, 643, 647, 649, 654, 658, 670, 677, 733, 745, 777, 778, 811, 812, 813, 815, 823, 835, 841, 849, 877, 878, 879, 880, 881, 883, 884, 885, 886, 891, 906, 907, 909, 920, 946, 947, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "contourset": 16, "tkinter": 16, "tk": 16, "dump_svmlight_fil": [16, 998, 999, 1003, 1013], "y_min": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 230, 292, 300, 319, 330, 331, 613, 615], "y_max": [16, 31, 34, 57, 89, 112, 118, 127, 138, 151, 214, 230, 292, 300, 319, 330, 331, 613, 615], "x_min": [16, 31, 34, 52, 57, 89, 112, 118, 122, 127, 138, 151, 185, 230, 292, 300, 319, 330, 331], "x_max": [16, 31, 34, 52, 57, 89, 112, 118, 127, 138, 151, 230, 292, 300, 319, 330, 331], "notifi": [16, 550, 551, 552, 980, 996, 1008], "regist": [16, 339, 372, 925, 927], "surfac": [16, 108, 133, 164, 188, 205, 322, 323, 343, 349, 398, 482, 531, 535, 542, 741, 883, 889, 951, 956, 971, 972, 973], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 172, 333, 431, 513, 617, 618, 621, 752, 754, 877, 878, 879, 880, 881, 955, 972], "kernel_map": 16, "hasattr": [16, 44, 55, 61, 81, 118, 214, 229, 292, 300, 339, 379, 919, 920, 1008], "decision_surfac": 16, "delta": [16, 394, 431], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 116, 135, 164, 249, 255, 257, 260, 272, 379, 395, 401, 480, 545, 605, 637, 643, 691, 774, 777, 778, 788, 802, 880, 946, 953, 957, 1005, 1006, 1007], "docstr": [16, 367, 368, 372, 379, 427, 440, 451, 677, 679, 902, 946, 957, 960, 961, 971, 998, 1005, 1006, 1011, 1012], "set_ytick": [16, 31, 34, 43, 59, 63, 106, 127, 161, 162, 169, 187, 212, 241, 267, 292, 294, 300, 301, 323, 341], "set_xlim": [16, 31, 42, 59, 74, 79, 91, 115, 127, 162, 167, 194, 196, 201, 230, 241, 260, 262, 263, 281, 292, 298, 300, 301, 302, 307, 335], "attributeerror": [16, 392, 537, 554, 919, 991, 1007, 1008, 1010], "get_tk_widget": 16, "pack": [16, 375, 1006], "fill": [16, 34, 118, 135, 168, 251, 281, 345, 379, 392, 396, 493, 505, 516, 518, 525, 565, 608, 887, 889, 947, 960, 973], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 46, 54, 65, 101, 105, 113, 122, 150, 180, 206, 281, 286, 289, 307, 308, 389, 391, 392, 397, 403, 431, 444, 499, 511, 514, 593, 594, 600, 619, 736, 743, 753, 833, 834, 852, 951, 953, 955, 959, 960, 961, 970, 971, 972, 990], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 214, 367, 372, 391, 514, 624, 630, 954, 978, 980, 998, 1003, 1004, 1006, 1011, 1012, 1013], "isinst": [16, 118, 214, 379], "lineset": 16, "support_vector": [16, 324], "place": [16, 59, 226, 235, 280, 354, 365, 367, 368, 371, 373, 380, 399, 401, 421, 425, 460, 461, 462, 493, 559, 568, 606, 608, 609, 745, 758, 772, 936, 937, 977, 998, 1005, 1008, 1009, 1011], "circl": [16, 59, 100, 127, 128, 138, 222, 232, 283, 286, 293, 298, 300, 316, 347, 363, 370, 374, 391, 431, 441, 492, 500, 741, 972], "dash": [16, 33, 79, 110, 121, 131, 149, 152, 154, 166, 183, 188, 191, 197, 198, 205, 208, 209, 234, 256, 266, 328, 332, 971], "bone": [16, 209, 336], "rais": [16, 197, 232, 259, 302, 309, 367, 368, 370, 371, 372, 375, 377, 379, 392, 395, 403, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 487, 511, 528, 537, 545, 551, 554, 566, 567, 569, 581, 595, 607, 608, 610, 613, 614, 649, 674, 676, 677, 680, 687, 689, 690, 691, 692, 704, 706, 707, 715, 733, 755, 759, 760, 761, 764, 765, 766, 772, 773, 774, 777, 778, 780, 788, 798, 799, 800, 803, 808, 823, 825, 826, 831, 835, 840, 841, 849, 850, 854, 855, 856, 862, 878, 879, 880, 881, 890, 893, 895, 896, 898, 899, 916, 919, 941, 942, 943, 944, 957, 967, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "valueerror": [16, 232, 368, 372, 403, 447, 511, 554, 581, 595, 613, 649, 692, 808, 826, 835, 841, 855, 894, 898, 899, 942, 943, 944, 957, 967, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 229, 354, 355, 365, 367, 370, 372, 374, 382, 399, 486, 977, 992, 1000], "anchor": [16, 267], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 164, 174, 188, 205, 215, 232, 259, 321, 323, 326, 331, 337, 490, 636, 637, 644, 646, 652, 653, 654, 655, 875, 877, 879, 880, 971, 972], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 370, 557, 560, 567, 636, 637, 644, 646, 654, 655, 656, 833, 834, 875, 967], "add_opt": 16, "action": [16, 309, 339, 366, 369, 370, 382, 967, 1008], "store": [16, 32, 53, 54, 69, 71, 80, 89, 143, 157, 172, 182, 185, 218, 226, 235, 246, 261, 265, 314, 341, 348, 354, 361, 362, 367, 368, 373, 374, 375, 377, 379, 392, 394, 396, 398, 399, 401, 402, 418, 420, 424, 429, 436, 448, 449, 452, 453, 454, 455, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 486, 512, 513, 519, 527, 528, 533, 534, 541, 547, 548, 567, 588, 589, 605, 609, 610, 613, 616, 627, 628, 632, 638, 639, 640, 641, 644, 645, 651, 653, 654, 655, 656, 666, 667, 668, 670, 675, 676, 678, 679, 680, 758, 772, 773, 774, 780, 788, 816, 817, 818, 819, 820, 822, 824, 825, 826, 827, 828, 831, 847, 854, 856, 872, 895, 896, 928, 931, 947, 949, 953, 960, 969, 972, 973, 977, 983, 992, 995, 998, 999, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "dest": [16, 311], "dump": [16, 17, 385, 465, 816, 817], "argv": [16, 229], "opt": [16, 365, 368], "arg": [16, 293, 379, 396, 398, 405, 549, 550, 551, 552, 553, 554, 555, 595, 677, 840, 953, 959, 960], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 276, 318, 377], "classic": [17, 191, 221, 234, 241, 247, 364, 393, 395, 396, 423, 426, 428, 438, 470, 478, 482, 488, 610, 611, 885, 886, 951, 953, 959, 986, 998, 999, 1003, 1012], "graph": [17, 25, 39, 44, 46, 65, 66, 157, 217, 253, 276, 278, 317, 354, 367, 369, 379, 388, 393, 402, 421, 424, 425, 431, 432, 436, 441, 442, 450, 451, 457, 489, 563, 564, 666, 669, 670, 673, 759, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 831, 871, 954, 957, 960, 962, 970, 973, 977, 981, 988, 991, 998, 1005, 1006, 1008, 1011, 1013], "vertex": [17, 26, 432, 1011], "en": [17, 24, 374, 509, 515, 573, 614, 642, 646, 649, 663, 664, 673, 683, 818, 819, 824, 825, 826, 827, 854, 869, 883, 884, 953, 957, 972, 973], "wiki": [17, 24, 372, 374, 573, 614, 646, 649, 673, 683, 818, 819, 824, 825, 826, 827, 854, 869, 883, 884, 953, 973], "eigenvector_centr": 17, "webpag": [17, 172, 367], "pagerank": 17, "insid": [17, 19, 26, 167, 198, 256, 316, 326, 356, 361, 362, 368, 372, 391, 399, 566, 567, 569, 855, 925, 964, 981], "accord": [17, 24, 26, 37, 49, 77, 121, 146, 150, 179, 196, 214, 229, 306, 340, 350, 367, 368, 377, 378, 379, 380, 388, 391, 393, 395, 396, 398, 399, 401, 417, 429, 431, 435, 439, 441, 444, 448, 482, 494, 495, 496, 503, 508, 510, 513, 514, 516, 518, 528, 531, 532, 539, 540, 541, 544, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 619, 620, 622, 623, 627, 636, 637, 648, 658, 669, 673, 712, 756, 757, 774, 775, 776, 777, 778, 781, 782, 783, 788, 797, 811, 812, 813, 814, 815, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 839, 846, 854, 865, 867, 868, 875, 876, 877, 878, 880, 881, 920, 951, 953, 957, 959, 960, 967, 970, 971, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tradit": [17, 196, 211, 340, 356, 389, 398, 399, 610, 672, 953, 956, 981], "power_iter": 17, "martinsson": [17, 513, 519, 912], "dbpedia": 17, "content": [17, 303, 339, 341, 362, 370, 372, 385, 390, 399, 464, 481, 486, 487, 566, 567, 569, 649, 889, 966, 981, 992, 999, 1008], "bz2": [17, 486, 487], "bz2file": 17, "pprint": [17, 122, 257, 362, 907], "randomized_svd": [17, 375, 430, 432, 510, 519, 522, 524, 998, 999, 1004, 1011, 1012, 1013], "urlopen": 17, "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 42, 122, 161, 196, 294, 308, 353, 357, 369, 378, 777, 778, 958, 975, 978, 981, 984, 994, 1006, 1011, 1012], "wait": [17, 367, 370, 379, 644, 645, 646, 654, 656, 1010], "wb": 17, "index_map": 17, "setdefault": [17, 890], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 69, 257, 278, 306, 367, 374, 401, 407, 422, 423, 425, 426, 428, 443, 446, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 617, 618, 619, 620, 666, 667, 780, 800, 820, 825, 828, 832, 836, 842, 867, 868, 1004, 1005, 1011], "get_redirect": 17, "transit": [17, 370, 1009], "malform": [17, 1002], "1000000": [17, 514], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 25, 40, 65, 81, 98, 105, 116, 122, 166, 167, 192, 221, 228, 293, 298, 303, 326, 339, 362, 368, 370, 378, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 407, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 499, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 601, 605, 606, 607, 608, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 932, 938, 946, 952, 960, 961, 973, 981, 987, 988, 990, 991, 1010, 1011, 1012, 1013], "break": [17, 39, 46, 69, 80, 164, 185, 202, 243, 309, 315, 321, 337, 339, 341, 367, 368, 370, 372, 378, 391, 448, 490, 617, 751, 755, 758, 772, 849, 856, 860, 877, 880, 953, 956, 965, 967, 972, 978, 998, 999, 1005, 1006, 1008, 1010], "get_adjacency_matrix": 17, "resolv": [17, 366, 367, 370, 374, 380, 399, 431, 441, 669, 673, 912, 947, 957, 1005, 1007, 1008, 1011], "lil_matrix": 17, "float32": [17, 121, 220, 295, 311, 355, 362, 367, 368, 535, 536, 537, 538, 541, 542, 543, 544, 571, 572, 618, 619, 636, 740, 841, 883, 884, 885, 886, 893, 933, 934, 935, 973, 983, 992, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "del": [17, 372, 1010, 1011], "convert": [17, 34, 46, 48, 65, 70, 98, 154, 169, 196, 217, 237, 242, 243, 246, 247, 289, 354, 361, 375, 377, 379, 385, 399, 420, 423, 424, 426, 428, 429, 430, 431, 438, 443, 444, 474, 512, 519, 531, 532, 535, 536, 537, 538, 541, 542, 543, 544, 550, 559, 560, 566, 567, 568, 569, 571, 572, 584, 605, 606, 607, 608, 624, 630, 636, 637, 638, 640, 644, 646, 648, 652, 654, 655, 656, 670, 677, 755, 831, 840, 841, 843, 847, 849, 850, 851, 853, 875, 883, 884, 885, 886, 893, 895, 896, 918, 942, 943, 946, 953, 954, 955, 957, 967, 968, 972, 973, 992, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010], "csr": [17, 341, 354, 361, 362, 375, 377, 379, 399, 402, 423, 426, 428, 429, 438, 475, 486, 501, 531, 532, 535, 536, 542, 543, 544, 608, 636, 670, 677, 692, 745, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 831, 839, 843, 845, 847, 848, 851, 854, 856, 858, 859, 860, 862, 865, 868, 883, 884, 885, 886, 891, 895, 896, 918, 922, 932, 933, 934, 935, 936, 937, 938, 960, 967, 971, 998, 999, 1004, 1006, 1007, 1013], "tocsr": 17, "convers": [17, 122, 187, 339, 350, 356, 361, 367, 368, 374, 377, 385, 399, 550, 831, 840, 848, 895, 896, 943, 954, 978, 981, 1006, 1007, 1008, 1011], "5m": 17, "ram": [17, 53, 356, 398, 867, 868, 959, 972, 992, 1004, 1010], "5000000": 17, "strongest": [17, 189], "highest": [17, 19, 26, 81, 142, 146, 254, 256, 267, 308, 339, 367, 377, 389, 395, 398, 400, 417, 533, 535, 542, 570, 573, 574, 576, 577, 578, 581, 582, 584, 613, 615, 703, 733, 769, 772, 774, 777, 778, 788, 872, 883, 914, 946, 953, 957, 958, 961, 971, 973, 1010], "centrality_scor": 17, "networkx": [17, 375], "copyright": [17, 81], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 364], "dan": [17, 998, 1002, 1003, 1004, 1006, 1007], "schult": 17, "dschult": 17, "pieter": [17, 1004, 1005, 1012], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 105, 195, 229, 260, 341, 388, 402, 424, 501, 502, 509, 515, 520, 526, 566, 569, 663, 664, 677, 818, 819, 822, 824, 826, 827, 953, 957], "indptr": [17, 276, 348, 1006], "dangl": 17, "isclos": 17, "guess": [17, 118, 395, 398, 399, 457, 510, 516, 518, 519, 525, 957, 971], "prev_scor": 17, "dot": [17, 32, 33, 34, 44, 49, 54, 56, 61, 77, 78, 79, 81, 84, 85, 96, 97, 98, 103, 105, 113, 149, 150, 156, 157, 166, 177, 180, 188, 190, 191, 203, 230, 242, 243, 245, 246, 260, 322, 324, 354, 368, 372, 375, 379, 388, 396, 399, 511, 516, 518, 525, 568, 569, 592, 624, 625, 628, 630, 631, 632, 635, 638, 639, 640, 641, 659, 660, 661, 662, 665, 738, 740, 848, 887, 913, 955, 959, 967, 971, 972, 991, 1007], "converg": [17, 56, 60, 77, 78, 110, 120, 122, 149, 155, 158, 189, 198, 200, 204, 212, 244, 293, 294, 298, 315, 356, 375, 379, 388, 391, 396, 399, 401, 403, 420, 423, 426, 427, 428, 431, 433, 438, 439, 440, 441, 450, 451, 457, 460, 461, 462, 511, 513, 514, 515, 516, 517, 524, 531, 549, 588, 622, 623, 624, 625, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 646, 650, 652, 654, 656, 660, 661, 665, 666, 668, 669, 672, 673, 772, 773, 825, 833, 834, 870, 871, 877, 947, 952, 953, 954, 956, 961, 971, 998, 1001, 1002, 1003, 1005, 1006, 1009, 1011, 1012, 1013], "l_inf": 17, "scores_max": 17, "err": [17, 84, 99], "6f": [17, 99, 261, 714, 770], "concern": [18, 36, 76, 83, 87, 93, 108, 140, 148, 160, 164, 171, 174, 216, 240, 246, 273, 277, 291, 297, 313, 321, 338, 343, 354, 368, 390, 954, 969], "modul": [18, 36, 37, 49, 53, 76, 83, 87, 93, 95, 108, 140, 148, 158, 160, 164, 165, 171, 174, 211, 216, 217, 240, 249, 273, 277, 291, 293, 294, 297, 313, 321, 338, 343, 346, 361, 362, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 379, 381, 382, 385, 388, 389, 390, 391, 394, 398, 399, 400, 402, 424, 481, 513, 556, 558, 637, 870, 904, 946, 951, 953, 955, 957, 958, 961, 963, 964, 967, 969, 971, 973, 974, 981, 986, 987, 992, 999, 1000, 1001, 1003, 1004, 1008, 1010, 1012], "demo": [18, 22, 36, 67, 125, 164, 202, 246, 257, 265, 339, 340, 368, 388, 391, 399, 420, 421, 424, 426, 427, 429, 430, 432, 434, 437, 480, 489, 490, 491, 519, 682, 683, 695, 697, 714, 768, 770, 837, 856], "spectral": [18, 22, 36, 44, 46, 49, 67, 164, 218, 219, 367, 399, 428, 430, 431, 432, 441, 448, 449, 450, 451, 452, 453, 454, 455, 466, 489, 491, 569, 666, 667, 668, 669, 670, 673, 697, 770, 960, 970, 993, 994, 998, 999], "twenti": [19, 229, 364, 388, 391, 992], "comp": [19, 84, 85, 98, 106, 295, 318, 339, 340, 341, 362, 992], "window": [19, 318, 362, 367, 368, 369, 399, 977, 998, 1001, 1005, 1009, 1011, 1012], "misc": [19, 53, 98, 257, 318, 339, 340, 341, 362, 991], "categori": [19, 44, 61, 69, 70, 119, 129, 166, 167, 196, 204, 211, 234, 257, 293, 294, 300, 308, 311, 318, 339, 340, 341, 361, 362, 375, 390, 391, 392, 398, 399, 401, 466, 474, 475, 481, 539, 540, 626, 636, 637, 647, 658, 720, 735, 736, 812, 849, 850, 947, 953, 954, 955, 959, 965, 983, 992, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "noth": [19, 69, 339, 340, 371, 520, 561, 566, 567, 569, 692, 839, 848, 896, 967], "frequenc": [19, 27, 149, 167, 190, 196, 229, 307, 308, 339, 340, 341, 362, 370, 377, 389, 395, 396, 398, 399, 529, 535, 537, 538, 539, 542, 566, 567, 568, 569, 582, 636, 637, 642, 644, 646, 652, 653, 654, 663, 664, 805, 840, 849, 875, 877, 880, 883, 885, 901, 953, 954, 959, 967, 971, 973, 1000, 1002, 1003, 1009], "dhillon": [19, 388, 430, 432, 489], "cut": [19, 46, 64, 65, 219, 370, 377, 388, 391, 431, 432, 441, 566, 569, 669, 673, 967], "minibatchkmean": [19, 36, 44, 50, 60, 67, 164, 340, 356, 391, 396, 420, 422, 426, 490, 756, 999, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013], "coclust": [19, 388, 430, 491], "4431": 19, "3177": 19, "1961": 19, "4388": 19, "talk": [19, 69, 257, 339, 340, 341, 357, 362, 379, 385, 981, 984, 992], "polit": [19, 339, 362, 366, 953, 958], "gun": [19, 362], "17": [19, 39, 52, 73, 79, 150, 166, 170, 195, 259, 292, 296, 302, 362, 365, 371, 382, 383, 384, 391, 395, 401, 424, 440, 465, 475, 501, 509, 514, 518, 525, 527, 528, 533, 537, 538, 547, 548, 575, 606, 627, 635, 636, 637, 644, 647, 650, 652, 665, 670, 706, 707, 717, 738, 743, 761, 764, 766, 792, 814, 825, 840, 845, 846, 854, 856, 861, 877, 880, 883, 884, 885, 886, 946, 947, 958, 960, 967, 975, 996, 998, 999, 1000, 1001, 1004, 1007, 1012], "sci": [19, 69, 339, 340, 341, 362, 377, 667, 671, 847, 954, 967, 992], "med": [19, 69, 265, 362, 967, 992], "geb": 19, "gordon": [19, 244, 1004, 1008, 1010, 1012], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1269": 19, "3558": 19, "soc": [19, 362, 992], "religion": [19, 257, 339, 340, 341, 362, 958, 992], "mideast": [19, 362], "alt": [19, 257, 318, 339, 340, 341, 362, 374, 992], "atheism": [19, 257, 318, 339, 340, 341, 362, 992], "god": [19, 339, 340, 992], "jesu": [19, 339, 340], "kent": 19, "belief": [19, 256, 832, 962], "christ": 19, "faith": [19, 155, 331], "moral": [19, 70, 339, 340, 636, 1006, 1010, 1011], "2201": 19, "2747": 19, "mac": [19, 318, 362, 367, 686, 957], "hardwar": [19, 318, 341, 354, 355, 362, 365, 975, 1012, 1013], "pc": [19, 303, 318, 341, 362], "voltag": 19, "dsp": 19, "stereo": 19, "ship": [19, 129, 162, 345, 355, 365, 382, 399, 953, 998, 1007], "1773": 19, "2620": 19, "rec": [19, 341, 362, 619], "motorcycl": [19, 362], "auto": [19, 33, 44, 45, 48, 56, 57, 59, 91, 95, 153, 179, 217, 218, 219, 220, 222, 234, 236, 276, 279, 284, 307, 308, 309, 310, 311, 322, 323, 329, 332, 333, 341, 361, 362, 367, 368, 398, 401, 402, 421, 424, 425, 426, 428, 429, 431, 436, 438, 441, 474, 486, 487, 513, 519, 522, 527, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 571, 572, 575, 580, 585, 586, 607, 609, 610, 611, 613, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 650, 651, 652, 658, 659, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 680, 718, 777, 778, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 833, 834, 849, 850, 867, 868, 872, 877, 878, 879, 880, 881, 883, 884, 885, 886, 911, 912, 926, 948, 951, 953, 954, 960, 977, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "forsal": [19, 341, 362], "bike": [19, 964], "car": [19, 196], "dod": 19, "ride": 19, "helmet": 19, "bmw": 19, "201": [19, 121, 364, 562], "1175": 19, "turkish": 19, "armenia": 19, "armenian": 19, "turk": 19, "petch": 19, "sera": 19, "zuma": 19, "argic": 19, "gvg47": 19, "spectralcoclust": [19, 21, 388, 430, 1000, 1005, 1009], "v_measure_scor": [19, 37, 38, 49, 57, 340, 391, 695, 713, 714, 734, 957, 1007], "number_norm": 19, "token": [19, 341, 354, 362, 399, 514, 566, 567, 568, 569, 998, 1006, 1010], "placehold": [19, 370, 605, 606, 607, 608, 789, 790, 793, 794, 947], "begin": [19, 149, 251, 258, 274, 309, 339, 350, 367, 371, 372, 379, 388, 391, 398, 531, 532, 537, 539, 540, 644, 645, 654, 655, 656, 946, 953, 957, 967, 969, 971, 1006, 1012, 1013], "By": [19, 45, 95, 125, 126, 175, 265, 298, 306, 339, 355, 367, 372, 373, 379, 391, 392, 394, 395, 396, 397, 398, 400, 418, 421, 425, 429, 443, 446, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 502, 504, 527, 528, 535, 536, 537, 538, 542, 543, 563, 564, 566, 567, 569, 584, 587, 610, 611, 649, 651, 653, 655, 668, 670, 672, 675, 678, 680, 681, 696, 706, 707, 711, 715, 760, 761, 764, 769, 771, 777, 778, 822, 836, 837, 849, 850, 852, 854, 863, 865, 878, 879, 883, 884, 885, 886, 895, 896, 925, 946, 947, 949, 953, 957, 964, 967, 969, 973, 983, 987, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012], "isdigit": [19, 399], "numbernormalizingvector": 19, "build_token": [19, 399, 566, 567, 569], "super": [19, 25, 27, 368, 399, 1006], "sport": [19, 362], "basebal": [19, 362], "hockei": [19, 362], "crypt": [19, 362], "electron": [19, 362, 364, 516, 518, 525, 605], "y_true": [19, 32, 58, 74, 129, 152, 196, 206, 214, 244, 317, 367, 412, 418, 419, 444, 460, 461, 462, 530, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 675, 676, 678, 679, 680, 681, 685, 686, 687, 690, 691, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 759, 760, 761, 762, 764, 765, 766, 769, 771, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 957, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013], "n_cluster": [19, 20, 21, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 95, 310, 340, 367, 379, 391, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 439, 440, 441, 442, 489, 491, 991, 998, 1002, 1004, 1006, 1007, 1009, 1012], "svd_method": [19, 430, 432, 510, 1001], "kmean": [19, 36, 43, 45, 46, 48, 50, 53, 56, 57, 58, 60, 67, 164, 244, 247, 301, 310, 340, 375, 391, 420, 423, 427, 428, 431, 438, 441, 490, 767, 768, 772, 773, 841, 960, 967, 978, 991, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "20000": [19, 97], "n_init": [19, 42, 43, 44, 45, 48, 50, 56, 57, 59, 60, 63, 95, 217, 218, 219, 220, 307, 310, 340, 391, 423, 426, 428, 430, 431, 432, 438, 441, 668, 672, 772, 773, 991, 998, 1006, 1012, 1013], "y_coclust": 19, "row_labels_": [19, 20, 21, 388, 430, 432], "y_kmean": 19, "fit_predict": [19, 55, 56, 59, 225, 283, 368, 379, 391, 409, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 448, 541, 655, 772, 773, 822, 828, 836, 879, 963, 1003, 1006, 1007, 1011, 1013], "document_nam": 19, "bicluster_ncut": 19, "col": [19, 25, 27, 38, 42, 49, 58, 62, 63, 69, 130, 217, 234, 335, 489, 491], "get_indic": [19, 406, 430, 432], "float_info": 19, "row_compl": 19, "logical_not": [19, 63, 105, 199], "rows_": [19, 388, 406, 430, 432], "col_compl": 19, "columns_": [19, 388, 406, 430, 432], "ident": [19, 63, 121, 191, 196, 214, 225, 229, 319, 339, 362, 368, 379, 388, 391, 392, 393, 395, 401, 404, 418, 419, 431, 443, 444, 452, 454, 455, 458, 459, 466, 481, 529, 537, 538, 542, 543, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 621, 657, 658, 677, 682, 683, 713, 762, 770, 776, 779, 789, 790, 791, 793, 794, 818, 819, 825, 833, 834, 840, 841, 853, 864, 883, 884, 950, 951, 954, 957, 960, 961, 972, 1002, 1006, 1007, 1008, 1012], "most_common": 19, "counter": [19, 391, 654, 655, 656, 1011], "itemgett": 19, "revers": [19, 74, 146, 201, 256, 512, 519, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 589, 766, 836, 957, 998, 999, 1008, 1010], "best_idx": [19, 255], "get_shap": [19, 406, 430, 432], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 57], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "725": [19, 22, 301, 304], "plot_bicluster_newsgroup": [19, 22], "checkerboard": [20, 388, 430, 432, 489, 491], "make_checkerboard": [20, 489, 1000], "rearrang": [20, 21, 388], "outer": [20, 100, 261, 316, 430, 492, 618, 628, 629, 632, 949, 999], "product": [20, 95, 130, 149, 154, 167, 350, 354, 368, 369, 372, 375, 385, 388, 396, 398, 430, 516, 518, 525, 560, 567, 568, 569, 591, 592, 611, 618, 642, 643, 663, 664, 738, 740, 752, 754, 848, 851, 867, 868, 913, 946, 949, 953, 955, 967, 969, 971, 972, 977, 981, 1006], "consensu": [20, 21, 37, 366, 367, 380, 388, 391, 627, 649, 656, 657, 697, 957], "kemaleren": [20, 21], "spectralbiclust": [20, 388, 432, 1000, 1004, 1005, 1009], "consensus_scor": [20, 21, 388, 1000], "matshow": [20, 21, 65, 117, 144, 294, 480], "row_idx": [20, 21, 196], "permut": [20, 21, 37, 80, 117, 123, 138, 164, 165, 170, 212, 249, 272, 381, 386, 391, 398, 443, 474, 478, 482, 537, 538, 542, 543, 605, 608, 612, 657, 682, 683, 695, 713, 714, 732, 734, 770, 791, 793, 801, 802, 836, 850, 880, 883, 884, 912, 926, 928, 931, 957, 971, 987, 990, 994, 998, 1004, 1011], "col_idx": [20, 21], "biclusters_": [20, 21, 406, 430, 432], "1f": [20, 30, 50, 53, 94, 98, 176, 196, 229, 241, 243, 263, 306, 340, 341], "fit_data": [20, 21], "column_labels_": [20, 21, 388, 430, 432], "529": [20, 22], "plot_spectral_biclust": [20, 22], "biclust": [21, 22, 357, 399, 406, 428, 430, 432, 466, 489, 491, 569, 697, 770, 957, 993, 994, 1000, 1004, 1005], "make_biclust": [21, 491, 1000], "implant": 21, "351": [21, 22], "plot_spectral_coclust": [21, 22], "auto_examples_biclust": 22, "probabl": [23, 27, 28, 29, 35, 74, 91, 108, 109, 110, 130, 133, 141, 148, 149, 150, 151, 159, 164, 166, 217, 221, 226, 229, 256, 259, 262, 263, 266, 298, 302, 306, 308, 317, 319, 354, 357, 362, 363, 368, 372, 377, 379, 391, 395, 396, 399, 400, 401, 415, 416, 417, 418, 419, 426, 428, 482, 490, 493, 501, 505, 527, 528, 529, 531, 533, 535, 537, 539, 540, 542, 545, 547, 548, 571, 572, 588, 591, 592, 600, 605, 610, 611, 636, 637, 649, 654, 670, 676, 678, 680, 681, 684, 685, 687, 690, 694, 698, 703, 704, 706, 716, 717, 718, 719, 733, 759, 761, 764, 765, 766, 769, 772, 773, 774, 777, 778, 788, 801, 802, 805, 807, 808, 811, 812, 813, 814, 815, 818, 821, 826, 832, 833, 868, 869, 870, 871, 872, 875, 877, 880, 883, 885, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 967, 969, 970, 971, 973, 978, 979, 980, 992, 994, 998, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012], "confid": [24, 25, 26, 27, 154, 156, 242, 256, 259, 317, 380, 389, 401, 614, 636, 637, 644, 646, 649, 652, 653, 654, 676, 680, 685, 698, 703, 704, 716, 717, 733, 766, 804, 843, 875, 877, 880, 953, 956, 957, 958, 963, 970, 971, 972, 981, 992, 1008], "being": [24, 27, 45, 52, 81, 85, 89, 100, 114, 126, 149, 154, 166, 168, 172, 190, 250, 256, 302, 303, 326, 339, 341, 365, 366, 367, 368, 371, 377, 379, 380, 385, 391, 393, 395, 398, 399, 400, 401, 402, 421, 422, 424, 425, 429, 435, 448, 471, 501, 547, 618, 627, 634, 650, 652, 665, 668, 672, 690, 696, 711, 713, 760, 766, 772, 816, 817, 822, 824, 826, 827, 828, 851, 868, 913, 946, 947, 953, 956, 957, 960, 963, 964, 965, 967, 969, 971, 972, 973, 998, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013], "postprocess": [24, 389, 513, 519], "brier": [24, 25, 389, 687], "brier_scor": 24, "sigmoid": [24, 25, 26, 27, 359, 398, 417, 431, 513, 539, 598, 617, 621, 742, 751, 754, 833, 834, 877, 878, 879, 880, 881, 962, 972, 990, 994, 1011], "isoton": [24, 25, 164, 224, 239, 357, 417, 635, 898, 979, 994, 999, 1000, 1001, 1002, 1004, 1011], "belong": [24, 27, 59, 234, 256, 306, 316, 361, 362, 388, 389, 391, 394, 395, 398, 406, 420, 423, 426, 427, 428, 430, 432, 501, 690, 708, 781, 787, 797, 823, 843, 953, 956, 957, 959, 960, 961, 963, 972, 977, 983, 990], "mblondel": [24, 48, 187, 218, 257, 339, 361, 486], "telecom": [24, 25, 42, 225, 981], "balaz": [24, 1002], "kegl": [24, 1002], "jhm": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231], "informatik": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231, 957], "uni": [24, 25, 26, 27, 73, 114, 149, 150, 152, 153, 154, 155, 156, 158, 187, 230, 231, 316, 334], "bremen": [24, 25, 26, 27, 149, 150, 152, 153, 154, 155, 156, 158, 231], "style": [24, 26, 80, 122, 185, 204, 214, 260, 367, 373, 391, 399, 423, 426, 438, 678, 780, 895, 896, 998, 1001, 1012], "make_blob": [24, 26, 33, 38, 42, 43, 44, 49, 55, 56, 58, 59, 61, 62, 63, 90, 188, 208, 225, 244, 301, 307, 310, 324, 327, 328, 335, 363, 368, 369, 398, 493, 1006, 1009, 1012], "50000": 24, "n_bin": [24, 25, 27, 53, 196, 214, 299, 301, 418, 419, 841, 967], "calibration_curv": [24, 389, 417, 418, 1007, 1012], "blob": [24, 33, 42, 44, 56, 61, 63, 90, 372, 391, 427, 490, 1003], "sample_weight": [24, 177, 196, 209, 214, 307, 336, 367, 379, 391, 398, 402, 408, 412, 417, 423, 424, 426, 428, 438, 444, 448, 460, 461, 462, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 588, 589, 612, 613, 615, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 675, 676, 678, 680, 681, 685, 686, 687, 690, 691, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 711, 712, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 759, 760, 761, 762, 764, 765, 766, 769, 771, 774, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 821, 823, 826, 827, 833, 834, 836, 855, 856, 870, 871, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 945, 957, 971, 972, 973, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "sw_train": [24, 307], "sw_test": [24, 307], "calibratedclassifiercv": [24, 25, 26, 350, 379, 389, 654, 946, 972, 978, 1002, 1004, 1007, 1008, 1010, 1011, 1012, 1013], "brier_score_loss": [24, 25, 389, 957, 1006, 1007, 1008], "gaussiannb": [24, 25, 27, 31, 131, 258, 303, 350, 389, 398, 417, 547, 811, 812, 813, 815, 837, 951, 958, 959, 1002, 1003, 1004, 1006, 1011], "With": [24, 34, 44, 66, 74, 100, 120, 142, 164, 167, 196, 198, 224, 226, 231, 232, 238, 239, 256, 280, 354, 357, 362, 367, 368, 379, 391, 392, 395, 398, 400, 417, 419, 479, 610, 611, 636, 745, 834, 837, 839, 850, 856, 882, 884, 950, 953, 954, 957, 958, 960, 961, 964, 971, 973, 983, 984, 991, 995, 1001, 1005, 1006, 1008, 1010, 1012], "itself": [24, 49, 122, 125, 167, 194, 237, 265, 326, 340, 354, 356, 366, 367, 368, 370, 379, 390, 391, 402, 420, 421, 424, 425, 448, 449, 450, 451, 452, 453, 454, 455, 505, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 529, 544, 547, 561, 570, 573, 574, 576, 577, 578, 580, 581, 617, 618, 619, 620, 621, 623, 633, 667, 669, 767, 768, 811, 812, 813, 814, 815, 816, 817, 821, 829, 830, 841, 842, 843, 870, 871, 949, 953, 954, 956, 960, 961, 965, 1002], "prob_pos_clf": 24, "predict_proba": [24, 25, 26, 27, 30, 34, 127, 131, 150, 151, 152, 153, 265, 292, 300, 306, 308, 339, 368, 373, 379, 389, 390, 398, 417, 418, 419, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 547, 571, 572, 588, 597, 598, 600, 601, 609, 610, 611, 636, 637, 654, 676, 678, 680, 718, 719, 765, 772, 773, 774, 777, 778, 788, 797, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 818, 826, 833, 836, 843, 870, 871, 872, 877, 880, 883, 885, 953, 957, 959, 961, 964, 970, 971, 972, 973, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "clf_isoton": 24, "prob_pos_isoton": 24, "clf_sigmoid": 24, "prob_pos_sigmoid": 24, "clf_score": 24, "No": [24, 112, 124, 188, 202, 204, 205, 315, 331, 334, 345, 364, 374, 377, 382, 391, 453, 537, 538, 560, 567, 568, 569, 613, 623, 642, 654, 656, 663, 664, 772, 953], "clf_isotonic_scor": 24, "clf_sigmoid_scor": 24, "084": [24, 234, 239], "109": [24, 53, 98, 122, 133, 958, 1000], "y_uniqu": 24, "rainbow": [24, 219], "this_i": [24, 202], "this_x": [24, 194, 202, 990], "this_sw": 24, "lexsort": 24, "51": [24, 91, 154, 214, 391, 392, 758, 952, 953], "uncalibr": [24, 25, 26, 417], "gnb": [24, 25, 27, 131, 303, 398, 547, 959], "362": [24, 28], "plot_calibr": [24, 28], "reliabl": [25, 27, 389, 395, 418, 419, 624, 973, 981], "diagram": [25, 27, 70, 236, 307, 389, 391, 418, 419, 447, 873, 1009, 1010], "redund": [25, 27, 106, 145, 242, 247, 350, 363, 366, 367, 371, 379, 389, 493, 612, 978, 992, 1010], "uninform": [25, 27, 363, 371, 399, 946, 953, 1006], "rest": [25, 30, 119, 123, 164, 174, 211, 215, 244, 306, 318, 323, 372, 379, 390, 401, 490, 588, 622, 636, 637, 654, 731, 765, 804, 805, 806, 825, 875, 877, 880, 953, 957, 958, 961, 964, 972, 981, 1002, 1003, 1012, 1013], "make_classif": [25, 27, 31, 90, 114, 115, 116, 120, 143, 145, 253, 259, 267, 268, 286, 292, 300, 306, 308, 334, 350, 363, 369, 387, 417, 418, 490, 531, 533, 535, 542, 644, 675, 676, 678, 680, 800, 806, 833, 836, 875, 946, 957, 958, 967, 972, 1004, 1005, 1006, 1008], "100_000": [25, 27, 166], "n_inform": [25, 27, 31, 90, 114, 116, 143, 145, 175, 199, 253, 259, 269, 286, 292, 300, 306, 334, 368, 371, 493, 502, 531, 532, 533, 534, 542, 543, 643, 806, 958, 1006], "n_redund": [25, 27, 31, 90, 116, 143, 145, 253, 259, 286, 292, 300, 371, 417, 493, 531, 533, 542, 806], "logisticregress": [25, 27, 30, 70, 72, 115, 131, 137, 145, 179, 186, 187, 188, 189, 203, 211, 212, 226, 227, 236, 238, 259, 265, 274, 295, 300, 306, 307, 308, 309, 310, 339, 354, 367, 368, 372, 374, 378, 389, 392, 398, 400, 418, 545, 547, 575, 609, 612, 621, 630, 637, 650, 651, 652, 653, 654, 665, 678, 765, 788, 807, 808, 810, 860, 861, 863, 864, 865, 866, 882, 907, 953, 957, 958, 967, 971, 972, 988, 990, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "baselin": [25, 119, 122, 132, 146, 175, 214, 266, 274, 308, 340, 364, 391, 400, 529, 530, 612, 957, 960, 992], "regular": [25, 36, 67, 70, 72, 78, 100, 108, 133, 156, 161, 164, 174, 175, 176, 181, 183, 184, 185, 187, 196, 210, 214, 215, 231, 242, 250, 257, 260, 269, 281, 282, 291, 294, 295, 296, 321, 323, 325, 326, 327, 337, 339, 341, 344, 354, 367, 370, 377, 378, 389, 391, 393, 394, 396, 397, 398, 401, 417, 423, 426, 450, 455, 457, 458, 459, 482, 490, 492, 493, 498, 500, 502, 506, 516, 517, 518, 521, 525, 526, 528, 537, 539, 540, 566, 567, 569, 616, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 667, 671, 712, 718, 727, 772, 773, 791, 802, 803, 833, 834, 837, 856, 875, 876, 877, 878, 880, 881, 882, 946, 947, 949, 950, 951, 954, 956, 962, 963, 967, 970, 971, 972, 979, 981, 987, 988, 990, 994, 998, 999, 1000, 1002, 1003, 1007, 1008, 1010, 1011], "logist": [25, 27, 30, 68, 70, 75, 115, 137, 164, 174, 215, 226, 238, 274, 295, 303, 310, 339, 379, 389, 392, 398, 400, 401, 417, 467, 474, 480, 482, 490, 519, 537, 539, 549, 588, 624, 635, 636, 637, 644, 646, 654, 718, 774, 788, 802, 832, 833, 834, 836, 856, 882, 898, 900, 957, 961, 962, 971, 972, 979, 981, 988, 994, 1002, 1005, 1006, 1008, 1009], "guid": [25, 68, 95, 158, 164, 166, 167, 184, 217, 263, 282, 283, 286, 306, 307, 308, 309, 310, 311, 357, 365, 366, 367, 371, 372, 373, 378, 379, 380, 390, 392, 398, 402, 403, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 597, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 908, 958, 985, 992, 998, 999, 1000, 1001, 1003, 1005, 1007, 1008], "gridspec": [25, 27, 64, 241, 373], "calibrationdisplai": [25, 27, 389, 1011, 1012], "lr": [25, 27, 115, 131, 132, 199, 211, 227, 228, 252, 259, 378, 398, 546, 547, 548, 690], "gnb_isoton": 25, "gnb_sigmoid": 25, "clf_list": [25, 27], "get_cmap": [25, 27, 331], "dark2": [25, 27, 218], "ax_calibration_curv": [25, 27], "calibration_displai": [25, 27], "histogram": [25, 27, 53, 196, 229, 262, 281, 298, 308, 389, 537, 538, 539, 540, 620, 735, 736, 949, 955, 967, 979, 993, 994, 1010, 1013], "grid_posit": [25, 27], "y_prob": [25, 27, 152, 418, 419, 687, 807, 833, 957, 1012], "poorli": [25, 61, 77, 85, 113, 124, 221, 355, 391, 398, 506, 608, 953, 954, 1004], "violat": [25, 326, 374, 377, 379, 613, 899, 964, 971, 973], "independ": [25, 27, 37, 46, 96, 97, 99, 115, 118, 156, 167, 233, 256, 259, 261, 265, 274, 298, 306, 340, 350, 354, 355, 363, 368, 370, 378, 379, 382, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 403, 428, 443, 466, 481, 493, 494, 495, 496, 498, 510, 511, 513, 515, 517, 518, 524, 525, 529, 530, 582, 585, 586, 603, 618, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 650, 651, 652, 653, 682, 683, 695, 713, 714, 732, 734, 770, 776, 801, 805, 807, 809, 810, 848, 852, 853, 854, 856, 859, 860, 861, 862, 864, 865, 866, 869, 877, 878, 879, 880, 881, 906, 946, 949, 951, 953, 954, 957, 958, 959, 962, 964, 967, 972, 973, 993, 994, 998, 999, 1004, 1006, 1008, 1013], "overli": [25, 26, 185, 261, 350, 396, 957], "typic": [25, 27, 99, 110, 172, 196, 214, 231, 258, 259, 263, 265, 266, 282, 283, 308, 326, 340, 354, 360, 361, 362, 365, 368, 369, 375, 378, 379, 389, 390, 391, 392, 395, 396, 398, 399, 401, 423, 426, 428, 474, 529, 531, 533, 534, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 607, 616, 618, 621, 632, 633, 634, 649, 660, 661, 690, 843, 854, 911, 912, 942, 946, 950, 953, 954, 956, 957, 958, 959, 963, 965, 981, 992, 1007, 1011], "transpos": [25, 84, 256, 403, 504, 516, 518, 525, 638, 639, 640, 641, 765, 912, 943, 957, 969, 991, 998, 1012], "nearli": [25, 259, 362, 379, 390, 741, 957, 960, 969, 992], "albeit": 25, "strongli": [25, 27, 81, 85, 98, 119, 123, 166, 178, 211, 262, 339, 367, 381, 382, 389, 398, 636, 713, 770, 953, 954, 994, 1007], "plenti": 25, "greater": [25, 91, 112, 166, 213, 230, 244, 262, 274, 282, 283, 344, 354, 363, 371, 379, 389, 391, 394, 398, 421, 425, 428, 431, 442, 451, 514, 519, 535, 536, 537, 538, 539, 540, 542, 543, 544, 571, 572, 575, 588, 589, 606, 618, 620, 623, 642, 644, 645, 649, 654, 655, 656, 670, 687, 690, 698, 712, 713, 716, 719, 765, 770, 772, 773, 806, 818, 819, 826, 827, 833, 834, 839, 854, 865, 869, 872, 883, 884, 885, 886, 912, 926, 946, 952, 953, 954, 957, 958, 963, 967, 972, 973, 1001, 1006, 1009, 1011, 1012, 1013], "exploit": [25, 274, 958, 978, 1001], "precision_scor": [25, 263, 686, 764, 957, 998, 1000, 1001, 1002, 1003, 1008], "recall_scor": [25, 263, 395, 686, 761, 957, 998, 1000, 1001, 1002, 1003, 1008], "f1_score": [25, 263, 318, 362, 715, 957, 998, 1000, 1001, 1002, 1003, 1007, 1008], "log_loss": [25, 26, 121, 124, 150, 318, 339, 379, 398, 535, 537, 539, 542, 624, 654, 883, 885, 946, 953, 957, 971, 1000, 1002, 1004, 1012, 1013], "roc_auc_scor": [25, 256, 265, 306, 680, 684, 685, 686, 766, 957, 1000, 1001, 1006, 1008, 1012, 1013], "score_nam": [25, 37, 231, 258, 340, 780], "score_df": 25, "set_index": [25, 122, 154, 185, 214, 256, 340], "decim": [25, 155, 276, 450, 451, 888, 1005, 1006], "098921": 25, "323178": 25, "872009": 25, "851408": 25, "861586": 25, "863157": 25, "117608": 25, "782755": 25, "857400": 25, "875941": 25, "866571": 25, "865055": 25, "098332": 25, "370738": 25, "883065": 25, "836224": 25, "859007": 25, "862690": 25, "108880": 25, "368896": 25, "861106": 25, "871277": 25, "866161": 25, "865300": 25, "refin": [25, 81, 389, 451, 687, 957, 992], "alter": [25, 162, 368, 379, 706, 707, 715, 760, 761, 764, 1003, 1007, 1010], "uncertainti": [25, 149, 156, 175, 258, 391, 545, 546, 621, 836, 947, 969], "linearsvc": [25, 27, 69, 71, 142, 143, 164, 172, 230, 253, 255, 263, 300, 306, 321, 323, 334, 337, 339, 354, 368, 372, 389, 399, 400, 417, 490, 545, 554, 617, 621, 630, 650, 651, 652, 653, 654, 665, 712, 719, 799, 804, 876, 877, 880, 882, 953, 957, 958, 998, 999, 1000, 1004, 1006, 1009], "naivelycalibratedlinearsvc": [25, 27], "df_min_": [25, 27], "df_max_": [25, 27], "calibrated_df": [25, 27], "proba_pos_class": [25, 27], "clip": [25, 27, 214, 228, 298, 326, 613, 654, 718, 846, 967, 1002, 1009, 1010], "proba_neg_class": [25, 27], "proba": [25, 27, 30, 131, 417, 883, 885], "svc_isoton": 25, "svc_sigmoid": 25, "opposit": [25, 27, 53, 66, 100, 166, 167, 185, 263, 379, 389, 393, 395, 400, 423, 426, 428, 448, 516, 518, 525, 541, 690, 822, 879, 998], "behavior": [25, 27, 37, 39, 52, 161, 164, 166, 167, 196, 214, 247, 249, 259, 272, 294, 298, 300, 326, 350, 355, 361, 364, 367, 368, 370, 374, 375, 379, 389, 391, 395, 399, 419, 514, 529, 544, 644, 645, 646, 654, 655, 656, 679, 706, 707, 760, 761, 764, 775, 776, 779, 791, 792, 793, 794, 795, 813, 946, 953, 958, 963, 967, 981, 983, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "hing": [25, 203, 206, 208, 264, 323, 324, 328, 379, 644, 654, 712, 875, 882, 953, 971, 972, 992], "focus": [25, 77, 185, 362, 377, 398, 954, 967, 977], "far": [25, 59, 81, 119, 150, 156, 166, 196, 214, 326, 339, 341, 367, 375, 401, 698, 856, 932, 962, 963, 972, 981, 990], "awai": [25, 26, 27, 59, 77, 118, 149, 150, 154, 199, 331, 362, 389, 401, 606, 818, 819, 826, 827, 956, 957, 972, 990], "shown": [25, 48, 56, 88, 110, 112, 122, 158, 167, 186, 194, 214, 222, 225, 230, 243, 256, 259, 262, 265, 281, 293, 294, 298, 299, 300, 314, 339, 340, 367, 371, 380, 391, 392, 395, 396, 397, 399, 401, 418, 439, 610, 676, 678, 679, 680, 691, 774, 788, 887, 889, 952, 953, 954, 957, 960, 965, 967, 971, 972, 973, 992, 1002, 1007, 1008, 1009, 1012], "varieti": [25, 161, 243, 326, 374, 377, 390, 391, 393, 398, 399, 621, 960, 973, 977, 981, 1000, 1013], "niculescu": [25, 27, 389, 417, 419], "mizil": [25, 27, 389, 417, 419], "caruana": [25, 27, 389, 417, 419], "144944": 25, "465663": 25, "872201": 25, "851772": 25, "861865": 25, "863420": 25, "099827": 25, "377027": 25, "853032": 25, "878041": 25, "865356": 25, "863306": 25, "098760": 25, "321306": 25, "873706": 25, "848743": 25, "861044": 25, "862967": 25, "deal": [25, 56, 70, 161, 166, 221, 341, 367, 371, 390, 392, 399, 400, 401, 453, 474, 681, 686, 740, 764, 842, 912, 953, 981, 989, 1001], "situat": [25, 44, 56, 71, 166, 202, 225, 259, 367, 374, 393, 395, 396, 398, 506, 512, 560, 849, 852, 863, 951, 953, 959, 960, 970, 973, 1006], "supervis": [25, 27, 37, 49, 54, 57, 85, 104, 115, 137, 138, 218, 232, 243, 256, 285, 308, 317, 320, 340, 354, 357, 362, 368, 378, 379, 389, 391, 394, 395, 396, 398, 399, 401, 417, 419, 443, 466, 481, 482, 531, 566, 568, 571, 572, 612, 654, 706, 775, 776, 779, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 801, 802, 825, 835, 836, 840, 870, 871, 872, 880, 951, 954, 957, 959, 960, 963, 968, 972, 973, 974, 977, 978, 980, 983, 984, 986, 992, 994, 998, 1004, 1010], "icml": [25, 27, 389, 391, 399, 417, 419, 811, 813, 832, 957, 959, 971, 976], "2005": [25, 27, 80, 364, 389, 417, 419, 825, 953, 960, 970], "471": [25, 28, 364], "plot_calibration_curv": [25, 28], "simplex": [26, 648, 772, 851], "arrow": [26, 1012], "green": [26, 34, 80, 91, 113, 126, 131, 149, 172, 222, 293, 299, 303, 307, 379, 958, 1006, 1007, 1009, 1010], "600": [26, 50, 128, 129, 362, 658], "x_train_valid": 26, "y_train_valid": 26, "cluster_std": [26, 38, 44, 49, 55, 56, 58, 59, 61, 62, 63, 208, 225, 244, 301, 328, 490], "x_valid": 26, "y_valid": 26, "randomforestclassifi": [26, 27, 31, 55, 114, 115, 116, 117, 118, 131, 168, 169, 236, 237, 253, 268, 306, 308, 339, 350, 378, 379, 389, 398, 400, 535, 536, 537, 539, 544, 545, 547, 777, 778, 806, 885, 946, 958, 981, 995, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1013], "concaten": [26, 39, 50, 60, 68, 75, 80, 112, 125, 157, 164, 175, 178, 218, 225, 234, 241, 245, 246, 252, 263, 265, 266, 281, 295, 302, 315, 339, 392, 443, 446, 482, 487, 509, 515, 519, 520, 577, 758, 774, 835, 836, 838, 841, 880, 958, 987, 999], "randomforestclassifierrandomforestclassifi": [26, 116, 117, 168, 236, 268], "cal_clf": 26, "prefit": [26, 379, 389, 400, 417, 545, 546, 575, 978, 1010, 1011, 1012], "x27": [26, 70, 109, 115, 129, 132, 143, 166, 167, 168, 226, 227, 235, 236, 238, 246, 254, 256, 257, 263, 268, 295, 307, 308, 310, 316], "calibratedclassifiercvcalibratedclassifiercv": 26, "clf_prob": 26, "cal_clf_prob": 26, "head_width": 26, "ro": 26, "bo": [26, 1010], "unit": [26, 69, 79, 166, 172, 196, 214, 281, 294, 298, 340, 362, 367, 368, 372, 374, 375, 396, 399, 403, 443, 467, 468, 497, 502, 510, 511, 512, 519, 520, 567, 568, 569, 589, 636, 637, 654, 663, 677, 747, 823, 832, 833, 834, 840, 846, 848, 852, 854, 856, 861, 862, 863, 865, 866, 875, 876, 953, 955, 956, 962, 967, 973, 977, 990, 1002, 1006, 1012, 1013], "mid": [26, 326, 957, 959], "frac": [26, 79, 80, 256, 263, 265, 309, 388, 389, 391, 393, 396, 397, 398, 399, 401, 412, 442, 444, 460, 461, 462, 532, 534, 536, 538, 540, 543, 546, 548, 589, 593, 597, 600, 601, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 648, 650, 651, 656, 657, 658, 674, 732, 746, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 949, 951, 952, 953, 954, 955, 957, 959, 960, 961, 962, 964, 965, 967, 969, 971, 972, 973, 990], "shrink": [26, 81, 95, 123, 167, 191, 194, 217, 245, 298, 396, 537, 538, 654, 656, 823, 833, 834, 877, 878, 879, 880, 881, 960, 972, 990], "perfectli": [26, 37, 259, 270, 381, 391, 398, 418, 545, 584, 682, 683, 693, 695, 713, 714, 734, 763, 770, 849, 952, 954, 957, 972, 1011, 1012], "incur": [26, 597, 875, 972, 1006], "correct": [26, 27, 56, 80, 157, 166, 185, 196, 214, 241, 250, 256, 263, 265, 326, 328, 339, 350, 364, 367, 368, 370, 380, 389, 390, 391, 395, 396, 399, 429, 435, 448, 453, 466, 479, 481, 613, 645, 654, 656, 681, 682, 686, 690, 691, 696, 699, 700, 701, 705, 706, 707, 711, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 760, 761, 762, 764, 769, 771, 806, 813, 821, 847, 942, 953, 957, 958, 972, 983, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "decreas": [26, 39, 46, 57, 65, 74, 126, 145, 157, 166, 167, 180, 204, 228, 229, 258, 263, 269, 292, 300, 306, 344, 354, 356, 367, 389, 391, 398, 421, 425, 442, 499, 512, 513, 519, 535, 536, 537, 538, 539, 540, 542, 543, 544, 613, 614, 615, 654, 655, 656, 684, 690, 704, 759, 766, 833, 834, 883, 884, 885, 886, 946, 948, 953, 954, 957, 960, 961, 964, 965, 971, 972, 981, 990, 1000, 1005, 1008, 1011], "cal_scor": 26, "327": [26, 707, 990], "549": 26, "p1d": 26, "p0": 26, "p1": [26, 131], "p2": [26, 131, 214], "calibrated_classifi": 26, "calibrated_classifiers_": [26, 389, 417], "this_p": 26, "sure": [26, 55, 189, 202, 232, 350, 354, 355, 361, 365, 366, 367, 368, 370, 371, 374, 377, 389, 392, 399, 471, 501, 627, 895, 896, 906, 943, 947, 954, 971, 978, 1005, 1006, 1008, 1013], "renorm": 26, "step": [26, 33, 42, 54, 57, 66, 69, 70, 72, 73, 80, 85, 98, 103, 115, 118, 119, 129, 143, 144, 145, 151, 154, 166, 168, 196, 204, 214, 226, 227, 230, 235, 238, 247, 254, 257, 263, 265, 278, 284, 292, 295, 300, 303, 307, 310, 319, 322, 326, 340, 341, 344, 350, 354, 357, 362, 365, 366, 367, 368, 370, 371, 374, 377, 379, 388, 389, 391, 393, 394, 396, 398, 399, 400, 422, 426, 428, 514, 515, 516, 517, 524, 541, 566, 567, 569, 571, 572, 575, 584, 605, 622, 626, 644, 645, 647, 654, 656, 657, 658, 672, 678, 772, 773, 774, 777, 778, 788, 808, 809, 810, 832, 833, 834, 836, 837, 839, 875, 876, 877, 878, 880, 881, 911, 912, 928, 932, 947, 953, 956, 961, 962, 967, 971, 973, 974, 977, 980, 988, 992, 998, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011], "multiclass": [26, 30, 164, 174, 215, 232, 249, 263, 266, 272, 274, 323, 335, 357, 362, 363, 368, 369, 371, 379, 391, 398, 417, 431, 441, 467, 482, 537, 539, 545, 546, 549, 572, 580, 588, 609, 610, 611, 636, 637, 644, 646, 651, 652, 653, 654, 684, 686, 706, 707, 711, 712, 715, 720, 731, 760, 761, 764, 765, 766, 769, 774, 775, 777, 778, 779, 780, 788, 792, 796, 797, 798, 799, 800, 801, 802, 803, 843, 875, 877, 880, 951, 953, 968, 972, 973, 979, 980, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1013], "argmax": [26, 103, 255, 269, 368, 398, 547, 804, 883, 972, 1011], "716": [26, 28, 57, 491], "plot_calibration_multiclass": [26, 28], "gave": [27, 389, 774, 777, 778, 788, 843], "four": [27, 142, 157, 172, 178, 197, 243, 244, 315, 323, 363, 367, 379, 535, 542, 697, 883, 885, 901, 953, 955, 956, 957, 967, 976], "naiv": [27, 31, 127, 256, 258, 303, 339, 341, 357, 362, 398, 399, 417, 522, 811, 812, 813, 814, 815, 951, 952, 960, 979, 994, 998, 999, 1000, 1001, 1006, 1008, 1011, 1013], "bay": [27, 31, 113, 127, 149, 185, 246, 258, 303, 339, 357, 362, 396, 398, 399, 401, 514, 527, 528, 634, 811, 812, 813, 814, 815, 951, 952, 953, 979, 992, 994, 998, 999, 1000, 1001, 1006, 1008, 1011, 1013], "train_sampl": [27, 211, 212], "against": [27, 37, 85, 105, 113, 123, 141, 172, 187, 188, 205, 213, 265, 306, 326, 362, 367, 380, 389, 391, 395, 399, 418, 487, 520, 526, 529, 654, 656, 732, 734, 765, 776, 781, 783, 801, 805, 949, 953, 957, 958, 960, 972, 976, 983], "rfc": [27, 237, 306, 995], "1177": 27, "userwarn": [27, 44, 61, 112, 158, 188, 205, 331, 345, 371, 690, 967, 1004, 1006, 1011], "redundantli": [27, 379], "keyword": [27, 339, 361, 367, 368, 371, 373, 379, 391, 402, 405, 418, 424, 425, 429, 431, 436, 443, 446, 481, 513, 516, 518, 537, 538, 545, 546, 547, 548, 598, 606, 609, 610, 617, 621, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 666, 670, 675, 676, 678, 679, 680, 751, 755, 756, 757, 758, 767, 768, 780, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 836, 840, 907, 909, 946, 954, 957, 960, 970, 998, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1013], "argument": [27, 71, 197, 226, 229, 355, 361, 362, 367, 369, 371, 372, 374, 375, 377, 379, 391, 392, 395, 396, 398, 400, 402, 403, 405, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 431, 433, 436, 438, 440, 442, 471, 481, 486, 511, 513, 514, 516, 518, 529, 537, 538, 539, 545, 546, 547, 548, 554, 559, 560, 566, 567, 569, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 609, 617, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 644, 646, 654, 659, 662, 666, 670, 674, 676, 677, 678, 679, 680, 692, 697, 712, 719, 740, 756, 757, 780, 804, 805, 808, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 833, 836, 840, 889, 893, 902, 907, 909, 925, 926, 927, 941, 946, 949, 953, 954, 955, 957, 960, 964, 965, 972, 973, 983, 987, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013], "fmt": [27, 60, 207], "preced": [27, 274, 355, 367, 465, 957, 998], "contrast": [27, 104, 167, 198, 231, 256, 258, 285, 303, 340, 379, 389, 391, 392, 394, 398, 401, 428, 431, 441, 597, 621, 788, 832, 947, 950, 952, 953, 957, 960, 962, 965, 967, 970, 971, 973, 1008], "push": [27, 367, 370, 389, 980], "equat": [27, 334, 367, 391, 396, 398, 535, 536, 537, 538, 542, 543, 544, 568, 605, 660, 661, 665, 740, 856, 883, 884, 885, 886, 947, 954, 957, 962, 1006], "twice": [27, 268, 339, 341, 368, 401, 597, 709, 914, 1007], "approx": [27, 95, 230, 396, 398, 399, 957, 964, 971], "rare": [27, 167, 350, 370, 377, 379, 381, 389, 391, 395, 567, 626, 636, 637, 647, 658, 875, 900, 925, 953, 967, 981, 1005, 1006, 1007, 1011, 1013], "explan": [27, 85, 354, 366, 367, 389, 399, 946, 956, 958, 973, 981, 1001], "bag": [27, 69, 108, 114, 124, 133, 164, 168, 340, 341, 363, 389, 494, 495, 496, 533, 534, 535, 536, 537, 538, 541, 542, 543, 718, 779, 802, 884, 955, 958, 979, 994, 998, 1000, 1001, 1002, 1003, 1004, 1011, 1012], "underli": [27, 55, 79, 128, 146, 197, 199, 261, 280, 281, 347, 355, 377, 379, 381, 387, 389, 393, 395, 396, 397, 398, 400, 401, 417, 430, 431, 432, 441, 443, 444, 450, 451, 457, 502, 545, 546, 547, 548, 571, 572, 575, 580, 636, 646, 658, 669, 673, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 821, 875, 883, 884, 885, 886, 924, 953, 954, 958, 963, 970, 972, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "restrict": [27, 65, 66, 161, 164, 213, 291, 296, 368, 372, 377, 389, 391, 398, 399, 444, 471, 480, 510, 559, 588, 631, 632, 633, 634, 636, 660, 661, 685, 691, 759, 765, 766, 802, 824, 826, 827, 828, 830, 832, 833, 834, 836, 861, 957, 973, 993, 994, 998, 1000, 1008, 1010], "interv": [27, 108, 133, 156, 164, 196, 197, 198, 214, 256, 362, 370, 379, 389, 395, 398, 401, 418, 419, 494, 495, 496, 535, 536, 538, 540, 542, 543, 613, 614, 616, 655, 719, 725, 727, 778, 795, 802, 839, 841, 855, 877, 878, 879, 899, 949, 953, 957, 967, 973, 1005, 1009], "move": [27, 118, 257, 295, 326, 366, 367, 372, 389, 391, 527, 528, 549, 550, 551, 553, 554, 555, 991, 998, 999, 1003, 1006, 1008, 1011, 1012], "characterist": [27, 44, 61, 146, 154, 164, 225, 249, 253, 272, 298, 350, 362, 364, 371, 389, 395, 401, 481, 482, 601, 616, 636, 680, 684, 686, 704, 759, 765, 766, 793, 802, 805, 843, 880, 953], "difficult": [27, 166, 204, 367, 374, 389, 396, 398, 531, 532, 537, 539, 540, 952, 954, 956, 960, 962, 964, 973, 981, 998, 1012], "bayesian": [27, 54, 164, 174, 184, 215, 240, 242, 246, 247, 248, 396, 417, 502, 506, 510, 622, 623, 634, 635, 772, 773, 837, 839, 851, 856, 946, 977, 979, 993, 994, 1004, 1011], "domingo": [27, 765, 957], "pazzani": 27, "proc": [27, 78, 389, 393, 399, 429, 454, 667, 671, 811, 946, 954, 959, 963], "13th": 27, "intl": [27, 395], "1996": [27, 391, 398, 402, 424, 494, 495, 496, 533, 534, 967], "zadrozni": [27, 389, 417, 654], "bianca": 27, "charl": [27, 741, 998, 1001, 1004, 1008, 1010, 1013], "elkan": [27, 307, 389, 417, 423, 426, 438, 654, 1004, 1008, 1009, 1011, 1012], "vol": [27, 157, 262, 364, 391, 453, 537, 538, 606, 613, 623, 642, 663, 664, 772, 801, 813, 947, 959, 960], "2001": [27, 154, 168, 255, 388, 391, 398, 417, 430, 431, 432, 441, 489, 537, 538, 542, 543, 606, 612, 617, 623, 669, 674, 712, 765, 868, 900, 947, 953, 957, 963, 965, 969, 972], "255": [27, 28, 48, 98, 276, 294, 309, 362, 471, 472, 539, 540], "plot_compare_calibr": [27, 28], "06": [28, 35, 52, 66, 67, 84, 133, 166, 187, 195, 196, 215, 223, 256, 257, 272, 295, 300, 333, 337, 372, 460, 461, 462, 622, 623, 667, 671, 772, 773, 774, 788, 884, 953, 967, 969], "805": [28, 198], "auto_examples_calibr": 28, "calibr": [28, 30, 214, 357, 379, 490, 493, 542, 547, 636, 654, 687, 706, 718, 761, 764, 765, 802, 814, 872, 875, 946, 953, 957, 970, 972, 979, 994, 995, 1002, 1004], "discrimin": [29, 35, 104, 141, 143, 164, 172, 211, 218, 232, 285, 357, 364, 398, 454, 490, 527, 528, 544, 760, 825, 946, 954, 957, 960, 971, 973, 979, 990, 994, 1001], "ellipsoid": [29, 35, 164, 240, 241, 248, 527, 528, 772, 773, 951, 956], "ledoit": [29, 35, 76, 77, 81, 82, 164, 452, 454, 458, 490, 527, 951], "wolf": [29, 35, 76, 77, 81, 82, 164, 452, 454, 458, 490, 527, 951, 1005], "oa": [29, 35, 76, 82, 164, 393, 448, 449, 452, 453, 455, 456, 490, 527, 774, 951], "hand": [29, 35, 85, 88, 97, 100, 122, 141, 154, 164, 166, 167, 189, 203, 221, 228, 229, 231, 253, 258, 265, 326, 354, 361, 362, 364, 367, 368, 372, 374, 378, 385, 396, 397, 398, 400, 480, 621, 691, 765, 802, 880, 946, 950, 953, 957, 959, 961, 965, 970, 972, 981, 983, 986, 989, 990], "built": [30, 85, 111, 118, 120, 168, 204, 259, 289, 306, 345, 354, 365, 367, 368, 370, 372, 374, 375, 377, 378, 379, 382, 385, 390, 391, 392, 395, 398, 400, 425, 481, 531, 532, 533, 534, 539, 540, 566, 567, 571, 575, 617, 618, 619, 620, 621, 624, 625, 630, 636, 638, 639, 640, 641, 650, 651, 652, 653, 659, 777, 778, 785, 807, 810, 816, 817, 885, 886, 941, 953, 957, 958, 970, 971, 973, 977, 981, 992, 998, 1001, 1002, 1004, 1010], "enabl": [30, 50, 71, 120, 167, 204, 219, 300, 307, 309, 310, 335, 365, 367, 371, 374, 377, 379, 382, 387, 390, 391, 392, 396, 398, 399, 428, 512, 513, 519, 537, 538, 539, 540, 541, 556, 557, 558, 568, 569, 580, 588, 772, 773, 774, 777, 836, 837, 849, 872, 875, 876, 877, 878, 879, 880, 881, 890, 920, 947, 949, 954, 956, 957, 960, 967, 968, 971, 972, 978, 981, 998, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "troubl": [30, 399], "ovr": [30, 188, 211, 274, 306, 335, 636, 637, 765, 805, 875, 877, 880, 953, 957, 958, 972, 998, 1003, 1004, 1006, 1007, 1008, 1012, 1013], "gpc": [30, 148, 159, 164, 482, 588, 589, 591, 592, 597, 598, 600, 601, 681, 718, 979, 994, 1008], "accuracy_scor": [30, 110, 150, 260, 303, 317, 339, 350, 378, 686, 706, 707, 711, 715, 719, 760, 761, 764, 769, 771, 946, 957, 999, 1000, 1001, 1010], "gaussian_process": [30, 31, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 357, 379, 401, 621, 958, 1001, 1004, 1005], "gaussianprocessclassifi": [30, 31, 150, 151, 152, 153, 157, 379, 401, 589, 597, 598, 600, 601, 958, 1004, 1006, 1008, 1012], "iri": [30, 41, 45, 73, 87, 92, 93, 99, 106, 107, 108, 120, 130, 133, 138, 142, 148, 159, 164, 174, 179, 189, 215, 238, 243, 250, 261, 262, 265, 266, 279, 287, 293, 308, 313, 320, 321, 322, 326, 329, 337, 343, 348, 349, 360, 361, 378, 391, 392, 395, 396, 398, 474, 482, 519, 527, 531, 535, 542, 588, 600, 609, 654, 774, 788, 870, 871, 872, 875, 880, 883, 887, 888, 889, 946, 947, 951, 956, 957, 960, 964, 967, 970, 971, 972, 973, 983, 990, 991, 994, 1011], "load_iri": [30, 41, 45, 73, 89, 99, 102, 104, 106, 118, 120, 130, 138, 142, 151, 179, 189, 205, 238, 243, 250, 261, 262, 263, 265, 266, 279, 284, 287, 293, 306, 308, 311, 319, 322, 323, 326, 329, 345, 348, 378, 385, 391, 392, 395, 398, 400, 539, 545, 580, 588, 597, 598, 600, 601, 609, 636, 637, 765, 774, 777, 778, 780, 788, 804, 825, 870, 871, 872, 883, 885, 887, 888, 889, 947, 952, 957, 958, 959, 960, 964, 967, 973, 983, 989, 990, 991, 1004, 1006, 1009], "saga": [30, 187, 211, 212, 636, 637, 650, 652, 665, 788, 953, 1005, 1007], "multi_class": [30, 188, 211, 265, 306, 547, 588, 636, 637, 765, 810, 875, 953, 958, 972, 998, 1002, 1006, 1011, 1013], "n_classifi": [30, 547, 548], "xx": [30, 34, 42, 57, 79, 118, 122, 127, 138, 151, 152, 153, 167, 183, 203, 206, 207, 208, 209, 210, 222, 225, 232, 245, 282, 292, 300, 301, 319, 325, 326, 330, 331, 332, 335, 336, 370], "yy": [30, 34, 42, 57, 79, 118, 127, 138, 151, 153, 167, 203, 207, 208, 209, 210, 222, 225, 232, 282, 292, 300, 301, 319, 325, 326, 330, 331, 332, 335, 336], "xfull": 30, "imshow_handl": 30, "04": [30, 40, 42, 54, 66, 75, 97, 105, 154, 166, 170, 177, 195, 214, 229, 232, 239, 241, 247, 256, 257, 269, 272, 289, 290, 296, 303, 333, 364, 398, 400, 450, 451, 765, 774, 788, 953, 957, 961, 971], "cax": [30, 152, 267], "orient": [30, 95, 166, 217, 298, 379, 887, 954], "horizont": [30, 95, 217, 230, 298, 301, 371, 379, 443, 493, 675, 679], "230": [30, 35, 94, 107, 308, 312, 562], "plot_classification_prob": [30, 35], "salt": [31, 230, 300, 1012], "convei": [31, 222, 300, 990], "particularli": [31, 69, 70, 73, 105, 127, 197, 227, 256, 300, 307, 336, 350, 354, 367, 375, 379, 391, 392, 394, 397, 399, 474, 780, 813, 912, 925, 926, 953, 954, 957, 959, 978, 981, 991, 998, 1003, 1005, 1006, 1012], "linearli": [31, 100, 112, 166, 175, 210, 218, 225, 265, 266, 300, 330, 339, 354, 364, 377, 396, 398, 419, 493, 620, 685, 957, 960, 963, 972, 990, 1005], "semi": [31, 232, 300, 308, 320, 357, 362, 379, 466, 482, 513, 566, 568, 654, 706, 802, 836, 840, 870, 871, 872, 880, 955, 960, 963, 979, 994, 998, 1010, 1013], "transpar": [31, 300, 942, 981], "ga\u00ebl": [31, 45, 51, 72, 88, 89, 102, 179, 193, 194, 300, 330, 331, 380, 981], "modifi": [31, 45, 51, 72, 74, 88, 89, 179, 193, 194, 206, 217, 218, 219, 243, 331, 336, 365, 367, 368, 370, 379, 398, 401, 404, 423, 426, 433, 438, 447, 460, 461, 462, 463, 473, 488, 559, 588, 589, 591, 597, 654, 656, 667, 671, 706, 707, 745, 760, 761, 764, 893, 953, 970, 971, 978, 989, 993, 994, 998, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013], "listedcolormap": [31, 118, 279, 284, 287, 292, 300], "make_moon": [31, 44, 61, 225, 256, 292, 293, 300, 363, 946, 1005, 1009], "make_circl": [31, 44, 61, 100, 127, 222, 292, 293, 300, 316, 363, 999, 1006, 1009], "neural_network": [31, 164, 167, 235, 291, 292, 293, 294, 295, 356, 357, 377, 958, 961, 1000], "mlpclassifi": [31, 164, 291, 292, 294, 296, 356, 480, 482, 492, 500, 549, 832, 834, 846, 958, 961, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "kneighborsclassifi": [31, 130, 137, 278, 279, 284, 285, 308, 310, 339, 398, 580, 819, 823, 824, 825, 826, 827, 958, 960, 990, 998, 1008, 1010, 1011, 1012, 1013], "decisiontreeclassifi": [31, 109, 110, 112, 118, 130, 260, 344, 345, 348, 379, 398, 531, 533, 535, 537, 539, 542, 609, 780, 800, 884, 885, 887, 888, 889, 947, 958, 973, 999, 1000, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012], "adaboostclassifi": [31, 109, 110, 112, 118, 398, 532, 537, 539, 1000, 1001, 1004, 1005, 1007, 1008, 1011, 1013], "discriminant_analysi": [31, 33, 34, 104, 218, 285, 350, 357, 387, 514, 825, 951, 958, 998, 1001, 1002, 1003, 1004, 1005], "quadraticdiscriminantanalysi": [31, 34, 527, 951, 958, 960, 998, 1003, 1005, 1013], "decisionboundarydisplai": [31, 55, 112, 125, 130, 179, 188, 205, 259, 279, 284, 287, 322, 323, 324, 327, 328, 345, 1012, 1013], "net": [31, 164, 174, 187, 207, 215, 269, 372, 390, 395, 450, 451, 457, 479, 502, 535, 536, 537, 538, 542, 543, 544, 624, 625, 630, 635, 636, 637, 638, 639, 640, 641, 646, 654, 656, 659, 662, 762, 832, 883, 884, 885, 886, 946, 957, 962, 971, 979, 981, 994, 998, 1003, 1007, 1008, 1010], "adaboost": [31, 108, 118, 133, 164, 497, 498, 531, 532, 537, 681, 771, 802, 883, 884, 979, 994, 1000], "qda": [31, 34, 364, 527, 528, 979, 994, 1003], "025": [31, 198, 253, 340, 668, 672], "n_clusters_per_class": [31, 90, 114, 143, 145, 253, 286, 292, 300, 371, 493], "uniform": [31, 37, 53, 121, 122, 125, 142, 150, 155, 158, 175, 176, 210, 222, 225, 228, 264, 279, 282, 283, 288, 292, 299, 301, 302, 310, 325, 368, 371, 391, 418, 419, 529, 547, 548, 588, 589, 606, 617, 627, 628, 632, 646, 654, 655, 656, 677, 699, 700, 705, 722, 723, 725, 727, 728, 730, 762, 778, 786, 788, 811, 812, 815, 818, 819, 826, 827, 841, 853, 855, 864, 900, 914, 946, 947, 956, 957, 960, 1004, 1006, 1008, 1012], "linearly_separ": [31, 292], "ds_cnt": [31, 300, 301], "rdbu": [31, 95, 212, 292, 326, 331], "cm_bright": [31, 292, 300], "ff0000": [31, 284, 292], "0000ff": [31, 284, 292], "ep": [31, 44, 46, 49, 64, 179, 181, 220, 229, 377, 391, 402, 424, 429, 434, 457, 609, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 659, 660, 661, 662, 668, 672, 692, 718, 828, 867, 868, 869, 969, 1013], "lstrip": [31, 44, 61, 225, 292, 300], "505": [31, 35], "plot_classifier_comparison": [31, 35, 300], "8x8": [32, 88, 187, 229, 285, 295, 364, 480, 989], "grayscal": 32, "imread": 32, "load_digit": [32, 51, 52, 57, 71, 72, 88, 136, 137, 144, 187, 203, 218, 229, 230, 254, 255, 258, 264, 271, 278, 280, 285, 293, 295, 314, 315, 372, 392, 425, 510, 511, 512, 513, 577, 578, 616, 617, 646, 666, 667, 668, 669, 983, 987, 988, 989, 990, 991, 1004, 1009], "set_axis_off": 32, "gray_r": [32, 88, 98, 152, 218, 295, 314, 315, 989], "entir": [32, 161, 196, 204, 295, 298, 307, 348, 350, 361, 368, 379, 385, 391, 395, 397, 399, 451, 470, 512, 566, 567, 568, 569, 625, 629, 631, 633, 636, 637, 639, 641, 643, 644, 646, 654, 660, 661, 711, 771, 804, 805, 808, 833, 835, 836, 849, 860, 861, 863, 864, 865, 866, 926, 946, 947, 957, 971, 973, 990, 1007, 1008], "91": [32, 51, 154, 295, 314, 315, 398, 952, 988, 992], "86": [32, 69, 143, 187, 300, 314, 315, 765, 883, 957, 988], "899": [32, 254, 318], "confus": [32, 164, 249, 265, 272, 314, 315, 339, 379, 482, 609, 630, 675, 691, 693, 696, 706, 707, 715, 731, 761, 764, 802, 880, 992, 998, 999, 1003, 1007, 1008, 1010, 1011, 1012, 1013], "disp": [32, 112, 125, 126, 250, 259, 307, 323, 328, 418, 609, 675, 678, 679, 825], "from_predict": [32, 74, 129, 166, 234, 252, 263, 265, 309, 314, 339, 373, 418, 609, 675, 676, 678, 679, 680, 696, 704, 759, 761, 764, 765, 766, 957, 995, 1011, 1012, 1013], "figure_": [32, 167, 235, 306, 308, 373, 418, 609, 610, 675, 676, 678, 679, 680, 780], "confusion_matrix": [32, 226, 250, 314, 315, 675, 691, 731, 799, 957, 992, 999, 1004, 1005, 1008, 1009, 1011], "ground": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 98, 125, 157, 180, 190, 196, 197, 247, 259, 340, 379, 390, 391, 681, 682, 683, 686, 690, 691, 692, 693, 695, 696, 699, 700, 701, 705, 706, 707, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 760, 761, 762, 763, 764, 770, 771, 957, 970, 983, 991, 1006], "truth": [32, 40, 45, 49, 56, 57, 60, 77, 81, 85, 98, 103, 125, 157, 180, 190, 196, 197, 247, 259, 340, 379, 390, 391, 681, 682, 683, 686, 690, 691, 692, 693, 695, 696, 699, 700, 701, 703, 705, 706, 707, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 760, 761, 762, 763, 764, 770, 771, 957, 983, 991, 1006, 1012], "gt": [32, 70, 115, 129, 166, 246, 254, 268, 367, 370], "rebuilt": [32, 816, 817], "482": [32, 35, 153, 159], "plot_digits_classif": [32, 35], "oracl": [33, 196, 214, 404, 448, 449, 452, 453, 454, 455, 951, 998], "shrinkag": [33, 76, 78, 81, 82, 103, 124, 164, 287, 404, 448, 449, 452, 453, 454, 455, 456, 458, 459, 517, 521, 527, 539, 540, 774, 953, 979, 994, 998, 1002, 1003, 1005], "lineardiscriminantanalysi": [33, 34, 104, 218, 285, 350, 387, 514, 528, 825, 951, 958, 960, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1012, 1013], "200": [33, 34, 44, 50, 54, 59, 74, 98, 112, 120, 122, 128, 153, 182, 191, 197, 200, 201, 202, 208, 213, 218, 236, 241, 257, 263, 265, 266, 298, 301, 316, 325, 326, 347, 350, 362, 368, 377, 396, 398, 403, 420, 433, 447, 450, 451, 511, 512, 513, 516, 517, 518, 521, 525, 562, 627, 629, 649, 657, 670, 788, 833, 834, 873, 877, 878, 879, 880, 881, 972], "n_averag": 33, "n_features_max": 33, "ish": 33, "acc_clf1": 33, "acc_clf2": 33, "acc_clf3": 33, "n_features_rang": 33, "score_clf1": 33, "score_clf2": 33, "score_clf3": 33, "clf1": [33, 130, 131, 398, 547], "lsqr": [33, 527, 650, 652, 665, 951, 999, 1005, 1012], "clf2": [33, 130, 131, 368, 385, 398, 547], "store_precis": [33, 78, 448, 449, 452, 453, 454, 455], "assume_cent": [33, 78, 393, 404, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458], "clf3": [33, 130, 131, 368, 398, 547], "covariance_estim": [33, 527, 951, 1010], "features_samples_ratio": 33, "navi": [33, 69, 78, 99, 104, 105, 128, 175, 199, 207, 220, 242, 243, 244, 247, 263, 265, 271, 281, 288, 316, 347], "gold": [33, 190, 197, 199, 202, 206, 210, 213, 242, 247, 263, 282, 325, 372], "081": [33, 35, 177, 215, 965], "plot_lda": [33, 35], "doubl": [34, 268, 367, 379, 396, 401, 516, 518, 525, 677, 816, 817, 827, 941, 947, 972, 973, 998, 1008, 1009], "deviat": [34, 60, 79, 113, 116, 117, 118, 146, 149, 154, 156, 158, 166, 175, 202, 253, 254, 255, 256, 257, 259, 282, 283, 298, 303, 359, 363, 364, 371, 375, 379, 389, 395, 398, 429, 451, 479, 489, 490, 491, 492, 494, 495, 496, 500, 502, 503, 508, 530, 572, 589, 612, 622, 623, 649, 701, 729, 780, 822, 845, 846, 856, 864, 865, 866, 953, 957, 963, 967, 990, 1004, 1005, 1006, 1009, 1010, 1011], "own": [34, 214, 246, 276, 278, 316, 340, 355, 361, 369, 370, 371, 374, 375, 382, 390, 391, 403, 407, 420, 433, 511, 535, 542, 624, 772, 773, 818, 819, 820, 822, 824, 826, 827, 828, 883, 885, 901, 906, 925, 953, 959, 960, 963, 972, 981, 991, 992, 1005, 1006, 1008], "mpl": [34, 241, 242, 243, 247, 298], "linearsegmentedcolormap": 34, "red_blue_class": 34, "register_cmap": 34, "dataset_fixed_cov": 34, "dim": [34, 205, 229, 279, 284, 285, 287, 322, 323, 505, 677], "dataset_cov": 34, "matric": [34, 40, 79, 81, 95, 201, 242, 243, 245, 246, 247, 276, 289, 307, 318, 339, 340, 359, 361, 368, 369, 377, 378, 379, 390, 391, 392, 393, 394, 396, 399, 400, 406, 429, 430, 432, 443, 452, 460, 461, 462, 512, 513, 516, 518, 519, 522, 525, 527, 528, 533, 534, 541, 544, 559, 560, 567, 621, 636, 642, 650, 652, 665, 731, 737, 745, 751, 755, 756, 757, 758, 767, 772, 773, 802, 820, 823, 828, 839, 843, 845, 848, 851, 853, 854, 856, 858, 860, 862, 864, 865, 866, 867, 868, 877, 878, 880, 881, 891, 912, 918, 923, 928, 930, 931, 947, 951, 954, 955, 956, 958, 960, 961, 969, 971, 972, 977, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "linalg": [34, 54, 77, 78, 81, 101, 103, 105, 182, 241, 242, 243, 246, 247, 367, 372, 396, 430, 431, 432, 441, 510, 513, 519, 522, 635, 650, 652, 665, 669, 673, 910], "plot_data": 34, "fig_index": 34, "splot": [34, 242, 247], "tp": [34, 391, 690, 696, 708, 759, 760, 761, 764, 887, 957], "tp0": 34, "tp1": 34, "x0_tp": 34, "x0_fp": 34, "x1_tp": 34, "x1_fp": 34, "990000": 34, "dark": [34, 113, 166, 326, 362], "000099": 34, "pcolormesh": [34, 127, 138, 179, 279, 284, 322, 326, 330, 609], "white": [34, 57, 59, 95, 154, 166, 210, 217, 282, 295, 300, 319, 325, 396, 399, 401, 603, 973, 998, 1001, 1004, 1008, 1012], "means_": [34, 241, 242, 243, 244, 246, 247, 527, 528, 772, 773], "yellow": [34, 91, 326, 958], "markers": [34, 49, 57, 60, 62, 63, 122, 152, 156, 228, 310], "markeredgecolor": [34, 49, 60, 62, 63], "plot_ellips": [34, 241], "cov": [34, 81, 85, 112, 246, 367, 379, 382, 384, 394, 404, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 497, 510, 512, 519, 526], "eigh": [34, 241, 242, 243, 246, 247, 396, 403, 511, 513, 1013], "arctan": [34, 242, 247, 363, 496], "180": [34, 241, 242, 243, 246, 247, 285, 289, 372, 401, 480], "ell": [34, 241, 242, 243, 247, 388], "patch": [34, 50, 241, 242, 243, 246, 247, 251, 362, 370, 377, 396, 398, 533, 534, 561, 562, 565, 998, 1006], "ellips": [34, 225, 241, 242, 243, 246, 247, 963], "set_clip_box": [34, 241, 242, 243, 246, 247], "set_alpha": [34, 109, 241, 242, 243, 246, 247], "add_artist": [34, 218, 241, 242, 243, 246, 247], "plot_lda_cov": 34, "plot_qda_cov": 34, "svd": [34, 101, 103, 127, 218, 340, 375, 387, 394, 403, 430, 432, 460, 461, 463, 510, 511, 512, 513, 517, 518, 519, 522, 524, 527, 528, 642, 650, 651, 652, 663, 664, 665, 835, 912, 951, 992, 1000, 1004, 1005, 1011, 1013], "store_covari": [34, 527, 528, 1003, 1005], "tight": [34, 40, 105, 112, 118, 138, 142, 181, 183, 188, 189, 190, 200, 201, 205, 208, 210, 213, 219, 222, 245, 276, 282, 283, 287, 288, 322, 325, 326, 329, 330, 331, 345, 560, 670, 1010], "312": [34, 35, 1001], "plot_lda_qda": [34, 35], "610": [35, 244, 248], "auto_examples_classif": 35, "handwritten": [36, 67, 164, 216, 221, 223, 229, 254, 294, 295, 314, 315, 360, 391, 398, 426, 480, 519, 522, 527, 544, 666, 667, 668, 669, 670, 682, 683, 695, 714, 768, 770, 825, 837, 846, 856, 868, 954, 960, 983, 994], "hierarch": [36, 40, 54, 67, 164, 169, 310, 379, 399, 421, 423, 425, 482, 490, 492, 500, 508, 525, 708, 829, 856, 974, 978, 993, 994, 998, 1001, 1002], "coin": [36, 67, 164, 391, 399, 421, 441, 969, 991], "shift": [36, 44, 67, 164, 175, 220, 246, 281, 295, 298, 393, 397, 420, 427, 437, 440, 448, 490, 493, 667, 671, 822, 845, 967, 993, 994, 998, 1002, 1006], "chanc": [36, 49, 67, 164, 196, 204, 211, 214, 256, 262, 265, 266, 340, 350, 366, 391, 395, 682, 683, 686, 694, 732, 734, 763, 770, 801, 957, 965, 973], "agglom": [36, 44, 47, 67, 164, 391, 421, 425, 480, 669, 755, 829, 1001], "bisect": [36, 67, 164, 423, 426, 490, 1012], "quantiz": [36, 67, 164, 361, 362, 391, 423, 426, 428, 484, 756, 841, 931, 967], "birch": [36, 44, 67, 164, 310, 356, 379, 428, 490, 993, 994, 1002, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "toi": [36, 49, 53, 56, 67, 85, 99, 113, 125, 130, 131, 164, 178, 186, 210, 224, 239, 241, 293, 323, 333, 360, 372, 377, 398, 399, 420, 421, 422, 424, 427, 428, 429, 431, 437, 448, 490, 492, 500, 541, 617, 655, 703, 733, 773, 822, 829, 837, 856, 879, 954, 956, 957, 963, 967, 994], "linkag": [36, 39, 40, 41, 44, 47, 52, 55, 66, 67, 164, 169, 420, 421, 425, 442, 490, 492, 500, 856, 977, 991, 1001, 1006, 1009], "dbscan": [36, 44, 64, 67, 164, 377, 379, 429, 431, 434, 490, 682, 683, 695, 714, 768, 770, 828, 856, 960, 993, 994, 998, 1000, 1002, 1003, 1005, 1006, 1007], "optic": [36, 44, 67, 164, 310, 360, 402, 424, 434, 435, 436, 480, 993, 994, 1007, 1011, 1012, 1013], "affin": [36, 44, 67, 164, 298, 359, 368, 379, 390, 396, 420, 421, 425, 431, 433, 441, 490, 513, 669, 673, 682, 683, 695, 714, 768, 770, 871, 951, 954, 957, 993, 994, 998, 999, 1002, 1008, 1009, 1011, 1013], "propag": [36, 67, 164, 313, 320, 362, 390, 420, 433, 480, 490, 492, 682, 683, 691, 692, 695, 696, 714, 768, 770, 836, 850, 870, 871, 872, 961, 979, 993, 994, 998, 1010, 1013], "agglomer": [36, 67, 164, 359, 391, 399, 425, 480, 578, 584, 623, 774, 779, 836, 994], "unstructur": [36, 67, 164, 294, 391, 421, 425, 442, 481, 508, 829, 969, 981, 1002], "dendrogram": [36, 67, 164, 169, 391, 421, 425, 482, 1010], "pictur": [36, 67, 164, 229, 247, 362, 380, 391, 396, 399, 441, 471, 472, 499, 978], "greek": [36, 67, 164, 391, 441], "silhouett": [36, 38, 49, 56, 57, 67, 164, 340, 367, 426, 490, 767, 768, 998, 1002], "embed": [36, 44, 46, 67, 115, 149, 164, 216, 219, 221, 223, 224, 239, 276, 285, 372, 379, 390, 391, 421, 431, 441, 467, 480, 522, 527, 544, 560, 617, 666, 667, 668, 669, 670, 671, 672, 673, 674, 825, 837, 846, 867, 868, 869, 949, 960, 963, 969, 974, 993, 994, 998, 999, 1009, 1010, 1012], "explor": [37, 113, 114, 221, 222, 257, 258, 264, 265, 308, 326, 340, 350, 361, 364, 366, 372, 385, 391, 398, 451, 774, 777, 785, 946, 953, 954, 956, 962, 964, 965, 967, 981, 986, 992, 1004], "uniformli": [37, 122, 141, 225, 241, 306, 368, 494, 495, 496, 529, 620, 778, 786, 788, 855, 946, 947, 957, 960, 967, 1002, 1007], "divid": [37, 48, 90, 95, 143, 154, 196, 241, 350, 363, 364, 388, 391, 395, 396, 448, 449, 450, 451, 452, 453, 454, 455, 490, 497, 512, 519, 628, 629, 632, 633, 634, 642, 643, 654, 655, 656, 697, 703, 711, 715, 733, 769, 771, 833, 834, 877, 880, 912, 915, 916, 946, 954, 956, 957, 960, 967, 971, 992, 998, 1005, 1006, 1009], "randomli": [37, 48, 50, 60, 87, 92, 113, 125, 161, 164, 167, 200, 213, 229, 232, 246, 251, 262, 274, 314, 350, 355, 375, 377, 378, 391, 395, 398, 401, 428, 437, 490, 493, 497, 501, 509, 515, 523, 524, 529, 537, 538, 541, 542, 543, 588, 589, 649, 657, 668, 672, 694, 772, 773, 832, 869, 883, 884, 885, 886, 956, 958, 960, 963, 965, 969, 973, 990, 992, 1009], "quiroz": [37, 56, 175, 257, 259, 339, 340, 341], "fundament": [37, 49, 80, 340, 365, 378, 394, 474, 516, 518, 525, 686, 953, 957], "homogen": [37, 38, 39, 44, 46, 49, 57, 340, 362, 377, 379, 393, 398, 401, 592, 682, 695, 708, 713, 714, 734, 770, 954, 955, 957, 1007], "frequent": [37, 162, 259, 265, 266, 340, 357, 364, 367, 399, 529, 568, 608, 826, 849, 853, 864, 947, 949, 957, 971, 975, 978], "ari": [37, 57, 340, 391, 683, 1003, 1009], "mutual": [37, 38, 49, 57, 140, 147, 164, 398, 400, 570, 573, 574, 577, 578, 584, 585, 586, 587, 682, 683, 693, 732, 734, 763, 770, 953, 957, 958, 998, 1004], "mi": [37, 141, 391, 585, 586, 682, 732, 734, 947, 957, 971], "theoret": [37, 56, 149, 390, 391, 398, 531, 532, 617, 682, 703, 733, 875, 946, 954, 956, 957, 959, 969, 971, 972, 980, 981], "nmi": [37, 391, 695, 713, 714, 734], "ami": [37, 49, 57, 391, 682], "score_func": [37, 570, 573, 574, 576, 577, 578, 719, 998, 1000], "rand_scor": [37, 391, 693, 957, 1010], "adjusted_rand_scor": [37, 38, 49, 57, 340, 391, 682, 693, 719, 734, 763, 957, 1011], "mutual_info_scor": [37, 391, 682, 957, 1006, 1009, 1010], "normalized_mutual_info_scor": [37, 391, 713, 732, 770, 957, 1006, 1012], "adjusted_mutual_info_scor": [37, 38, 49, 57, 391, 683, 693, 732, 734, 763, 957, 998, 1006, 1010], "random_label": 37, "labels_a": 37, "labels_b": 37, "fixed_classes_uniform_labelings_scor": 37, "n_clusters_rang": 37, "n_run": [37, 60, 172, 340], "clase": 37, "seaborn": [37, 109, 111, 166, 175, 246, 256, 279, 367, 382, 384, 977], "sn": [37, 109, 111, 166, 175, 246, 256, 279], "color_palett": [37, 109, 111, 246], "colorblind": [37, 109, 111], "vx": 37, "errorbar": [37, 60, 78, 80, 145, 155, 156, 278, 317, 329, 780], "refer": [37, 38, 59, 62, 70, 123, 129, 146, 158, 214, 263, 286, 298, 306, 307, 308, 309, 310, 311, 340, 355, 357, 365, 367, 368, 370, 371, 372, 373, 374, 377, 378, 379, 380, 382, 385, 392, 402, 403, 417, 418, 419, 420, 422, 424, 426, 427, 429, 430, 431, 432, 433, 436, 441, 442, 443, 446, 448, 451, 452, 453, 454, 476, 481, 489, 491, 493, 494, 495, 496, 497, 498, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 522, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 568, 571, 572, 573, 580, 585, 586, 588, 589, 592, 597, 600, 601, 605, 606, 609, 610, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 625, 627, 629, 631, 633, 634, 636, 639, 641, 643, 644, 645, 646, 649, 651, 653, 654, 656, 657, 660, 661, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 682, 683, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 712, 713, 714, 715, 717, 718, 720, 733, 735, 736, 746, 760, 762, 763, 765, 766, 767, 768, 770, 772, 773, 774, 776, 777, 778, 780, 788, 796, 797, 798, 799, 800, 801, 803, 806, 807, 811, 812, 813, 815, 821, 822, 823, 825, 832, 833, 834, 842, 843, 852, 853, 863, 868, 869, 870, 871, 872, 875, 877, 878, 880, 881, 883, 884, 885, 886, 900, 912, 968, 978, 983, 987, 991, 992, 998, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "bbox_to_anchor": [37, 158, 261, 333], "satur": [37, 166, 298], "uniform_labelings_scor": 37, "nwith": [37, 56, 60, 145, 340], "constantli": [37, 196, 981], "unbound": [37, 956, 1012], "cardin": [37, 116, 117, 123, 168, 391, 398, 442, 531, 532, 535, 536, 537, 538, 542, 543, 544, 657, 849, 883, 884, 885, 886, 957, 958, 965, 967, 1012], "why": [37, 52, 95, 166, 168, 172, 185, 253, 256, 339, 340, 367, 374, 379, 391, 393, 396, 402, 424, 426, 430, 957, 959, 972, 987, 990, 1001], "chart": [37, 261, 958, 985, 1001], "henc": [37, 59, 71, 166, 200, 229, 265, 326, 339, 340, 354, 362, 368, 370, 372, 379, 391, 395, 398, 399, 465, 486, 517, 519, 520, 521, 541, 561, 568, 621, 624, 630, 638, 640, 650, 665, 682, 683, 687, 693, 708, 734, 763, 770, 793, 794, 811, 812, 813, 814, 815, 839, 848, 851, 954, 956, 957, 958, 963, 964, 967, 978, 1005, 1006, 1009, 1010, 1012], "safe": [37, 166, 185, 340, 367, 368, 391, 392, 414, 486, 487, 557, 566, 569, 751, 755, 869, 929, 960, 1004, 1005, 1006, 1011, 1012], "stabil": [37, 114, 166, 200, 218, 261, 298, 340, 379, 388, 628, 632, 648, 814, 833, 834, 852, 863, 911, 947, 953, 956, 967, 978, 983, 998, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mislead": [37, 116, 117, 123, 166, 381, 398, 531, 532, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 994, 1011], "meaning": [37, 222, 285, 341, 388, 395, 399, 400, 401, 526, 706, 707, 715, 760, 761, 764, 825, 961, 971, 972, 998], "172": [37, 67, 182, 215, 372, 471, 472, 627, 953], "plot_adjusted_for_chance_measur": [37, 67], "brendan": [38, 420, 433], "frei": [38, 420, 433, 1008], "delbert": [38, 420, 433], "dueck": [38, 420, 433], "messag": [38, 44, 61, 69, 95, 339, 340, 362, 365, 366, 367, 370, 371, 374, 375, 391, 420, 433, 517, 521, 526, 552, 605, 690, 774, 777, 778, 780, 788, 800, 803, 805, 825, 833, 834, 894, 895, 896, 899, 902, 922, 941, 957, 967, 998, 1002, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "feb": [38, 420, 433], "affinitypropag": [38, 44, 310, 391, 998, 1001, 1002, 1006, 1009, 1011, 1012, 1013], "labels_tru": [38, 49, 63, 391, 682, 683, 692, 693, 695, 708, 713, 714, 732, 734, 763, 770], "af": 38, "prefer": [38, 44, 247, 265, 298, 350, 354, 355, 356, 365, 367, 368, 379, 391, 395, 396, 398, 399, 420, 433, 450, 451, 457, 465, 486, 487, 605, 610, 611, 632, 636, 637, 679, 703, 705, 734, 735, 825, 851, 875, 876, 917, 946, 949, 951, 953, 957, 962, 972, 973, 977, 990, 999, 1005, 1007, 1011, 1012], "cluster_centers_indic": [38, 433], "cluster_centers_indices_": [38, 420], "labels_": [38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 51, 52, 57, 60, 61, 62, 64, 66, 310, 340, 367, 379, 391, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 991, 1003], "n_clusters_": [38, 49, 62, 421, 425], "homogeneity_scor": [38, 49, 57, 340, 391, 695, 713, 770, 957], "completeness_scor": [38, 49, 57, 307, 340, 391, 713, 714, 770, 957], "silhouette_scor": [38, 49, 57, 59, 340, 367, 391, 998, 1002, 1004, 1006, 1008, 1012], "sqeuclidean": [38, 429, 436, 755, 756, 757], "872": [38, 965], "912": 38, "871": [38, 79, 80, 129, 133, 393, 453], "753": [38, 339], "cycler": 38, "viridi": [38, 276, 675], "class_memb": 38, "cluster_cent": [38, 60, 62, 63, 440], "343": [38, 67, 158, 159], "plot_affinity_propag": [38, 67, 420, 433], "impos": [39, 56, 126, 190, 377, 391, 396, 398, 399, 505, 635, 953], "simpli": [39, 85, 127, 149, 157, 221, 232, 265, 289, 308, 309, 354, 362, 367, 368, 371, 377, 379, 393, 394, 395, 396, 398, 399, 463, 673, 739, 742, 843, 914, 949, 957, 958, 959, 960, 971, 984, 992, 1005, 1006, 1007], "There": [39, 46, 149, 214, 221, 234, 247, 251, 253, 256, 339, 360, 362, 364, 367, 368, 371, 372, 377, 379, 382, 388, 390, 391, 396, 398, 399, 400, 431, 441, 512, 531, 532, 537, 538, 566, 567, 569, 584, 623, 947, 953, 954, 955, 956, 957, 960, 964, 967, 971, 972, 973, 976, 980, 991, 998, 1006], "singl": [39, 48, 52, 53, 57, 60, 61, 71, 108, 111, 118, 119, 120, 128, 133, 146, 149, 155, 161, 164, 167, 169, 172, 196, 198, 235, 237, 246, 252, 265, 294, 310, 326, 339, 340, 341, 345, 347, 350, 354, 355, 361, 362, 367, 371, 373, 374, 375, 377, 378, 379, 389, 390, 392, 394, 395, 396, 398, 399, 400, 414, 417, 420, 421, 425, 426, 428, 433, 443, 445, 446, 471, 472, 474, 484, 487, 512, 531, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 560, 570, 577, 578, 580, 584, 605, 610, 612, 621, 644, 645, 651, 654, 655, 656, 668, 670, 672, 688, 699, 700, 701, 702, 713, 714, 715, 718, 751, 762, 772, 773, 774, 777, 778, 788, 795, 798, 799, 801, 802, 805, 813, 816, 817, 821, 833, 834, 835, 845, 846, 849, 850, 851, 856, 870, 871, 883, 884, 885, 886, 891, 923, 925, 944, 946, 952, 953, 954, 957, 958, 960, 962, 964, 965, 967, 971, 972, 973, 977, 981, 983, 990, 992, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "unstabl": [39, 65, 166, 391, 393, 394, 667, 671, 911, 912, 973, 1002, 1003, 1005, 1010, 1012], "quickli": [39, 235, 293, 306, 364, 367, 395, 398, 670, 953, 960, 961, 981, 992, 1009], "fight": [39, 981], "percol": 39, "distanc": [39, 40, 56, 59, 60, 64, 66, 76, 80, 82, 100, 161, 164, 169, 182, 197, 217, 219, 222, 229, 276, 278, 279, 284, 286, 288, 289, 298, 306, 310, 311, 339, 340, 354, 364, 375, 377, 379, 388, 391, 393, 396, 397, 401, 402, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 434, 435, 436, 437, 438, 440, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 516, 518, 525, 585, 586, 593, 597, 598, 600, 601, 606, 636, 637, 644, 646, 652, 653, 654, 655, 656, 666, 667, 668, 670, 671, 672, 673, 674, 677, 681, 702, 711, 735, 737, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 755, 756, 757, 758, 767, 768, 771, 805, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 855, 869, 873, 875, 877, 879, 880, 881, 883, 884, 885, 886, 947, 951, 954, 955, 957, 963, 967, 969, 971, 972, 978, 990, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "merg": [39, 41, 46, 51, 309, 365, 367, 369, 374, 377, 380, 391, 420, 421, 422, 425, 442, 794, 991, 998, 1005], "exagger": [39, 670, 954], "behaviour": [39, 100, 197, 198, 214, 328, 367, 379, 391, 398, 537, 538, 542, 543, 580, 873, 883, 884, 930, 946, 947, 957, 967, 1006, 1009, 1010], "shortest": [39, 371, 375, 666, 917, 954, 1011], "mechan": [39, 335, 339, 355, 368, 391, 399, 443, 835, 955, 973, 981], "resembl": 39, "brittl": [39, 391], "pronounc": [39, 40, 52, 154], "kneighbors_graph": [39, 44, 61, 66, 276, 379, 391, 421, 425, 818, 819, 820, 822, 824, 826, 827, 828, 830, 960, 998, 1002, 1007], "geometri": [39, 391, 954, 960], "instabl": [39, 166, 286, 431, 513, 517, 521, 673, 1005, 1008, 1011], "agglomerativeclust": [39, 40, 41, 44, 47, 52, 55, 61, 66, 379, 391, 420, 422, 425, 991, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "1500": [39, 50, 56, 61, 66, 91, 217, 221, 241], "knn_graph": 39, "include_self": [39, 44, 66, 829, 830, 1002], "plot_agglomerative_clust": [39, 67], "waveform": 40, "euclidean": [40, 56, 57, 182, 229, 276, 284, 306, 311, 340, 388, 390, 391, 396, 397, 398, 399, 401, 420, 421, 424, 425, 429, 431, 436, 439, 442, 509, 515, 567, 593, 597, 600, 601, 654, 656, 668, 670, 673, 674, 677, 739, 740, 746, 747, 748, 749, 755, 756, 757, 758, 767, 768, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 869, 947, 951, 955, 958, 960, 969, 978, 1002, 1005, 1006, 1007, 1008], "cityblock": [40, 44, 391, 429, 436, 739, 755, 756, 757, 960], "invari": [40, 364, 379, 391, 401, 592, 667, 724, 792, 793, 953, 954, 957, 972, 978, 1006, 1009, 1010, 1011], "ie": [40, 65, 96, 420, 682, 745, 953, 967], "inter": [40, 116, 350, 398, 694, 918], "character": [40, 214, 344, 391, 395, 954], "ill": [40, 81, 201, 457, 628, 629, 632, 633, 634, 660, 661, 953, 956, 991, 1008], "recov": [40, 64, 81, 96, 97, 103, 119, 149, 195, 196, 217, 341, 393, 397, 400, 403, 439, 511, 537, 953, 954, 956, 978, 991, 1004], "put": [40, 57, 138, 149, 151, 230, 236, 241, 292, 300, 310, 319, 330, 331, 336, 356, 368, 370, 371, 374, 401, 423, 426, 438, 493, 592, 625, 639, 772, 853, 864, 877, 878, 879, 880, 881, 902, 947, 954, 956, 957, 958, 964, 967, 980, 984, 986, 992, 1010], "cc": [40, 365], "patheffect": 40, "pairwise_dist": [40, 379, 391, 402, 421, 424, 425, 429, 436, 666, 674, 739, 748, 756, 757, 767, 768, 820, 822, 824, 828, 955, 998, 1002, 1004, 1006, 1007, 1009, 1010], "sqr": 40, "sign": [40, 78, 85, 96, 99, 112, 180, 246, 292, 334, 367, 391, 393, 396, 399, 454, 522, 560, 567, 584, 613, 614, 636, 637, 644, 646, 652, 653, 654, 655, 712, 719, 875, 879, 910, 912, 924, 953, 957, 962, 967, 971, 972, 991, 998, 1002, 1007, 1011, 1013], "phi": [40, 396, 720, 842, 949, 957, 967, 972], "phase_nois": 40, "amplitude_nois": 40, "additional_nois": 40, "f7bd01": 40, "377eb8": [40, 44, 61, 62, 225], "f781bf": [40, 44, 61, 62], "set_label": [40, 152, 229], "avg_dist": [40, 758], "set_path_effect": 40, "withstrok": 40, "foreground": [40, 65], "cividi": 40, "vmin": [40, 81, 95, 98, 106, 152, 155, 175, 187, 212, 245, 251, 294, 326], "45": [40, 63, 72, 133, 142, 154, 167, 168, 185, 196, 214, 263, 267, 268, 315, 326, 350, 395, 398, 399, 542, 543, 605, 612, 765, 772, 879, 947, 957, 965, 976, 988, 998, 1001], "interclass": 40, "077": [40, 67], "plot_agglomerative_clustering_metr": [40, 67], "hierarchi": [41, 169, 429, 435, 442, 962, 991], "plot_dendrogram": 41, "kwarg": [41, 98, 368, 373, 405, 418, 443, 513, 516, 518, 595, 609, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 676, 677, 678, 680, 719, 816, 817, 835, 836, 840, 890, 909, 1005, 1009, 1011], "children_": [41, 421, 425, 442], "current_count": 41, "child_idx": 41, "leaf": [41, 115, 125, 127, 344, 348, 391, 398, 402, 421, 422, 423, 424, 425, 429, 436, 442, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 883, 884, 885, 886, 887, 888, 960, 973, 1001, 1003, 1005, 1009, 1012], "linkage_matrix": 41, "column_stack": [41, 292, 300], "distances_": [41, 421, 425, 1010], "distance_threshold": [41, 421, 425, 1007, 1010], "truncate_mod": 41, "parenthesi": [41, 367], "103": [41, 67, 199, 215, 274, 362, 398, 475, 533, 534, 998], "plot_agglomerative_dendrogram": [41, 67], "scalabl": [42, 44, 61, 164, 171, 173, 249, 272, 311, 340, 367, 391, 398, 399, 427, 469, 480, 567, 618, 780, 791, 800, 802, 814, 837, 846, 848, 875, 877, 880, 881, 949, 952, 954, 957, 970, 972, 981, 998, 1001, 1002, 1008, 1009, 1012, 1013], "hundr": [42, 121, 218, 302, 362, 395, 398, 539, 540, 954, 1009], "thousand": [42, 229, 231, 302, 340, 362, 391, 398, 833, 834, 880, 954, 992, 1007, 1009], "million": [42, 55, 154, 172, 399, 401, 670, 954, 972, 981, 1012, 1013], "chose": [42, 166, 987], "usag": [42, 53, 70, 73, 84, 99, 120, 143, 166, 167, 226, 230, 250, 279, 285, 287, 294, 322, 341, 354, 366, 367, 368, 369, 373, 374, 376, 379, 380, 391, 395, 396, 401, 402, 424, 429, 467, 539, 540, 587, 626, 636, 637, 638, 644, 646, 647, 654, 655, 656, 657, 658, 755, 758, 767, 768, 875, 883, 884, 885, 886, 912, 946, 949, 956, 957, 958, 960, 972, 979, 983, 987, 994, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "enjoi": 42, "edit": [42, 364, 366, 367, 369, 370, 374, 377, 382, 508, 512, 806, 951, 953, 958, 964, 992], "158": [42, 228, 239, 398, 647], "61": [42, 80, 158, 167, 214, 331, 361, 364, 372, 392, 519, 538, 691], "manojkumarsivaraj334": 42, "joblib": [42, 54, 71, 307, 362, 365, 367, 369, 375, 377, 379, 382, 384, 385, 390, 392, 402, 417, 421, 424, 425, 427, 429, 431, 436, 437, 440, 443, 446, 451, 486, 509, 513, 514, 515, 517, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 610, 612, 617, 625, 629, 631, 633, 635, 636, 637, 639, 641, 643, 644, 646, 654, 657, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 822, 824, 826, 827, 829, 830, 835, 836, 837, 838, 870, 871, 925, 927, 942, 957, 978, 998, 999, 1001, 1003, 1005, 1006, 1007, 1009, 1010], "cpu_count": [42, 925], "n_center": [42, 490], "25000": 42, "colors_": 42, "cname": 42, "birch_model": 42, "final_step": 42, "centroid": [42, 45, 56, 57, 164, 277, 290, 301, 310, 340, 363, 391, 422, 423, 426, 427, 428, 431, 438, 439, 441, 482, 527, 823, 979, 994, 998, 1002, 1005, 1010], "subcluster_centers_": [42, 422], "this_centroid": 42, "set_autoscaley_on": 42, "mbk": [42, 63], "256": [42, 48, 53, 121, 229, 340, 355, 362, 391, 398, 428, 447, 515, 524, 541, 832, 863, 873, 992, 1012], "max_no_improv": [42, 60, 63, 428, 515, 516, 517, 524, 1012, 1013], "t_mini_batch": [42, 63], "mbk_means_labels_uniqu": 42, "cluster_centers_": [42, 43, 48, 50, 57, 59, 60, 62, 63, 95, 310, 340, 420, 423, 426, 427, 428, 991], "798": [42, 67, 158, 398], "plot_birch_vs_minibatchkmean": [42, 67], "bisectingkmean": [43, 391, 1012], "__doc__": [43, 74, 154, 234, 244, 379], "n_clusters_list": 43, "clustering_algorithm": [43, 44, 61], "variant": [43, 95, 160, 163, 164, 256, 309, 310, 340, 341, 372, 391, 394, 396, 399, 401, 428, 439, 468, 471, 472, 490, 493, 521, 537, 538, 543, 593, 597, 600, 601, 605, 608, 616, 617, 619, 623, 650, 682, 775, 779, 781, 782, 783, 792, 798, 819, 837, 872, 947, 953, 954, 955, 956, 957, 959, 960, 971, 978, 992, 998, 1006], "algorithm_nam": 43, "algo": [43, 105], "hide": [43, 374, 811, 812, 813, 814, 815, 1001, 1006], "flat": [43, 95, 101, 167, 217, 218, 219, 254, 391, 399, 420, 427, 440, 487, 964, 991, 998, 999], "label_out": 43, "375": [43, 53, 67, 727, 957], "plot_bisect_kmean": [43, 67], "null": [44, 70, 166, 167, 168, 256, 262, 395, 626, 647, 658, 682, 708, 734, 770, 801, 953, 954, 957, 972, 1008], "mismatch": [44, 956, 1007], "warn": [44, 61, 71, 196, 211, 259, 293, 294, 302, 354, 357, 367, 369, 370, 371, 379, 399, 403, 426, 428, 438, 474, 504, 511, 515, 524, 528, 531, 532, 535, 536, 537, 538, 542, 543, 544, 549, 550, 551, 552, 553, 555, 580, 608, 614, 648, 668, 671, 672, 690, 691, 706, 707, 715, 760, 761, 764, 811, 812, 813, 815, 840, 841, 878, 879, 880, 881, 883, 884, 885, 886, 895, 896, 902, 912, 925, 927, 943, 944, 946, 957, 967, 990, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "noisy_circl": [44, 61], "noisy_moon": [44, 61], "no_structur": [44, 61], "anisotropicli": [44, 61], "170": [44, 56, 61, 372], "x_aniso": [44, 56, 61], "aniso": [44, 61], "plot_num": [44, 61, 225], "default_bas": [44, 61], "quantil": [44, 53, 62, 90, 110, 112, 164, 174, 215, 298, 301, 302, 377, 398, 418, 419, 437, 497, 530, 538, 540, 635, 648, 700, 722, 725, 727, 799, 841, 853, 854, 855, 864, 865, 957, 967, 979, 994, 998, 1002, 1005, 1007, 1011, 1012], "damp": [44, 391, 420, 433], "min_sampl": [44, 49, 64, 377, 379, 391, 402, 424, 429, 435, 436, 649, 953, 1007, 1011], "xi": [44, 64, 94, 364, 391, 394, 399, 429, 435, 487, 971, 1009], "min_cluster_s": [44, 64, 429, 435, 1007], "220": [44, 195, 215, 998], "i_dataset": [44, 61, 225], "algo_param": [44, 61], "param": [44, 60, 61, 70, 121, 123, 124, 217, 231, 254, 256, 264, 268, 280, 293, 367, 368, 379, 398, 401, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 786, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 1004, 1008, 1009, 1011, 1012], "estimate_bandwidth": [44, 62, 391, 427, 440], "symmetr": [44, 122, 169, 198, 379, 389, 391, 431, 441, 442, 453, 497, 505, 507, 668, 672, 673, 682, 683, 693, 694, 695, 701, 705, 713, 714, 732, 734, 740, 762, 770, 772, 773, 943, 946, 953, 957, 960], "meanshift": [44, 310, 391, 420, 1001, 1002, 1003, 1006, 1008, 1009, 1012, 1013], "bin_seed": [44, 62, 427, 440, 1009], "two_mean": 44, "spectralclust": [44, 310, 391, 420, 960, 998, 999, 1008, 1010, 1011, 1012, 1013], "nearest_neighbor": [44, 431, 669], "average_linkag": 44, "gmm": [44, 164, 240, 242, 245, 246, 247, 248, 482, 490, 773, 793, 956, 998, 999, 1002, 1003, 1004], "gaussianmixtur": [44, 56, 242, 243, 244, 245, 246, 247, 397, 772, 1004, 1006, 1007, 1011, 1012], "covariance_typ": [44, 242, 243, 245, 246, 247, 772, 773], "nkmean": 44, "npropag": 44, "ncluster": 44, "nmixtur": 44, "catch": [44, 61, 294, 374, 375], "catch_warn": [44, 61, 293, 294], "filterwarn": [44, 61, 211, 293, 294, 367, 967], "fulli": [44, 116, 122, 354, 361, 362, 379, 397, 398, 400, 423, 426, 535, 536, 542, 543, 883, 884, 885, 886, 887, 889, 946, 947, 953, 962, 970, 977, 1011, 1012], "t1": [44, 46, 61, 211, 219, 222, 225], "ff7f00": [44, 61, 225], "4daf4a": [44, 61], "a65628": [44, 61], "984ea3": [44, 61], "999999": [44, 61], "e41a1c": [44, 61], "dede00": [44, 61, 62], "000000": [44, 166, 185, 214, 256, 302, 714], "transax": [44, 61, 221, 225, 243, 284, 300], "628": [44, 67, 340], "plot_cluster_comparison": [44, 67], "bad": [45, 59, 60, 150, 339, 350, 367, 391, 401, 670, 723, 946, 953, 954, 959, 965, 991, 998], "eight": [45, 992], "deliv": [45, 354, 981], "though": [45, 146, 172, 175, 262, 281, 300, 302, 340, 341, 350, 354, 361, 364, 367, 368, 378, 379, 391, 396, 397, 398, 399, 400, 677, 781, 783, 875, 946, 947, 949, 954, 957, 960, 967, 971, 992, 1006], "3d": [45, 48, 66, 89, 101, 102, 167, 193, 217, 219, 221, 399, 484, 564, 922, 1005, 1006, 1008], "mplot3d": [45, 66, 89, 101, 102, 167, 193, 217, 219], "noqa": [45, 66, 89, 101, 102, 122, 161, 162, 167, 193, 217, 219, 267, 268, 308, 370, 556, 558, 605, 777, 778, 946, 1007], "f401": [45, 66, 89, 101, 102, 167, 193, 217, 219], "k_means_iris_8": 45, "k_means_iris_3": 45, "k_means_iris_bad_init": 45, "est": [45, 129, 166, 233, 300, 308, 350, 398, 540, 712, 841, 946, 957, 967, 971, 1009, 1010], "elev": [45, 66, 89, 101, 102, 167, 193, 217, 221], "azim": [45, 66, 89, 101, 102, 167, 193, 217, 221], "134": [45, 53, 102, 121, 231, 256, 1001], "xaxi": [45, 89, 101, 102, 193, 217, 219, 222, 276, 281, 339], "set_ticklabel": [45, 89, 101, 102, 193, 339], "zaxi": [45, 89, 101, 102, 193, 217], "petal": [45, 89, 104, 106, 118, 238, 308, 311, 364, 392, 888, 973, 989, 990], "sepal": [45, 89, 104, 106, 118, 151, 179, 238, 308, 311, 323, 364, 967, 989, 990], "length": [45, 69, 88, 89, 91, 104, 106, 118, 149, 150, 151, 154, 155, 157, 172, 179, 232, 235, 238, 308, 311, 323, 341, 360, 364, 367, 374, 375, 379, 392, 396, 398, 399, 401, 425, 468, 486, 487, 490, 493, 501, 529, 541, 559, 560, 567, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 610, 624, 625, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 659, 662, 758, 774, 777, 778, 788, 802, 804, 807, 808, 810, 818, 819, 820, 822, 824, 862, 888, 895, 897, 901, 917, 918, 928, 931, 956, 963, 967, 983, 989, 990, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010], "set_zlabel": [45, 89, 193], "setosa": [45, 89, 102, 104, 265, 266, 364, 482, 983, 990], "versicolour": [45, 89, 102, 104, 364, 990], "virginica": [45, 89, 102, 104, 265, 266, 364, 482, 957, 990], "text3d": [45, 102], "reorder": [45, 102, 379, 675, 696, 978, 1006], "313": [45, 67, 990], "plot_cluster_iri": [45, 67], "voxel": [46, 65, 563], "multipl": [46, 68, 75, 91, 94, 105, 117, 118, 164, 166, 190, 230, 256, 268, 278, 306, 354, 355, 356, 361, 363, 364, 367, 368, 369, 370, 371, 377, 379, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 424, 439, 443, 445, 446, 448, 453, 466, 469, 470, 473, 474, 475, 481, 482, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 531, 532, 533, 534, 537, 538, 539, 540, 541, 559, 577, 585, 586, 588, 589, 605, 610, 612, 617, 618, 619, 620, 624, 625, 628, 630, 631, 632, 635, 638, 639, 640, 641, 644, 645, 646, 649, 651, 654, 656, 657, 667, 668, 670, 671, 672, 699, 700, 705, 722, 723, 725, 727, 728, 730, 762, 765, 768, 772, 773, 774, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 802, 806, 807, 808, 809, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 838, 841, 853, 864, 867, 868, 875, 876, 877, 880, 891, 906, 911, 912, 928, 931, 949, 952, 953, 954, 958, 959, 960, 964, 965, 970, 971, 973, 977, 978, 983, 992, 998, 999, 1001, 1004, 1005, 1008, 1009, 1010, 1011], "partli": [46, 746], "procedur": [46, 55, 122, 146, 176, 184, 246, 258, 301, 326, 339, 350, 367, 368, 377, 378, 379, 380, 389, 390, 393, 395, 396, 398, 400, 509, 515, 516, 518, 523, 524, 525, 531, 532, 533, 534, 537, 538, 571, 573, 580, 587, 622, 650, 652, 665, 705, 762, 833, 834, 853, 864, 928, 946, 953, 959, 965, 967, 970, 971, 972, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "solut": [46, 175, 185, 187, 200, 201, 210, 225, 231, 309, 326, 365, 368, 379, 388, 391, 393, 395, 396, 399, 400, 401, 428, 430, 432, 509, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 527, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 588, 624, 626, 628, 630, 632, 633, 634, 636, 638, 640, 642, 643, 644, 645, 646, 647, 650, 652, 654, 655, 656, 657, 658, 660, 661, 663, 664, 665, 772, 773, 788, 825, 833, 834, 950, 951, 953, 954, 956, 961, 963, 971, 972, 976, 981, 987, 990, 992, 998, 1001, 1011, 1012, 1013], "closest": [46, 63, 368, 391, 420, 422, 423, 426, 427, 428, 438, 631, 756, 757, 806, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 948, 951, 958, 960, 990], "partit": [46, 65, 69, 125, 127, 256, 294, 388, 391, 395, 398, 428, 430, 432, 441, 489, 535, 536, 537, 538, 541, 542, 543, 682, 683, 693, 763, 824, 883, 884, 885, 886, 956, 960, 963, 967, 973, 992], "cluster_qr": [46, 391, 431, 441, 1012], "qr": [46, 198, 512, 519, 522, 911, 912, 954, 1004], "pivot": [46, 267, 268], "cheung": [46, 999], "andrew": [46, 391, 441, 669, 673, 695, 714, 770, 851, 961, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "knyazev": [46, 391, 431, 441, 673, 1008, 1011, 1012], "ucdenv": 46, "skimag": [46, 47, 361, 991], "spectral_clust": [46, 65, 1006, 1008, 1010, 1011, 1012, 1013], "orig_coin": [46, 47], "speed": [46, 47, 56, 69, 98, 162, 167, 182, 185, 189, 234, 276, 308, 315, 339, 341, 356, 357, 367, 369, 375, 377, 379, 389, 391, 396, 399, 402, 423, 424, 426, 427, 428, 429, 431, 436, 438, 439, 440, 441, 509, 510, 588, 605, 610, 611, 612, 617, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 659, 662, 670, 772, 773, 780, 800, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 851, 912, 946, 954, 956, 958, 971, 981, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "down": [46, 47, 80, 187, 211, 212, 219, 229, 230, 259, 295, 298, 350, 361, 369, 374, 393, 396, 423, 429, 435, 568, 571, 572, 617, 627, 751, 755, 758, 851, 854, 855, 865, 877, 880, 887, 953, 983, 991, 1006], "alias": [46, 47, 365, 367, 369, 426, 438, 998, 1002, 1012], "smoothened_coin": [46, 47], "rescaled_coin": [46, 47, 991], "anti_alias": [46, 47, 991], "img_to_graph": [46, 65, 399, 1001, 1011], "exponenti": [46, 74, 149, 154, 281, 286, 397, 398, 401, 428, 514, 532, 537, 592, 597, 600, 617, 621, 735, 736, 816, 817, 821, 833, 834, 851, 949, 953, 957, 972, 990, 1005, 1011], "beta": [46, 84, 93, 107, 164, 372, 389, 391, 394, 514, 516, 518, 525, 622, 706, 707, 713, 719, 760, 770, 772, 957, 990, 1000, 1003, 1005, 1007, 1008], "voronoi": [46, 65, 391], "n_region": 46, "extra": [46, 118, 233, 276, 341, 365, 366, 379, 398, 399, 418, 423, 426, 438, 510, 535, 536, 544, 568, 569, 678, 679, 680, 797, 820, 885, 886, 902, 956, 960, 998, 1001, 1003, 1004, 1006, 1011, 1013], "benetif": 46, "n_regions_plu": 46, "lobpcg": [46, 431, 441, 666, 669, 673, 1008, 1011, 1012, 1013], "amg": [46, 65, 391, 431, 441, 669, 673, 1008, 1012, 1013], "pyamg": [46, 382, 384, 391, 431, 441, 669, 673], "toler": [46, 72, 161, 187, 189, 212, 213, 341, 362, 368, 375, 391, 403, 423, 426, 431, 438, 441, 450, 451, 457, 460, 461, 462, 509, 510, 511, 513, 514, 518, 519, 520, 521, 522, 523, 525, 526, 537, 538, 539, 540, 605, 624, 625, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 654, 656, 657, 659, 660, 661, 662, 666, 667, 668, 669, 671, 672, 673, 816, 817, 821, 825, 833, 834, 870, 871, 875, 876, 877, 878, 879, 880, 881, 943, 953, 957, 971, 972, 988, 1010, 1011, 1012, 1013], "eigen_tol": [46, 431, 441, 669, 673, 999, 1012, 1013], "todo": [46, 229, 370, 372, 374, 379, 391], "21243": 46, "assign_label": [46, 391, 431, 441], "individu": [46, 59, 79, 108, 113, 129, 133, 141, 158, 164, 165, 170, 196, 214, 226, 259, 261, 306, 334, 355, 370, 373, 375, 379, 381, 388, 392, 395, 398, 399, 417, 431, 441, 443, 474, 479, 481, 487, 533, 534, 537, 538, 540, 541, 543, 545, 546, 547, 548, 581, 587, 588, 610, 611, 621, 623, 635, 636, 637, 646, 649, 650, 651, 652, 653, 654, 655, 656, 665, 690, 697, 705, 711, 727, 728, 762, 774, 788, 804, 808, 809, 811, 812, 813, 814, 815, 834, 837, 845, 846, 848, 849, 850, 853, 855, 856, 860, 861, 862, 875, 876, 957, 958, 967, 972, 987, 992, 994, 999, 1002, 1004, 1010, 1012], "comment": [46, 339, 365, 366, 367, 369, 370, 374, 380, 465, 556, 957], "paus": 46, "21194": [46, 1011], "137": [46, 67, 372, 999], "plot_coin_segment": [46, 67], "spatial": [47, 49, 169, 213, 294, 362, 379, 391, 402, 424, 429, 431, 436, 657, 670, 677, 737, 740, 755, 756, 757, 758, 767, 768, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 953, 960, 967, 1000, 1004, 1011], "constrain": [47, 95, 119, 126, 167, 187, 292, 307, 324, 326, 360, 379, 390, 391, 396, 398, 487, 539, 540, 613, 636, 668, 672, 801, 953, 956, 1002], "piec": [47, 197, 355, 956], "grid_to_graph": [47, 51, 54, 391, 399, 991, 1011], "st": [47, 66, 256, 311, 1001, 1004, 1006], "148": [47, 146, 1001], "4697": 47, "506": [47, 67], "plot_coin_ward_segment": [47, 67], "vq": [48, 57], "palac": 48, "china": [48, 391, 484, 485, 562], "615": 48, "literatur": [48, 154, 256, 340, 364, 367, 372, 374, 377, 378, 391, 394, 396, 398, 423, 426, 428, 479, 514, 516, 518, 525, 533, 534, 566, 569, 686, 772, 946, 949, 953, 957, 1008], "codebook": [48, 544, 806], "palett": [48, 166, 256, 279], "byte": [48, 53, 399, 465, 481, 486, 487, 560, 566, 567, 569, 924, 990, 992, 998, 1005, 1006], "wherea": [48, 53, 66, 79, 109, 125, 200, 210, 257, 258, 259, 265, 335, 356, 395, 398, 543, 636, 637, 776, 792, 804, 949, 956, 958, 960, 967, 973, 1011], "rgb": [48, 362, 399, 471, 472, 561, 562, 565], "gif": 48, "pick": [48, 59, 169, 232, 264, 310, 314, 362, 367, 370, 391, 398, 423, 439, 501, 651, 885, 886, 946, 953, 954, 956, 971, 1009], "046": 48, "075": [48, 98, 208, 215, 327, 337], "robertlayton": 48, "pairwise_distances_argmin": [48, 63, 310, 757, 1006, 1012, 1013], "load_sample_imag": [48, 561, 562, 1007], "n_color": 48, "photo": 48, "jpg": [48, 484, 562], "original_shap": 48, "image_arrai": 48, "image_array_sampl": 48, "codebook_random": 48, "labels_random": 48, "recreate_imag": 48, "recreat": [48, 235], "book": [48, 69, 423, 426, 428, 806, 811, 815, 953, 954, 955, 958, 975, 1010], "alongsid": [48, 367, 372, 379, 382, 400, 957, 964, 977, 978], "559": [48, 67, 594], "plot_color_quant": [48, 67], "750": [49, 117, 256], "math": [49, 69, 234, 256, 257, 364, 367, 382, 741], "db": [49, 391], "n_noise_": 49, "come": [49, 66, 69, 79, 85, 100, 101, 149, 230, 306, 334, 339, 340, 354, 356, 360, 364, 367, 370, 374, 377, 379, 382, 391, 395, 398, 399, 419, 429, 435, 451, 528, 683, 770, 795, 877, 880, 946, 947, 951, 954, 956, 960, 963, 972, 983, 998, 1009, 1012], "handi": [49, 70, 340, 341], "883": 49, "917": 49, "952": 49, "916": 49, "626": [49, 182], "asign": [49, 340], "unique_label": [49, 340, 368, 375], "core_samples_mask": 49, "zeros_lik": [49, 198, 265], "bool": [49, 65, 80, 162, 214, 348, 367, 403, 404, 405, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 497, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 680, 681, 686, 689, 690, 691, 692, 703, 705, 708, 718, 719, 727, 728, 731, 733, 738, 740, 744, 745, 746, 751, 755, 762, 766, 769, 771, 772, 773, 774, 777, 778, 779, 780, 788, 792, 793, 796, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 894, 895, 896, 906, 912, 913, 921, 924, 928, 930, 938, 943, 944, 945, 947, 1007, 1010, 1011], "core_sample_indices_": [49, 424], "class_member_mask": 49, "markerfacecolor": [49, 60, 62, 63], "181": [49, 57, 67, 295, 372], "plot_dbscan": [49, 67, 402, 424], "constitut": [50, 379, 395, 398, 429, 435, 566, 567, 569, 961], "standpoint": 50, "proce": [50, 143, 177, 365, 370, 394, 395, 398, 420, 953], "reassign": [50, 367, 426, 428, 999, 1003], "success": [50, 164, 249, 263, 272, 350, 386, 391, 395, 396, 398, 493, 542, 556, 774, 777, 778, 795, 880, 960, 981, 987, 991, 994, 1010], "becom": [50, 56, 71, 79, 198, 258, 299, 326, 339, 350, 361, 367, 368, 370, 374, 379, 380, 391, 393, 398, 399, 401, 420, 429, 433, 434, 436, 559, 566, 567, 569, 580, 597, 605, 636, 637, 654, 656, 850, 875, 876, 882, 952, 953, 954, 956, 960, 967, 972, 990, 992, 999, 1006, 1007, 1010, 1011, 1012, 1013], "fetch_olivetti_fac": [50, 95, 117, 233, 362, 1006, 1007, 1008], "olivetti": [50, 95, 117, 360, 396, 473, 994, 998, 1006], "ndownload": 50, "figshar": 50, "5976027": 50, "extract_patches_2d": [50, 98, 399, 1006], "patch_siz": [50, 98, 399, 561, 562], "buffer": [50, 1011], "max_patch": [50, 399, 561, 562, 1006], "4i": 50, "dt": [50, 98, 109, 130, 398, 399, 973], "2400": 50, "700": [50, 308], "800": [50, 120, 309, 362, 562, 670], "900": [50, 73, 74], "1100": 50, "1200": [50, 121, 298, 398], "1300": 50, "1400": [50, 453], "1600": 50, "1700": 50, "1800": 50, "1900": 50, "2100": [50, 309], "2200": [50, 362, 471], "2300": [50, 185], "ntrain": 50, "566": [50, 67, 196], "plot_dict_face_patch": [50, 67], "agglo": [51, 425, 991], "featureagglomer": [51, 54, 420, 421, 974, 991, 1001, 1007, 1008, 1011, 1012], "x_reduc": [51, 89, 127, 425, 991], "x_restor": 51, "images_restor": 51, "vmax": [51, 81, 95, 98, 106, 152, 155, 175, 187, 212, 245, 251, 294, 326], "161": [51, 67], "plot_digits_agglomer": [51, 67], "rich": [52, 374, 377, 391, 419, 981, 1009, 1012], "richer": [52, 105, 391], "uneven": [52, 251, 391, 395], "patholog": [52, 956, 1004], "clean": [52, 70, 195, 350, 359, 365, 397, 963, 967, 1008], "fring": [52, 391], "sensibl": [52, 161, 340, 368, 953, 967], "resampl": [52, 122, 154, 166, 214, 280, 375, 377, 533, 534, 931, 978, 1007, 1011], "plot_clust": 52, "x_red": 52, "spectralembed": [52, 217, 218, 219, 666, 667, 668, 670, 954, 999, 1004, 1008, 1012, 1013], "447": [52, 67], "plot_digits_linkag": [52, 67], "raccoon": [53, 98, 396], "addition": [53, 71, 112, 166, 196, 214, 307, 309, 340, 367, 377, 389, 399, 588, 589, 624, 630, 649, 853, 946, 947, 957, 965, 977, 1004], "adapt": [53, 109, 121, 122, 152, 241, 242, 300, 355, 366, 367, 375, 398, 401, 493, 494, 495, 496, 654, 655, 656, 833, 834, 953, 959, 961, 967, 971, 977, 978, 1006, 1007], "pooch": [53, 382, 384], "instal": [53, 238, 276, 306, 307, 308, 309, 310, 311, 354, 355, 357, 367, 369, 370, 372, 374, 377, 378, 384, 391, 399, 431, 441, 474, 669, 673, 925, 973, 975, 992, 1005, 1006, 1007, 1011, 1012], "raccoon_fac": [53, 98], "nbyte": [53, 229], "768": 53, "1024": [53, 105, 428, 447, 516, 873, 1011], "uint8": [53, 98, 361, 475, 484, 485, 1010], "786432": 53, "unsign": [53, 99, 362, 560, 924], "786": 53, "kilobyt": 53, "shade": [53, 179, 279, 284, 322, 396], "behind": [53, 79, 368, 370, 374, 390, 393, 398, 956, 960, 969], "simplest": [53, 395, 954, 957, 990, 991], "certainli": [53, 69, 340], "compressed_raccoon_uniform": 53, "spot": [53, 227, 391], "leav": [53, 115, 123, 167, 169, 214, 263, 348, 350, 354, 364, 366, 371, 379, 391, 398, 401, 421, 422, 425, 442, 481, 535, 536, 537, 538, 539, 540, 542, 543, 544, 651, 653, 776, 781, 782, 783, 784, 792, 793, 816, 817, 864, 883, 884, 885, 886, 946, 954, 960, 964, 973, 987, 990, 998, 1005, 1007, 1009, 1010], "bin_edg": 53, "bin_edges_": [53, 299, 841], "bin_cent": [53, 196], "625": [53, 126, 133, 196, 686], "875": [53, 150, 647], "140": [53, 398, 488, 494, 495, 496, 533, 534, 958], "171": [53, 364, 372, 765, 957], "203": 53, "234": [53, 811, 815, 833, 834, 959], "axvlin": [53, 59, 72, 81, 103, 121, 131, 166, 168, 185, 262, 988], "get_ybound": 53, "state": [53, 56, 69, 71, 79, 198, 229, 236, 242, 262, 308, 350, 355, 356, 367, 368, 370, 372, 374, 377, 379, 390, 399, 420, 423, 426, 428, 433, 438, 454, 522, 567, 657, 777, 778, 786, 788, 790, 816, 817, 823, 870, 871, 898, 946, 947, 953, 959, 962, 969, 977, 978, 981, 1000, 1002, 1004, 1006, 1008, 1011], "compressed_raccoon_kmean": 53, "9141241": 53, "3627656": 53, "65000752": 53, "26055499": 53, "68738405": 53, "159": [53, 362, 998], "79431128": 53, "185": [53, 64, 67, 158, 193, 215, 364, 372, 833, 834], "18557327": 53, "224": [53, 84, 127, 391, 702], "01945707": 53, "save": [53, 69, 71, 295, 366, 367, 372, 373, 374, 379, 385, 395, 403, 447, 512, 513, 605, 816, 817, 873, 953, 957, 973, 981, 992, 998, 1001, 1005, 1008], "verifi": [53, 59, 166, 196, 367, 371, 941, 960], "6291456": 53, "surpris": [53, 167, 953, 977, 1000], "x8": 53, "ndarrai": [53, 57, 89, 196, 238, 254, 255, 256, 367, 368, 372, 373, 387, 399, 402, 403, 406, 407, 409, 411, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 442, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 684, 685, 693, 696, 698, 699, 700, 701, 703, 704, 705, 715, 716, 717, 722, 723, 725, 727, 728, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 766, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 893, 894, 895, 900, 901, 911, 912, 913, 914, 917, 918, 921, 923, 924, 926, 929, 930, 932, 933, 934, 935, 938, 943, 944, 957, 972, 978, 1001, 1005, 1008, 1009, 1012, 1013], "practic": [53, 70, 79, 85, 98, 119, 149, 166, 172, 198, 225, 231, 257, 264, 282, 283, 308, 326, 355, 357, 367, 368, 369, 370, 372, 374, 378, 379, 391, 393, 395, 396, 397, 398, 399, 401, 426, 431, 441, 499, 502, 567, 610, 611, 648, 772, 815, 868, 875, 946, 947, 951, 956, 957, 958, 959, 960, 963, 964, 967, 977, 978, 979, 981, 983, 992, 993, 994, 1000, 1004, 1006, 1008, 1010], "gain": [53, 219, 263, 276, 278, 315, 339, 340, 348, 366, 372, 374, 377, 398, 510, 535, 539, 540, 542, 703, 733, 772, 773, 805, 883, 885, 958, 962, 970, 973, 1001, 1005, 1008], "539": [53, 67, 114, 133], "plot_face_compress": [53, 67], "anova": [54, 140, 147, 164, 321, 337, 392, 482, 493, 570, 573, 574, 576, 577, 578, 582, 583, 584, 587, 691, 798, 802, 836, 837, 856, 875, 880, 972], "bayesianridg": [54, 161, 175, 176, 308, 605, 622, 953, 1005, 1006, 1007, 1008, 1011, 1012], "shutil": [54, 71, 392], "tempfil": [54, 278, 306, 392, 960], "feature_select": [54, 71, 73, 140, 141, 142, 143, 144, 145, 146, 164, 238, 308, 310, 329, 350, 357, 379, 392, 400, 559, 946, 998, 999, 1001, 1002, 1003, 1004, 1005], "kfold": [54, 121, 135, 251, 261, 350, 395, 417, 451, 545, 546, 572, 580, 625, 629, 631, 633, 639, 641, 643, 651, 774, 777, 778, 780, 782, 784, 788, 793, 795, 796, 797, 798, 799, 800, 801, 803, 807, 810, 987, 999, 1000, 1001, 1003, 1004, 1006, 1008], "roi_siz": 54, "snr": 54, "noise_coef": 54, "gridsearch": [54, 77, 267, 401, 977], "cachedir": [54, 71, 375, 392], "mkdtemp": [54, 392], "mem": [54, 372, 486], "n_x": [54, 563], "n_y": [54, 563, 959], "parcel": [54, 66, 391], "ward__n_clust": 54, "n_job": [54, 71, 72, 116, 117, 122, 123, 129, 136, 145, 161, 166, 167, 168, 218, 220, 236, 255, 257, 258, 260, 271, 276, 306, 307, 308, 311, 355, 367, 379, 398, 402, 417, 424, 427, 429, 431, 436, 437, 440, 443, 446, 451, 509, 513, 514, 515, 517, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 610, 612, 617, 625, 629, 631, 633, 635, 636, 637, 639, 641, 643, 644, 646, 654, 657, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 835, 838, 870, 871, 925, 946, 957, 958, 960, 987, 988, 992, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013], "coef_agglomeration_": 54, "_agglom": 54, "ward_tre": [54, 421, 425, 998, 1002], "451933": 54, "675318": 54, "275706": 54, "085711": 54, "1600x1600": 54, "7840": 54, "element": [54, 95, 109, 113, 114, 124, 227, 250, 255, 263, 265, 307, 340, 344, 348, 357, 364, 366, 367, 368, 375, 380, 388, 390, 391, 395, 396, 398, 399, 402, 424, 431, 443, 465, 486, 490, 492, 498, 500, 504, 505, 509, 515, 516, 518, 528, 535, 536, 537, 538, 542, 543, 544, 545, 546, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 595, 610, 636, 637, 644, 646, 654, 655, 656, 685, 695, 704, 711, 713, 723, 740, 746, 755, 759, 765, 766, 806, 816, 817, 818, 819, 820, 822, 824, 826, 827, 831, 833, 834, 839, 855, 856, 858, 862, 875, 880, 883, 884, 885, 886, 914, 915, 916, 928, 930, 931, 951, 953, 957, 958, 961, 964, 967, 968, 969, 973, 981, 983, 1003, 1004, 1006, 1008, 1009, 1010, 1012], "return_dist": [54, 442, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 960, 1002], "________________________________________________________ward_tre": 54, "0min": 54, "905206": 54, "161245": 54, "849835": 54, "091621": 54, "f_regress": [54, 141, 400, 570, 573, 574, 576, 577, 578, 582, 583, 587, 1001, 1005, 1012], "cach": [54, 164, 257, 277, 290, 354, 355, 362, 379, 421, 425, 429, 447, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 486, 774, 818, 820, 836, 837, 873, 877, 878, 879, 880, 881, 942, 960, 972, 1001, 1005, 1006, 1007, 1008, 1010, 1011, 1013], "selectpercentil": [54, 238, 329, 400, 570, 573, 574, 576, 577, 581, 584, 999, 1004], "percentag": [54, 104, 119, 187, 214, 251, 259, 262, 395, 400, 512, 519, 522, 527, 571, 572, 626, 647, 658, 681, 711, 723, 792, 793, 794, 806, 887, 889, 958, 973, 1000, 1004, 1010, 1011], "anova__percentil": [54, 329], "coef_selection_": 54, "_univariate_select": 54, "267703": 54, "026711": 54, "_____________________________________________________f_regress": 54, "447268": 54, "112": [54, 362, 364, 1000], "638768": 54, "rdbu_r": [54, 81, 106, 326], "temporari": [54, 69, 71, 354, 447, 665, 758, 873, 960, 1001, 1002, 1005, 1011, 1012], "worri": [54, 954, 984], "rmtree": [54, 71, 392], "ignore_error": 54, "516": [54, 67, 341, 342], "plot_feature_agglomeration_vs_univariate_select": [54, 67], "recomput": [55, 235, 237, 278, 306, 448, 453, 953, 969, 1003], "intract": [55, 396, 954, 962], "unlik": [55, 167, 217, 219, 246, 298, 324, 367, 368, 372, 377, 379, 393, 395, 396, 399, 429, 513, 628, 629, 632, 633, 634, 660, 661, 762, 795, 816, 817, 856, 866, 878, 953, 956, 957, 964, 972, 998, 1004], "inferenti": 55, "capabl": [55, 85, 154, 221, 368, 379, 382, 958, 961, 972, 973, 981, 998, 1007], "meta": [55, 69, 108, 132, 133, 164, 196, 265, 350, 361, 365, 368, 370, 377, 379, 387, 389, 390, 400, 401, 444, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 548, 553, 575, 581, 802, 809, 946, 958, 978, 979, 994, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1013], "extend": [55, 66, 197, 245, 263, 326, 364, 365, 377, 379, 389, 390, 391, 396, 398, 609, 698, 805, 808, 809, 841, 843, 859, 890, 949, 957, 958, 972, 978, 979, 994, 1003, 1004, 1005, 1006, 1008, 1013], "chirag": 55, "nagpal": 55, "christo": [55, 1007, 1008, 1010, 1012], "arida": [55, 1007, 1008, 1010, 1012], "baseestim": [55, 276, 367, 378, 379, 413, 610, 611, 904, 998, 1005, 1008, 1010, 1012], "clone": [55, 122, 157, 167, 295, 350, 365, 367, 369, 370, 374, 379, 389, 392, 401, 417, 444, 547, 548, 575, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 780, 800, 803, 807, 810, 836, 837, 872, 978, 998, 1004, 1006, 1010], "metaestim": [55, 379, 1002, 1011, 1012], "available_if": [55, 379, 920, 1011, 1012], "check_is_fit": [55, 368, 375, 379, 1008, 1011, 1012], "5000": [55, 182, 211, 212, 214, 308], "_classifier_ha": 55, "deleg": [55, 372, 920, 1002, 1004, 1010], "unfit": [55, 392, 414, 443, 547, 548, 580, 589, 1006, 1008], "classifier_": 55, "inductivecluster": 55, "clusterer_": 55, "plot_scatt": 55, "cluster_label": [55, 59], "x_new": [55, 392, 396, 400, 413, 422, 423, 425, 426, 428, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 527, 545, 546, 547, 548, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 606, 608, 613, 616, 617, 618, 619, 620, 666, 667, 668, 669, 670, 825, 832, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 969, 983], "y_new": 55, "declar": [55, 218, 350, 367, 368, 372, 379, 423, 426, 438, 450, 451, 457, 668, 672, 1005, 1009], "membership": [55, 380, 388, 390, 391, 489, 490, 491, 492, 493, 497, 500, 972], "inductive_learn": 55, "probable_clust": 55, "response_method": [55, 112, 125, 130, 179, 188, 205, 259, 279, 284, 287, 322, 323, 345, 609, 610, 611, 676, 678, 680], "040": [55, 67], "plot_inductive_clust": [55, 67], "meant": [56, 146, 362, 368, 375, 453, 471, 655, 822, 947, 961, 963, 967, 999], "unintuit": 56, "possibli": [56, 85, 146, 196, 211, 340, 364, 366, 374, 385, 391, 398, 399, 430, 432, 567, 811, 812, 813, 814, 815, 880, 881, 883, 884, 885, 886, 946, 949, 954, 960, 967, 1013], "undesir": [56, 150, 401], "phil": [56, 1003], "roth": [56, 1003, 1006, 1013], "mr": [56, 311, 999, 1002, 1012], "isotrop": [56, 60, 100, 151, 153, 217, 219, 391, 393, 401, 490, 497, 510, 593, 597, 598, 600, 601], "spheric": [56, 84, 125, 219, 243, 245, 246, 289, 363, 741, 772, 773, 953, 956, 960, 977], "anisotrop": [56, 151, 401, 595, 597, 600], "ellipt": [56, 953], "60834549": 56, "63667341": 56, "40887718": 56, "85253229": 56, "x_vari": 56, "y_vari": 56, "unequ": [56, 1006], "x_filter": 56, "unevenli": [56, 196, 251], "y_filter": 56, "set_i": 56, "scenario": [56, 69, 149, 172, 259, 350, 373, 395, 398, 515, 521, 523, 524, 951, 957, 967, 1008], "appropri": [56, 103, 154, 166, 265, 334, 344, 350, 367, 368, 374, 379, 390, 391, 395, 397, 398, 402, 424, 429, 436, 467, 468, 469, 474, 478, 479, 480, 482, 483, 488, 554, 560, 569, 570, 573, 574, 576, 577, 578, 650, 652, 665, 687, 818, 819, 820, 822, 824, 826, 827, 828, 941, 953, 956, 957, 967, 1002, 1005, 1011], "criteria": [56, 164, 174, 185, 204, 215, 246, 256, 374, 391, 400, 445, 460, 461, 462, 479, 535, 536, 537, 538, 542, 543, 624, 630, 634, 636, 637, 649, 670, 837, 856, 875, 876, 883, 884, 885, 886, 947, 956, 961, 971, 991, 1001, 1006, 1009], "knowledg": [56, 117, 166, 213, 234, 256, 362, 367, 378, 379, 391, 395, 398, 402, 424, 489, 533, 534, 541, 698, 713, 717, 760, 805, 957, 958, 969, 992], "consequ": [56, 103, 214, 256, 257, 298, 323, 350, 396, 398, 539, 540, 544, 633, 634, 947, 953, 957, 973, 1007, 1009], "likelihood": [56, 76, 78, 79, 80, 82, 103, 149, 150, 151, 153, 154, 155, 156, 158, 164, 184, 214, 245, 249, 256, 262, 272, 295, 298, 368, 379, 389, 393, 396, 398, 401, 417, 448, 449, 450, 451, 452, 453, 454, 455, 456, 493, 510, 514, 519, 527, 528, 529, 588, 589, 623, 636, 690, 718, 772, 773, 774, 799, 802, 821, 832, 852, 863, 877, 878, 880, 881, 953, 956, 959, 967, 972, 1001, 1002, 1007, 1013], "inertia": [56, 57, 60, 340, 391, 423, 426, 428, 431, 438, 439, 441, 442, 1009], "common_param": [56, 122, 167, 231, 258, 259], "unexpect": [56, 350, 367, 371, 374, 385, 513, 674, 957, 972, 1000, 1006, 1007, 1010, 1012], "suffic": [56, 57, 368, 992], "detail": [56, 111, 113, 116, 118, 123, 129, 167, 184, 185, 222, 227, 230, 231, 236, 238, 247, 254, 263, 282, 283, 306, 307, 308, 309, 310, 311, 344, 346, 347, 350, 354, 355, 356, 359, 360, 361, 362, 365, 367, 368, 370, 371, 372, 374, 377, 378, 379, 380, 382, 385, 390, 391, 394, 395, 396, 398, 400, 401, 402, 404, 413, 414, 417, 423, 424, 426, 427, 429, 431, 436, 437, 438, 440, 441, 443, 445, 446, 447, 451, 474, 502, 509, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 526, 527, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 592, 597, 600, 609, 610, 612, 617, 623, 625, 629, 631, 633, 634, 635, 636, 637, 639, 641, 643, 644, 646, 650, 652, 654, 656, 657, 665, 666, 667, 668, 669, 670, 671, 672, 673, 679, 691, 751, 755, 756, 757, 758, 773, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 814, 818, 819, 821, 822, 824, 826, 827, 829, 830, 835, 838, 840, 841, 853, 864, 870, 871, 873, 877, 880, 883, 884, 885, 886, 906, 946, 947, 951, 955, 956, 957, 958, 960, 961, 963, 970, 979, 980, 981, 983, 989, 992, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "propos": [56, 77, 78, 276, 362, 367, 368, 377, 379, 391, 393, 398, 403, 429, 513, 585, 586, 654, 655, 656, 833, 834, 953, 956, 960, 971, 975, 1005], "constraint": [56, 66, 95, 108, 133, 164, 191, 251, 293, 294, 295, 307, 367, 377, 396, 399, 465, 486, 487, 539, 540, 613, 792, 793, 926, 946, 948, 953, 954, 971, 1002, 1005, 1006, 1009, 1011, 1013], "inflat": [56, 168, 391, 395, 957], "allevi": [56, 175, 391, 959], "fastest": [56, 254, 341, 426, 648, 650, 652, 665, 911, 912, 956], "lost": [56, 81, 362, 377, 954, 957], "restart": [56, 369, 374, 426, 509, 515, 516, 521, 523, 524, 588, 589, 954, 1011], "175": [56, 67, 372, 967], "plot_kmeans_assumpt": [56, 67], "judg": [57, 202, 391, 987], "definit": [57, 80, 184, 196, 263, 276, 340, 367, 368, 370, 379, 381, 391, 393, 394, 396, 505, 507, 513, 589, 606, 670, 686, 696, 705, 735, 772, 773, 946, 949, 951, 953, 955, 957, 960, 971, 976, 994, 1002, 1006, 1013], "shorthand": [57, 379, 392, 446, 539, 540, 837, 838, 1001], "homo": 57, "compl": 57, "mea": 57, "context": [57, 234, 354, 355, 361, 366, 378, 379, 391, 392, 397, 398, 399, 401, 402, 417, 424, 427, 429, 431, 436, 437, 440, 443, 446, 447, 451, 509, 513, 514, 515, 517, 520, 521, 522, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 604, 605, 608, 610, 612, 617, 625, 629, 631, 633, 635, 636, 637, 639, 641, 643, 644, 646, 654, 657, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 822, 824, 826, 827, 829, 830, 835, 838, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 947, 953, 957, 963, 967, 971, 978, 981, 990, 998, 1005, 1006, 1011], "n_digit": 57, "1797": [57, 88, 254, 295, 314, 364, 425, 480, 510, 511, 512, 513, 577, 578, 666, 667, 668, 669, 960, 989], "bench_k_mean": 57, "tabl": [57, 214, 256, 367, 370, 375, 391, 399, 560, 636, 658, 774, 788, 813, 924, 953, 957, 958, 963, 999], "fit_tim": [57, 119, 185, 204, 258, 395, 799, 800], "inertia_": [57, 60, 63, 423, 426, 428, 1009], "clustering_metr": 57, "sample_s": [57, 230, 340, 768], "formatter_result": 57, "determinist": [57, 122, 355, 363, 368, 379, 391, 423, 426, 428, 430, 431, 432, 437, 438, 441, 529, 537, 538, 542, 543, 561, 562, 669, 673, 785, 786, 832, 883, 884, 949, 953, 999, 1002, 1004, 1006, 1007, 1010, 1013], "ttime": 57, "tinertia": 57, "thomo": 57, "tcompl": 57, "tv": 57, "tari": 57, "tami": 57, "tsilhouett": 57, "__________________________________________________________________________________": 57, "052": [57, 179, 215], "69662": 57, "680": 57, "719": 57, "699": [57, 340], "570": [57, 364, 990], "695": [57, 254, 318], "034": [57, 450], "69707": 57, "675": [57, 86, 149], "694": 57, "560": [57, 161, 163, 196, 495, 496], "691": [57, 699], "174": [57, 121, 295, 372, 562], "72686": 57, "636": [57, 372], "658": [57, 85], "647": [57, 155, 159], "521": 57, "643": [57, 254], "reduced_data": 57, "mesh": [57, 118, 127, 151, 230, 284, 292, 300, 319, 322], "169": [57, 295], "mark": [57, 91, 141, 162, 260, 267, 359, 367, 368, 370, 374, 375, 379, 391, 513, 567, 585, 586, 589, 610, 636, 829, 830, 870, 871, 888, 902, 907, 912, 953, 981, 994, 998, 999, 1004, 1006, 1007], "806": [57, 67, 627], "plot_kmeans_digit": [57, 67], "kmeans_plusplu": [58, 391, 1010], "4000": [58, 124, 244], "centers_init": 58, "4eacc5": [58, 63], "ff9c34": [58, 63], "4e9a06": [58, 63], "cluster_data": 58, "067": [58, 67, 158, 254, 272], "plot_kmeans_plusplu": [58, 67], "wrong": [59, 196, 282, 339, 350, 364, 367, 368, 399, 482, 703, 733, 768, 957, 963, 972, 1001, 1003, 1005, 1006, 1007, 1008, 1011], "wide": [59, 60, 113, 229, 299, 377, 391, 396, 399, 946, 953, 977, 981, 992, 998, 1000], "ambival": 59, "thick": [59, 286, 960], "ow": 59, "7049787496083262": 59, "5882004012129721": 59, "6505186632729437": 59, "5662344175321901": 59, "4358297989156284": 59, "silhouette_sampl": [59, 768, 1002, 1004, 1006], "distinct": [59, 256, 316, 339, 341, 362, 368, 371, 379, 395, 398, 399, 567, 775, 784, 792, 850, 851, 870, 871, 946, 953, 960, 963, 992, 1006], "center_box": [59, 490], "range_n_clust": 59, "set_size_inch": [59, 135, 235], "lie": [59, 84, 145, 166, 230, 298, 316, 324, 326, 396, 398, 584, 824, 826, 827, 828, 951, 954, 957, 967, 972], "insert": [59, 166, 196, 377, 391, 465, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 890], "blank": [59, 371, 947, 973], "demarc": 59, "perspect": [59, 196, 354, 362, 377, 380, 508, 621, 875, 950], "silhouette_avg": 59, "sample_silhouette_valu": 59, "y_lower": [59, 122], "aggreg": [59, 114, 214, 259, 265, 310, 391, 398, 512, 533, 534, 699, 700, 705, 722, 723, 725, 727, 728, 730, 762, 958, 960, 967], "ith_cluster_silhouette_valu": 59, "size_cluster_i": 59, "y_upper": [59, 122], "fill_betweenx": 59, "2nd": [59, 89, 157, 303, 391, 402, 424, 508, 967, 1013], "lw": [59, 77, 78, 80, 99, 104, 105, 190, 197, 199, 202, 206, 213, 220, 244, 251, 266, 271, 281, 298, 316, 333], "fontweight": [59, 191], "bold": [59, 122, 185, 191, 367], "plot_kmeans_silhouette_analysi": [59, 67], "reach": [60, 146, 196, 198, 212, 214, 258, 310, 326, 348, 371, 380, 382, 391, 396, 400, 429, 436, 486, 487, 571, 572, 605, 623, 624, 625, 630, 631, 632, 633, 634, 638, 639, 640, 641, 644, 645, 646, 654, 655, 656, 657, 659, 660, 661, 662, 706, 707, 760, 772, 773, 833, 834, 872, 946, 957, 961, 971, 973, 981, 1009, 1013], "optimum": [60, 155, 166, 172, 269, 396, 451, 953, 956], "stuck": [60, 670, 954], "check_random_st": [60, 212, 219, 228, 233, 368, 375, 379], "trade": [60, 77, 168, 255, 257, 258, 326, 339, 390, 391, 393, 531, 532, 537, 538, 612, 634, 670, 774, 777, 778, 788, 799, 954, 961, 969, 971, 972, 978], "n_init_rang": 60, "n_samples_per_cent": 60, "make_data": 60, "n_clusters_tru": 60, "init_s": [60, 340, 428], "factori": [60, 256, 399, 719, 927, 957], "empti": [60, 69, 105, 208, 276, 317, 354, 362, 368, 370, 391, 403, 461, 511, 539, 540, 608, 609, 785, 841, 882, 890, 895, 896, 902, 947, 972, 990, 1000, 1002, 1006, 1007, 1009, 1010, 1012], "run_id": 60, "km": [60, 310, 340], "my_memb": [60, 62, 63], "278": [60, 67, 364, 816, 817], "plot_kmeans_stability_low_dim_dens": [60, 67], "fast": [61, 172, 185, 211, 212, 230, 231, 299, 341, 354, 362, 367, 375, 391, 393, 395, 396, 398, 399, 401, 403, 426, 448, 453, 486, 510, 511, 513, 516, 518, 522, 525, 544, 566, 567, 569, 610, 611, 618, 636, 637, 650, 652, 665, 677, 774, 788, 797, 798, 799, 808, 809, 816, 817, 821, 832, 912, 926, 949, 953, 956, 959, 960, 962, 963, 973, 977, 981, 992, 998, 999, 1004, 1005, 1008, 1009], "globular": [61, 391], "cleanli": [61, 998], "105": [61, 67, 302, 348, 349], "plot_linkage_comparison": [61, 67], "dorin": [62, 427], "comaniciu": [62, 391, 427], "meer": [62, 391, 427], "ieee": [62, 78, 80, 364, 391, 393, 400, 427, 454, 512, 541, 642, 663, 664, 702, 746, 953, 957, 963], "transact": [62, 364, 391, 402, 424, 427, 512, 516, 518, 525, 541, 622, 642, 663, 664, 702, 703, 733, 746, 953, 957], "intellig": [62, 339, 364, 391, 398, 427, 533, 534, 616, 674, 702, 806, 833, 834, 958, 969, 978, 981], "2002": [62, 389, 391, 398, 417, 427, 571, 572, 703, 733, 823, 870, 949, 957], "603": [62, 427], "619": [62, 100, 107, 290, 427], "labels_uniqu": 62, "460": [62, 67], "plot_mean_shift": [62, 67, 440], "3000": [63, 110, 220, 867, 868], "k_mean": [63, 375, 379, 991, 1006], "t_batch": 63, "pairwis": [63, 166, 229, 265, 306, 310, 311, 339, 354, 359, 368, 379, 391, 396, 401, 437, 440, 441, 447, 465, 486, 487, 513, 539, 540, 598, 616, 617, 618, 619, 620, 621, 666, 668, 670, 672, 674, 677, 755, 758, 765, 767, 768, 804, 820, 822, 824, 828, 842, 873, 957, 960, 969, 972, 994, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013], "k_means_cluster_cent": 63, "mbk_means_cluster_cent": 63, "k_means_label": 63, "mbk_means_label": 63, "ninertia": 63, "bbbbbb": 63, "197": [63, 67, 340, 401], "plot_mini_batch_kmean": [63, 67], "reachabl": [64, 391, 429, 434, 435, 436, 822, 917], "shane": [64, 1007, 1010, 1013], "grigsbi": 64, "refug": 64, "rocktalu": 64, "cluster_optics_dbscan": [64, 391], "n_points_per_clust": 64, "c1": [64, 119, 157, 228], "c2": [64, 119, 157, 228], "c3": [64, 119], "c4": [64, 979, 994], "c5": [64, 979, 994], "c6": 64, "clust": [64, 429, 436], "labels_050": 64, "reachability_": [64, 391, 429, 434, 435, 436], "core_dist": [64, 434], "core_distances_": [64, 429, 434, 436], "ordering_": [64, 391, 429, 434, 435, 436], "labels_200": 64, "ax3": [64, 317], "ax4": 64, "klass": 64, "xk": [64, 528], "rk": 64, "full_lik": 64, "epsilon": [64, 178, 220, 231, 333, 396, 434, 621, 627, 645, 654, 656, 723, 833, 834, 876, 878, 881, 950, 953, 957, 961, 971, 972, 990, 998], "noptic": 64, "ndbscan": 64, "plot_opt": [64, 67], "tri": [65, 104, 217, 285, 355, 368, 371, 377, 380, 389, 398, 428, 430, 432, 609, 610, 611, 648, 670, 676, 678, 680, 788, 925, 962, 980, 983, 1000, 1006, 1010], "intens": [65, 98, 364, 396, 423, 426, 438, 585, 586, 610, 611, 776, 946, 964, 981, 1006], "weakli": 65, "outlin": [65, 118, 367, 368, 379, 380, 381, 946, 994], "center1": 65, "center2": 65, "center3": 65, "67": [65, 166, 214, 364, 494, 495, 496, 605, 645, 691, 788, 947, 957, 971, 998], "center4": 65, "radius1": 65, "radius2": 65, "radius3": 65, "radius4": 65, "circle1": 65, "circle2": 65, "circle3": 65, "circle4": 65, "label_im": 65, "cleaner": 65, "plot_segmentation_toi": [65, 67], "swiss": [66, 164, 216, 223, 391, 508, 670, 671, 1012], "roll": [66, 164, 216, 223, 369, 391, 508, 670, 671, 906, 981, 1008, 1013], "sole": [66, 377, 391], "respect": [66, 100, 114, 118, 126, 157, 172, 175, 185, 198, 210, 213, 217, 219, 226, 229, 231, 246, 265, 282, 283, 295, 303, 310, 323, 354, 355, 362, 363, 367, 389, 391, 394, 396, 398, 399, 401, 443, 446, 449, 450, 451, 452, 453, 454, 455, 512, 518, 519, 525, 531, 539, 540, 575, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 614, 621, 649, 668, 672, 690, 705, 759, 762, 772, 773, 812, 822, 833, 834, 887, 889, 946, 950, 951, 953, 954, 957, 960, 961, 962, 963, 967, 972, 981, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "oppos": [66, 367, 370, 387, 391, 871, 960, 972, 983, 998], "make_swiss_rol": [66, 221, 1012], "thinner": 66, "fig1": 66, "set_posit": [66, 101, 102, 207, 298], "jet": 66, "fig2": 66, "121": [66, 112, 162, 200, 230, 647, 967], "370": [66, 67, 340], "plot_ward_structured_vs_unstructur": [66, 67], "693": [67, 957], "auto_examples_clust": 67, "chain": [68, 75, 164, 273, 275, 276, 350, 357, 359, 377, 379, 390, 401, 474, 480, 519, 589, 605, 636, 715, 774, 802, 805, 807, 808, 809, 810, 836, 837, 856, 946, 947, 958, 962, 974, 977, 981, 992, 994], "raster": 69, "caption": 69, "serv": [69, 99, 155, 259, 392, 515, 524, 529, 949, 1012], "matt": [69, 1001, 1002, 1003, 1008, 1009], "terri": [69, 1002], "truncatedsvd": [69, 127, 218, 340, 396, 512, 513, 517, 518, 519, 670, 835, 838, 954, 1000, 1005, 1009, 1010, 1012], "dictvector": [69, 164, 338, 340, 342, 362, 399, 466, 560, 566, 567, 568, 569, 849, 998, 999, 1002, 1008, 1010, 1011], "compris": [69, 122, 254, 339, 340, 341, 362, 377, 396, 398, 493, 781, 954], "subject": [69, 126, 247, 259, 339, 362, 367, 368, 370, 377, 379, 380, 389, 390, 393, 395, 396, 473, 636, 637, 663, 839, 875, 876, 925, 927, 948, 953, 972, 976, 992, 1007, 1008, 1011, 1013], "mccall": 69, "mksol": 69, "dseg": 69, "ti": [69, 196, 243, 246, 254, 335, 354, 577, 578, 613, 698, 703, 733, 772, 773, 877, 880, 883, 956, 957, 972, 999, 1001, 1002, 1006, 1008, 1012, 1013], "fred": [69, 998, 1011], "575": [69, 196, 198, 215], "3539": 69, "1993apr6": 69, "131900": 69, "8407": 69, "perhap": [69, 118, 364, 366, 374, 379, 397, 978], "militari": 69, "slug": 69, "school": [69, 364, 391, 765, 957], "physic": [69, 355, 483, 924, 953], "teacher": 69, "ex": [69, 365, 382, 1002, 1003], "fighter": 69, "jock": 69, "wasn": [69, 1007], "poundal": 69, "flink": 69, "funni": 69, "propon": 69, "si": 69, "insist": 69, "safeti": [69, 377, 392, 978, 1008], "ball": [69, 281, 289, 391, 397, 427, 670, 816, 817, 821, 824, 826, 827, 828, 998, 1000, 1003, 1009], "world": [69, 73, 166, 221, 234, 339, 354, 357, 360, 364, 391, 396, 399, 947, 957, 959, 976, 978, 981, 986, 994, 998], "mari": [69, 1006, 1007, 1008, 1009, 1012], "shafer": 69, "nasa": [69, 339, 340, 364], "am": [69, 74, 79, 129, 167, 339, 371, 393, 453, 471, 1005], "dryden": 69, "stateless": [69, 340, 356, 368, 399, 567, 839, 840, 848, 967], "subject_body_extractor": 69, "startswith": [69, 218, 289], "subject_body_transform": 69, "sentenc": [69, 339, 341, 362, 380, 399], "text_stat": 69, "num_sent": 69, "text_stats_transform": 69, "subjectbodyextractor": 69, "subjectbodi": 69, "union": [69, 166, 392, 474, 715, 731, 835, 1005], "body_bow": 69, "pull": [69, 309, 355, 365, 369, 379, 380, 1008], "body_stat": 69, "transformer_weight": [69, 443, 446, 835, 1003, 1010], "dual": [69, 71, 334, 339, 399, 400, 450, 451, 457, 589, 624, 625, 630, 631, 636, 637, 638, 639, 640, 641, 659, 662, 816, 817, 875, 876, 877, 880, 972, 1000, 1009, 1012], "396": [69, 364, 992], "394": [69, 158], "plot_column_transform": [69, 75], "imput": [70, 129, 163, 168, 227, 236, 238, 307, 310, 357, 359, 370, 378, 379, 392, 398, 468, 479, 543, 558, 617, 623, 650, 798, 819, 837, 894, 896, 977, 978, 994, 1000, 1001], "miss": [70, 129, 163, 168, 227, 236, 256, 307, 311, 350, 354, 357, 359, 362, 364, 366, 367, 368, 370, 371, 379, 390, 391, 392, 393, 451, 468, 474, 476, 479, 539, 540, 543, 544, 605, 606, 607, 608, 617, 623, 650, 668, 672, 704, 746, 798, 819, 837, 845, 846, 850, 852, 853, 856, 860, 863, 864, 866, 953, 954, 957, 973, 977, 978, 981, 994, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "dispatch": [70, 357, 387, 447, 774, 788, 797, 798, 799, 873, 987, 994], "processor": [70, 129, 166, 357, 402, 417, 424, 427, 429, 431, 436, 437, 440, 443, 446, 451, 509, 513, 514, 515, 517, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 610, 612, 617, 625, 629, 631, 633, 635, 636, 637, 639, 641, 643, 644, 646, 654, 657, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 818, 819, 822, 824, 826, 827, 829, 830, 835, 838, 870, 871], "pedro": [70, 999, 1001, 1002, 1006], "simpleimput": [70, 129, 161, 162, 168, 227, 236, 238, 307, 310, 350, 379, 605, 606, 607, 947, 967, 1006, 1007, 1009, 1010, 1012, 1013], "40945": 70, "titan": [70, 168, 238, 306, 310, 311], "surviv": [70, 168, 946, 977], "ag": [70, 146, 166, 168, 184, 185, 196, 214, 235, 236, 238, 298, 309, 310, 311, 362, 364, 981, 983, 990], "fare": [70, 168, 238, 310, 311, 1002, 1003], "embark": [70, 168, 238, 306, 310, 311], "sex": [70, 146, 166, 168, 184, 185, 238, 311, 364, 965, 990], "femal": [70, 166, 311, 371, 849, 850, 967], "male": [70, 166, 311, 371, 849, 850, 967], "pclass": [70, 168, 238, 306, 310, 311], "numeric_featur": [70, 310], "numeric_transform": [70, 310], "categorical_transform": 70, "preprocessor": [70, 129, 166, 196, 227, 236, 307, 309, 310, 311, 392, 399, 566, 567, 569, 977, 992, 998, 1001, 1006, 1008], "pipelinepipelin": [70, 115, 129, 143, 166, 168, 226, 227, 235, 236, 238, 257, 263, 307, 310], "columntransformercolumntransform": [70, 129, 166, 167, 168, 227, 236, 307, 310], "simpleimputersimpleimput": [70, 129, 168, 227, 236, 307, 310], "standardscalerstandardscal": [70, 129, 166, 226, 227, 235, 236, 238, 263, 307, 310], "onehotencoderonehotencod": [70, 115, 129, 166, 167, 227, 236, 307, 310], "logisticregressionlogisticregress": [70, 115, 226, 227, 236, 238, 295, 307, 310], "make_column_selector": [70, 119, 129, 392, 443, 446, 1008], "subset_featur": 70, "Then": [70, 109, 111, 115, 117, 129, 132, 143, 166, 172, 184, 196, 221, 226, 237, 258, 259, 339, 361, 367, 370, 372, 374, 382, 388, 389, 391, 394, 396, 399, 400, 548, 571, 697, 733, 774, 788, 836, 947, 956, 957, 963, 972, 992, 1007], "int64index": [70, 167], "1047": 70, "1118": 70, "684": [70, 79], "1045": 70, "841": 70, "1046": [70, 246], "kb": [70, 166, 167], "numerical_transform": 70, "yourself": [70, 366, 367, 371, 374, 961], "selector": [70, 142, 143, 374, 399, 445, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 1000, 1008, 1010], "dtype_exclud": [70, 445], "dtype_includ": [70, 119, 129, 392, 445], "794": 70, "lt": [70, 115, 129, 166, 246, 254, 268, 367], "_column_transform": [70, 129], "0x7f50dfd9aa30": 70, "0x7f50dfd9ab80": 70, "exactli": [70, 175, 189, 196, 247, 264, 299, 339, 367, 368, 370, 388, 391, 395, 396, 399, 404, 432, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 493, 504, 568, 569, 593, 654, 656, 681, 683, 740, 775, 792, 797, 949, 953, 954, 955, 957, 958, 973, 991, 992, 998, 1004, 1005, 1011], "hyperparamet": [70, 109, 149, 150, 156, 157, 161, 164, 167, 175, 185, 210, 214, 225, 249, 254, 259, 261, 272, 278, 295, 339, 368, 379, 395, 396, 398, 401, 480, 513, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 621, 631, 637, 643, 651, 654, 705, 762, 774, 788, 946, 951, 952, 953, 956, 957, 959, 961, 963, 971, 978, 992, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "preprocessor__num__imputer__strategi": 70, "classifier__c": 70, "grid_search": [70, 73, 236, 246, 254, 264, 392, 1000, 1001, 1002, 1003, 1004, 1005], "gridsearchcvgridsearchcv": [70, 236, 246, 254, 256], "trigger": [70, 71, 370, 392, 833, 834, 836, 837, 895, 896, 912, 953, 992, 1006, 1012, 1013], "best_params_": [70, 72, 122, 149, 231, 246, 254, 260, 308, 326, 378, 774, 777, 778, 788, 946, 988, 992], "best_score_": [70, 72, 231, 257, 260, 261, 326, 651, 653, 774, 777, 778, 788, 987, 988, 992, 1009], "784": [70, 294], "cv_results_": [70, 71, 72, 81, 135, 145, 246, 254, 255, 256, 257, 260, 264, 267, 268, 278, 326, 451, 572, 774, 777, 778, 788, 992, 1004, 1008, 1010, 1011], "sort_valu": [70, 168, 238, 246, 256, 267], "mean_test_scor": [70, 71, 72, 81, 135, 145, 246, 255, 256, 257, 264, 267, 268, 278, 326, 451, 572, 774, 788, 946, 1004, 1011], "ascend": [70, 168, 398, 429, 435, 605, 613, 887, 889, 971, 1008], "std_test_scor": [70, 72, 135, 145, 255, 256, 257, 264, 278, 451, 572, 774, 788, 1004, 1011], "param_preprocessor__num__imputer__strategi": 70, "param_classifier__c": 70, "784167": 70, "035824": 70, "780366": 70, "032722": 70, "780348": 70, "037245": 70, "779414": 70, "033105": 70, "668": [70, 75], "plot_column_transformer_mixed_typ": [70, 75], "instanti": [71, 152, 309, 369, 398, 429, 545, 546, 580, 608, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 902, 963, 989, 998, 1006, 1010], "memoiz": [71, 362, 379], "costli": [71, 77, 116, 161, 257, 335, 355, 372, 391, 423, 605, 782, 784, 867, 868, 912, 957, 960, 969, 978], "mcgibbon": [71, 1000, 1001, 1004], "selectkbest": [71, 73, 142, 143, 310, 350, 367, 392, 400, 559, 570, 573, 574, 576, 578, 584, 946, 999, 1004], "chi2": [71, 329, 399, 400, 431, 559, 570, 573, 574, 576, 577, 578, 583, 584, 587, 598, 616, 617, 618, 619, 620, 621, 736, 742, 751, 998, 1005, 1012], "pipe": [71, 72, 119, 236, 255, 308, 309, 378, 392, 399, 568, 836, 860, 861, 863, 864, 865, 866, 946, 967, 988], "reduce_dim": [71, 236, 255, 392], "popul": [71, 77, 79, 166, 196, 259, 298, 362, 375, 379, 393, 420, 690, 696, 818, 819, 820, 822, 824, 826, 827, 828, 926, 957, 963, 967, 973], "n_features_opt": 71, "c_option": 71, "iterated_pow": [71, 510, 513, 519, 1004], "reduce_dim__n_compon": [71, 255, 392], "classify__c": 71, "reduce_dim__k": 71, "reducer_label": 71, "kbest": [71, 570], "mean_scor": [71, 265, 268, 340, 1011], "alphabet": [71, 379, 718], "bar_offset": 71, "bgrcmyk": 71, "reducer_scor": 71, "sometim": [71, 129, 256, 294, 340, 350, 355, 356, 367, 368, 370, 372, 378, 379, 382, 391, 393, 396, 398, 399, 428, 512, 513, 516, 518, 519, 841, 842, 843, 890, 952, 953, 954, 957, 962, 967, 968, 972, 983, 991, 995, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "worthwhil": [71, 379], "slower": [71, 98, 119, 161, 231, 265, 341, 398, 399, 400, 430, 432, 516, 518, 525, 533, 534, 536, 541, 543, 566, 567, 569, 609, 610, 611, 621, 637, 650, 652, 665, 670, 682, 804, 808, 809, 950, 954, 955, 956, 958, 960, 973, 992, 1002, 1009], "constructor": [71, 228, 355, 368, 379, 390, 392, 399, 443, 446, 527, 528, 533, 545, 546, 547, 548, 559, 560, 566, 567, 575, 646, 654, 655, 818, 819, 820, 822, 823, 824, 826, 827, 828, 835, 836, 837, 838, 839, 848, 925, 946, 958, 967, 972, 978, 983, 998, 999, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "folder": [71, 362, 365, 367, 370, 374, 382, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 481, 960, 992], "cached_pip": [71, 392], "delet": [71, 315, 317, 370, 371, 448, 453, 464], "exit": [71, 276, 374, 447], "benefici": [71, 73, 77, 95, 127, 298, 299, 365, 954], "618": [71, 75, 254, 341], "plot_compare_reduct": [71, 75], "924": 72, "logistic__c": [72, 988], "046415888336127774": 72, "pca__n_compon": [72, 988], "truncat": [72, 127, 218, 375, 512, 513, 517, 518, 519, 522, 654, 656, 703, 733, 772, 825, 888, 912, 946, 956, 957, 971, 988, 992, 993, 994, 1004, 1006], "x_digit": [72, 137, 293, 392, 987, 988, 990], "y_digit": [72, 137, 293, 392, 987, 988, 990], "__": [72, 257, 379, 392, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 988, 1006, 1007], "spectrum": [72, 502, 522, 673, 912, 981, 988, 1006], "ax0": [72, 74, 196, 228, 340, 988], "n_components_": [72, 103, 379, 421, 425, 512, 516, 517, 518, 519, 520, 521, 867, 868, 988, 1007, 1009], "explained_variance_ratio_": [72, 104, 340, 396, 512, 519, 522, 527, 988, 1001, 1004], "named_step": [72, 85, 303, 392, 571, 572, 575, 836, 837, 875, 876, 953, 988, 1005, 1007], "components_col": 72, "param_pca__n_compon": 72, "best_clf": 72, "nlargest": 72, "yerr": [72, 78, 80, 116, 119, 145, 278, 317], "val": [72, 208, 256, 914], "plot_digits_pip": [72, 75], "candid": [73, 246, 254, 257, 264, 308, 356, 367, 370, 391, 398, 427, 429, 774, 777, 778, 786, 788, 953, 960, 973, 1004], "features__pca__n_compon": 73, "features__univ_select__k": 73, "svm__c": 73, "933": [73, 395], "867": [73, 317, 320], "967": [73, 957, 961], "transformer_list": [73, 392, 835, 838, 947, 1009, 1010], "univ_select": 73, "amuel": [73, 114, 187, 230, 316, 334], "ai": [73, 114, 187, 230, 316, 334, 395], "bonn": [73, 114, 187, 230, 316, 334], "mayb": [73, 294, 379, 399, 972, 978], "combined_featur": 73, "x_featur": [73, 618, 619, 620, 949], "405": [73, 75], "plot_feature_union": [73, 75], "overview": [74, 369, 378, 379, 711, 720, 959, 971, 993, 994], "transformedtargetregressor": [74, 166, 196, 377, 392, 571, 572, 575, 1006, 1008, 1011], "hous": [74, 129, 161, 162, 298, 308, 360, 468, 994], "translat": [74, 368, 401, 505, 592, 845, 846, 861, 954, 957, 975, 981], "lowest": [74, 85, 167, 246, 361, 391, 395, 613, 615, 777, 778, 781, 882, 883, 954, 957, 973, 1013], "logarithm": [74, 129, 166, 229, 257, 326, 379, 400, 439, 568, 636, 637, 654, 682, 703, 718, 728, 732, 733, 734, 780, 816, 817, 910, 973, 987, 1005], "log1p": [74, 228, 840, 957, 967], "expm1": 74, "y_tran": 74, "At": [74, 201, 268, 314, 317, 354, 355, 380, 382, 387, 394, 398, 417, 420, 444, 566, 567, 569, 580, 804, 806, 843, 923, 946, 953, 956, 958, 962, 971, 981], "meda": [74, 166, 957], "median_absolute_error": [74, 166, 957, 1002, 1008, 1010], "r2_score": [74, 180, 191, 192, 398, 412, 444, 460, 461, 462, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 701, 705, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 946, 957, 999, 1001, 1007, 1011, 1012], "compute_scor": [74, 103, 175, 176, 622, 623, 1007], "r2": [74, 111, 129, 167, 191, 231, 368, 392, 398, 532, 548, 651, 799, 834, 957, 965, 1007], "predictionerrordisplai": [74, 129, 166, 252, 311, 957, 1013], "ridge_cv": 74, "y_pred_ridg": 74, "ridge_cv_with_trans_target": 74, "inverse_func": [74, 166, 392, 444, 840, 967, 1006], "y_pred_ridge_with_trans_target": 74, "actual_vs_predict": [74, 129, 166, 252, 311, 679], "scatter_kwarg": [74, 129, 166, 679], "sell": 74, "quantile_transform": [74, 853, 863, 967, 1005, 1006, 1007], "house_pric": [74, 129], "select_dtyp": [74, 119, 311, 445], "nan": [74, 119, 161, 162, 166, 214, 236, 251, 259, 306, 311, 354, 359, 368, 375, 379, 398, 447, 474, 533, 534, 535, 539, 540, 542, 571, 572, 575, 581, 584, 587, 605, 606, 607, 608, 613, 690, 692, 699, 700, 701, 705, 746, 755, 762, 774, 777, 778, 780, 788, 798, 799, 800, 803, 845, 846, 850, 852, 853, 856, 860, 863, 864, 866, 893, 894, 895, 896, 932, 946, 957, 967, 994, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "inf": [74, 152, 286, 375, 391, 401, 429, 436, 450, 451, 457, 531, 532, 537, 538, 571, 572, 575, 584, 585, 586, 597, 605, 613, 615, 626, 627, 628, 630, 647, 649, 650, 654, 658, 665, 705, 707, 723, 755, 762, 832, 841, 848, 893, 895, 896, 910, 957, 967, 1005, 1007, 1008, 1009, 1010, 1012, 1013], "lotfrontag": 74, "garageyrblt": 74, "masvnrarea": [74, 129], "to_fram": 74, "n_quantil": [74, 167, 302, 853, 864, 1007], "output_distribut": [74, 298, 302, 392, 852, 853, 863, 864, 967], "squeez": [74, 155, 156, 276, 298, 991], "quantiletransform": [74, 167, 302, 392, 444, 852, 864, 947, 967, 1005, 1006, 1007, 1008, 1009], "weaker": 74, "residu": [74, 192, 198, 252, 412, 444, 460, 461, 462, 530, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 649, 650, 651, 656, 657, 663, 664, 679, 721, 762, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 953, 957, 990, 1010, 1011, 1013], "smile": [74, 362, 1012], "residual_vs_predict": [74, 252, 311, 679], "plot_transformed_target": [74, 75, 444], "auto_examples_compos": 75, "mahalanobi": [76, 82, 164, 391, 393, 429, 436, 448, 449, 450, 451, 452, 453, 454, 455, 677, 755, 756, 757, 823, 951, 963, 1006, 1009, 1010], "ledoitwolf": [76, 78, 82, 103, 164, 393, 448, 449, 453, 454, 455, 456, 774, 1002], "empiricalcovari": [77, 79, 80, 393, 448, 452, 453, 454, 455, 963], "unbias": [77, 389, 393, 396, 417, 528, 634, 650, 652, 665, 953, 987], "shrunk": [77, 103, 298, 404, 452, 454, 455, 458, 459, 527, 951, 971, 993, 994], "base_x_train": 77, "base_x_test": 77, "coloring_matrix": [77, 78], "shrunkcovari": [77, 103, 393, 448, 449, 452, 453, 454], "empirical_covari": [77, 393], "log_likelihood": [77, 588, 589, 772, 773], "span": [77, 122, 230, 253, 362, 370, 399, 527, 614, 774, 777, 957, 991], "negative_loglik": 77, "real_cov": [77, 78, 449, 452, 453, 454, 455], "emp_cov": [77, 79, 81, 457, 459], "loglik_r": 77, "inv": [77, 81, 293], "formula": [77, 78, 388, 391, 393, 404, 452, 454, 494, 495, 496, 568, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 654, 656, 682, 706, 732, 741, 946, 951, 953, 957, 962, 963, 967, 971, 1003, 1005, 1007], "asymptot": [77, 78, 185, 354, 393, 453, 514, 953, 956, 1008], "criterion": [77, 78, 169, 184, 204, 246, 268, 307, 368, 375, 379, 391, 396, 421, 425, 428, 431, 438, 441, 510, 515, 517, 524, 531, 532, 535, 536, 537, 538, 542, 543, 544, 584, 605, 623, 626, 634, 644, 645, 646, 647, 649, 654, 655, 656, 658, 669, 673, 688, 773, 872, 877, 878, 879, 880, 881, 883, 884, 885, 886, 953, 956, 957, 965, 970, 973, 979, 991, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "chen": [77, 78, 393, 398, 454, 703, 733, 949, 957, 1001, 1004, 1005, 1006, 1008, 1011, 1012, 1013], "Its": [77, 109, 254, 258, 363, 368, 379, 396, 401, 516, 952, 953, 962, 965, 971, 977, 981, 1001], "tuned_paramet": [77, 135, 254], "loglik_lw": 77, "loglik_oa": 77, "unseen": [77, 120, 143, 185, 204, 269, 282, 356, 359, 368, 378, 379, 391, 395, 822, 853, 864, 948, 957, 963, 965, 967, 973, 983, 1001, 1006, 1010], "loglog": [77, 229], "lik_max": 77, "amax": [77, 120], "lik_min": 77, "amin": 77, "vline": [77, 97, 183, 184, 185, 197, 256, 269, 299], "shrinkage_": [77, 78, 452, 454], "magenta": [77, 124], "purpl": [77, 91, 221], "cyan": [77, 113, 166, 279, 287], "realli": [77, 168, 185, 370, 371, 372, 957, 963, 981, 1012], "interestingli": [77, 146, 967], "outperform": [77, 85, 129, 303, 377, 395, 398, 431, 441, 959], "413": [77, 82, 340], "plot_covariance_estim": [77, 82], "whose": [78, 79, 80, 146, 154, 196, 324, 362, 374, 375, 379, 389, 391, 393, 398, 400, 401, 404, 417, 418, 419, 427, 440, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 493, 512, 516, 518, 519, 522, 525, 527, 550, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 618, 649, 673, 696, 774, 781, 788, 801, 822, 841, 867, 868, 911, 936, 937, 951, 958, 962, 963, 964, 972, 1001, 1006, 1007, 1009, 1012], "inspir": [78, 126, 167, 214, 367, 377, 398, 539, 540, 900, 947, 977, 1007], "mmse": [78, 393, 454], "tran": [78, 393, 454], "octob": [78, 362, 393, 454, 998, 1005, 1011, 1012], "toeplitz": 78, "choleski": [78, 196, 214, 375, 457, 505, 589, 626, 628, 629, 632, 633, 634, 636, 637, 647, 650, 652, 658, 660, 661, 665, 772, 773, 953, 1001, 1005, 1007, 1010, 1013], "simul": [78, 97, 190, 232, 256, 981], "n_samples_rang": [78, 229], "lw_mse": 78, "oa_ms": 78, "lw_shrinkag": 78, "oa_shrinkag": 78, "error_norm": [78, 80, 448, 449, 450, 451, 452, 453, 454, 455], "darkorang": [78, 99, 104, 105, 197, 207, 220, 242, 243, 244, 247, 263, 265, 271, 279, 281, 287, 288, 316, 346], "plot_lw_vs_oa": [78, 82], "x_i": [79, 114, 141, 166, 197, 309, 334, 391, 396, 397, 398, 401, 592, 593, 597, 600, 601, 603, 811, 812, 815, 948, 949, 953, 959, 960, 961, 967, 971, 972, 973], "d_": [79, 391, 396, 626, 647, 658, 755, 954, 959], "mle": [79, 103, 519, 1006, 1009], "resist": [79, 80, 367], "erron": [79, 80, 396, 953, 999, 1006, 1010], "breakdown": [79, 80, 213, 657, 953], "n_": [79, 80, 256, 309, 391, 396, 398, 624, 630, 663, 674, 949, 953, 957, 959, 960, 964, 969, 972, 973], "smallest": [79, 80, 196, 344, 362, 391, 393, 400, 419, 505, 519, 608, 632, 633, 634, 660, 661, 668, 672, 673, 774, 777, 778, 788, 793, 973, 1011], "pure": [79, 80, 85, 196, 379, 391, 452, 458, 474, 535, 536, 537, 538, 542, 543, 544, 560, 683, 693, 763, 770, 883, 884, 885, 886, 967], "rousseuw": [79, 80], "rousseeuw": [79, 80, 391, 393, 448, 453, 767, 768, 963], "ass": [79, 80, 393, 453], "1984": [79, 80, 393, 453, 883, 884, 973], "wilson": [79, 364, 998, 1001], "hilferti": 79, "1931": 79, "chi": [79, 110, 302, 359, 400, 497, 570, 573, 574, 576, 577, 578, 582, 583, 584, 587, 616, 617, 618, 619, 620, 735, 736, 994, 998, 1003, 1004], "proceed": [79, 362, 364, 372, 391, 402, 419, 424, 489, 674, 686, 703, 733, 823, 872, 957, 969, 970, 971], "academi": [79, 823], "688": [79, 163], "n_outlier": [79, 80, 125, 199, 225, 283], "gen_cov": 79, "ey": [79, 80, 243, 247, 326, 362, 512, 519, 528], "outliers_cov": 79, "mincovdet": [79, 80, 393, 448, 449, 452, 454, 455, 963, 998, 1005], "robust_cov": 79, "nmcd": 79, "nmle": 79, "26253567e": 79, "06695631e": 79, "22747343e": 79, "23773583": 79, "24640578": 79, "51963999": 79, "inlier": [79, 125, 199, 225, 234, 298, 379, 393, 448, 541, 649, 655, 822, 853, 864, 878, 879, 881, 953, 963, 1005, 1006, 1011], "inlier_plot": 79, "outlier_plot": 79, "get_xlim": [79, 191, 201, 298], "zz": 79, "mahal_emp_cov": 79, "emp_cov_contour": 79, "pubu_r": 79, "mahal_robust_cov": 79, "robust_contour": 79, "ylorbr_r": 79, "dist": [79, 218, 229, 276, 370, 448, 449, 450, 451, 452, 453, 454, 455, 677, 740, 746, 816, 817], "borderaxespad": 79, "cubic": [79, 401], "suggest": [79, 98, 113, 116, 166, 169, 256, 326, 354, 366, 367, 373, 379, 395, 396, 398, 448, 453, 543, 623, 801, 951, 953, 954, 962, 972, 992, 1002, 1009, 1012], "emp_mah": 79, "markeredgewidth": [79, 260], "rm": [79, 152, 370, 374, 393], "mahal": 79, "robust_mah": 79, "location_": [79, 80, 448, 449, 450, 451, 452, 453, 454, 455], "294": [79, 82, 97, 107], "plot_mahalanobis_dist": [79, 82], "aim": [80, 162, 284, 316, 356, 362, 365, 367, 379, 385, 391, 393, 399, 427, 677, 953, 957, 960, 967, 972, 977, 983, 991, 1012], "compens": [80, 167, 172, 196, 214, 257, 393, 396], "soon": [80, 379, 990], "5n_": 80, "johanna": 80, "hardin": 80, "rock": 80, "decemb": [80, 154, 362, 642, 663, 664, 998, 1006, 1008, 1010, 1013], "928": [80, 185, 215, 417], "946": 80, "zoubir": 80, "koivunen": 80, "chakhchoukh": 80, "muma": 80, "signal": [80, 95, 96, 97, 105, 122, 149, 154, 155, 164, 174, 195, 197, 215, 247, 309, 390, 391, 399, 400, 401, 481, 499, 504, 509, 512, 515, 519, 603, 624, 630, 631, 641, 642, 662, 663, 664, 762, 953, 957, 974, 981, 986, 993, 994], "tutori": [80, 135, 136, 137, 138, 185, 198, 214, 256, 357, 367, 372, 374, 378, 385, 391, 431, 441, 669, 972, 990, 1001], "treatment": [80, 361, 396, 448, 453], "concept": [80, 120, 265, 357, 367, 377, 390, 391, 397, 399, 949, 957, 960, 973, 981], "magazin": [80, 400], "29": [80, 150, 154, 187, 196, 213, 215, 222, 311, 315, 342, 364, 365, 382, 383, 384, 398, 537, 538, 668, 672, 758, 772, 828, 953, 954, 971], "range_n_outli": 80, "err_loc_mcd": 80, "err_cov_mcd": 80, "err_loc_emp_ful": 80, "err_cov_emp_ful": 80, "err_loc_emp_pur": 80, "err_cov_emp_pur": 80, "outliers_index": 80, "outliers_offset": 80, "inliers_mask": 80, "pure_x": 80, "pure_loc": 80, "pure_emp_cov": 80, "font_prop": 80, "hat": [80, 105, 252, 256, 281, 309, 365, 389, 393, 397, 398, 948, 953, 954, 957, 959, 961], "_2": [80, 154, 396, 399, 509, 515, 523, 524, 624, 630, 953, 961, 971, 972], "x_size": 80, "249": [80, 82], "plot_robust_vs_empirical_covari": [80, 82], "graphicallasso": [81, 393, 448, 449, 451, 452, 453, 454, 455, 457, 1006], "largest": [81, 97, 198, 364, 391, 393, 396, 419, 423, 505, 519, 535, 536, 537, 538, 542, 543, 566, 687, 772, 773, 793, 814, 883, 884, 885, 886, 912, 954, 957, 967, 972, 973], "invert": [81, 100, 143, 218, 340, 341, 377, 393, 399, 608, 667, 671, 967, 1007], "fairli": [81, 121, 219, 271, 293, 374, 391, 537, 538, 677, 958, 990], "tweak": [81, 395, 956, 992, 1009], "readabl": [81, 257, 309, 371, 372, 374, 385, 512, 1007, 1010, 1011, 1012, 1013], "neighborhood": [81, 164, 217, 277, 290, 364, 379, 391, 396, 402, 424, 429, 436, 480, 482, 493, 519, 527, 606, 674, 802, 818, 819, 822, 824, 825, 826, 827, 828, 830, 836, 837, 856, 954, 963, 979, 994, 1007], "make_sparse_spd_matrix": [81, 507], "prng": 81, "prec": [81, 226, 505, 957], "smallest_coef": [81, 505], "largest_coef": [81, 505], "multivariate_norm": [81, 85, 241, 448, 449, 450, 451, 452, 453, 454, 455], "ledoit_wolf": [81, 393, 1011], "prec_": 81, "lw_cov_": 81, "lw_prec_": 81, "this_cov": 81, "this_prec": 81, "ma": [81, 326, 953, 1004, 1009], "masked_equ": 81, "set_facecolor": [81, 241], "set_axis_bgcolor": 81, "alpha_": [81, 135, 166, 176, 184, 185, 451, 589, 622, 623, 625, 629, 631, 633, 634, 639, 641, 651, 653, 953, 973, 987, 998, 1005], "528": [81, 82, 341], "plot_sparse_cov": [81, 82], "537": 82, "auto_examples_covari": 82, "cross_decomposit": [83, 84, 85, 164, 232, 357, 1002, 1003, 1005, 1006, 1007], "plscanon": [84, 460, 462, 463, 979, 994, 1002, 1006, 1008, 1010, 1012], "plsregress": [84, 85, 979, 994, 1005, 1008, 1010, 1012], "share": [84, 127, 166, 246, 339, 348, 350, 354, 355, 368, 374, 391, 396, 399, 527, 646, 682, 686, 772, 773, 777, 778, 951, 964, 998, 1000, 1006, 1008, 1010, 1013], "appar": [84, 959, 981], "scatterplot": [84, 175, 256, 279], "maxim": [84, 85, 95, 106, 122, 175, 246, 247, 257, 261, 265, 266, 286, 303, 308, 326, 344, 348, 364, 379, 388, 391, 394, 396, 400, 401, 527, 588, 589, 622, 623, 626, 647, 657, 658, 698, 774, 777, 778, 788, 845, 851, 860, 951, 953, 957, 960, 962, 972, 987, 990, 1001, 1003, 1008, 1011, 1013], "weak": [84, 109, 120, 123, 214, 262, 395, 535, 536, 537, 542, 543, 544, 608, 960, 981], "var": [84, 85, 101, 113, 146, 176, 256, 364, 400, 619, 623, 877, 878, 879, 880, 881, 957, 1006], "corr": [84, 169, 256], "corrcoef": [84, 106], "plsca": [84, 461], "x_train_r": 84, "y_train_r": 84, "x_test_r": 84, "y_test_r": 84, "221": [84, 127, 1001], "222": [84, 127, 972], "223": [84, 127, 169, 170, 364], "yj": [84, 302], "noiz": 84, "xb": [84, 855], "_pl": 84, "503": 84, "futurewarn": [84, 257, 367, 374, 1005, 1006, 1007, 1009, 1011], "n_target": [84, 379, 394, 460, 461, 462, 463, 502, 534, 589, 621, 624, 625, 628, 629, 630, 631, 632, 634, 635, 638, 639, 640, 641, 642, 643, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 958, 1010, 1012], "futur": [84, 154, 197, 237, 257, 309, 367, 368, 370, 377, 379, 380, 385, 395, 399, 474, 512, 608, 613, 925, 927, 957, 958, 972, 973, 981, 995, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "50210309": 84, "55301008": 84, "72528805": 84, "03429511": 84, "83576671": 84, "74902647": 84, "03916339": 84, "84652988": 84, "78629756": 84, "11231897": 84, "1905275": 84, "33508757": 84, "35433161": 84, "32686504": 84, "39877158": 84, "47827435": 84, "38004088": 84, "35574845": 84, "exce": [84, 274, 307, 401, 422, 493, 580, 627, 636, 1007, 1010, 1012], "plot_compare_cross_decomposit": [84, 86], "pcr": [85, 394], "pl": [85, 200, 364, 394, 460, 461, 462, 463, 1003], "greedili": [85, 146, 395, 400, 439], "despit": [85, 194, 196, 214, 231, 285, 379, 393, 605, 606, 608, 953, 960, 981, 1006, 1007], "suffer": [85, 117, 168, 298, 340, 354, 391, 398, 401, 522, 740, 952, 953, 957, 960, 991, 1007], "mention": [85, 214, 307, 350, 354, 367, 370, 371, 377, 379, 674, 867, 868, 946, 951, 953, 978, 981, 992, 1005, 1006, 1007], "dive": [85, 367, 372], "explained_variance_": [85, 512, 519, 522, 991, 1005], "onto": [85, 218, 219, 230, 298, 377, 396, 399, 403, 419, 427, 440, 511, 517, 521, 605, 606, 608, 666, 951, 955, 960], "recommend": [85, 117, 161, 213, 226, 252, 265, 302, 308, 354, 355, 357, 361, 365, 367, 368, 372, 374, 377, 382, 394, 395, 396, 398, 400, 418, 419, 426, 428, 430, 439, 474, 486, 513, 516, 522, 527, 539, 540, 547, 584, 589, 609, 610, 648, 654, 670, 675, 676, 678, 680, 780, 786, 788, 832, 841, 855, 856, 860, 861, 863, 864, 865, 866, 868, 877, 880, 912, 925, 946, 954, 957, 959, 961, 964, 967, 969, 971, 972, 973, 976, 981, 994, 1000, 1001, 1007, 1008, 1009, 1010, 1012], "linearregress": [85, 132, 175, 186, 191, 192, 193, 194, 199, 202, 213, 228, 233, 252, 270, 299, 350, 367, 377, 378, 392, 398, 444, 548, 610, 613, 624, 627, 630, 632, 649, 650, 665, 953, 957, 967, 990, 1002, 1003, 1007, 1010, 1011, 1012], "retriev": [85, 166, 200, 263, 340, 348, 370, 379, 392, 396, 399, 400, 447, 474, 568, 571, 572, 604, 631, 641, 662, 703, 707, 709, 710, 733, 758, 811, 815, 848, 873, 953, 955, 957, 959, 977, 978, 991, 1003, 1008, 1010, 1012], "026": 85, "remark": [85, 146, 356, 367, 967], "predit": 85, "pca_2": 85, "673": [85, 146, 147, 372], "plot_pcr_vs_pl": [85, 86], "auto_examples_cross_decomposit": 86, "multilabel": [87, 92, 164, 224, 239, 263, 274, 362, 368, 369, 379, 386, 460, 465, 475, 486, 487, 493, 501, 519, 535, 542, 545, 652, 653, 681, 685, 691, 703, 706, 707, 711, 712, 715, 716, 731, 733, 760, 761, 764, 765, 769, 771, 805, 809, 833, 840, 843, 847, 849, 859, 880, 883, 885, 901, 921, 922, 923, 968, 979, 980, 992, 994, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1012, 1013], "058": [88, 92, 254, 364], "plot_digits_last_imag": [88, 92], "iris": [89, 262, 263, 989], "150x4": 89, "unus": [89, 101, 102, 167, 193, 217, 219, 442, 556, 740, 748, 946, 954, 998, 1006, 1008, 1009, 1011], "plai": [89, 96, 123, 151, 179, 205, 250, 279, 287, 322, 323, 354, 377, 992], "set1": [89, 256, 285, 286], "getter": [89, 448, 449, 450, 451, 452, 453, 454, 455, 571, 572, 575], "110": [89, 175, 193, 203, 228, 251, 272, 417, 951, 952], "3rd": [89, 157, 811, 854, 959, 967], "157": [89, 92, 137, 139, 182, 372], "plot_iris_dataset": [89, 92], "easi": [90, 167, 204, 214, 244, 254, 256, 326, 339, 350, 362, 372, 374, 377, 378, 391, 398, 478, 482, 488, 843, 946, 952, 956, 964, 967, 977, 978, 981, 992, 1008, 1013], "make_gaussian_quantil": [90, 110, 112, 363, 449, 453, 454, 455, 498], "321": [90, 181, 215], "323": 90, "y2": [90, 112, 694, 741, 958], "324": [90, 210, 215, 362], "multi": [90, 108, 109, 133, 164, 167, 174, 212, 215, 216, 219, 223, 224, 225, 232, 235, 239, 249, 253, 265, 272, 274, 291, 296, 306, 311, 339, 343, 349, 355, 362, 364, 368, 369, 375, 379, 382, 391, 398, 399, 401, 408, 417, 431, 441, 448, 453, 473, 474, 482, 483, 488, 492, 493, 497, 498, 500, 519, 527, 528, 529, 531, 533, 535, 536, 537, 539, 542, 543, 545, 547, 588, 611, 621, 624, 625, 630, 631, 635, 636, 638, 639, 640, 641, 644, 646, 650, 651, 652, 653, 654, 659, 662, 668, 681, 691, 698, 706, 711, 717, 719, 760, 774, 788, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 824, 826, 832, 833, 834, 837, 843, 856, 859, 870, 871, 875, 877, 880, 883, 884, 885, 887, 889, 895, 898, 901, 946, 958, 960, 964, 967, 971, 977, 978, 979, 983, 989, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012], "325": 90, "326": 90, "320": [90, 92, 362, 946, 971, 998], "plot_random_dataset": [90, 92], "make_multilabel_classif": [91, 232, 363, 493, 514, 765, 807, 808, 957, 1000, 1001, 1003, 1009], "star": [91, 132, 367], "degener": [91, 403, 420, 433, 511, 698, 953, 957, 1007, 1011, 1012], "vocabulari": [91, 211, 339, 340, 377, 399, 566, 567, 568, 569, 959, 983, 992, 998, 1000, 1003, 1006, 1009, 1011], "757": [91, 241, 248, 254, 364], "w0": 91, "w1": [91, 398, 635], "make_ml_clf": 91, "ff3333": 91, "0198e1": 91, "bf5fff": 91, "fcd116": 91, "ff7216": 91, "4dbd33": 91, "87421f": 91, "plot_2d": [91, 217], "p_c": [91, 501], "p_w_c": [91, 501], "allow_unlabel": [91, 232, 501], "return_distribut": [91, 501], "sep": [91, 265], "p_w": 91, "130": [91, 92, 166, 170, 372], "plot_random_multilabel_dataset": [91, 92], "auto_examples_dataset": 92, "blind": [93, 107, 164, 339, 396, 511, 519], "fastica": [93, 107, 164, 396, 510, 513, 519, 991, 998, 1000, 1006, 1012, 1013], "increment": [93, 107, 164, 259, 370, 372, 422, 426, 442, 482, 511, 512, 513, 514, 517, 519, 522, 580, 624, 636, 644, 780, 800, 808, 809, 811, 812, 813, 814, 815, 845, 846, 856, 875, 876, 932, 953, 959, 1001, 1002], "fa": [93, 106, 107, 164, 372, 396, 452, 455, 510, 519, 774, 798], "precomput": [93, 107, 164, 174, 215, 220, 276, 278, 368, 375, 377, 379, 391, 399, 402, 412, 420, 421, 424, 425, 429, 431, 436, 444, 460, 461, 462, 502, 509, 513, 515, 518, 520, 526, 532, 534, 536, 538, 540, 543, 546, 548, 588, 589, 598, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 659, 660, 662, 663, 666, 668, 669, 670, 674, 751, 755, 758, 767, 768, 809, 810, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 834, 876, 877, 878, 879, 880, 881, 884, 886, 933, 934, 935, 949, 955, 960, 972, 978, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013], "_nmf": [94, 372], "_beta_diverg": 94, "mbgyr": 94, "plot_beta_diverg": [94, 107], "chapter": [95, 350, 368, 391, 396, 398, 401, 508, 510, 512, 592, 597, 600, 621, 947, 950, 953, 972, 973], "decompos": [95, 99, 113, 300, 390, 512, 516, 687, 797, 912, 952, 953, 957, 974, 993, 994], "basicconfig": 95, "asctim": 95, "levelnam": 95, "faces_cent": 95, "image_shap": [95, 233], "constrained_layout": [95, 167, 217, 311], "set_constrained_layout_pad": 95, "w_pad": [95, 118, 345], "h_pad": [95, 118, 345], "set_edgecolor": 95, "vec": [95, 399, 516, 518, 525], "im": [95, 106, 267, 280, 980], "pad": [95, 118, 161, 167, 217, 234, 339, 345, 399, 566, 567, 569], "initialis": [95, 516, 518, 525, 998, 1006, 1007], "mathbb": [95, 113, 152, 394, 957, 964, 972], "4096": [95, 362, 396, 473], "human": [95, 167, 303, 339, 385, 391, 396, 833, 834, 957, 964, 1007], "friendli": [95, 355, 367, 374, 396, 868, 969, 970, 977, 978], "visualis": [95, 98, 106, 232, 522, 960, 978], "64x64": [95, 362, 396], "singular": [95, 375, 388, 391, 394, 430, 432, 460, 461, 462, 463, 499, 502, 512, 516, 518, 519, 522, 525, 527, 528, 635, 650, 651, 652, 665, 912, 953, 954, 956, 993, 994, 1004, 1005], "scalar": [95, 309, 372, 379, 392, 401, 403, 443, 446, 502, 511, 593, 594, 595, 600, 601, 605, 606, 715, 719, 891, 899, 949, 961, 963, 967, 971, 977, 1008, 1009, 1012], "noise_variance_": [95, 184, 510, 512, 519, 634, 1005, 1012], "pixelwis": 95, "pca_estim": 95, "nmf_estim": 95, "multivari": [95, 166, 359, 393, 396, 399, 452, 494, 495, 496, 605, 606, 607, 608, 627, 649, 656, 657, 811, 812, 813, 814, 815, 951, 953, 956, 959, 977, 983, 991, 994], "subcompon": [95, 396], "ica_estim": 95, "15e": 95, "sparsepca": [95, 509, 511, 512, 513, 515, 517, 518, 519, 520, 523, 524, 998, 1005, 1006, 1008, 1009, 1011, 1012, 1013], "batch_pca_estim": 95, "minibatchdictionarylearn": [95, 98, 356, 396, 509, 516, 520, 523, 524, 999, 1001, 1008, 1009, 1011, 1012, 1013], "batch_dict_estim": 95, "That": [95, 146, 185, 225, 256, 260, 340, 341, 355, 361, 374, 379, 395, 400, 401, 423, 426, 437, 535, 542, 571, 792, 883, 884, 946, 954, 955, 957, 963, 973, 1007, 1008], "enhanc": [95, 366, 367, 370, 377, 379, 391, 957, 975, 996, 997, 998, 999, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "consum": [95, 350, 361, 368, 379, 391, 395, 398, 428, 777, 778, 836, 837, 953, 981, 1003], "kmeans_estim": 95, "heteroscedast": [95, 103, 122, 198, 396, 852, 863], "fa_estim": 95, "factoranalysi": [95, 103, 106, 396, 522, 999, 1001, 1010, 1012], "wrap": [95, 115, 122, 276, 361, 368, 379, 413, 486, 563, 564, 635, 654, 719, 802, 859, 947, 957, 960, 972, 977, 998, 1003, 1006, 1008, 1009, 1011], "suit": [95, 127, 166, 196, 197, 225, 246, 309, 310, 339, 355, 367, 368, 371, 372, 374, 377, 382, 394, 396, 398, 401, 429, 431, 481, 655, 813, 906, 946, 949, 954, 957, 959, 960, 971, 977, 978, 981, 985, 1005, 1012], "colormap": [95, 112, 157, 188, 205, 326, 331, 345, 675, 1011], "uv": [95, 396], "x_1": [95, 141, 152, 193, 197, 394, 396, 398, 401, 591, 603, 635, 953, 959, 961, 967, 971], "x_n": [95, 396, 959, 961, 971], "dict_pos_dict_estim": 95, "positive_dict": [95, 509, 515, 523, 524], "dict_pos_code_estim": 95, "fit_algorithm": [95, 509, 515], "cd": [95, 364, 365, 367, 370, 396, 450, 451, 457, 509, 515, 517, 518, 521, 523, 524, 525, 953, 992, 1003], "positive_cod": [95, 509, 515, 520, 523, 524], "dict_pos_estim": 95, "990": [95, 107, 647, 957], "plot_faces_decomposit": [95, 107], "imagin": [96, 149, 395, 396, 399, 953], "simultan": [96, 260, 264, 347, 359, 388, 946, 957, 958, 973, 981, 1005], "microphon": 96, "s1": [96, 146, 157, 184, 185, 364, 991], "sinusoid": [96, 111, 122, 231, 401, 950, 991], "s2": [96, 146, 157, 184, 185, 364, 528, 991], "s3": [96, 146, 184, 185, 364, 991], "sawtooth": [96, 991], "saw": [96, 197, 991], "tooth": [96, 991], "s_": [96, 260, 954, 965, 991], "a_": [96, 388, 391, 516, 518, 525, 953, 991], "mixing_": [96, 97, 511, 991], "prove": [96, 981], "revert": [96, 608, 610, 611, 1005, 1010], "unmix": [96, 403, 511], "allclos": [96, 126, 969, 991], "mean_": [96, 260, 510, 511, 512, 517, 519, 521, 856, 967, 991, 1006], "orthogon": [96, 97, 98, 164, 174, 215, 390, 396, 504, 509, 515, 517, 520, 521, 526, 642, 643, 663, 664, 969, 979, 994, 998], "steelblu": [96, 97, 131], "sig": 96, "292": [96, 107, 382, 398, 712], "plot_ica_blind_source_separ": [96, 107], "ica": [97, 390, 403, 973, 993, 994], "geometr": [97, 391, 666, 682, 708, 734, 954, 1006], "identifi": [97, 104, 122, 123, 166, 196, 199, 244, 246, 254, 259, 265, 285, 308, 339, 340, 361, 362, 366, 367, 370, 371, 379, 391, 392, 395, 398, 399, 401, 429, 436, 465, 474, 486, 487, 533, 534, 541, 584, 621, 627, 677, 690, 751, 801, 822, 841, 870, 871, 946, 953, 957, 963, 970, 981, 990, 1005, 1007, 1012], "standard_t": 97, "s_pca_": 97, "s_ica_": 97, "plot_sampl": [97, 247], "axis_list": 97, "x_axi": [97, 204, 260], "y_axi": [97, 204], "quiver": 97, "hline": 97, "set_zord": 97, "plot_ica_vs_pca": [97, 107], "fragment": 98, "firstli": [98, 354, 377, 635, 992], "undistort": 98, "noiseless": [98, 955], "pursuit": [98, 164, 174, 215, 396, 453, 504, 509, 515, 520, 526, 642, 643, 663, 664, 979, 994, 998], "omp": [98, 105, 195, 396, 509, 515, 520, 526, 642, 643, 663, 664, 979, 994, 998, 1006], "promin": [98, 379], "reminisc": 98, "downsampl": [98, 234], "show_with_diff": 98, "puor": 98, "22692": 98, "dico": 98, "n_iter_": [98, 204, 244, 379, 420, 426, 427, 428, 450, 451, 460, 461, 462, 509, 510, 511, 514, 515, 516, 517, 518, 521, 539, 540, 605, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 654, 655, 656, 657, 658, 668, 670, 772, 773, 825, 833, 834, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 1002, 1005, 1006, 1008, 1011, 1012], "n_steps_": [98, 428, 515, 516, 1011], "62": [98, 110, 172, 214, 250, 295, 311, 315, 318, 350, 362, 391, 471, 472, 816, 817, 1001], "reconstruct_from_patches_2d": [98, 399, 561], "intercept": [98, 188, 205, 213, 335, 379, 460, 461, 462, 527, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 665, 851, 855, 857, 875, 876, 882, 953, 955, 957, 962, 971, 972, 1001, 1003, 1007, 1008], "transform_algorithm": [98, 105, 509, 515, 520], "n1": 98, "atom": [98, 105, 396, 509, 515, 517, 520, 521, 523, 524, 631, 641, 662, 953, 998, 1011], "transform_n_nonzero_coef": [98, 105, 509, 515, 520], "n2": 98, "n4": 98, "transform_alpha": [98, 105, 509, 515, 520, 1011], "set_param": [98, 106, 114, 119, 122, 167, 168, 176, 184, 185, 189, 200, 204, 230, 269, 306, 329, 340, 369, 379, 391, 392, 398, 401, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 947, 963, 983, 990, 998, 1004, 1005, 1006, 1011, 1012], "07": [98, 105, 133, 166, 192, 214, 215, 229, 264, 265, 272, 296, 339, 350, 362, 391, 509, 539, 540, 670, 957, 971], "030": [98, 107, 149, 310, 312, 340], "plot_image_denois": [98, 107], "ipca": [99, 511, 512], "flip": [99, 560, 719, 912, 959, 1002, 1011], "incrementalpca": [99, 356, 396, 511, 513, 517, 519, 522, 1002, 1005, 1006, 1008, 1009, 1012], "x_ipca": 99, "x_pca": 99, "turquois": [99, 104, 105, 124, 202, 213, 220, 243, 244, 263], "x_transform": [99, 127, 463, 509, 510, 511, 512, 513, 515, 517, 521, 544, 616, 617, 666, 667, 668, 669], "nmean": 99, "shadow": [99, 104, 105, 220, 316, 333, 341, 399], "scatterpoint": [99, 104, 220, 243, 316], "251": [99, 107, 219, 364], "plot_incremental_pca": [99, 107], "kernal": 100, "nest": [100, 110, 164, 185, 249, 272, 355, 372, 379, 382, 391, 395, 401, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 441, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 482, 497, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 779, 788, 798, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 925, 946, 957, 960, 998, 999, 1002, 1004, 1005, 1006, 1012], "train_ax": 100, "test_ax": 100, "straight": [100, 186, 192, 194, 253, 354], "inner": [100, 122, 257, 261, 316, 354, 399, 423, 492, 524, 560, 567, 626, 647, 658, 752, 754, 949, 957, 967, 972, 999, 1002, 1012], "x_test_kernel_pca": 100, "orig_data_ax": 100, "pca_proj_ax": 100, "kernel_pca_proj_ax": 100, "unfold": [100, 369, 954], "untangl": 100, "mind": [100, 166, 167, 214, 302, 339, 340, 350, 367, 385, 393, 395, 398, 624, 625, 682, 953, 972, 977, 983, 990], "investig": [100, 106, 162, 334, 367, 953], "pca_back_proj_ax": 100, "kernel_pca_back_proj_ax": 100, "reli": [100, 119, 146, 169, 184, 185, 307, 311, 339, 354, 355, 368, 371, 374, 375, 377, 379, 387, 388, 391, 396, 398, 399, 527, 563, 564, 571, 575, 585, 586, 841, 946, 949, 951, 953, 957, 960, 972, 981, 1006, 1007, 1008, 1012], "analyt": [100, 396, 401, 510, 598, 686, 947, 951, 957, 976, 981], "kernelridg": [100, 149, 231, 650, 950, 1002], "relianc": 100, "plot_kernel_pca": [100, 107], "aid": [101, 253, 391, 767, 768, 954, 981, 998, 1010], "kevin": [101, 621, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1012, 1013], "hugh": [101, 851, 1000, 1011], "pdf": [101, 146, 256, 281, 298, 364, 367, 391, 400, 422, 428, 509, 512, 515, 519, 619, 622, 627, 636, 642, 644, 645, 649, 654, 657, 660, 661, 663, 664, 670, 813, 814, 825, 832, 868, 870, 953, 970, 973, 980, 998], "30000": [101, 362], "pdf_z": 101, "plot_fig": [101, 193], "fig_num": [101, 193], "pca_scor": [101, 103], "vt": [101, 528], "full_matric": 101, "x_pca_axi": 101, "y_pca_axi": 101, "z_pca_axi": 101, "x_pca_plan": 101, "y_pca_plan": 101, "z_pca_plan": 101, "plot_surfac": [101, 167, 193], "173": [101, 107, 318, 372, 562], "plot_pca_3d": [101, 107], "cla": 102, "087": [102, 107], "plot_pca_iri": [102, 107], "homoscedast": [103, 228, 302, 957, 1006], "succe": 103, "subspac": [103, 394, 398, 431, 493, 533, 534, 669, 673, 912, 951, 960, 963, 969, 981, 991], "overestim": [103, 350, 395], "circumst": [103, 214, 960], "nip": [103, 364, 493, 519, 544, 619, 957], "598": [103, 150, 213, 215, 298, 304, 519], "604": [103, 519], "minka": [103, 519, 953], "deni": [103, 1000, 1001, 1005, 1006, 1007, 1013], "engemann": [103, 1000, 1001, 1005], "x_homo": 103, "x_hetero": 103, "cross_val_scor": [103, 136, 161, 162, 164, 249, 252, 261, 270, 272, 329, 350, 367, 368, 377, 395, 398, 498, 553, 681, 719, 774, 797, 799, 883, 884, 946, 957, 987, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1011], "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 135, 186, 255, 259], "violet": 103, "390": [103, 107, 340], "plot_pca_vs_fa_model_select": [103, 107], "flower": [104, 265, 484, 485, 957, 977], "92461872": 104, "05306648": 104, "x_r": [104, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581], "x_r2": 104, "212": [104, 107, 121, 142, 147, 188, 215, 243, 248, 261, 317, 364, 448, 478, 963, 990], "plot_pca_vs_lda": [104, 107], "ricker": 105, "sparsecod": [105, 396, 509, 515, 518, 526, 1005, 1006, 1008, 1010, 1012], "mexican": 105, "piecewis": [105, 309, 388, 948, 953, 967, 973], "matter": [105, 247, 350, 391, 398, 545, 646, 654, 656, 953, 1002], "motiv": [105, 367, 368, 379, 398, 949, 957, 967, 981, 1011], "heavier": [105, 393, 953], "subsampl": [105, 121, 124, 167, 196, 213, 214, 252, 308, 537, 538, 539, 540, 541, 610, 657, 679, 777, 778, 802, 841, 853, 864, 891, 901, 949, 953, 978, 980, 998, 1008, 1012], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 509, 515, 520, 526, 1008], "n_nonzero": 105, "coder": [105, 520, 694], "flatnonzero": [105, 184, 255, 264, 265, 758], "soft": [105, 130, 131, 367, 379, 547, 548, 871, 879, 971, 981, 1003], "debias": 105, "lstsq": [105, 367, 635, 648], "rcond": 105, "316": [105, 107, 154, 158, 589, 592, 603, 852], "plot_sparse_cod": [105, 107], "uncov": [106, 673], "inher": [106, 191, 350, 391, 396, 947, 949, 951, 952, 954, 958], "varimax": [106, 396, 510, 1010], "jona": [106, 1010], "sassenhagen": [106, 1010], "set_yticklabel": [106, 152, 161, 162, 169, 267, 341], "n_comp": [106, 172], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "350": [106, 107, 166], "plot_varimax_fa": [106, 107], "235": 107, "auto_examples_decomposit": 107, "predictor": [108, 133, 164, 196, 214, 368, 378, 379, 392, 394, 395, 398, 401, 445, 446, 460, 461, 462, 474, 494, 495, 496, 533, 534, 540, 543, 546, 580, 588, 608, 610, 611, 626, 631, 635, 647, 651, 658, 797, 799, 808, 809, 837, 849, 850, 856, 931, 953, 958, 999, 1005, 1008], "stack": [108, 133, 164, 281, 348, 366, 374, 377, 379, 397, 443, 445, 446, 474, 493, 540, 543, 545, 546, 590, 605, 606, 608, 631, 651, 797, 799, 837, 841, 849, 850, 856, 931, 947, 977, 978, 979, 980, 994, 1001, 1005, 1006, 1007, 1008, 1009], "versu": [108, 129, 133, 164, 166, 174, 205, 211, 215, 231, 244, 249, 272, 284, 313, 320, 391, 395, 398, 401, 482, 498, 512, 531, 534, 588, 617, 636, 637, 644, 646, 652, 653, 654, 655, 760, 771, 774, 779, 798, 802, 808, 837, 871, 872, 879, 880, 883, 884, 946, 953, 957, 958, 963, 970, 971, 972, 990, 1006], "isolationforest": [108, 133, 164, 225, 234, 609, 802, 879, 963, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013], "oob": [108, 121, 133, 164, 398, 493, 542, 978, 1000, 1011], "votingclassifi": [108, 133, 164, 482, 542, 548, 636, 814, 818, 880, 883, 946, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "vote": [108, 130, 131, 133, 164, 274, 379, 380, 479, 533, 534, 535, 538, 542, 543, 547, 548, 635, 804, 818, 819, 824, 826, 958, 960, 979, 990, 994, 1001, 1003, 1008], "hasti": [109, 110, 113, 114, 120, 124, 146, 184, 255, 364, 395, 398, 497, 498, 531, 537, 538, 606, 634, 699, 700, 701, 806, 823, 868, 883, 884, 947, 951, 953, 958, 964, 969, 971, 973], "2009": [109, 110, 113, 114, 124, 391, 395, 396, 398, 399, 497, 498, 506, 509, 515, 516, 518, 519, 522, 525, 531, 537, 538, 613, 649, 657, 674, 807, 883, 884, 911, 912, 953, 957, 958, 964, 973], "tibshirani": [109, 113, 114, 124, 146, 184, 255, 364, 395, 398, 498, 537, 538, 606, 634, 699, 700, 701, 806, 823, 883, 884, 947, 951, 953, 958, 964, 973], "friedman": [109, 113, 114, 124, 255, 393, 395, 398, 457, 494, 495, 496, 498, 536, 537, 538, 543, 571, 572, 806, 883, 884, 886, 951, 953, 958, 964, 973], "ed": [109, 114, 124, 398, 498, 537, 538, 969, 998, 1005], "springer": [109, 113, 114, 124, 255, 395, 396, 398, 498, 513, 537, 538, 668, 672, 674, 683, 698, 703, 717, 718, 733, 772, 883, 884, 954, 957, 958, 964, 973], "zhu": [109, 110, 398, 497, 531, 636, 870], "zou": [109, 110, 184, 398, 497, 531, 634, 953, 971], "rosset": [109, 110, 398, 497, 531], "make_hastie_10_2": [109, 120, 124, 260, 363, 398, 537, 964], "12_000": 109, "Be": [109, 143, 158, 339, 367, 393, 545, 546, 626, 632, 633, 634, 636, 637, 647, 658, 682, 792, 793, 851, 967, 995, 999], "stump": [109, 112, 398, 537, 1009], "2_000": 109, "dt_stump": 109, "min_samples_leaf": [109, 121, 122, 168, 306, 309, 344, 398, 535, 536, 537, 538, 539, 540, 542, 543, 544, 883, 884, 885, 886, 973, 1004], "dt_stump_err": 109, "dt_err": 109, "ada_discret": 109, "adaboostclassifieradaboostclassifi": 109, "decisiontreeclassifierdecisiontreeclassifi": [109, 348], "ada_r": 109, "zero_one_loss": [109, 367, 681, 711, 957, 999, 1000, 1001], "ada_discrete_err": 109, "staged_predict": [109, 110, 123, 398, 531, 532, 537, 538, 539, 540, 998, 1010], "ada_discrete_err_train": 109, "ada_real_err": 109, "ada_real_err_train": 109, "leg": 109, "fancybox": [109, 333], "get_fram": 109, "534": [109, 133, 166], "plot_adaboost_hastie_10_2": [109, 133], "sphere": [110, 164, 216, 217, 223, 340, 397, 497, 567, 666, 667, 668, 669, 670, 741, 898, 951, 955, 960], "roughli": [110, 122, 185, 247, 266, 303, 354, 379, 396, 399, 401, 497, 954, 998], "samm": [110, 112, 398, 531], "13000": 110, "bdt_real": 110, "bdt_discret": 110, "real_test_error": 110, "discrete_test_error": 110, "real_test_predict": 110, "discrete_test_predict": 110, "n_trees_discret": 110, "n_trees_real": 110, "termin": [110, 355, 371, 372, 374, 382, 391, 427, 440, 531, 532, 536, 537, 538, 541, 543, 644, 645, 646, 654, 656, 833, 834, 884, 886, 963, 973], "alwai": [110, 119, 122, 175, 196, 214, 222, 229, 259, 262, 266, 323, 340, 350, 354, 355, 361, 367, 368, 370, 372, 378, 379, 382, 389, 391, 392, 395, 398, 399, 400, 401, 412, 423, 428, 443, 444, 446, 448, 460, 461, 462, 466, 474, 486, 487, 522, 524, 527, 529, 530, 532, 534, 536, 537, 538, 539, 540, 542, 543, 546, 548, 559, 566, 567, 569, 572, 589, 605, 606, 608, 610, 611, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 649, 650, 651, 654, 656, 657, 670, 673, 683, 687, 693, 699, 700, 701, 709, 711, 712, 716, 759, 762, 763, 772, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 809, 810, 819, 820, 827, 828, 834, 841, 849, 854, 856, 868, 876, 877, 878, 880, 881, 883, 884, 886, 913, 946, 947, 949, 951, 953, 956, 957, 960, 963, 965, 969, 970, 972, 973, 981, 983, 990, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "crop": [110, 374, 1013], "discrete_estimator_error": 110, "estimator_errors_": [110, 531, 532], "real_estimator_error": 110, "discrete_estimator_weight": 110, "estimator_weights_": [110, 531, 532], "459": [110, 133, 340, 391, 422], "plot_adaboost_multiclass": [110, 133], "1d": [111, 113, 164, 167, 197, 229, 277, 290, 333, 346, 367, 373, 375, 378, 379, 392, 397, 443, 446, 595, 611, 631, 635, 638, 641, 662, 681, 686, 690, 691, 697, 706, 707, 711, 715, 719, 760, 761, 764, 771, 818, 819, 820, 821, 822, 824, 826, 827, 828, 841, 891, 895, 896, 922, 944, 958, 983, 990, 998, 1003, 1004, 1005, 1007, 1011, 1012], "299": [111, 658], "drucker": [111, 398, 532], "1997": [111, 362, 396, 398, 401, 513, 532, 668, 672, 953, 954, 957], "dummi": [111, 196, 214, 259, 357, 368, 371, 386, 849, 857, 967, 973, 994, 999, 1001, 1002, 1003, 1005], "decisiontreeregressor": [111, 113, 235, 299, 306, 346, 347, 371, 532, 534, 536, 537, 538, 540, 543, 610, 611, 883, 886, 888, 907, 973, 999, 1000, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1012], "adaboostregressor": [111, 398, 531, 540, 1000, 1001, 1004, 1007, 1008, 1011, 1013], "regr_1": [111, 346, 347], "regr_2": [111, 346, 347], "y_1": [111, 346, 347, 394, 957, 961, 971], "y_2": [111, 346, 347, 961], "plot_adaboost_regress": [111, 133], "puriti": [112, 887, 889], "plot_adaboost_twoclass": [112, 133], "bdt": 112, "plot_color": [112, 345], "br": 112, "plot_step": [112, 118, 345], "class_nam": [112, 250, 887, 889, 973], "xx0": [112, 609], "twoclass_output": 112, "plot_rang": 112, "573": [112, 133, 276, 311, 312, 399], "irreduc": [113, 957], "light": [113, 362], "beam": [113, 998], "pointwis": [113, 156, 402, 424], "offset": [113, 172, 377, 393, 396, 448, 486, 487, 541, 610, 611, 619, 620, 622, 623, 655, 705, 752, 754, 822, 879, 957, 971, 990, 1006], "narrow": [113, 122, 298, 300, 371, 816, 817], "tradeoff": [113, 164, 230, 249, 263, 264, 272, 339, 354, 374, 397, 493, 542, 704, 766, 802, 837, 856, 875, 954, 990, 1007, 1010], "bootstrap": [113, 114, 121, 161, 259, 268, 308, 395, 398, 532, 533, 534, 535, 536, 541, 542, 543, 901, 928, 953, 998, 999, 1001, 1003, 1006, 1008, 1011], "stem": [113, 168, 180, 195, 247, 395, 399, 949, 959], "0255": 113, "0003": 113, "0152": 113, "0098": 113, "0196": 113, "0004": 113, "0092": 113, "baggingregressor": [113, 398, 533, 886, 1001, 1004, 1006, 1009, 1013], "n_repeat": [113, 116, 123, 145, 166, 168, 169, 256, 306, 395, 493, 612, 789, 790, 965], "knn": [113, 130, 137, 161, 276, 284, 285, 288, 308, 316, 339, 398, 580, 825, 870, 871, 960, 970, 990, 1004], "y_predict": [113, 368, 998], "y_error": [113, 202], "y_nois": 113, "y_bia": 113, "y_var": 113, "plot_bias_vari": [113, 133], "z_i": [114, 961], "y_i": [114, 309, 334, 389, 398, 948, 949, 953, 957, 961, 971, 972, 973], "whilst": [114, 219], "practition": 114, "suitabl": [114, 122, 182, 293, 341, 361, 362, 372, 375, 391, 396, 399, 431, 441, 447, 465, 483, 486, 605, 613, 811, 812, 815, 851, 873, 924, 926, 951, 953, 956, 967, 969, 971, 977, 980, 992, 1012, 1013], "p592": 114, "593": 114, "kian": [114, 1003, 1013], "ho": [114, 398, 533, 534, 957, 1003, 1006, 1007, 1012], "hui": [114, 184, 516, 518, 525, 634, 953], "ordereddict": 114, "123": [114, 131, 350, 398, 494, 495, 496, 533, 534, 809, 958, 965], "warm_start": [114, 153, 189, 309, 368, 372, 379, 398, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 588, 624, 626, 627, 630, 636, 638, 640, 644, 645, 646, 647, 654, 655, 656, 658, 772, 773, 825, 833, 834, 963, 979, 994, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012], "disabl": [114, 339, 365, 367, 399, 428, 439, 515, 516, 517, 524, 537, 538, 539, 540, 835, 895, 896, 967, 1004, 1007, 1011, 1013], "track": [114, 121, 315, 367, 369, 370, 382, 387, 512, 926, 958, 978, 1005, 1008], "trajectori": 114, "ensemble_clf": 114, "oob_scor": [114, 398, 533, 534, 535, 536, 542, 543, 1003, 1005], "log2": [114, 206, 236, 535, 536, 537, 538, 542, 543, 883, 884, 885, 886, 958], "error_r": 114, "min_estim": 114, "max_estim": 114, "oob_error": 114, "oob_score_": [114, 533, 534, 535, 536, 542, 543, 1000], "clf_err": 114, "plot_ensemble_oob": [114, 133], "betatim": [115, 128, 1013], "leak": [115, 261, 339, 350, 392, 395, 836, 860, 861, 863, 864, 865, 866, 967, 998, 1005, 1008], "80_000": 115, "x_full_train": 115, "y_full_train": 115, "x_train_ensembl": 115, "x_train_linear": 115, "y_train_ensembl": 115, "y_train_linear": 115, "gradientboostingclassifi": [115, 120, 121, 124, 300, 350, 377, 398, 531, 539, 610, 611, 958, 964, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "random_forest": 115, "gradient_boost": [115, 999, 1000, 1001, 1007], "histgradientboostingclassifi": [115, 306, 307, 308, 309, 311, 355, 398, 537, 557, 610, 611, 947, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "randomtreesembed": [115, 127, 218, 398, 885, 999, 1006, 1007, 1011, 1012, 1013], "random_tree_embed": 115, "rt_model": 115, "randomtreesembeddingrandomtreesembed": 115, "rf_appli": 115, "rf_leaves_yield": 115, "kw_arg": [115, 840, 967, 1004], "rf_model": 115, "0x7f50de9dc280": 115, "functiontransformerfunctiontransform": 115, "gbdt_appli": 115, "gbdt_leaves_yield": 115, "gbdt_model": 115, "0x7f50de9dcf70": 115, "roccurvedisplai": [115, 234, 237, 253, 265, 266, 306, 373, 765, 766, 963, 995, 1008], "rt": 115, "rf": [115, 128, 131, 132, 168, 306, 350, 398, 545, 547, 548], "gbdt": [115, 167, 306, 307, 371, 398], "model_displai": 115, "908": [115, 133, 957], "plot_feature_transform": [115, 133], "artifici": [116, 119, 126, 162, 217, 231, 295, 339, 362, 363, 364, 371, 388, 390, 391, 395, 396, 401, 513, 674, 806, 833, 834, 950, 954, 956, 958, 964, 969, 973, 978, 981, 998], "feature_importances_": [116, 117, 123, 146, 168, 169, 379, 398, 400, 531, 532, 535, 536, 537, 538, 542, 543, 544, 571, 572, 575, 883, 884, 885, 886, 1000, 1003, 1007], "estimators_": [116, 118, 232, 306, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 804, 805, 806, 807, 808, 809, 810, 999, 1005, 1012], "008": [116, 264, 364, 372], "forest_import": 116, "mdi": [116, 123, 164, 165, 169, 170, 398, 443, 474, 542, 608, 612, 802, 836, 850, 965], "overcom": [116, 354, 399], "permutation_import": [116, 117, 123, 168, 169, 306, 398, 531, 532, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 965, 1008, 1010, 1011], "importances_mean": [116, 123, 168, 169, 306, 612, 965], "655": [116, 167], "importances_std": [116, 612, 965], "omit": [116, 319, 371, 454, 512, 644, 646, 654, 781, 783, 804, 805, 808, 811, 812, 813, 814, 815, 833, 955, 962], "plot_forest_import": [116, 133], "hotter": 117, "job": [117, 244, 367, 369, 374, 398, 402, 417, 424, 427, 429, 431, 436, 437, 440, 443, 446, 447, 451, 509, 513, 514, 515, 517, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 580, 588, 612, 617, 635, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 835, 838, 870, 871, 873, 981, 985], "five": [117, 242, 315, 318, 362, 517, 523, 954, 960, 972, 981, 998], "drawback": [117, 213, 949, 952], "img_shap": 117, "imp_reshap": 117, "168": [117, 242, 248, 255, 272, 286, 290, 316, 320, 998], "met": [117, 368, 400, 512, 519, 605, 649, 953, 957, 1006], "478": [117, 133, 247, 248], "plot_forest_importances_fac": [117, 133], "third": [118, 123, 141, 146, 157, 214, 225, 247, 281, 300, 355, 362, 366, 377, 380, 399, 512, 566, 567, 568, 569, 776, 777, 778, 783, 818, 819, 820, 822, 824, 854, 865, 925, 946, 968, 975, 998, 1009], "fourth": [118, 983], "descend": [118, 605, 1008], "extratreesclassifi": [118, 127, 398, 400, 536, 542, 544, 885, 886, 958, 1001, 1002, 1006, 1007, 1008, 1011, 1012, 1013], "decisiontre": [118, 1003], "consol": [118, 365, 984], "worth": [118, 167, 196, 367, 374, 981], "extratre": [118, 127, 354, 1001], "sequenti": [118, 140, 147, 164, 190, 257, 308, 365, 396, 398, 399, 479, 512, 571, 575, 580, 581, 583, 584, 624, 625, 630, 631, 638, 639, 640, 641, 651, 836, 947, 965, 971, 977, 979, 994, 998, 1007, 1010], "9266666666666666": 118, "8666666666666667": 118, "9933333333333333": 118, "rdylbu": [118, 345], "plot_step_coars": 118, "plot_idx": 118, "model_titl": 118, "model_detail": 118, "blend": [118, 129, 379, 395, 977], "estimator_alpha": 118, "coarser": [118, 122], "regularli": [118, 377, 959], "xx_coarser": 118, "yy_coars": 118, "z_points_coars": 118, "cs_point": 118, "384": [118, 133, 674, 876], "plot_forest_iri": [118, 133], "equidist": [119, 670], "lowa": 119, "sale": [119, 256, 957, 981], "42165": 119, "categorical_columns_subset": 119, "bldgtype": 119, "garagefinish": 119, "lotconfig": 119, "masvnrtyp": [119, 129], "housestyl": [119, 129], "fireplacequ": 119, "extercond": 119, "exterqu": [119, 129], "poolqc": 119, "numerical_columns_subset": 119, "3ssnporch": 119, "fireplac": 119, "bsmthalfbath": 119, "halfbath": 119, "garagecar": [119, 129], "totrmsabvgrd": 119, "bsmtfinsf1": [119, 129], "bsmtfinsf2": 119, "grlivarea": 119, "screenporch": 119, "n_categorical_featur": [119, 539, 540, 610, 611], "n_numerical_featur": 119, "1460": [119, 129], "make_column_transform": [119, 129, 166, 227, 307, 392, 443, 445, 1006], "dropper": 119, "hist_drop": 119, "hist_one_hot": 119, "etc": [119, 196, 214, 251, 260, 261, 350, 354, 356, 367, 368, 370, 371, 377, 378, 379, 388, 392, 395, 399, 467, 481, 535, 536, 542, 543, 646, 654, 670, 696, 748, 774, 788, 807, 810, 840, 851, 883, 884, 885, 886, 887, 889, 895, 896, 906, 946, 947, 951, 957, 960, 977, 978, 981, 998, 1005, 1007, 1008], "use_encoded_valu": [119, 129, 168, 850, 1010], "unknown_valu": [119, 129, 168, 850, 1010, 1012], "hist_ordin": 119, "n_unique_categori": 119, "hist_n": 119, "mean_absolute_percentage_error": [119, 957, 1010, 1012], "neg_mean_absolute_percentage_error": [119, 957, 965], "n_cv_fold": [119, 780, 800, 803], "dropped_result": 119, "one_hot_result": 119, "ordinal_result": 119, "native_result": 119, "plot_result": [119, 241, 242, 247], "figure_titl": 119, "plot_info": 119, "test_scor": [119, 121, 123, 204, 255, 258, 271, 334, 344, 378, 395, 780, 799, 800, 803], "y_limit": 119, "mape_cv_mean": 119, "mape_cv_std": 119, "c0": [119, 228], "slowest": [119, 911, 912], "theori": [119, 231, 246, 334, 364, 390, 391, 395, 398, 668, 672, 703, 733, 867, 868, 912, 946, 953, 954, 956, 957, 958, 972, 973], "poorer": [119, 350, 396], "slight": [119, 201, 308, 398, 428, 1008], "acf": 119, "bde": 119, "isol": [119, 125, 225, 234, 340, 365, 367, 372, 382, 541, 822, 879, 1007, 1008], "bcde": 119, "histgradientboostingregressor__max_depth": 119, "histgradientboostingregressor__max_it": 119, "altogeth": [119, 372, 1006], "498": [119, 133], "plot_gradient_boosting_categor": [119, 133], "suffici": [120, 129, 204, 270, 326, 354, 379, 391, 400, 510, 515, 524, 635, 660, 661, 793, 794, 958, 960, 978, 1007], "validation_fract": [120, 204, 309, 398, 537, 538, 539, 540, 644, 645, 646, 654, 656, 833, 834, 971, 1006, 1012], "denot": [120, 375, 379, 382, 389, 395, 398, 566, 567, 569, 774, 780, 788, 849, 850, 942, 946, 949, 953, 955, 957, 958, 967, 970, 983], "kept": [120, 246, 334, 361, 370, 385, 401, 474, 513, 515, 516, 518, 519, 524, 525, 575, 588, 589, 597, 598, 622, 673, 772, 773, 896, 967, 1006, 1007], "asid": [120, 204, 385, 537, 538, 539, 540, 644, 645, 646, 654, 656, 833, 834], "until": [120, 146, 204, 268, 308, 310, 371, 379, 380, 388, 391, 395, 400, 401, 486, 487, 535, 536, 537, 538, 542, 543, 544, 571, 580, 624, 625, 630, 631, 636, 637, 638, 639, 640, 641, 644, 646, 649, 654, 655, 656, 672, 772, 773, 777, 778, 833, 834, 872, 875, 883, 884, 885, 886, 932, 946, 953, 954, 962, 970, 973, 992, 1001, 1005, 1006, 1012], "n_estimators_": [120, 537, 538], "vighnesh": [120, 1003, 1004, 1006], "birodkar": [120, 1003, 1004, 1006], "vighneshbirodkar": 120, "rvraghav93": [120, 260, 298], "data_list": 120, "n_gb": 120, "score_gb": 120, "time_gb": 120, "n_gbe": 120, "gbe": 120, "gb": [120, 132, 398, 531, 611], "bar_width": 120, "bar1": 120, "crimson": 120, "bar2": 120, "coral": 120, "n_est": 120, "max_i": [120, 232, 959], "160": [120, 133, 232, 946, 990], "plot_gradient_boosting_early_stop": [120, 133], "fly": [121, 371, 374, 486, 487, 560, 998, 1000, 1007], "pessimist": [121, 398], "cumul": [121, 196, 214, 391, 703, 712, 733, 853, 864, 967, 971, 1005, 1007, 1008], "demand": [121, 399, 774, 788, 797, 798, 799], "6820": 121, "special": [121, 166, 186, 214, 286, 326, 361, 363, 368, 372, 377, 379, 391, 394, 396, 443, 446, 531, 533, 537, 797, 887, 946, 951, 953, 955, 956, 957, 958, 960, 973, 1005, 1008, 1010, 1012], "expit": [121, 186, 398, 539, 953, 1005], "ridgewai": [121, 398], "gbm": [121, 398, 1001], "x3": [121, 234, 392, 991], "binomi": [121, 124, 398, 531, 537, 539, 953, 1012], "acc": 121, "heldout_scor": 121, "devianc": [121, 124, 196, 214, 398, 531, 536, 537, 538, 539, 540, 543, 626, 647, 658, 699, 700, 701, 724, 726, 729, 884, 886, 953, 973, 999, 1008, 1009, 1011, 1012], "y_proba": [121, 124, 379, 836], "staged_predict_proba": [121, 124, 531, 537, 539, 998], "cv_estim": 121, "cv_clf": 121, "val_scor": 121, "cv_score": 121, "cumsum": [121, 196, 214, 1005], "oob_improvement_": [121, 398, 537, 538, 1000], "oob_best_it": 121, "test_best_it": 121, "cv_best_it": 121, "brew": [121, 365, 382], "oob_color": 121, "test_color": 121, "127": [121, 998], "cv_color": 121, "253": [121, 512], "192": [121, 372, 998], "oob_lin": 121, "test_lin": 121, "cv_line": 121, "dashdot": [121, 149, 152], "xticks_po": 121, "tolist": [121, 161, 169, 255, 276, 308, 362], "xticks_label": 121, "448": [121, 133], "plot_gradient_boosting_oob": [121, 133], "atleast_2d": [122, 368], "expected_i": 122, "amplitud": [122, 154, 156, 190, 401, 953], "lognorm": [122, 155, 177, 245, 302, 967], "tail": [122, 162, 166, 196, 198, 256, 298, 499, 502, 953], "imposs": [122, 341, 978], "mean_pinball_loss": [122, 309, 953, 957, 1011], "all_model": 122, "min_samples_split": [122, 123, 124, 260, 268, 299, 308, 398, 535, 536, 537, 538, 542, 543, 544, 777, 778, 883, 884, 885, 886, 946, 973, 1004], "gbr": 122, "gbr_l": 122, "5th": [122, 157], "95th": [122, 725], "y_med": 122, "fill_between": [122, 135, 149, 154, 156, 158, 175, 176, 214, 256, 258, 259, 260, 266, 271, 780], "unfortun": [122, 214, 374, 377, 398, 486, 487], "sinoisoid": 122, "highlight_min": [122, 185], "font": [122, 185, 210, 230, 887, 889], "pbl": 122, "nbsp": [122, 185], "715413": 122, "750348": 122, "127128": 122, "253445": 122, "379763": 122, "933253": 122, "305438": 122, "622811": 122, "940184": 122, "827917": 122, "909909": 122, "145957": 122, "382005": 122, "667219": 122, "asymmetr": [122, 198, 379, 1003], "signficiantli": 122, "nor": [122, 259, 339, 350, 354, 371, 377, 399, 417, 572, 899, 961, 973, 1009], "917281": 122, "767498": 122, "617715": 122, "692901": 122, "144204": 122, "245961": 122, "347717": 122, "648026": 122, "412021": 122, "607752": 122, "803483": 122, "874771": 122, "354394": 122, "355445": 122, "356497": 122, "852774": 122, "underestim": [122, 167, 196, 214, 256, 367], "extrem": [122, 196, 198, 233, 298, 317, 340, 367, 369, 391, 396, 535, 536, 542, 543, 544, 610, 611, 657, 701, 729, 885, 886, 887, 889, 957, 959], "coverage_fract": 122, "y_low": 122, "y_high": 122, "868": [122, 142, 204, 215], "hypothesi": [122, 256, 262, 334, 395, 668, 672, 801, 954], "pinbal": [122, 309, 540, 648, 700, 725, 953, 1011, 1012], "experiment": [122, 161, 162, 196, 267, 268, 308, 309, 357, 367, 368, 369, 376, 377, 379, 395, 474, 527, 605, 674, 777, 778, 925, 927, 946, 947, 953, 956, 957, 977, 978, 986, 994, 1006, 1007, 1010, 1011, 1012, 1013], "enable_halving_search_cv": [122, 267, 268, 308, 777, 778, 946], "halvingrandomsearchcv": [122, 268, 308, 556, 777, 946, 1010, 1012, 1013], "make_scor": [122, 260, 395, 774, 798, 799, 957, 1007], "neg_mean_pinball_loss_05p_scor": 122, "greater_is_bett": [122, 719, 957], "search_05p": 122, "max_resourc": [122, 777, 778, 946], "min_resourc": [122, 777, 778], "redefin": [122, 166], "neg_mean_pinball_loss_95p_scor": 122, "search_95p": 122, "estimator__alpha": 122, "did": [122, 149, 166, 169, 196, 204, 214, 340, 362, 605, 690, 793, 877, 991, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013], "untun": 122, "joint": [122, 164, 167, 174, 215, 217, 392, 589, 630, 640, 670, 811, 812, 813, 814, 815, 875, 953, 954, 958, 962, 964, 968, 998], "9026666666666666": 122, "796": [122, 182, 239], "sadli": 122, "plot_gradient_boosting_quantil": [122, 133], "tackl": [123, 256, 355, 367, 391, 813, 959, 981, 986], "katrina": [123, 1009], "ni": [123, 1004, 1009], "nilichen": 123, "reg": [123, 166, 176, 299, 307, 331, 398, 536, 538, 546, 628, 629, 631, 632, 633, 634, 635, 641, 642, 643, 648, 649, 656, 657, 667, 671, 886, 953, 1003], "3025": 123, "7877": 123, "train_score_": [123, 398, 537, 538, 539, 540], "impur": [123, 348, 381, 398, 400, 531, 532, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 887, 889, 973, 994, 1003, 1004, 1005, 1006], "feature_import": 123, "sorted_idx": [123, 306], "po": [123, 220, 399], "align": [123, 162, 217, 241, 267, 341, 372, 379, 667, 671, 960, 971, 993, 994], "vert": [123, 168, 169, 306, 971], "187": [123, 133, 256, 266, 272, 372, 562, 958, 990, 1000], "plot_gradient_boosting_regress": [123, 133], "consider": [124, 150, 153, 251, 257, 263, 367, 401, 597, 774, 788, 946, 959, 963, 971, 981], "return_invers": [124, 368], "original_param": 124, "max_leaf_nod": [124, 196, 309, 348, 398, 535, 536, 537, 538, 539, 540, 542, 543, 544, 883, 884, 885, 886, 1001, 1007, 1009], "test_devi": 124, "839": [124, 133, 658], "plot_gradient_boosting_regular": [124, 133], "anomali": [125, 164, 224, 234, 239, 282, 283, 362, 390, 448, 490, 500, 541, 617, 655, 822, 837, 879, 963, 1004, 1005], "recurs": [125, 140, 147, 164, 344, 368, 390, 391, 395, 420, 421, 422, 425, 442, 480, 493, 541, 571, 572, 575, 580, 610, 611, 636, 793, 880, 957, 960, 963, 964, 973, 979, 991, 994, 998, 1008, 1009], "deform": [125, 246, 336], "notat": [125, 379, 392, 396, 399, 568, 690, 953, 957, 983, 1007], "120": [125, 218, 400, 568, 998], "cluster_1": 125, "cluster_2": 125, "legend_el": [125, 209, 259], "nuniformli": 125, "max_sampl": [125, 161, 398, 533, 534, 535, 536, 541, 542, 543, 612, 1008, 1011], "isolationforestisolationforest": 125, "ax_": [125, 250, 259, 263, 306, 373, 418, 609, 675, 676, 678, 679, 680, 780], "nof": 125, "661": [125, 133], "plot_isolation_forest": [125, 133], "trend": [126, 154, 167, 228, 293, 401, 981, 1005], "xgboost": [126, 398, 977], "partialdependencedisplai": [126, 167, 235, 307, 308, 309, 311, 373, 611, 964, 1008, 1009, 1010, 1011, 1012, 1013], "f_0": 126, "f_1": [126, 263, 957], "gbdt_no_cst": [126, 307], "histgradientboostingregressorhistgradientboostingregressor": [126, 129, 311], "gbdt_with_monotonic_cst": 126, "monotonic_cst": [126, 307, 309, 398, 539, 540, 1013], "line_kw": [126, 235, 258, 307, 610, 780], "unconstrain": [126, 167, 307, 362, 971], "axes_": [126, 235, 307, 373, 610], "f_idx": 126, "oscil": [126, 167, 201, 391, 420], "specifii": 126, "x_df": 126, "gbdt_with_monotonic_cst_df": 126, "plot_monotonic_constraint": [126, 133], "excel": [127, 361, 367, 668, 672, 953, 981], "bernoullinb": [127, 356, 812, 813, 814, 815, 958, 959, 999, 1000, 1002, 1005, 1010, 1011, 1013], "hasher": [127, 341, 399], "transformed_grid": 127, "y_grid_pr": 127, "386": [127, 133, 852], "plot_random_forest_embed": [127, 133], "multioutput": [128, 265, 274, 357, 368, 379, 412, 444, 460, 461, 462, 529, 532, 534, 535, 536, 538, 540, 542, 543, 546, 548, 589, 610, 611, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 699, 700, 705, 722, 723, 725, 727, 728, 730, 762, 765, 797, 819, 827, 834, 843, 876, 878, 881, 883, 884, 885, 886, 901, 922, 923, 957, 979, 994, 998, 999, 1000, 1004, 1005, 1011, 1012], "multioutputregressor": [128, 412, 444, 460, 461, 462, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 808, 810, 819, 827, 834, 876, 878, 881, 884, 886, 1004, 1005, 1007, 1009, 1010], "nativ": [128, 161, 355, 362, 379, 398, 539, 540, 808, 809, 925, 953, 957, 977, 1008, 1010], "ever": [128, 375, 398, 981], "centr": 128, "regr_multirf": 128, "regr_rf": 128, "y_multirf": 128, "y_rf": 128, "cornflowerblu": [128, 190, 199, 206, 242, 244, 247, 263, 265, 279, 281, 287, 346, 347], "606": [128, 133, 591, 806, 958], "plot_random_forest_regression_multioutput": [128, 133], "compil": [129, 341, 354, 355, 367, 368, 369, 374, 375, 377, 977, 998], "dean": [129, 1006, 1012], "cock": [129, 1007], "becam": [129, 380, 1006], "kaggl": [129, 378], "residenti": 129, "iowa": 129, "won": [129, 294, 340, 370, 391, 447, 474, 605, 606, 608, 665, 682, 695, 713, 714, 732, 734, 770, 956, 967, 1003, 1004, 1009], "load_ames_h": 129, "yrsold": 129, "heatingqc": 129, "street": [129, 364], "yearremodadd": 129, "heat": [129, 326, 391, 431, 441, 673], "bsmtunfsf": 129, "mssubclass": 129, "condition2": 129, "garagetyp": 129, "overallqu": 129, "totalbsmtsf": 129, "miscfeatur": 129, "mosold": 129, "cat_selector": 129, "num_selector": 129, "besid": [129, 228, 367, 371, 401, 567, 839, 848, 946, 1006], "cat_tree_processor": 129, "encoded_missing_valu": [129, 168, 850, 967, 1012], "num_tree_processor": 129, "add_ind": [129, 162, 605, 606, 608, 947, 1007, 1010], "tree_preprocessor": [129, 196], "0x7f50debcb820": 129, "0x7f50debcb400": 129, "ordinalencoderordinalencod": [129, 167, 168], "cat_linear_processor": 129, "num_linear_processor": 129, "linear_preprocessor": 129, "tediou": 129, "wrote": [129, 362], "lasso_pipelin": 129, "lassocvlassocv": 129, "rf_pipelin": 129, "randomforestregressorrandomforestregressor": 129, "gbdt_pipelin": 129, "stackingregressor": [129, 306, 398, 545, 1008, 1009, 1010, 1011, 1012], "stacking_regressor": 129, "final_estim": [129, 306, 398, 545, 546], "unknown_v": 129, "stackingregressorstackingregressor": 129, "forestcolumntransform": 129, "lassocolumntransform": 129, "boostingcolumntransform": 129, "final_estimatorridgecvridgecv": 129, "cross_val_predict": [129, 252, 306, 389, 395, 398, 417, 545, 546, 798, 799, 1002, 1003, 1004, 1005, 1007, 1009, 1011], "scorer": [129, 214, 260, 368, 379, 395, 398, 539, 540, 572, 580, 612, 637, 651, 653, 689, 709, 710, 719, 774, 777, 778, 780, 788, 798, 799, 800, 803, 946, 953, 957, 965, 978, 1002, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "test_": [129, 395], "line_kwarg": [129, 679], "nevalu": 129, "plot_stack_predictor": [129, 133], "exemplari": 130, "eclf": [130, 131, 398], "axarr": [130, 298], "tt": [130, 251, 444], "553": [130, 133], "plot_voting_decision_region": [130, 133], "examplari": 131, "class1_1": 131, "class2_1": 131, "lightgreen": [131, 202, 213], "p3": 131, "p4": 131, "nweight": 131, "360": [131, 133], "plot_voting_proba": [131, 133], "votingregressor": [132, 398, 547, 1007, 1008, 1009, 1012], "cohort": 132, "reg1": [132, 398], "reg2": [132, 398], "reg3": [132, 398], "ereg": [132, 398], "votingregressorvotingregressor": 132, "gbgradientboostingregressorgradientboostingregressor": 132, "rfrandomforestregressorrandomforestregressor": 132, "lrlinearregressionlinearregress": 132, "xt": [132, 276, 379, 605, 607, 774, 777, 778, 788, 820, 828, 836, 841, 846, 853, 864, 893], "pred1": 132, "pred2": 132, "pred3": 132, "pred4": 132, "labelbottom": [132, 256], "863": [132, 133], "plot_voting_regressor": [132, 133], "824": 133, "auto_examples_ensembl": 133, "n_fold": [135, 625, 629, 631, 633, 637, 639, 641, 999, 1000, 1004], "scores_std": [135, 136, 987], "semilogx": [135, 136, 185, 269, 271], "std_error": 135, "transluc": 135, "31622776601683794": 135, "answer": [135, 256, 367, 377, 703, 733, 957, 981], "extern": [135, 149, 356, 357, 360, 364, 367, 368, 371, 377, 379, 388, 391, 399, 400, 401, 571, 588, 589, 695, 714, 770, 953, 956, 957, 960, 973, 978, 984, 990, 994, 1006, 1010], "lasso_cv": 135, "k_fold": [135, 987], "maximis": [135, 242, 284, 951, 960], "5f": [135, 310], "Not": [135, 167, 354, 367, 377, 391, 409, 410, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 448, 449, 450, 451, 452, 453, 454, 455, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 541, 544, 547, 548, 559, 560, 561, 566, 567, 569, 605, 606, 607, 608, 655, 666, 667, 668, 669, 671, 745, 769, 772, 773, 774, 777, 778, 788, 813, 816, 817, 820, 821, 822, 824, 828, 840, 848, 851, 852, 854, 867, 868, 879, 957, 963, 977, 1007], "moreov": [135, 155, 300, 310, 350, 370, 391, 395, 401, 868, 927, 957, 981, 1006, 1012, 1013], "substanti": [135, 278, 282, 283, 299, 367, 822, 963, 1002, 1005], "05968": 135, "54209": 135, "04520": 135, "15521": 135, "07880": 135, "45192": 135, "plot_cv_diabet": [135, 139], "this_scor": [136, 329], "045": [136, 139, 700], "plot_cv_digit": [136, 139], "961111": 137, "933333": [137, 825], "plot_digits_classification_exercis": [137, 139], "200j": [138, 330], "706": [138, 139], "plot_iris_exercis": [138, 139], "423": 139, "auto_examples_exercis": 139, "exercis": [139, 356, 357, 364, 367, 479, 480, 482, 483, 630, 631, 636, 774, 779, 798, 818, 880, 984, 1001], "elimin": [140, 147, 164, 390, 391, 395, 427, 480, 493, 571, 572, 575, 580, 636, 777, 778, 793, 880, 943, 957, 979, 981, 994, 998], "x_2": [141, 152, 193, 396, 398, 399, 401, 591, 603, 953, 961, 967], "x_3": [141, 967], "irrelev": [141, 350, 372, 393, 398, 400, 582, 717, 957], "agre": [141, 374, 380, 390, 391, 763, 983], "percept": [141, 167, 964], "correctli": [141, 145, 196, 214, 263, 265, 270, 286, 316, 326, 367, 375, 396, 398, 401, 408, 417, 448, 471, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 547, 588, 636, 644, 646, 652, 653, 654, 681, 769, 771, 804, 805, 806, 807, 811, 812, 813, 814, 815, 818, 823, 826, 833, 856, 870, 871, 875, 877, 878, 879, 880, 881, 883, 885, 913, 954, 957, 960, 961, 967, 972, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mutual_info_regress": [141, 310, 400, 570, 573, 574, 577, 578, 587, 1004, 1005, 1010, 1012, 1013], "f_test": 141, "x_": [141, 150, 247, 256, 306, 368, 394, 396, 605, 613, 870, 871, 953, 959, 964, 1004], "246": [141, 147, 965, 998], "plot_f_test_vs_mi": [141, 147], "examin": [142, 372, 374, 391, 825], "f_classif": [142, 143, 400, 570, 573, 574, 576, 577, 578, 582, 584, 587], "log10": [142, 155, 166, 181, 189, 257, 326], "pvalues_": [142, 570, 573, 574, 576, 577, 578, 998], "x_indic": 142, "p_": [142, 957, 960, 973], "svm_weight": 142, "789": [142, 398], "clf_select": 142, "svm_weights_select": 142, "get_support": [142, 146, 308, 559, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 1000], "plot_feature_select": [142, 147], "mistak": [143, 315, 350, 391, 395, 712, 847, 860, 861, 863, 864, 865, 866, 953, 958], "anova_filt": 143, "anova_svm": 143, "selectkbestselectkbest": [143, 310], "linearsvclinearsvc": [143, 263], "75790919": 143, "27158706": 143, "26109741": 143, "plot_feature_selection_pipelin": [143, 147], "rfe": [144, 145, 400, 572, 575, 580, 998, 1002, 1008, 1009, 1010, 1011, 1012], "n_features_to_select": [144, 146, 308, 400, 571, 580, 1010, 1012], "ranking_": [144, 571, 572], "740": [144, 147], "plot_rfe_digit": [144, 147], "introduct": [145, 214, 254, 357, 367, 395, 396, 399, 568, 765, 766, 811, 815, 953, 955, 957, 959, 976, 984, 990, 993, 994], "class_sep": [145, 286, 493], "rfecv": [145, 400, 571, 575, 580, 1002, 1004, 1006, 1008, 1009, 1010, 1011], "stratifiedkfold": [145, 243, 251, 262, 266, 317, 395, 417, 545, 546, 572, 580, 637, 651, 774, 775, 777, 778, 779, 780, 782, 784, 788, 792, 794, 796, 797, 798, 799, 800, 801, 803, 987, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1011], "min_features_to_select": [145, 572, 1006], "n_features_": [145, 519, 571, 572, 1011, 1013], "n_score": 145, "plateau": [145, 254, 258], "547": [145, 147], "plot_rfe_with_cross_valid": [145, 147], "selectfrommodel": [146, 379, 571, 580, 581, 979, 994, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012], "sequentialfeatureselect": 146, "greedi": [146, 398, 400, 426, 428, 439, 537, 538, 580, 953, 973], "442": [146, 162, 364, 479, 990], "descript": [146, 166, 360, 361, 366, 367, 370, 371, 374, 379, 391, 399, 431, 441, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 485, 488, 522, 608, 654, 739, 742, 755, 957, 971, 972, 978, 980, 992, 1008, 1009, 1010, 1011, 1012, 1013], "descr": [146, 360, 361, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 483, 485, 488, 989, 1006], "_diabetes_dataset": 146, "mass": [146, 235, 364, 772, 953, 964], "blood": [146, 226, 364, 990], "pressur": [146, 364, 990], "six": [146, 197, 218, 302, 364, 1007], "serum": [146, 364], "bmi": [146, 184, 185, 235, 364, 965], "tc": [146, 364, 380], "cholesterol": [146, 364], "ldl": [146, 364], "lipoprotein": [146, 364], "hdl": [146, 364], "s4": [146, 184, 185, 364], "tch": [146, 364], "s5": [146, 184, 185, 364, 965], "ltg": [146, 364, 479], "triglycerid": [146, 364], "s6": [146, 184, 185, 364], "glu": [146, 364], "sugar": [146, 364], "www4": [146, 364], "ncsu": [146, 364], "boo": [146, 364], "bradlei": [146, 364, 953], "efron": [146, 364, 660, 661, 953], "trevor": [146, 184, 311, 364, 606, 634, 699, 700, 701, 947, 953, 969, 1002, 1003, 1006, 1007, 1008, 1010], "iain": [146, 364, 953], "johnston": [146, 364, 953, 1007], "annal": [146, 184, 364, 398, 453, 494, 495, 496, 537, 538, 634, 953], "407": [146, 230, 239, 263, 272, 344, 349, 364], "499": [146, 364, 372], "web": [146, 361, 362, 364, 367, 369, 374, 391, 398, 399, 499, 868, 957, 967, 998], "stanford": [146, 364, 627, 660, 661, 811, 814, 815, 868, 955], "leastangle_2002": [146, 364], "pitfal": [146, 164, 165, 168, 170, 308, 357, 378, 379, 381, 395, 444, 446, 474, 631, 650, 651, 730, 789, 799, 802, 837, 849, 856, 953, 994], "accept": [146, 149, 253, 306, 326, 339, 341, 350, 354, 355, 361, 367, 368, 375, 377, 378, 379, 380, 385, 387, 391, 396, 399, 417, 421, 424, 425, 427, 440, 443, 446, 486, 487, 533, 534, 539, 540, 547, 548, 559, 560, 571, 572, 575, 606, 613, 617, 621, 657, 704, 719, 755, 772, 773, 777, 778, 818, 819, 826, 827, 840, 893, 895, 896, 899, 953, 955, 957, 960, 965, 967, 972, 977, 978, 987, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tic": [146, 167, 267, 959], "sfm": 146, "toc": 146, "sequentialfeatureselector": [146, 400, 571, 575, 581, 1010, 1011, 1012], "sf": [146, 234, 256, 308, 362, 400, 470, 580], "backward": [146, 308, 369, 379, 400, 474, 554, 580, 592, 593, 596, 597, 598, 600, 601, 626, 647, 658, 888, 891, 957, 961, 978, 998, 1001, 1006, 1007, 1008, 1010, 1012], "tic_fwd": 146, "sfs_forward": 146, "toc_fwd": 146, "tic_bwd": 146, "sfs_backward": 146, "toc_bwd": 146, "433": [146, 364], "isn": [146, 306, 339, 341, 350, 355, 367, 374, 493, 539, 540, 572, 769, 777, 778, 849, 960, 972, 1008], "sound": [146, 350], "finish": [146, 244, 954], "expos": [146, 309, 311, 355, 360, 364, 389, 398, 400, 401, 417, 443, 531, 532, 545, 546, 547, 548, 571, 572, 580, 589, 774, 777, 778, 788, 805, 806, 807, 808, 809, 810, 890, 925, 953, 957, 959, 987, 989, 991, 995, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "plot_select_from_model_diabet": [146, 147], "428": [147, 256, 272, 274, 275, 340], "auto_examples_feature_select": 147, "basic": [148, 159, 162, 164, 194, 331, 354, 356, 357, 367, 368, 370, 377, 379, 391, 395, 396, 398, 589, 600, 871, 883, 884, 885, 886, 946, 947, 960, 971, 976, 977, 978, 981, 990], "introductori": [148, 159, 164, 224, 589, 600, 981], "gpr": [148, 158, 159, 164, 474, 588, 589, 591, 592, 593, 594, 599, 600, 601, 602, 603, 979, 994, 1008], "mauna": [148, 159, 164, 474, 589, 593, 600, 601, 603], "loa": [148, 159, 164, 474, 589, 593, 600, 601, 603], "co2": [148, 159, 164, 474, 589, 593, 600, 601, 603, 1005], "xor": [148, 159, 164, 332, 588, 592, 600, 953, 973, 1005], "posterior": [148, 149, 150, 159, 164, 175, 256, 396, 401, 527, 528, 530, 588, 589, 591, 592, 593, 597, 600, 601, 605, 622, 623, 686, 772, 951, 977, 1004, 1007], "iso": [148, 159, 164, 219, 588, 591, 592], "trick": [149, 231, 286, 341, 353, 356, 357, 369, 377, 392, 401, 560, 567, 621, 650, 949, 950, 961, 971, 972, 990, 991, 994, 999, 1007], "drastic": [149, 229, 264, 391, 395, 960, 970], "theorem": [149, 390, 401, 959], "period": [149, 154, 158, 370, 379, 389, 401, 593, 795, 855, 1006, 1011], "reus": [149, 189, 257, 306, 341, 368, 372, 379, 391, 392, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 612, 624, 626, 627, 630, 636, 638, 640, 644, 645, 646, 647, 654, 655, 656, 658, 833, 834, 965, 969, 981, 1005], "training_sample_indic": 149, "training_data": 149, "training_noisy_target": 149, "newer": [149, 366, 382, 396], "expsinesquar": [149, 154, 158, 401], "emb": [149, 218, 229, 285, 360, 361, 441, 673, 954], "kernel_ridg": [149, 231, 357, 1002], "length_scal": [149, 150, 153, 154, 155, 156, 158, 401, 590, 593, 597, 599, 600, 601, 602], "tell": [149, 166, 167, 256, 326, 331, 355, 362, 391, 399, 541, 556, 946, 951, 964, 992], "param_distribut": [149, 257, 264, 268, 308, 378, 778, 786, 788], "1e0": [149, 231, 247, 264, 946], "kernel__length_scal": 149, "kernel__period": 149, "1e1": [149, 155, 196, 231, 326], "kernel_ridge_tun": 149, "022": [149, 340, 965], "9915849773450223": 149, "7986499491396728": 149, "607275806426108": 149, "predictions_kr": 149, "gaussianprocessregressor": [149, 154, 155, 156, 157, 158, 401, 588, 591, 592, 593, 594, 595, 599, 602, 603, 621, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "whitekernel": [149, 154, 155, 401, 589, 590, 592, 1009], "periodicity_bound": [149, 154, 158, 593], "kernel_": [149, 150, 151, 152, 153, 154, 155, 156, 158, 588, 589], "noise_level": [149, 154, 155, 401, 590, 603], "182": [149, 295, 372, 398], "mean_predictions_gpr": 149, "std_predictions_gpr": 149, "return_std": [149, 154, 155, 156, 158, 175, 176, 379, 530, 545, 546, 589, 591, 592, 593, 594, 603, 605, 622, 623, 836, 1005, 1006, 1010], "formul": [149, 158, 265, 367, 393, 396, 399, 401, 527, 528, 535, 542, 628, 629, 632, 633, 634, 636, 637, 643, 648, 740, 746, 773, 877, 880, 883, 885, 957, 958, 967, 979, 994], "forc": [149, 181, 302, 339, 361, 365, 386, 395, 398, 429, 436, 474, 584, 587, 624, 625, 630, 631, 635, 638, 639, 640, 641, 650, 651, 652, 659, 662, 665, 731, 755, 758, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 877, 878, 879, 880, 881, 893, 895, 896, 967, 994, 1003, 1006, 1007, 1008, 1010, 1011, 1012], "capac": [149, 168], "length_scale_bound": [149, 155, 156, 158, 401, 589, 593, 597, 600, 601], "attenu": 149, "701": [149, 159], "plot_compare_gpr_krr": [149, 159], "arbitrarili": [150, 242, 247, 339, 379, 401, 412, 444, 460, 461, 462, 530, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 647, 648, 650, 651, 656, 657, 658, 699, 700, 701, 723, 762, 766, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 957, 960, 967, 973], "lml": [150, 151, 155, 401], "exhibit": [150, 201, 339, 381, 395, 396, 398, 401, 965], "steep": [150, 167, 265, 266, 391, 395, 401, 429, 435], "laplac": [150, 401, 588, 589, 811, 812, 813, 815, 959], "214": [150, 401, 562], "319": [150, 992], "gp_fix": 150, "gp_opt": 150, "log_marginal_likelihood": [150, 151, 153, 155, 158, 401, 588, 589, 1008], "theta": [150, 151, 153, 155, 157, 158, 232, 396, 401, 501, 514, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 670, 959, 973], "landscap": [150, 401], "theta0": 150, "theta1": 150, "pcolor": 150, "xscale": [150, 155, 231], "yscale": [150, 155, 196, 231, 339], "plot_gpc": [150, 159], "gpc_rbf_isotrop": 151, "gpc_rbf_anisotrop": 151, "m_max": 151, "991": [151, 159, 264, 957], "plot_gpc_iri": [151, 159], "0256": 152, "dotproduct": [152, 153, 158, 401, 589, 603], "sigma_0": [152, 153, 158, 401, 592], "constantkernel": [152, 158, 401, 589, 595, 599, 602], "lim": [152, 512], "experi": [152, 156, 166, 167, 168, 172, 198, 334, 340, 341, 355, 361, 367, 369, 390, 395, 493, 705, 762, 953, 958, 969, 975, 976, 977, 981, 990, 992], "61611719": 152, "00099547": 152, "10469096": 152, "32782448": 152, "00000000": 152, "50000000": 152, "17289014": 152, "6984743": 152, "3109306": 152, "93271427": 152, "03823144": 152, "10584743": 152, "87600388": 152, "74310541": 152, "21301203": 152, "26386883": 152, "gp": [152, 157, 401, 588, 589, 600, 1004], "set_aspect": [152, 207, 243, 335], "cb": [152, 229, 245], "widehat": 152, "mathbf": [152, 396, 953, 957, 961, 962, 971], "leq": [152, 396, 398, 953, 957, 960, 971, 972, 973], "clim": 152, "666": [152, 818, 947], "clabel": [152, 207], "334": 152, "plot_gpc_isoprob": [152, 159], "stationari": [153, 401, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "coincid": [153, 198, 401], "430": [153, 155, 158, 318, 403, 511], "convergencewarn": [153, 155, 157, 158, 204, 211, 293, 294, 300, 375, 379, 772, 773, 1006, 1007, 1010], "k1__constant_valu": [153, 158], "bound": [153, 155, 157, 158, 164, 198, 214, 224, 239, 255, 365, 372, 373, 391, 396, 399, 401, 402, 424, 467, 480, 490, 501, 514, 573, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 610, 613, 615, 628, 632, 636, 655, 683, 712, 772, 773, 816, 817, 853, 864, 867, 868, 869, 877, 878, 879, 882, 899, 925, 953, 956, 957, 960, 969, 971, 972, 974, 1006, 1009, 1010, 1012], "100000": [153, 231, 241, 367, 591, 592, 593, 597, 598, 600, 601, 603, 864, 950, 990, 992], "puor_r": [153, 332], "plot_gpc_xor": [153, 159], "rw2006": [154, 401, 588, 589], "ascent": [154, 401], "monthli": [154, 370, 380, 401, 957], "atmospher": [154, 401], "ppm": 154, "observatori": [154, 401], "hawaii": [154, 401], "1958": [154, 396, 398, 401, 510], "air": [154, 741], "41187": 154, "flag": [154, 365, 367, 369, 443, 588, 589, 605, 651, 653, 705, 762, 972, 1004, 1008, 1009, 1011, 1012, 1013], "station": 154, "mlo": 154, "317": 154, "co2_data": 154, "to_datetim": 154, "timestamp": 154, "march": [154, 703, 733, 957, 998, 1002, 1006, 1008], "dropna": 154, "nfrom": 154, "upcom": [154, 365], "to_numpi": 154, "rise": [154, 401], "irregular": [154, 391, 401, 960], "long_term_trend_kernel": 154, "decai": [154, 401, 522, 833, 834, 912, 957, 971, 1002], "seasonal_kernel": 154, "ration": [154, 601, 955], "diffus": [154, 401], "accommod": [154, 401, 1006], "rationalquadrat": [154, 158, 401, 594], "irregularities_kernel": 154, "shall": [154, 401], "phenomena": [154, 401], "noise_kernel": 154, "noise_level_bound": [154, 155, 603], "co2_kernel": 154, "subtract": [154, 166, 394, 396, 401, 423, 426, 438, 512, 622, 623, 628, 629, 632, 633, 634, 642, 643, 1005], "normalize_i": [154, 401, 589, 1012], "y_mean": [154, 155, 158, 589, 622, 623], "gaussianprocessregressorgaussianprocessregressor": 154, "todai": [154, 377, 992], "current_month": 154, "mean_y_pr": 154, "std_y_pr": 154, "536": 154, "188": [154, 220, 223, 328, 337, 364, 372, 562], "0367": 154, "6ppm": 154, "901": [154, 159], "plot_gpr_co2": [154, 159], "target_gener": 155, "add_nois": 155, "minima": [155, 184, 396, 426, 670, 954, 991, 1006], "y_std": [155, 158, 530, 589, 622, 623, 1011], "k1__k2__length_scal": [155, 401], "noptimum": 155, "nlog": 155, "length_scale_grid": 155, "noise_level_grid": 155, "newshap": 155, "plot_gpr_noisi": [155, 159], "principl": [156, 281, 303, 341, 367, 377, 379, 380, 395, 398, 401, 912, 946, 956, 960, 971, 1005], "tikhonov": [156, 401, 650], "training_indic": 156, "n_restarts_optim": [156, 401, 588, 589], "43": [156, 193, 229, 256, 364, 371, 774, 788], "mean_predict": 156, "std_predict": 156, "whenev": [156, 350, 361, 374, 379, 382, 389, 460, 461, 462, 474, 606, 608, 948, 956, 978, 1008], "noise_std": 156, "y_train_noisi": 156, "plot_gpr_noisy_target": [156, 159], "gene": [157, 361, 388, 430, 491, 571, 572, 823, 856], "letter": [157, 362, 364, 370, 399, 765, 766, 957], "among": [157, 167, 172, 196, 246, 274, 348, 356, 362, 368, 379, 380, 389, 390, 394, 426, 428, 490, 497, 769, 801, 819, 824, 826, 877, 880, 883, 884, 885, 886, 946, 949, 957, 958, 964, 967, 972, 998, 1004, 1005, 1008], "brighter": 157, "4th": [157, 364], "6th": 157, "haussler": 157, "1999": [157, 362, 389, 391, 393, 396, 398, 417, 429, 436, 448, 453, 512, 519, 533, 534, 537, 538, 700, 869, 877, 878, 880, 881, 963, 969], "646": 157, "technic": [157, 197, 218, 310, 362, 364, 367, 379, 398, 630, 642, 663, 664, 870, 953, 954, 960], "depart": [157, 391], "california": [157, 161, 162, 298, 308, 360, 364, 468, 994], "santa": [157, 1013], "cruz": 157, "generickernelmixin": [157, 1008], "sequencekernel": 157, "baseline_similar": 157, "baseline_similarity_bound": 157, "hyperparameter_baseline_similar": 157, "_f": [157, 953], "_g": 157, "__call__": [157, 326, 379, 399, 401, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1005], "eval_gradi": [157, 401, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "is_stationari": [157, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "clone_with_theta": [157, 401, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "agct": 157, "agc": 157, "aact": 157, "taa": 157, "aaa": 157, "gaaca": 157, "training_idx": 157, "cga": 157, "taac": 157, "tcg": 157, "cttt": 157, "tgct": 157, "atag": 157, "ctc": 157, "420": 157, "241": [157, 159, 398, 545, 546], "plot_gpr_on_structured_data": [157, 159], "plot_gpr_sampl": 158, "gpr_model": 158, "y_sampl": [158, 589], "sample_i": [158, 401, 589, 1012], "single_prior": 158, "pm": [158, 167, 266, 398, 957], "dev": [158, 166, 214, 261, 266, 365, 367, 370, 374, 957, 981, 1005, 1010, 1013], "594": [158, 196], "279": [158, 257, 953], "alpha_bound": [158, 601], "1e15": 158, "34e": 158, "799": [158, 212, 215, 340], "791": 158, "sigma_0_bound": [158, 592], "_gpr": 158, "629": [158, 175, 215], "lbfg": [158, 292, 368, 626, 627, 636, 637, 647, 650, 652, 658, 665, 807, 810, 833, 834, 953, 961, 1002, 1003, 1005, 1006, 1011, 1012, 1013], "statu": [158, 361, 382, 474, 816, 817], "abnormal_termination_in_lnsrch": 158, "445": [158, 965], "6576930005": 158, "matern": [158, 401, 1009, 1013], "609": [158, 372], "484": [158, 197, 215], "plot_gpr_prior_posterior": [158, 159], "auto_examples_gaussian_process": 159, "iterativeimput": [160, 162, 163, 164, 468, 543, 558, 606, 607, 608, 617, 623, 650, 798, 819, 837, 1007, 1008, 1009, 1010, 1012, 1013], "robin": [161, 162, 605, 947, 1004, 1007, 1012, 1013], "kneighborsregressor": [161, 233, 288, 310, 398, 548, 818, 824, 826, 827, 960, 998, 1000, 1002, 1008, 1010, 1011, 1012, 1013], "mimic": [161, 196, 339, 792], "missforest": [161, 947], "popular": [161, 221, 362, 365, 371, 374, 377, 379, 390, 397, 398, 399, 401, 431, 441, 947, 949, 953, 955, 962, 971, 978, 987, 992], "enable_iterative_imput": [161, 162, 370, 605, 947, 1007], "fetch_california_h": [161, 162, 298, 308, 362, 378, 392, 1007, 1009], "x_full": [161, 162, 298], "y_full": [161, 162, 298], "2k": 161, "br_estim": 161, "score_full_data": 161, "neg_mean_squared_error": [161, 162, 198, 231, 270, 799, 957, 965, 1004], "x_miss": [161, 162], "y_miss": [161, 162], "missing_sampl": [161, 162], "missing_featur": [161, 162], "score_simple_imput": 161, "missing_valu": [161, 162, 236, 379, 605, 606, 607, 608, 746, 947, 1006, 1007], "score_iterative_imput": 161, "stricter": 161, "impute_estim": 161, "__class__": [161, 196, 198, 258, 300, 339, 340, 341, 373], "xerr": [161, 162, 340], "plot_iterative_imputer_variants_comparison": [161, 163], "ness": [162, 214], "auxiliari": [162, 365, 981], "district": [162, 362], "neither": [162, 166, 306, 339, 350, 377, 417, 572, 606, 899, 960, 973], "20640": [162, 362, 468], "feel": [162, 298, 366, 367, 374, 391, 973], "x_diabet": [162, 987], "y_diabet": [162, 987], "x_california": 162, "y_california": 162, "add_missing_valu": 162, "missing_r": 162, "n_missing_sampl": 162, "x_miss_california": 162, "y_miss_california": 162, "x_miss_diabet": 162, "y_miss_diabet": 162, "knnimput": [162, 306, 605, 608, 947, 1008, 1009, 1012, 1013], "get_scores_for_imput": 162, "impute_scor": 162, "x_label": 162, "mses_california": 162, "stds_california": 162, "mses_diabet": 162, "stds_diabet": 162, "get_full_scor": 162, "full_scor": 162, "get_impute_zero_scor": 162, "fill_valu": [162, 227, 236, 307, 605, 608, 967, 1006], "zero_impute_scor": 162, "unweight": [162, 209, 442, 625, 631, 656, 685, 691, 706, 707, 715, 760, 761, 764, 765, 811, 812, 813, 814, 815, 947], "get_impute_knn_scor": 162, "knn_impute_scor": 162, "get_impute_mean": 162, "mean_impute_scor": 162, "obvious": [162, 354, 992], "get_impute_it": 162, "n_nearest_featur": [162, 605], "sample_posterior": [162, 605, 947], "iterative_impute_scor": 162, "n_bar": 162, "xval": 162, "domin": [162, 196, 201, 265, 303, 362, 372, 856, 959, 967, 973], "plot_missing_valu": [162, 163], "auto_examples_imput": 163, "prune": [164, 343, 349, 400, 478, 535, 536, 537, 538, 542, 543, 571, 622, 802, 883, 884, 885, 886, 960, 979, 994, 998, 1001, 1008, 1009], "elast": [164, 174, 187, 207, 215, 269, 390, 450, 451, 457, 479, 502, 624, 625, 630, 635, 636, 637, 638, 639, 640, 641, 646, 654, 656, 659, 662, 762, 946, 957, 971, 979, 994, 998, 1003, 1007, 1008], "gram": [164, 174, 215, 368, 396, 399, 467, 502, 526, 566, 567, 568, 569, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 659, 660, 661, 662, 663, 664, 744, 752, 754, 946, 967, 992, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1012], "huberregressor": [164, 174, 202, 215, 502, 648, 649, 650, 656, 657, 953, 1004, 1005, 1006, 1007], "aic": [164, 174, 184, 215, 246, 479, 629, 631, 632, 633, 634, 773, 837, 856, 946, 953, 998, 1005, 1011, 1012], "bic": [164, 174, 184, 215, 400, 479, 629, 631, 632, 633, 634, 773, 837, 856, 946, 953, 956, 998, 1005, 1011, 1012], "mnist": [164, 174, 204, 215, 276, 291, 296, 474, 549, 636, 802, 833, 856, 898, 953, 961], "20newgroup": [164, 174, 215, 467, 549, 636, 802, 953], "ordinari": [164, 174, 175, 198, 199, 201, 213, 215, 309, 613, 624, 630, 632, 633, 634, 635, 650, 656, 660, 661, 665, 971, 979, 994], "spline": [164, 174, 215, 494, 495, 496, 650, 837, 851, 855, 977, 1011], "ransac": [164, 174, 202, 213, 215, 502, 627, 635, 649, 656, 657], "convex": [164, 174, 215, 217, 335, 340, 391, 393, 396, 404, 431, 441, 452, 454, 455, 458, 459, 636, 654, 670, 953, 954, 960, 961, 971, 1011], "theil": [164, 174, 202, 215, 627, 635, 649, 656, 657], "sen": [164, 174, 202, 215, 627, 635, 649, 656, 657], "tweedi": [164, 174, 215, 443, 474, 530, 626, 647, 658, 684, 701, 722, 724, 726, 727, 729, 802, 837, 840, 841, 849, 856, 953, 1008, 1009, 1011], "insur": [164, 174, 196, 215, 443, 474, 530, 626, 647, 658, 684, 722, 727, 729, 802, 837, 840, 841, 849, 856, 953], "claim": [164, 174, 215, 367, 443, 474, 530, 626, 647, 658, 684, 722, 727, 729, 802, 837, 840, 841, 849, 856, 953], "multicollinear": [164, 165, 170, 394, 478, 542, 612, 633, 802, 953, 965], "isomap": [164, 216, 219, 223, 306, 310, 398, 480, 522, 527, 544, 667, 668, 669, 670, 825, 837, 846, 868, 960, 993, 994, 1006, 1008, 1011, 1012, 1013], "And": [164, 216, 223, 256, 339, 374, 385, 391, 395, 399, 508, 566, 567, 569, 670, 671, 953, 957, 975, 1005], "hole": [164, 216, 223, 508, 670, 671, 1012], "perplex": [164, 216, 217, 221, 223, 276, 492, 503, 514, 670, 954, 1003, 1005, 1012], "johnson": [164, 224, 239, 298, 302, 359, 390, 467, 480, 852, 863, 867, 868, 869, 967, 974, 994, 1006, 1012], "lindenstrauss": [164, 224, 239, 359, 390, 467, 480, 867, 868, 869, 974, 994], "halv": [164, 249, 272, 386, 493, 542, 556, 774, 777, 778, 880, 994, 1010], "custom": [164, 235, 249, 257, 272, 278, 306, 321, 326, 337, 339, 341, 359, 362, 365, 368, 373, 374, 375, 377, 378, 379, 390, 391, 392, 395, 401, 447, 467, 471, 472, 480, 482, 516, 518, 525, 527, 549, 551, 580, 668, 691, 774, 802, 840, 873, 880, 941, 946, 951, 957, 960, 977, 978, 981, 992, 994, 998, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1013], "det": [164, 249, 272, 393, 493, 542, 676, 704, 766, 802, 837, 856, 875, 910, 1010], "tsne": [164, 217, 218, 219, 221, 222, 277, 290, 310, 379, 405, 413, 474, 666, 667, 668, 820, 837, 931, 954, 960, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "novelti": [164, 225, 277, 283, 290, 325, 822, 979, 993, 994, 998, 1006], "lof": [164, 225, 234, 277, 290, 541, 822, 879, 963], "boltzmann": [164, 291, 296, 480, 636, 691, 802, 832, 833, 834, 836, 861, 993, 994, 1000], "mlp": [164, 167, 235, 291, 293, 296, 474, 549, 802, 833, 834, 961], "semi_supervis": [164, 308, 310, 313, 314, 315, 316, 317, 318, 319, 357, 958, 970, 999, 1004, 1005, 1012, 1013], "tie": [164, 321, 337, 377, 398, 490, 804, 880, 958, 972, 999], "unbalanc": [164, 259, 321, 337, 395, 490, 880, 900, 901, 946, 971], "featurehash": [164, 338, 340, 342, 356, 362, 399, 443, 466, 559, 566, 567, 568, 569, 849, 999, 1004, 1005, 1006, 1012], "auto_examples_python": 164, "auto_examples_jupyt": 164, "hint": [166, 354, 371, 385, 427, 957, 990], "aris": [166, 259, 334, 355, 371, 391, 693, 953, 954, 1010], "survei": [166, 394], "1985": [166, 391, 683, 693, 763], "educ": [166, 367, 694, 958], "race": [166, 362, 1001], "occup": [166, 298], "sector": 166, "marr": 166, "not_memb": 166, "marri": 166, "freq": [166, 341], "378": [166, 398, 992, 998], "289": 166, "438": [166, 965], "440": 166, "156": [166, 364], "411": [166, 393, 403, 452, 511], "018727": 166, "822097": 166, "833333": 166, "615373": 166, "379710": 166, "726573": 166, "55": [166, 172, 191, 196, 205, 214, 219, 315, 371, 391, 395, 469, 575, 774, 780, 788, 800, 957, 998], "thereaft": [166, 175], "hispan": 166, "manufactur": 166, "unmarri": 166, "dollar": [166, 362], "exploratori": [166, 981], "emul": [166, 374], "train_dataset": [166, 361], "pairplot": 166, "diag_kind": 166, "kde": [166, 280, 281, 289, 397, 821], "rangeindex": 166, "533": 166, "normalis": [166, 589, 992], "numerical_column": [166, 168, 446], "if_binari": [166, 238, 849, 967, 1009], "prepend": [166, 998], "exp10": 166, "ufunc": 166, "passthroughpassthroughtransformedtargetregressor": 166, "transformedtargetregressortransformedtargetregressor": 166, "ridgeridg": 166, "mae_train": 166, "mae_test": 166, "learnt": [166, 350, 379, 395, 946], "obviou": [166, 350, 354, 388, 396], "regressor_": [166, 444, 571, 572, 575], "race_hispan": 166, "013519": 166, "race_oth": 166, "009075": 166, "race_whit": 166, "022594": 166, "occupation_cler": 166, "000045": 166, "occupation_manag": 166, "090528": 166, "occupation_oth": 166, "025102": 166, "occupation_profession": 166, "071964": 166, "occupation_sal": 166, "046636": 166, "occupation_servic": 166, "091053": 166, "sector_construct": 166, "000198": 166, "sector_manufactur": 166, "031255": 166, "sector_oth": 166, "031025": 166, "marr_unmarri": 166, "032405": 166, "union_not_memb": 166, "117154": 166, "sex_mal": 166, "090808": 166, "south_y": 166, "033823": 166, "054699": 166, "035005": 166, "030867": 166, "adimension": 166, "Their": [166, 362, 364, 380, 391, 622, 998], "visibl": [166, 167, 198, 336, 361, 367, 391, 832, 962, 1003], "gaug": 166, "decad": [166, 978], "x_train_preprocess": 166, "multipli": [166, 214, 256, 354, 375, 379, 396, 398, 399, 443, 454, 493, 516, 518, 519, 525, 535, 539, 542, 624, 626, 630, 632, 636, 637, 638, 640, 646, 647, 648, 650, 654, 655, 656, 658, 664, 665, 667, 671, 741, 877, 878, 879, 880, 881, 883, 885, 901, 933, 934, 935, 946, 953, 957, 971, 1009], "coef_i": 166, "std_i": 166, "emphas": [166, 336, 372, 396, 957], "perturb": [166, 213, 295, 396, 398, 956], "caution": [166, 370, 420, 433, 1006], "repeatedkfold": [166, 395, 779, 790, 1005], "cv_model": 166, "return_estim": [166, 395, 799, 1006], "train_idx": [166, 379], "stripplot": 166, "whi": [166, 168], "collinear": [166, 169, 201, 214, 398, 545, 626, 647, 658, 849, 953, 998], "teas": 166, "apart": [166, 309, 326, 377, 379, 392, 394, 400, 702, 972, 981, 1006], "vice": [166, 253, 339, 391, 401, 422, 585, 586, 805, 1002], "versa": [166, 253, 339, 391, 401, 422, 585, 586, 805, 1002], "column_to_drop": 166, "said": [166, 225, 257, 340, 362, 367, 767, 955, 963, 983, 990], "unchang": [166, 214, 263, 398, 413, 422, 423, 425, 426, 428, 443, 447, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 560, 561, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 666, 667, 740, 811, 812, 813, 815, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 867, 868, 873, 960, 983, 1006, 1012], "neglig": [166, 960, 1001], "littl": [166, 167, 168, 169, 225, 362, 399, 441, 622, 774, 788, 912, 947, 954, 956, 972, 973, 990, 999, 1010], "ridgecvridgecv": 166, "alon": [166, 262, 326, 379, 385, 626, 647, 658, 719, 1005, 1007], "suppress": [166, 354, 374, 670, 960, 1005], "themselv": [166, 298, 363, 374, 379, 388, 391, 398, 399, 401, 593, 767, 973, 992, 1008], "bring": [166, 298, 396, 654, 656, 954, 981], "must": [166, 167, 169, 177, 213, 214, 225, 235, 251, 282, 299, 339, 350, 362, 366, 367, 368, 370, 374, 379, 380, 387, 389, 391, 392, 395, 396, 398, 399, 400, 401, 402, 411, 418, 421, 424, 425, 426, 428, 429, 430, 434, 436, 438, 441, 443, 445, 446, 448, 453, 465, 486, 487, 490, 501, 509, 515, 517, 519, 521, 522, 531, 532, 537, 538, 539, 540, 545, 546, 559, 560, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 588, 589, 595, 598, 605, 606, 607, 608, 610, 611, 616, 620, 621, 626, 627, 630, 636, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 677, 681, 684, 687, 712, 723, 741, 748, 751, 755, 758, 765, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 779, 781, 783, 784, 786, 788, 789, 790, 792, 793, 795, 802, 811, 812, 813, 814, 815, 818, 819, 820, 822, 824, 825, 826, 827, 828, 831, 832, 833, 834, 836, 839, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 875, 876, 877, 878, 879, 880, 881, 882, 925, 932, 941, 943, 946, 947, 953, 954, 955, 957, 960, 961, 963, 964, 971, 972, 973, 983, 992, 998, 1001, 1005, 1009, 1011, 1012], "proxi": [166, 396, 832, 987, 1003], "respond": [166, 367, 391], "plot_linear_model_coefficient_interpret": [166, 170], "complement": [167, 266, 339, 610, 611, 776, 791, 794, 802, 811, 812, 813, 814, 815, 964, 979, 994, 1006], "molnar": [167, 964], "christoph": [167, 396, 401, 510, 588, 589, 592, 597, 600, 772, 953, 958, 999, 1003, 1006, 1009, 1010, 1011, 1012, 1013], "goldstein": [167, 964], "kapeln": [167, 964], "bleich": [167, 964], "pitkin": [167, 964], "peek": [167, 367, 964], "settingwithcopywarn": 167, "8734": 167, "8645": 167, "mask_train": [167, 214], "accordingli": [167, 367, 370, 371, 1005, 1006, 1013], "8644": 167, "574": [167, 512, 519], "nomin": [167, 361, 379, 380, 398, 399, 559, 560, 694, 967, 978], "numerical_featur": 167, "xtick_start": 167, "xtick_period": 167, "average_bike_rent": 167, "numeric_onli": 167, "decor": [167, 306, 367, 368, 375, 780, 902, 906, 907, 919, 920, 1008, 1011], "strike": 167, "mlp_preprocessor": 167, "quantiletransformerquantiletransform": 167, "catindex": 167, "hgbdt_preprocessor": 167, "sparse_threshold": [167, 443, 446, 1006], "passthroughpassthrough": 167, "pdp": [167, 610, 964, 1012], "mlp_model": 167, "hidden_layer_s": [167, 235, 292, 294, 833, 834, 961], "learning_rate_init": [167, 293, 294, 833, 834], "early_stop": [167, 204, 292, 309, 339, 379, 398, 539, 540, 644, 645, 646, 654, 655, 656, 833, 834, 971, 1006, 1009, 1012, 1013], "588": 167, "forget": [167, 350, 355, 361, 370, 377, 396, 954, 980], "poor": [167, 172, 262, 271, 317, 389, 395, 396, 668, 672, 715, 813, 816, 817, 951, 952, 954, 959, 978, 983, 1005, 1006, 1007, 1009, 1011], "grid_resolut": [167, 308, 324, 609, 610, 611], "features_info": 167, "209": [167, 330, 337, 718, 852], "hgbdt_model": 167, "338": [167, 276, 329, 337], "cheaper": [167, 391, 401, 651, 949, 953], "temperatur": [167, 399, 964], "wind": [167, 958], "earlier": [167, 361, 367, 394, 807, 810, 967, 975, 996, 999, 1011, 1013], "meaningless": [167, 399, 877, 880, 1001], "308": [167, 613], "celsiu": [167, 964], "interaction_cst": [167, 311, 398, 539, 540, 1013], "hgbdt_model_without_interact": 167, "histgradientboostingregressor__interaction_cst": 167, "heatmap": [167, 169, 175, 267, 311, 326, 610, 964], "027": [167, 364], "slope": [167, 194, 198, 213, 389, 391, 700, 725, 955, 957], "dry": 167, "wetter": 167, "164": [167, 398], "spike": 167, "degrad": [167, 225, 298, 340, 397], "somehow": 167, "forbidden": [167, 398], "noisili": 167, "710": [167, 389], "partial_depend": [167, 610, 964, 999, 1007, 1008, 1009, 1010, 1013], "add_ax": [167, 221, 267], "surf": 167, "rstride": 167, "cstride": 167, "bupu": 167, "nthe": [167, 254, 348], "pretti": [167, 221, 254, 339, 354, 367, 377, 833, 834, 961, 1007], "view_init": [167, 217, 219, 221], "clb": 167, "ndepend": 167, "782": [167, 170], "plot_partial_depend": [167, 170, 306, 307, 308, 1003, 1007, 1008, 1009, 1010, 1011, 1012], "mitig": [168, 355, 356, 954, 973, 990, 991, 1010], "breiman": [168, 395, 398, 494, 495, 496, 533, 534, 542, 543, 612, 883, 884, 965, 973], "random_num": 168, "random_cat": 168, "sibsp": [168, 311], "parch": [168, 311], "categorical_encod": 168, "numerical_pip": 168, "memor": 168, "814": [168, 990], "mdi_import": 168, "sorted_importances_idx": 168, "retri": [168, 474, 1006, 1012], "classifier__min_samples_leaf": 168, "anymor": [168, 196, 258, 306, 307, 326, 350, 370, 392, 648, 1004, 1007, 1010, 1011, 1012], "810": 168, "832": [168, 218, 223, 398, 533, 534], "train_result": 168, "test_result": 168, "train_import": 168, "test_import": 168, "581": [168, 170, 172], "plot_permutation_import": [168, 170], "wisconsin": [169, 360, 478, 994, 1003], "spearman": [169, 613, 614, 948], "spearmanr": 169, "squareform": 169, "load_breast_canc": [169, 317, 344, 371, 570, 573, 574, 576, 652, 653, 765, 957, 1003, 1004, 1009], "012": [169, 172], "contradict": [169, 978], "perm_sorted_idx": 169, "tree_importance_sorted_idx": 169, "tree_indic": 169, "fill_diagon": [169, 220], "distance_matrix": 169, "dist_linkag": 169, "dendro": 169, "leaf_rot": 169, "dendro_idx": 169, "ivl": 169, "cluster_id": [169, 340], "fcluster": 169, "cluster_id_to_feature_id": 169, "selected_featur": 169, "x_train_sel": 169, "x_test_sel": 169, "clf_sel": 169, "plot_permutation_importance_multicollinear": [169, 170], "717": [170, 340], "auto_examples_inspect": 170, "polynomialcountsketch": [172, 617, 619, 949, 1010, 1012], "covtyp": 172, "tensor": [172, 359, 396, 516, 518, 525, 617, 618, 619, 994, 1010], "sketch": [172, 356, 359, 375, 390, 617, 618, 619, 924, 994, 1010], "daniel": [172, 311, 354, 981, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1012], "lopez": 172, "sanchez": [172, 1006, 1007], "lope": 172, "usal": 172, "54": [172, 196, 199, 215, 362, 364, 391, 469, 999, 1000], "cartograph": 172, "remot": [172, 315, 367, 369], "fetch_covtyp": [172, 234, 308, 362, 1007, 1010, 1012], "5_000": 172, "mm": 172, "lsvm": 172, "lsvm_time": 172, "lsvm_score": 172, "thumb": [172, 354, 367, 377, 391, 636, 637, 644, 646, 654, 655, 656, 875, 957], "condens": 172, "compact": [172, 298, 354, 364, 816, 817, 973, 1000], "ps_lsvm_time": 172, "ps_lsvm_score": 172, "ksvm": 172, "ksvm_time": 172, "ksvm_score": 172, "pham": [172, 949, 1005], "ninh": 172, "rasmu": [172, 1005], "pagh": [172, 949], "kdd": [172, 362, 389, 417, 969], "doi": [172, 196, 214, 367, 391, 654], "1145": [172, 391, 654], "2487575": 172, "2487591": 172, "csie": [172, 361, 465, 486, 487, 636], "ntu": [172, 361, 465, 486, 487, 636], "tw": [172, 361, 465, 486, 487, 636, 972], "cjlin": [172, 361, 465, 486, 487, 636, 1001], "libsvmtool": [172, 361, 465, 486, 487], "801": [172, 173], "plot_scalable_poly_kernel": [172, 173], "auto_examples_kernel_approxim": 173, "ard": [175, 622, 623], "ol": [175, 186, 191, 193, 194, 202, 213, 309, 634, 953], "true_weight": 175, "ardregress": [175, 623, 953, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "olr": 175, "brr": 175, "symlognorm": 175, "linthresh": 175, "10e": 175, "cbar_kw": 175, "seismic_r": 175, "stabilis": 175, "sparser": [175, 187, 396, 450, 457, 517, 521, 953, 960, 971], "retain": [175, 379, 391, 394, 395, 399, 472, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 673, 674, 792, 849, 946, 970, 998], "ard_scor": 175, "scores_": [175, 176, 570, 573, 574, 576, 577, 578, 622, 623, 637, 998, 1008], "brr_score": 175, "cutoff": [175, 917, 967, 1007], "full_data": 175, "input_featur": [175, 368, 379, 407, 411, 422, 423, 425, 426, 428, 443, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868], "x_plot": [175, 197, 202, 231, 259, 281], "y_plot": [175, 197, 202, 259], "ard_poli": 175, "brr_poli": 175, "y_ard": 175, "y_ard_std": 175, "y_brr": 175, "y_brr_std": 175, "queri": [175, 289, 354, 370, 397, 402, 424, 429, 436, 530, 588, 589, 606, 622, 623, 703, 733, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 957, 960, 973, 977, 1000, 1002, 1003, 1006], "lambda_init": [175, 176, 623, 953, 1008], "intrins": [175, 379, 396, 398, 960, 965, 971, 1010], "plot_ard": [175, 215, 622], "alpha_init": [176, 623, 953, 1008], "conclud": [176, 214, 256, 341, 350, 380], "yoshihiro": [176, 1008], "uchida": [176, 1008], "nimbus1after2a1sun7show": 176, "1234": [176, 244, 259, 367], "n_order": 176, "vander": 176, "ymean": 176, "ystd": 176, "pink": 176, "_init": 176, "lambda_": [176, 622, 623, 852, 953, 1005], "229": [176, 215, 957], "plot_bayesian_ridge_curvefit": [176, 215], "normalized_weight": 177, "x_offset": 177, "x_center": 177, "x_scale": [177, 846, 861, 967], "uncent": 177, "incorrectli": [177, 398, 399, 531, 537, 539, 711, 717, 957, 999, 1004, 1006, 1007, 1009], "lm": 177, "98809919e": 177, "48938813e": 177, "03237920e": 177, "25349312e": 177, "53959628e": 177, "67451144e": 177, "00768662e": 177, "19112072e": 177, "07963978e": 177, "47987268e": 177, "76195467e": 177, "00393284e": 177, "07582983e": 177, "66670169e": 177, "65799352e": 177, "99891212e": 177, "58195950e": 177, "58667835e": 177, "98350372e": 177, "60836363e": 177, "00911944e": 177, "elasticnetelasticnet": 177, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [177, 215], "huber": [178, 206, 390, 398, 538, 627, 654, 656, 971, 998, 1000, 1001, 1010], "mks542": 178, "x_outlier": [178, 210, 282, 283, 325], "y_outlier": 178, "epsilon_valu": 178, "intercept_": [178, 186, 188, 205, 232, 324, 331, 335, 368, 379, 460, 461, 462, 527, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 875, 876, 877, 878, 879, 880, 881, 951, 953, 971, 972, 998, 1005, 1010, 1012], "coef_ridg": 178, "plot_huber_vs_ridg": [178, 215], "logreg": [179, 810], "plot_method": [179, 279, 284, 322, 324, 327, 328, 609], "plot_iris_logist": [179, 215], "y_pred_lasso": 180, "r2_score_lasso": 180, "658064": 180, "enet": [180, 269], "y_pred_enet": 180, "r2_score_enet": 180, "642515": 180, "markerfmt": 180, "2ca02c": 180, "ff7f0e": 180, "bx": 180, "plot_lasso_and_elasticnet": [180, 215], "penalis": [181, 194, 211, 674], "lasso_path": [181, 629, 630, 631, 632, 633, 634, 641, 660, 661, 953, 998, 1000, 1002, 1011], "enet_path": [181, 379, 625, 1000, 1002, 1011], "alphas_lasso": 181, "coefs_lasso": 181, "alphas_positive_lasso": 181, "coefs_positive_lasso": 181, "alphas_enet": 181, "coefs_enet": 181, "alphas_positive_enet": 181, "coefs_positive_enet": 181, "neg_log_alphas_lasso": 181, "neg_log_alphas_enet": 181, "coef_l": 181, "neg_log_alphas_positive_lasso": 181, "coef_pl": 181, "neg_log_alphas_positive_enet": 181, "coef_p": 181, "plot_lasso_coordinate_descent_path": [181, 215, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662], "sai": [182, 225, 334, 339, 340, 367, 391, 392, 396, 398, 399, 426, 478, 482, 488, 655, 946, 963, 970, 981, 989, 990, 992], "x_sp": 182, "sparse_lasso": 182, "dense_lasso": 182, "coeff_diff": 182, "2e": [182, 270], "107": [182, 184, 215, 311, 391, 870, 958, 1000], "035": 182, "01e": 182, "xs_sp": 182, "tocsc": 182, "nnz": [182, 340, 362, 677], "65e": 182, "plot_lasso_dense_vs_sparse_data": [182, 215], "lars_path": [183, 375, 509, 515, 517, 520, 521, 523, 524, 526, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 661, 662, 663, 664, 953, 998, 1000, 1003, 1007, 1009], "086": [183, 215, 219], "plot_lasso_lar": [183, 215], "zht2007": 184, "lassolars": [184, 185, 400, 629, 632, 633, 953, 998, 1005, 1007, 1011, 1012], "2173": [184, 634, 953], "2192": [184, 634, 953], "038076": [184, 185], "050680": [184, 185], "061696": [184, 185], "021872": [184, 185], "044223": [184, 185], "034821": [184, 185], "043401": [184, 185], "002592": [184, 185], "019907": [184, 185], "017646": [184, 185], "001882": [184, 185], "044642": [184, 185], "051474": [184, 185], "026328": [184, 185], "008449": [184, 185], "019163": [184, 185], "074412": [184, 185], "039493": [184, 185], "068332": [184, 185], "092204": [184, 185], "085299": [184, 185], "044451": [184, 185], "005670": [184, 185], "045599": [184, 185], "034194": [184, 185], "032356": [184, 185], "002861": [184, 185], "025930": [184, 185], "089063": [184, 185], "011595": [184, 185], "036656": [184, 185], "012191": [184, 185], "024991": [184, 185], "036038": [184, 185], "034309": [184, 185], "022688": [184, 185], "009362": [184, 185], "005383": [184, 185], "036385": [184, 185], "003935": [184, 185], "015596": [184, 185], "008142": [184, 185], "031988": [184, 185], "046641": [184, 185], "linearlars": 184, "akaik": [184, 185, 246, 634, 773, 946, 953], "lasso_lars_": [184, 185], "mathemat": [184, 213, 259, 359, 364, 367, 379, 381, 390, 393, 396, 397, 527, 528, 535, 542, 613, 624, 634, 767, 768, 773, 834, 877, 880, 883, 885, 957, 967, 969, 979, 981, 990, 994, 1012], "zou_et_al_criterion_resc": 184, "noise_vari": [184, 510, 634, 953, 1012], "aic_criterion": 184, "criterion_": [184, 185, 634], "index_alpha_path_a": 184, "alphas_": [184, 185, 625, 628, 629, 631, 632, 633, 634, 639, 641, 660, 661, 998, 1001, 1011], "lassolarsic__criterion": [184, 185], "bic_criterion": 184, "index_alpha_path_b": 184, "plot_lasso_lars_": [184, 215], "n_random_featur": 185, "x_random": 185, "random_": 185, "02d": 185, "random_02": 185, "random_05": 185, "random_08": 185, "random_11": 185, "647689": 185, "234137": 185, "469474": 185, "465730": 185, "012831": 185, "412304": 185, "067528": 185, "110923": 185, "601707": 185, "057711": 185, "208864": 185, "196861": 185, "478522": 185, "057122": 185, "324084": 185, "611676": 185, "331263": 185, "185659": 185, "812526": 185, "003533": 185, "alpha_a": 185, "alpha_b": 185, "160030": 185, "5244": 185, "764779": 185, "300343": 185, "5208": 185, "250639": 185, "5212": 185, "341949": 185, "542052": 185, "4928": 185, "018900": 185, "4936": 185, "201520": 185, "034077": 185, "4869": 185, "678359": 185, "4881": [185, 1003], "952289": 185, "189631": 185, "4815": 185, "437362": 185, "4831": [185, 633], "802601": 185, "329616": 185, "4810": 185, "423641": 185, "4830": 185, "880191": 185, "306012": 185, "4803": 185, "573491": 185, "4828": 185, "121351": 185, "124225": 185, "4804": 185, "126502": 185, "4832": 185, "765671": 185, "820705": 185, "621645": 185, "4836": 185, "352124": 185, "750389": 185, "4805": 185, "012521": 185, "4841": 185, "834310": 185, "570655": 185, "290075": 185, "4846": 185, "203174": 185, "550213": 185, "4807": 185, "075887": 185, "4852": 185, "080295": 185, "358295": 185, "4806": 185, "878051": 185, "4855": 185, "973770": 185, "259297": 185, "706026": 185, "4860": 185, "893055": 185, "237703": 185, "4809": [185, 259], "440409": 185, "4866": 185, "718747": 185, "850031": 185, "989341": 185, "4867": 185, "358990": 185, "384338": 185, "4801": 185, "702266": 185, "163224": 185, "296575": 185, "4802": 185, "594754": 185, "4872": 185, "147022": 185, "031555": 185, "236720": 185, "4874": 185, "880298": 185, "618263": 185, "4798": 185, "484109": 185, "4876": 185, "218997": 185, "526599": 185, "4799": 185, "543841": 185, "370039": 185, "586798": 185, "4794": 185, "238744": 185, "4880": 185, "156252": 185, "445978": 185, "4795": 185, "589715": 185, "4885": 185, "598533": 185, "259031": 185, "4796": 185, "966981": 185, "4891": 185, "067109": 185, "032179": 185, "662409": 185, "4894": 185, "853846": 185, "019069": 185, "652739": 185, "4888": 185, "752867": 185, "626286": 185, "817724": 185, "set_xscal": [185, 200, 201], "optimist": [185, 261, 339, 350, 685, 953, 957], "proper": [185, 214, 356, 398, 419, 428, 519, 531, 654, 912, 932, 952, 953, 954, 957, 972, 998, 1008, 1009, 1010, 1011, 1012], "badli": [185, 196, 339, 356, 856, 953, 967], "lassolarscv": [185, 400, 630, 631, 632, 634, 641, 643, 660, 661, 662, 953, 998, 1005, 1011], "3800": 185, "mse_path_": [185, 625, 629, 631, 633, 639, 641], "cv_alphas_": [185, 629, 633, 1010], "kink": 185, "heavili": [185, 354, 355, 367, 374, 627, 633, 974], "efficaci": 185, "plot_lasso_model_select": [185, 215, 625, 631], "093": [186, 215, 450, 1003], "plot_logist": [186, 215], "38": [187, 195, 250, 265, 281, 303, 398, 515, 610, 957, 967, 998, 999, 1000], "axes_row": 187, "clf_l1_lr": 187, "clf_l2_lr": 187, "clf_en_lr": 187, "coef_l1_lr": 187, "coef_l2_lr": 187, "coef_en_lr": 187, "sparsity_l1_lr": 187, "sparsity_l2_lr": 187, "sparsity_en_lr": 187, "nl1_ratio": 187, "523": [187, 215], "plot_logistic_l1_l2_spars": [187, 215], "995": 188, "plot_logistic_multinomi": [188, 215], "976": 188, "dupr": [188, 204, 276, 278, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "m4x": [188, 212], "sag": [188, 203, 636, 637, 650, 652, 665, 953, 971, 977, 1003, 1004, 1005, 1007, 1008], "bry": [188, 205], "classes_": [188, 205, 226, 265, 314, 315, 367, 368, 379, 417, 418, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 547, 571, 572, 588, 636, 637, 644, 646, 652, 653, 654, 675, 678, 680, 765, 774, 777, 778, 788, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 818, 823, 826, 833, 836, 843, 844, 847, 870, 871, 872, 875, 877, 880, 883, 885, 957, 968, 971, 999, 1002, 1003, 1005, 1008, 1010], "plot_hyperplan": [188, 205, 232], "looser": 189, "liblinear": [189, 324, 372, 636, 637, 765, 875, 876, 877, 880, 881, 957, 972, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "l1_min_c": [189, 953, 972, 998], "intercept_sc": [189, 636, 637, 875, 876, 882, 953], "coefs_": [189, 294, 833, 834, 961, 1003], "plot_logistic_path": [189, 215], "jointli": [190, 263, 390, 391, 396, 953], "instant": 190, "wave": [190, 367, 956], "n_task": [190, 953], "n_relevant_featur": 190, "multitasklasso": [190, 630, 638, 641, 953, 998, 1006, 1009, 1011], "coef_lasso_": 190, "coef_multi_task_lasso_": 190, "spy": 190, "feature_to_plot": 190, "seagreen": 190, "262": [190, 215, 296, 998], "plot_multi_task_lasso_support": [190, 215], "true_coef": 191, "reg_nnl": 191, "y_pred_nnl": 191, "r2_score_nnl": 191, "nnl": [191, 635], "8225220806196526": 191, "reg_ol": 191, "y_pred_ol": 191, "r2_score_ol": 191, "7436926291700356": 191, "low_x": 191, "high_x": 191, "low_i": 191, "high_i": 191, "get_ylim": [191, 298, 299], "847222222222214": 191, "070": [191, 215], "plot_nnl": [191, 215], "938": [192, 762, 957, 987], "23786125": 192, "2548": 192, "diabetes_x": [192, 990], "diabetes_i": [192, 990], "diabetes_x_train": [192, 990], "diabetes_x_test": [192, 990], "diabetes_y_train": [192, 990], "diabetes_y_test": [192, 990], "regr": [192, 392, 532, 534, 543, 624, 625, 645, 809, 834, 876, 878, 881, 972, 990], "diabetes_y_pr": 192, "041": [192, 215], "plot_ol": [192, 215], "plot_ols_3d": [193, 215], "great": [194, 350, 367, 377, 396, 741, 978, 981, 998, 1005], "greatli": [194, 230, 311, 367, 374, 431, 960, 973, 1004, 1012], "217": [194, 215, 513, 519], "plot_ols_ridge_vari": [194, 215], "orthogonalmatchingpursuit": [195, 643, 663, 664, 953, 998, 1000, 1003, 1006, 1011], "orthogonalmatchingpursuitcv": [195, 642, 1000, 1011], "make_sparse_coded_sign": [195, 509, 515, 1012], "512": 195, "n_nonzero_coef": [195, 504, 509, 515, 520, 526, 628, 642, 663, 664], "xw": [195, 309, 624, 625, 627, 630, 631, 632, 633, 634, 638, 639, 640, 641, 650, 659, 660, 661, 662, 953], "_0": [195, 663, 953, 957, 972], "data_transpos": [195, 504, 509, 515, 1012], "distort": [195, 229, 364, 389, 390, 853, 864, 869, 954, 967, 969], "y_noisi": 195, "idx_r": 195, "omp_cv": 195, "plot_omp": [195, 215], "gbrt": [196, 398], "polici": [196, 214, 379, 513, 519, 953, 1013], "contract": [196, 214, 355, 379, 978], "compani": [196, 214, 391, 981], "policyhold": [196, 214, 953], "vehicl": [196, 214], "driver": [196, 214, 1013], "exposur": [196, 214, 953], "accid": [196, 214], "noll": [196, 214], "salzmann": [196, 214], "wuthrich": [196, 214], "novemb": [196, 214, 364, 1003, 1004, 1006], "2139": [196, 214], "ssrn": [196, 214], "3164764": [196, 214], "ch": [196, 198, 214, 317, 319], "rth": [196, 214], "41214": [196, 214], "idpol": [196, 214], "claimnb": [196, 214], "vehpow": [196, 214], "vehag": [196, 214], "drivag": [196, 214], "bonusmalu": [196, 214], "vehbrand": [196, 214], "vehga": [196, 214], "b12": [196, 214], "1217": 196, "r82": 196, "77000": 196, "75000": 196, "diesel": [196, 214], "r22": 196, "09000": 196, "r72": 196, "84000": 196, "678008": 196, "6114326": 196, "00274": 196, "3317": 196, "r93": 196, "678009": 196, "6114327": 196, "9850": 196, "r11": [196, 214], "678010": 196, "6114328": 196, "1323": 196, "678011": 196, "6114329": 196, "r26": 196, "678012": 196, "6114330": 196, "678013": [196, 214], "10070308464041304": 196, "log_scale_transform": [196, 214], "linear_model_preprocessor": 196, "passthrough_numer": [196, 214], "binned_numer": [196, 214], "2e5": [196, 214, 841], "log_scaled_numer": [196, 214], "onehot_categor": [196, 214], "imbalanc": [196, 259, 263, 265, 340, 377, 389, 395, 681, 686, 764, 775, 779, 813, 957, 959, 965, 977], "simplist": [196, 399], "pertin": 196, "dummyregressor": [196, 214, 529, 957, 999, 1001, 1002, 1005, 1006, 1008, 1011, 1012], "df_train": [196, 214], "df_test": [196, 214], "regressor__sample_weight": 196, "mean_absolute_error": [196, 198, 214, 957, 999, 1001], "mean_poisson_devi": [196, 957, 1008], "score_estim": [196, 214], "n_mask": 196, "564": 196, "189": [196, 372, 872, 970], "comonli": 196, "ridge_glm": 196, "strictli": [196, 214, 298, 340, 371, 379, 394, 396, 399, 486, 487, 513, 519, 522, 539, 540, 566, 569, 620, 648, 649, 673, 678, 716, 774, 777, 778, 784, 788, 799, 825, 852, 863, 867, 868, 870, 871, 875, 876, 880, 881, 910, 946, 948, 953, 957, 967, 971, 999, 1009], "domain": [196, 379, 381, 395, 613, 699, 700, 701, 775, 776, 781, 782, 783, 953, 978], "186": [196, 295, 372, 765, 957], "595": 196, "223745": 196, "597": [196, 340], "glm": [196, 214, 307, 626, 647, 658, 953, 998, 1009], "vanilla": [196, 391, 426, 428, 439, 607], "poissonregressor": [196, 214, 307, 310, 626, 658, 953, 1009, 1012, 1013], "poisson_glm": 196, "newton": [196, 214, 295, 588, 626, 636, 637, 647, 658, 833, 834, 953, 1002, 1003, 1005, 1009, 1010, 1011, 1012, 1013], "deep": [196, 368, 379, 405, 414, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 746, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 961, 962, 977, 978, 981, 1003, 1009, 1010, 1012], "implicit": [196, 379, 398, 399, 550, 660, 661, 951, 956, 977, 1007], "concis": [196, 371, 1009, 1011], "poisson_gbrt": 196, "prone": [196, 243, 302, 377, 389], "set_yscal": 196, "5e5": 196, "realiz": [196, 981], "priori": [196, 213, 265, 274, 298, 379, 391, 398, 566, 572, 956], "wrongli": [196, 326], "gen_even_slic": [196, 375, 915], "_mean_frequency_by_risk_group": 196, "y_true_bin": 196, "y_pred_bin": 196, "idx_sort": 196, "sl": 196, "y_true_seg": 196, "y_pred_seg": 196, "11935": 196, "11933": 196, "11932": 196, "12196": 196, "11931": 196, "portfolio": [196, 214, 951], "riskiest": [196, 214], "safest": [196, 214, 350, 361], "irrespect": [196, 229, 265, 584], "lorenz": [196, 214, 1003], "summar": [196, 247, 263, 265, 341, 367, 368, 381, 398, 499, 636, 672, 684, 685, 953, 954, 957, 963], "gini": [196, 214, 236, 268, 308, 531, 532, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 946, 965, 973, 1006, 1007], "lorenz_curv": [196, 214], "ranked_frequ": 196, "ranked_exposur": [196, 214], "cumulated_claim": 196, "cumulated_exposur": 196, "cum_exposur": 196, "cum_claim": [196, 214], "0x7f50c98412e0": 196, "worst": [196, 364, 391, 426, 686, 706, 707, 760, 761, 764, 767, 768, 801, 957, 981, 998, 1011], "occurr": [196, 340, 341, 362, 367, 391, 399, 547, 548, 559, 567, 568, 595, 605, 606, 607, 608, 760, 811, 839, 959, 999, 1004], "circumstanti": 196, "extractor": [196, 295, 356, 362, 379, 399, 481, 946, 998], "discrim": 196, "profil": [196, 354, 367, 369, 499, 502, 953, 981], "ideal": [196, 198, 214, 253, 256, 263, 265, 266, 350, 366, 367, 370, 371, 374, 377, 379, 703, 733, 946, 956, 971, 972, 978], "meaningfulli": [196, 957], "731": [196, 215], "plot_poisson_regression_non_normal_loss": [196, 215], "monomi": 197, "vandermond": [197, 967], "x_0": [197, 635], "pseudo": [197, 295, 368, 395, 403, 420, 431, 433, 441, 448, 449, 450, 452, 453, 454, 455, 511, 539, 540, 541, 605, 612, 617, 619, 620, 624, 625, 630, 631, 638, 639, 640, 641, 655, 669, 673, 777, 778, 786, 788, 825, 832, 867, 868, 872, 875, 876, 877, 880, 911, 912, 953, 969, 1003, 1012], "consecut": [197, 389, 395, 399, 423, 426, 428, 429, 431, 435, 438, 441, 515, 516, 517, 524, 580, 623, 644, 645, 646, 654, 655, 656, 772, 773, 779, 811, 812, 813, 814, 815, 833, 834, 946, 967, 992, 1006], "basis_1": 197, "basis_2": 197, "infinit": [197, 241, 259, 354, 401, 600, 601, 755, 772, 893, 895, 896, 949, 956, 967, 972, 1006, 1008, 1011, 1012, 1013], "malt": [197, 1011, 1012, 1013], "londschien": [197, 1011], "prepar": [197, 339, 354, 368, 369, 372, 374, 973, 981, 1006], "set_prop_cycl": 197, "teal": [197, 206, 263], "yellowgreen": [197, 199, 206, 346], "tomato": 197, "unwant": [197, 339], "oscillatori": [197, 967], "danger": [197, 395], "pft": 197, "splt": 197, "bsplines_": [197, 855], "refrain": [197, 367], "dec": [197, 655, 855, 879, 972], "31st": [197, 855], "advis": [197, 350, 367, 391, 399, 417, 624, 630, 632, 638, 640, 650, 665, 949, 953, 959, 961, 972, 1012], "x_plot_ext": 197, "y_plot_ext": 197, "plot_polynomial_interpol": [197, 215, 851, 855], "pareto": 198, "dale": [198, 1011], "mail": [198, 303, 362, 367, 370, 374, 377, 380, 975, 1006, 1007], "ru": 198, "glemaitre58": 198, "y_true_mean": 198, "y_normal": 198, "y_pareto": 198, "huge": [198, 201, 354, 372, 605, 1001], "heavi": [198, 388, 978], "sp_version": [198, 648], "parse_vers": [198, 648], "incompat": [198, 370, 474, 947, 1006, 1007], "older": [198, 366, 370, 1001, 1008, 1010], "recent": [198, 357, 365, 370, 371, 374, 379, 382, 391, 447, 516, 543, 957, 971, 981, 1001, 1010], "interior": [198, 648, 953, 1013], "out_bounds_predict": 198, "bool_": 198, "logical_or": [198, 204, 265, 372], "hit": [198, 372], "wider": [198, 399, 888, 953], "asymmetri": [198, 339], "linger": 198, "linear_regress": [198, 270], "quantile_regress": 198, "y_pred_lr": 198, "y_pred_qr": 198, "486": 198, "670": 198, "cv_results_lr": 198, "cv_results_qr": 198, "test_neg_mean_squared_error": [198, 799], "732": 198, "690": 198, "679": [198, 875], "129": [198, 988, 998], "plot_quantile_regress": [198, 215], "robustli": [199, 390], "faulti": [199, 998], "1903908407869": 199, "17236387": 199, "08533159": 199, "ransacregressor": [199, 202, 213, 627, 656, 657, 953, 1001, 1003, 1004, 1005, 1006, 1009, 1011, 1012], "inlier_mask": 199, "inlier_mask_": [199, 649], "outlier_mask": 199, "line_x": [199, 213], "line_i": 199, "line_y_ransac": 199, "estimator_": [199, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 571, 572, 575, 649, 941, 1013], "plot_ransac": [199, 215], "regularis": [200, 404, 452, 454], "eventu": [200, 244, 390, 391, 400, 571, 981], "simpler": [200, 214, 326, 354, 366, 391, 396, 953, 958, 990, 1003], "stronger": [200, 257, 621, 630, 636, 637, 650, 651, 652, 653, 654, 656, 665], "kornel": [200, 1004], "kielczewski": [200, 1004], "plusnet": 200, "369": [200, 215], "plot_ridge_coeff": [200, 215], "certain": [201, 213, 256, 276, 302, 350, 362, 363, 370, 381, 391, 396, 400, 616, 627, 631, 636, 641, 662, 841, 875, 946, 949, 953, 954, 957, 958, 961, 967, 972, 983, 987, 1003, 1007, 1010], "practis": 201, "maintain": [201, 214, 217, 256, 355, 357, 366, 369, 372, 373, 374, 377, 379, 380, 382, 391, 398, 420, 422, 845, 846, 852, 853, 856, 860, 863, 864, 866, 953, 954, 967, 978, 983, 994], "10x10": 201, "hilbert": [201, 842, 949, 967], "n_alpha": [201, 451, 624, 625, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 651, 653, 659, 660, 661, 662, 1001], "191": [201, 215, 299, 304, 372, 958], "plot_ridge_path": [201, 215], "theilsen": 202, "lessen": [202, 636, 637, 875, 876], "theilsenregressor": [202, 213, 627, 649, 656, 953, 1002, 1010, 1012], "x_error": 202, "y_errors_larg": 202, "x_errors_larg": 202, "deviant": [202, 963], "legend_titl": 202, "nabsolut": 202, "nto": [202, 265], "018": [202, 215, 256, 451], "plot_robust_fit": [202, 215], "asgd": [203, 971], "rob": [203, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1010, 1013], "zinkov": [203, 998, 999, 1000, 1002, 1003], "heldout": 203, "squared_hing": [203, 334, 644, 654, 875, 882, 953], "0e4": 203, "yy_": 203, "843": [203, 215], "plot_sgd_comparison": [203, 215], "monitor": [204, 369, 379, 531, 532, 537, 538, 539, 540, 961, 1001, 1006, 1008, 1010], "_test": [204, 276, 300, 368, 1011], "ignore_warn": [204, 300, 1004], "load_mnist": [204, 276], "class_0": [204, 364, 488], "class_1": [204, 364, 488], "554": [204, 212, 294], "mnist_784": [204, 212, 276, 294], "fit_and_scor": 204, "train_scor": [204, 271, 334, 344, 780, 799, 800, 803, 952], "estimator_dict": 204, "flush": 204, "results_df": [204, 256], "group_df": 204, "plot_sgd_early_stop": [204, 215], "ova": [205, 644, 646, 654, 971], "plot_sgd_iri": [205, 215], "ugli": [205, 279, 284, 287, 322], "modified_huber_loss": 206, "darkorchid": 206, "106": [206, 215, 238, 364, 852, 951, 999], "plot_sgd_loss_funct": [206, 215], "l1_color": 207, "l2_color": 207, "elastic_net_color": 207, "1001": 207, "rho": [207, 396, 655, 953, 971, 999], "elastic_net": 207, "dpi": [207, 889, 1011], "elastic_net_contour": 207, "l2_contour": 207, "l1_contour": 207, "inlin": [207, 367, 973], "264": [207, 215, 276], "plot_sgd_penalti": [207, 215], "ndenumer": 208, "plot_sgd_separating_hyperplan": [208, 215], "no_weight": 209, "samples_weight": 209, "no_weights_handl": 209, "weights_handl": 209, "plot_sgd_weighted_sampl": [209, 215], "sgdoneclasssvm": [210, 225, 309, 879, 963, 971, 1011, 1013], "rc": [210, 370], "novel": [210, 282, 325, 350, 389, 946], "abnorm": [210, 225, 282, 325, 362, 470, 541, 822, 963, 1006], "y_pred_train": [210, 325], "y_pred_test": [210, 282, 325], "y_pred_outli": [210, 282, 325], "n_error_train": [210, 325], "n_error_test": [210, 282, 325], "n_error_outli": [210, 282, 325], "clf_sgd": 210, "pipe_sgd": 210, "y_pred_train_sgd": 210, "y_pred_test_sgd": 210, "y_pred_outliers_sgd": 210, "n_error_train_sgd": 210, "n_error_test_sgd": 210, "n_error_outliers_sgd": 210, "z_sgd": 210, "pubu": [210, 229, 282, 325], "darkr": [210, 282, 325], "palevioletr": [210, 282, 325], "b1": [210, 282, 325], "b2": [210, 282, 325], "blueviolet": [210, 282, 325], "plot_sgdocsvm_vs_ocsvm": [210, 215], "newgroups20": 211, "trim": [211, 816, 817], "20newsgroup": [211, 360, 998], "4500": 211, "130107": [211, 229, 467], "epoch": [211, 379, 514, 644, 645, 646, 654, 655, 656, 833, 834, 971, 1005, 1006, 1011], "5960": 211, "26593496": 211, "43348936": 211, "26362917": 211, "31973683": 211, "37815029": 211, "2928359": 211, "27054655": 211, "62717609": 211, "19522393": 211, "30897646": 211, "34586917": 211, "28207552": 211, "34125758": 211, "29898468": 211, "34279478": 211, "59489497": 211, "38353048": 211, "35278655": 211, "19829832": 211, "14603365": 211, "6440": 211, "36047253": 211, "1268187": 211, "10606655": 211, "17985197": 211, "5395559": 211, "07993421": 211, "06686804": 211, "21443888": 211, "11528972": 211, "2075215": 211, "10914094": 211, "11144673": 211, "13988486": 211, "09684337": 211, "26286057": 211, "11682692": 211, "55800226": 211, "17370318": 211, "11452112": 211, "964": 211, "arthur": [211, 212, 391, 426, 439, 1003, 1004, 1005, 1006, 1007, 1010, 1012], "mensch": [211, 212, 1003, 1004, 1005, 1006], "timeit": [211, 244, 372], "default_tim": [211, 244], "model_param": 211, "this_max_it": 211, "train_tim": [211, 231, 339, 340], "ndataset": [211, 300], "run_tim": [211, 212], "016": [211, 215, 340], "plot_sparse_logistic_regression_20newsgroup": [211, 215], "8253": 212, "726": [212, 965], "l1_plot": 212, "plot_sparse_logistic_regression_mnist": [212, 215], "subpopul": [213, 657, 953], "residual_threshold": [213, 649, 953, 1011], "remedi": 213, "max_subpopul": [213, 657, 1012], "lose": [213, 341, 362, 379, 394, 399, 401, 515, 524, 911, 912, 947, 953, 992], "florian": [213, 981, 998, 1002, 1004, 1008], "wilhelm": [213, 1002, 1004, 1008], "indigo": 213, "plot_theilsen": [213, 215], "motor": 214, "parti": [214, 355, 366, 377, 776, 783, 925, 975, 998, 1009], "liabil": 214, "functool": 214, "mean_tweedie_devi": [214, 957, 1008], "load_mtpl2": 214, "fremtpl2freq": 214, "df_freq": 214, "fremtpl2sev": 214, "41215": 214, "df_sev": 214, "claimamount": 214, "fillna": 214, "unquot": 214, "field": [214, 364, 388, 391, 392, 399, 476, 479, 595, 953, 955, 964, 972, 977, 980, 992, 999], "column_nam": 214, "plot_obs_pr": 214, "y_label": 214, "fill_legend": 214, "df_": 214, "tweedie_pow": 214, "d\u00b2": 214, "subset_label": 214, "score_label": [214, 262], "est_freq": 214, "est_sev": 214, "unstack": [214, 259], "fremtpl2": 214, "unreason": [214, 395], "exception": 214, "200000": 214, "column_tran": [214, 392], "purepremium": 214, "indirectli": 214, "avgclaimamount": 214, "fmax": 214, "option_context": 214, "max_column": 214, "139": [214, 238, 239, 372, 398, 431, 441, 669, 673, 958], "414": [214, 392, 703, 733, 852, 863, 957], "424": 214, "463": 214, "27000": 214, "303": [214, 613], "404": 214, "333333": 214, "r25": 214, "1981": [214, 953], "14156": 214, "142857": 214, "4792": 214, "1456": 214, "10403": 214, "928571": 214, "10834": 214, "17474": 214, "193548": 214, "225806": 214, "r73": 214, "3986": 214, "12860": [214, 1007], "5417": 214, "seemingli": [214, 350, 377], "169504": 214, "6237": 214, "upon": [214, 222, 289, 362, 367, 377, 379, 385, 539, 540, 605, 608, 649, 766, 772, 773, 816, 817, 946, 953, 973, 983, 992, 1012], "glm_freq": 214, "0201": 214, "0219": 214, "1379": 214, "1378": 214, "2441": 214, "2246": 214, "surprisingli": [214, 399], "bonu": [214, 367, 987, 992], "malu": 214, "younger": 214, "infti": [214, 401, 597, 953, 967, 1005], "gammaregressor": [214, 307, 310, 658, 953, 1009, 1012, 1013], "mask_test": 214, "glm_sev": 214, "400000e": 214, "700000e": 214, "756746e": 214, "744042e": 214, "801770e": 214, "030677e": 214, "dummy_sev": 214, "000000e": 214, "756687e": 214, "744497e": 214, "803882e": 214, "033764e": 214, "slighli": 214, "avgclaim": 214, "nbclaim": 214, "1951": 214, "1940": 214, "1978": [214, 953], "apriori": 214, "regardless": [214, 257, 258, 259, 355, 367, 391, 513, 636, 682, 693, 957, 969, 1006, 1013], "glm_pure_premium": 214, "999": [214, 256, 370, 398, 695, 833, 834], "scores_product_model": 214, "scores_glm_pure_premium": 214, "expand_frame_repr": 214, "690000e": 214, "420000e": 214, "669930e": 214, "617050e": 214, "640770e": 214, "640880e": 214, "7000": 214, "695740e": 214, "683980e": 214, "682880e": 214, "692270e": 214, "8000": [214, 259, 260], "046010e": 214, "040530e": 214, "037600e": 214, "045390e": 214, "9000": 214, "387580e": 214, "385000e": 214, "382120e": 214, "387830e": 214, "9900": 214, "015716e": 214, "015414e": 214, "015347e": 214, "015587e": 214, "9990": 214, "914573e": 214, "914370e": 214, "914538e": 214, "914387e": 214, "904751e": 214, "904556e": 214, "904747e": 214, "904558e": 214, "730119e": 214, "722128e": 214, "739865e": 214, "731249e": 214, "295040e": 214, "212197e": 214, "295505e": 214, "213056e": 214, "917618e": 214, "299546e": 214, "916555e": 214, "313276e": 214, "951751e": 214, "325198e": 214, "riski": 214, "operation": [214, 981], "develop": [214, 254, 256, 306, 339, 354, 357, 362, 366, 367, 377, 379, 381, 385, 388, 390, 393, 394, 398, 399, 413, 471, 774, 953, 960, 973, 975, 977, 978, 980, 981, 990, 998, 1006, 1007, 1008, 1011, 1013], "ranked_pure_premium": 214, "cumulated_claim_amount": 214, "cumulated_sampl": 214, "y_pred_product": 214, "y_pred_tot": 214, "ordered_sampl": 214, "151": [214, 215, 311, 372, 398, 969], "plot_tweedie_regression_insurance_claim": [214, 215], "496": 215, "auto_examples_linear_model": 215, "md": [217, 218, 219, 220, 370, 666, 670, 672, 993, 994, 998, 1010, 1013], "seek": [217, 219, 221, 366, 367, 377, 380, 486, 487, 954, 984, 986], "ticker": [217, 219, 222, 276], "s_point": 217, "s_color": 217, "make_s_curv": [217, 222], "plot_3d": 217, "points_color": 217, "subplot_kw": [217, 280], "set_major_loc": [217, 281], "multipleloc": [217, 281], "add_2d_scatt": 217, "set_major_formatt": [217, 219, 222, 276, 281], "nullformatt": [217, 219, 222, 276], "lle": [217, 218, 219, 221, 508, 667, 671, 954, 1010], "thought": [217, 281, 379, 391, 954, 958], "analys": [217, 348, 396, 777, 778, 954, 977, 981], "lle_standard": 217, "s_standard": 217, "lle_ltsa": 217, "ltsa": [217, 218, 219, 667, 671, 954], "s_ltsa": 217, "lle_hessian": 217, "hessian": [217, 218, 219, 398, 626, 636, 637, 647, 658, 667, 671, 953, 961, 993, 994, 1013], "s_hessian": 217, "lle_mod": 217, "s_mod": 217, "lle_method": 217, "tangent": [217, 667, 671, 955, 993, 994], "eigenmap": [217, 667, 669, 671, 673, 993, 994, 999], "isometr": [217, 666, 668, 669, 670, 954], "geodes": [217, 666, 954], "s_isomap": 217, "md_scale": 217, "normalized_stress": [217, 218, 219, 220, 668, 672, 954, 1013], "s_scale": 217, "laplacian": [217, 359, 388, 420, 431, 441, 598, 617, 621, 669, 673, 742, 743, 751, 871, 953, 954, 970, 994, 999, 1004], "s_spectral": 217, "t_sne": [217, 1006], "s_t_sne": 217, "043": [217, 223, 372], "plot_compare_method": [217, 223], "offsetbox": 218, "plot_embed": 218, "425": [218, 325, 337, 593], "shown_imag": 218, "someth": [218, 339, 367, 368, 369, 374, 399, 957, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "4e": 218, "imagebox": 218, "annotationbbox": 218, "offsetimag": 218, "neighborhoodcomponentsanalysi": [218, 284, 285, 286, 960, 1007, 1012], "random_project": [218, 229, 357, 969, 974, 999, 1004], "sparserandomproject": [218, 229, 867, 969, 999, 1004, 1012], "embeed": 218, "n_iter_without_progress": [218, 670, 1003, 1004], "nca": [218, 284, 285, 286, 825, 960], "plot_lle_digit": [218, 223], "pole": 219, "thin": [219, 598], "earth": [219, 340, 741, 977], "059": [219, 340, 515], "sphere_data": 219, "trans_data": 219, "2g": [219, 222, 675, 1009], "252": [219, 364, 512, 852, 863], "257": [219, 229, 254], "258": 219, "se": [219, 364, 382], "101": [219, 223, 236, 239, 364, 822, 999], "plot_manifold_spher": [219, 223], "euclidean_dist": [220, 229, 368, 429, 436, 666, 739, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 998, 1003, 1006, 1007], "finfo": [220, 457, 584, 628, 629, 632, 633, 634, 660, 661, 718, 1013], "x_true": 220, "dissimilar": [220, 379, 388, 431, 668, 672, 954, 1004], "embedding_": [220, 379, 666, 667, 668, 669, 670], "nmd": 220, "npo": 220, "plot_md": [220, 223], "sr_point": 221, "sr_color": 221, "ambient": 221, "text2d": 221, "unrol": 221, "unnecessarili": [221, 1005, 1008], "clump": 221, "sr_lle": 221, "sr_err": 221, "locally_linear_embed": [221, 954], "sr_tsne": 221, "stretch": [221, 245], "byproduct": 221, "ultim": 221, "sh_point": 221, "sh_color": 221, "topologi": [221, 222], "sh_lle": 221, "sh_err": 221, "sh_tsne": 221, "213": [221, 223], "plot_swissrol": [221, 223], "tendenc": [222, 953, 954, 956, 959, 962], "clearer": [222, 972], "distil": 222, "pub": [222, 814, 870], "misread": 222, "narin": [222, 1005, 1006], "kokhlikyan": [222, 1005, 1006], "509": [222, 223], "plot_t_sne_perplex": [222, 223], "887": 223, "auto_examples_manifold": 223, "cope": [225, 356, 362, 953], "multimod": 225, "inli": [225, 953, 963], "unimod": [225, 453], "localoutlierfactor": [225, 234, 282, 283, 310, 379, 541, 879, 963, 1005, 1006, 1008, 1012, 1013], "modal": [225, 453, 914], "hypercub": [225, 493], "decent": [225, 255, 362, 959], "handpick": 225, "absenc": [225, 259, 379, 690, 839, 956, 957], "negative_linestyl": 225, "outliers_fract": 225, "n_inlier": 225, "anomaly_algorithm": 225, "blobs_param": 225, "plot_anomaly_comparison": [225, 239], "transfus": 226, "1464": 226, "donat": 226, "confust": 226, "cm_displai": 226, "y_score": [226, 263, 265, 379, 460, 461, 462, 685, 698, 703, 704, 716, 717, 733, 759, 765, 766, 769, 774, 777, 778, 788, 836, 957, 1004, 1012], "pos_label": [226, 234, 379, 418, 419, 676, 678, 680, 684, 685, 687, 704, 706, 707, 715, 759, 760, 761, 764, 766, 843, 859, 957, 1006, 1010, 1012], "roc_displai": 226, "previs": 226, "precision_recall_curv": [226, 263, 678, 684, 685, 704, 957, 999, 1000, 1004, 1011, 1012], "pr_displai": 226, "easlii": 226, "plot_display_object_visu": [226, 239], "summaris": [227, 307], "composit": [227, 307, 357, 359, 395, 636, 765, 947, 953, 966, 994, 999], "num_proc": [227, 307], "cat_proc": [227, 307], "feat1": [227, 307, 399], "feat3": [227, 307, 399], "feat0": [227, 307], "feat2": [227, 307, 399], "029": [227, 239, 340, 965], "plot_estimator_represent": [227, 239], "isotonicregress": [228, 948, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1010, 1012], "ir": [228, 396, 568, 703, 733, 811, 815, 955, 957], "out_of_bound": [228, 613], "y_": [228, 242, 246, 247, 288, 368, 394, 396, 615, 626, 647, 658, 706, 707, 715, 760, 761, 764, 953, 957, 1004], "linearregressionlinearregress": 228, "x_thresholds_": [228, 613, 1010], "y_thresholds_": [228, 613, 1010], "plot_isotonic_regress": [228, 239], "lemma": [229, 359, 390, 512, 519, 527, 867, 868, 869, 951, 994, 1001], "johnson_lindenstrauss_min_dim": [229, 969, 999], "achliopta": [229, 868, 869, 969], "_compon": [229, 514], "geq": [229, 396, 398, 953, 957, 967, 971, 972], "_sampl": [229, 396, 516, 518, 525], "admiss": [229, 355], "eps_rang": 229, "min_n_compon": 229, "nn_sampl": [229, 268], "semilogi": 229, "nn_compon": [229, 230], "100k": 229, "n_components_rang": 229, "rp": 229, "projected_data": 229, "n_byte": 229, "projected_dist": 229, "min_dist": 229, "max_dist": 229, "hexbin": 229, "gridsiz": 229, "845": 229, "331": 229, "541": [229, 431, 441], "jl": [229, 868], "436": 229, "031": [229, 239, 364], "plot_johnson_lindenstrauss_bound": [229, 239], "rbfsampler": [230, 617, 618, 620, 949, 983, 1002, 1012, 1013], "mont": [230, 401, 589, 619, 620, 949, 962], "fourier": [230, 390, 616, 617, 618, 619, 620, 735, 736, 949], "acceler": [230, 311, 354, 377, 447, 670, 873, 954, 981, 1007, 1011, 1013], "data_train": [230, 257, 339], "targets_train": 230, "data_test": [230, 257, 339], "targets_test": 230, "kernel_svm": 230, "linear_svm": 230, "feature_map_fouri": 230, "feature_map_nystroem": [230, 617], "fourier_approx_svm": 230, "feature_map": [230, 298], "nystroem_approx_svm": 230, "kernel_svm_tim": 230, "kernel_svm_scor": 230, "linear_svm_tim": 230, "linear_svm_scor": 230, "fourier_scor": 230, "nystroem_scor": 230, "fourier_tim": 230, "nystroem_tim": 230, "feature_map__n_compon": 230, "timescal": 230, "ly": [230, 824, 826, 827, 828, 1002], "flat_grid": 230, "plot_kernel_approxim": [230, 239], "krr": [231, 401, 621, 950], "insensit": [231, 621, 654, 656, 765, 876, 950, 971, 972, 998], "fifth": [231, 950, 983], "kr": [231, 256, 1012], "svr_fit": 231, "kr_fit": 231, "sv_ratio": 231, "support_": [231, 333, 448, 453, 571, 572, 580, 877, 878, 879, 880, 881, 972], "y_svr": 231, "svr_predict": 231, "y_kr": 231, "kr_predict": 231, "737": 231, "584": 231, "723": 231, "340": [231, 314], "sv_ind": 231, "arithmet": [231, 372, 374, 391, 529, 626, 647, 658, 682, 695, 713, 714, 734, 770, 957, 1006], "test_tim": [231, 339], "train_test_s": 231, "learningcurvedisplai": [231, 258, 311, 952, 1013], "negate_scor": [231, 780], "std_display_styl": [231, 258, 780], "get_legend_handles_label": [231, 258, 263], "388": [231, 239, 340], "plot_kernel_ridge_regress": [231, 239], "theta_c": [232, 501], "reject": [232, 379, 380, 501, 649, 704, 895, 896, 953, 957, 1006], "never": [232, 350, 367, 375, 377, 385, 391, 394, 395, 429, 436, 501, 533, 534, 535, 542, 949, 1008, 1011], "likewis": [232, 391, 501], "surround": [232, 367, 822, 963], "cca": [232, 394, 461, 463, 1002, 1006, 1007, 1008, 1010, 1012], "onevsrestclassifi": [232, 263, 265, 274, 389, 804, 806, 875, 983, 999, 1000, 1002, 1004, 1005, 1011, 1012], "metaclassifi": 232, "min_x": 232, "max_x": 232, "plot_subfigur": 232, "min_i": 232, "zero_class": 232, "one_class": 232, "nfor": 232, "211": [232, 239, 261, 311, 317, 852, 863], "plot_multilabel": [232, 239], "extratreesregressor": [233, 398, 535, 543, 544, 885, 886, 1001, 1004, 1006, 1007, 1008, 1011, 1012, 1013], "n_face": 233, "face_id": 233, "n_pixel": [233, 254], "nn": [233, 399, 673, 990], "y_test_predict": 233, "true_fac": 233, "completed_fac": 233, "plot_multioutput_face_complet": [233, 239], "benchmark": [234, 276, 308, 340, 341, 354, 360, 362, 367, 377, 382, 384, 389, 447, 493, 873], "iforest": 234, "pharuj": 234, "rajborirug": 234, "ra": 234, "kmitl": 234, "ac": [234, 508, 642, 663, 664, 953, 970, 992], "th": [234, 309, 348, 378, 395, 398, 406, 421, 425, 430, 432, 438, 442, 451, 535, 536, 537, 538, 539, 540, 542, 543, 544, 571, 572, 610, 626, 627, 647, 649, 658, 674, 696, 757, 795, 900, 947, 953, 957, 961, 964, 971, 972, 1013], "preprocess_dataset": 234, "fetch_kddcup99": [234, 362, 1005, 1006, 1007, 1010, 1011], "labelbinar": [234, 265, 379, 718, 805, 840, 849, 859, 958, 983, 1001, 1002, 1003, 1007, 1012], "dataset_nam": [234, 276], "smtp": [234, 362, 470], "sa": [234, 362, 470], "percent10": [234, 470], "lb": [234, 843, 968], "forestcov": 234, "glass": [234, 362], "wdbc": [234, 364], "cardiotocographi": 234, "tablewar": 234, "x_mal": 234, "y_mal": 234, "x_ben": 234, "y_ben": 234, "x_mal2": 234, "y_mal2": 234, "compute_predict": 234, "model_nam": [234, 274], "negative_outlier_factor_": [234, 283, 822, 963], "datasets_nam": 234, "models_nam": 234, "ceil": [234, 535, 536, 537, 538, 541, 542, 543, 544, 572, 649, 777, 778, 883, 884, 885, 886, 971], "plot_outlier_detection_bench": [234, 239], "recalcul": [235, 237, 391, 995, 998], "mlpregressormlpregressor": 235, "tree_disp": 235, "mlp_disp": 235, "0x7f50dc3b3f70": 235, "plot_partial_dependence_visualization_api": [235, 239], "set_config": [236, 238, 307, 354, 355, 392, 447, 604, 1007, 1009, 1012], "deactiv": [236, 361, 365, 382, 392, 777, 778, 1012], "standard_scal": 236, "polynomialfeaturespolynomialfeatur": 236, "pcapca": 236, "svcsvc": [236, 237, 254, 256, 308], "numeric_preprocessor": 236, "imputation_mean": 236, "categorical_preprocessor": 236, "imputation_const": 236, "onehot": [236, 299, 300, 392, 841, 967], "gender": [236, 849, 967], "classifier__n_estim": 236, "classifier__max_featur": 236, "classifier__max_depth": 236, "classifier__criterion": 236, "plot_pipeline_displai": [236, 239], "svc_disp": [237, 306, 995], "rfc_disp": [237, 306, 995], "plot_roc_curve_visualization_api": [237, 239], "transform_output": [238, 447, 873], "slep018": [238, 368, 1013], "x_test_scal": 238, "894264": 238, "798301": 238, "271411": 238, "327605": 238, "244466": 238, "086944": 238, "327407": 238, "459074": 238, "660797": 238, "462234": 238, "576989": 238, "159419": 238, "933197": 238, "427329": 238, "414810": 238, "039497": 238, "275851": 238, "scaler2": 238, "x_test_np": 238, "x_test_df": 238, "selectpercentileselectpercentil": 238, "feature_names_in_": [238, 309, 379, 411, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 605, 606, 607, 608, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 1011, 1012, 1013], "num_pip": 238, "8079268292682927": 238, "log_reg": [238, 310], "reset": [238, 350, 374, 512, 654, 655, 656, 816, 817, 845, 846, 856, 1000], "plot_set_output": [238, 239], "auto_examples_miscellan": 239, "bayesiangaussianmixtur": [241, 242, 247, 773, 1004, 1006, 1007, 1011, 1012], "weight_concentration_prior_typ": [241, 247, 772, 956, 1004], "dirichlet_distribut": [241, 772, 956, 1004], "dirichlet_process": [241, 247, 772, 956, 1004], "weight_concentration_prior": [241, 247, 772, 956], "finit": [241, 247, 354, 362, 379, 447, 516, 529, 560, 584, 587, 588, 589, 636, 705, 755, 762, 772, 797, 873, 893, 895, 896, 953, 956, 957, 981, 983, 990, 1005, 1006, 1010, 1012, 1013], "unnecessari": [241, 371, 423, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 683, 960, 967, 978, 981, 1001, 1003, 1008, 1009, 1011], "covar": [241, 242, 247], "eig_val": 241, "eig_vec": 241, "unit_eig_vec": 241, "arctan2": [241, 243, 246], "56b4e9": 241, "plot_titl": 241, "weights_": [241, 772, 773, 1012], "covariances_": [241, 242, 243, 246, 247, 772, 773, 1005], "get_xaxi": [241, 286, 298], "set_tick_param": 241, "007": [241, 340], "labelleft": 241, "0072b2": 241, "f0e442": 241, "d55e00": 241, "mean_precision_prior": [241, 247, 772], "nprior": 241, "gamma_0": [241, 247], "reg_covar": [241, 772, 773], "init_param": [241, 244, 247, 772, 773], "concentrations_prior": 241, "plot_concentration_prior": [241, 248], "infer": [242, 246, 247, 256, 345, 361, 368, 377, 390, 395, 396, 474, 486, 487, 493, 512, 514, 527, 528, 531, 537, 538, 610, 613, 687, 700, 718, 772, 773, 812, 850, 870, 871, 883, 884, 885, 886, 922, 947, 953, 957, 962, 967, 970, 973, 977, 978, 986, 999, 1003, 1004, 1009, 1012], "color_it": [242, 246, 247], "dp": [242, 247], "unless": [242, 247, 367, 368, 369, 377, 379, 391, 394, 402, 417, 424, 427, 429, 431, 436, 437, 440, 443, 446, 451, 467, 474, 486, 487, 509, 513, 514, 515, 517, 520, 521, 523, 524, 526, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 589, 610, 612, 617, 624, 625, 629, 630, 631, 633, 635, 636, 637, 639, 641, 643, 644, 646, 654, 657, 666, 667, 668, 669, 670, 671, 672, 687, 692, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 822, 824, 826, 827, 829, 830, 833, 834, 835, 838, 860, 861, 863, 864, 865, 866, 870, 871, 883, 884, 885, 886, 891, 895, 896, 912, 925, 953, 956, 958, 998, 1000, 1004, 1006, 1009, 1010], "shouldn": [242, 247, 367, 515], "em": [242, 243, 247, 423, 426, 438, 514, 772, 773, 956, 1012], "dpgmm": [242, 247, 998, 1002, 1004], "plot_gmm": [242, 248], "ronweiss": 243, "make_ellips": 243, "datalim": 243, "skf": [243, 395, 793], "train_index": [243, 317, 395, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795], "test_index": [243, 317, 395, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795], "cov_typ": 243, "means_init": [243, 244, 773], "y_train_pr": 243, "train_accuraci": 243, "y_test_pr": 243, "test_accuraci": [243, 257], "plot_gmm_covari": [243, 248], "random_from_data": [244, 772, 773, 956], "diamond": 244, "colour": [244, 364, 399, 565, 958], "walsh": [244, 1010, 1012], "extmath": [244, 339, 375, 432, 1004, 1005, 1008, 1013], "row_norm": 244, "_samples_gener": 244, "timer": [244, 372], "x_squared_norm": [244, 439], "get_initial_mean": 244, "times_init": 244, "relative_tim": 244, "ini": 244, "init_tim": 244, "2fx": 244, "plot_gmm_init": [244, 248], "shifted_gaussian": 245, "stretched_gaussian": 245, "score_sampl": [245, 281, 282, 283, 289, 379, 397, 448, 510, 519, 541, 655, 772, 773, 774, 777, 778, 788, 821, 822, 832, 836, 879, 963, 1001, 1006, 1008, 1010], "plot_gmm_pdf": [245, 248], "component_1": 246, "component_2": 246, "best_parameters_": 246, "gmm_bic_scor": 246, "callabl": [246, 260, 379, 395, 399, 400, 402, 403, 421, 423, 424, 425, 426, 428, 429, 431, 436, 438, 443, 444, 445, 446, 511, 513, 515, 517, 523, 524, 537, 538, 539, 540, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 588, 589, 598, 606, 612, 617, 621, 637, 644, 649, 651, 653, 666, 669, 670, 674, 689, 697, 709, 719, 748, 751, 755, 756, 757, 758, 767, 768, 774, 777, 778, 780, 788, 798, 799, 800, 801, 803, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 840, 870, 871, 877, 878, 879, 880, 881, 919, 920, 927, 941, 946, 957, 967, 998, 1002, 1005, 1006, 1007, 1008, 1010, 1012], "0x7f50de4ccf70": 246, "gaussianmixturegaussianmixtur": 246, "eas": [246, 367, 372, 953, 971, 977, 978, 981, 1009, 1010, 1012], "param_n_compon": 246, "param_covariance_typ": 246, "renam": [246, 257, 367, 370, 391, 421, 425, 426, 438, 450, 451, 457, 514, 515, 531, 532, 533, 534, 849, 998, 999, 1000, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "793662": 246, "1083": 246, "652535": 246, "1114": 246, "835102": 246, "1151": 246, "243322": 246, "1181": 246, "713463": 246, "catplot": 246, "hue": [246, 256, 279, 364], "eigenvalu": [246, 388, 391, 393, 431, 441, 448, 449, 450, 451, 452, 453, 454, 455, 513, 519, 527, 651, 666, 667, 669, 671, 673, 842, 954, 967, 1000, 1004, 1007, 1008, 1009, 1010], "tab10": 246, "plot_gmm_select": [246, 248], "loos": [247, 253, 972, 1006], "liberti": 247, "judgment": [247, 957], "panel": [247, 281, 298, 397, 977], "primarili": [247, 261, 367, 379, 387, 391, 981, 1007, 1008], "covariance_prior": [247, 772], "plot_gmm_sin": [247, 248], "617": [248, 259, 391, 746], "auto_examples_mixtur": 248, "mislabel": [250, 398, 959], "imbal": [250, 259, 395, 685, 706, 707, 715, 760, 761, 764, 765, 957], "misclassifi": [250, 339, 972], "life": [250, 374, 954], "set_printopt": 250, "titles_opt": 250, "194": [250, 272, 295], "plot_confusion_matrix": [250, 272, 306, 1008, 1009, 1010, 1011], "shufflesplit": [251, 258, 334, 395, 776, 782, 784, 794, 802, 987, 998, 999, 1001, 1003, 1004], "groupshufflesplit": [251, 395, 987, 1004], "groupkfold": [251, 261, 395, 572, 774, 777, 778, 779, 780, 781, 782, 783, 788, 792, 797, 798, 799, 800, 803, 987, 1004, 1011], "stratifiedshufflesplit": [251, 326, 395, 987, 998, 999, 1004, 1005, 1011], "stratifiedgroupkfold": [251, 1011], "1338": 251, "cmap_data": 251, "cmap_cv": 251, "coolwarm": [251, 323], "n_point": [251, 816, 817], "percentiles_class": 251, "perc": 251, "group_prior": 251, "visualize_group": 251, "yticklabel": [251, 339], "ngroup": 251, "nclass": 251, "plot_cv_indic": [251, 272], "tr": [251, 364, 370, 391, 393, 448, 449, 450, 451, 452, 453, 454, 455, 814], "axessubplot": 251, "this_cv": 251, "163": [252, 272, 364, 965], "plot_cv_predict": [252, 272], "fnr": [253, 676, 704], "det_curv": [253, 676, 759, 766, 957, 1010, 1011], "visuali": 253, "commonli": [253, 360, 379, 391, 392, 401, 592, 735, 736, 772, 805, 848, 954, 955, 957, 958, 960], "detcurvedisplai": [253, 309, 704, 1010, 1011], "ax_roc": 253, "ax_det": 253, "feedback": [253, 366, 367, 380, 977, 1006], "willing": 253, "196": [253, 272, 872, 970], "plot_det": [253, 272], "n_imag": 254, "print_datafram": 254, "filtered_cv_result": 254, "mean_precis": 254, "std_precis": 254, "mean_recal": 254, "std_recal": 254, "mean_test_precis": [254, 260], "std_test_precis": 254, "mean_test_recal": 254, "std_test_recal": 254, "03f": 254, "refit_strategi": 254, "best_index": [254, 260], "precision_threshold": 254, "high_precision_cv_result": 254, "mean_score_tim": [254, 257, 774, 788], "rank_test_recal": 254, "rank_test_precis": [254, 260], "best_recall_std": 254, "best_recal": 254, "best_recall_threshold": 254, "high_recall_cv_result": 254, "fastest_top_recall_high_precision_index": 254, "idxmin": 254, "854": 254, "063": [254, 256, 417], "061": 254, "877": 254, "069": 254, "039": [254, 728, 758, 957], "905": 254, "889": [254, 417], "074": [254, 340], "890": 254, "073": [254, 450, 451], "743": [254, 285, 290, 990], "065": [254, 372], "066": [254, 626], "611": [254, 256, 519], "028": 254, "744": 254, "003455": 254, "877206": 254, "069196": 254, "0x7f50badb7ca0": 254, "807": [254, 256], "plot_grid_search_digit": [254, 272], "minimis": [255, 391, 395, 636, 637, 973], "219": 255, "york": [255, 765, 772, 947, 957, 969], "usa": [255, 362, 872, 947, 954, 969, 970], "best_index_": [255, 260, 774, 777, 778, 788], "wenhao": [255, 1006, 1007], "zhang": [255, 391, 422, 642, 657, 663, 664, 667, 671, 735, 736, 953, 954, 955, 959, 971, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "wenhaoz": 255, "ucla": [255, 953], "lower_bound": 255, "best_score_idx": 255, "best_low_complex": 255, "fewest": [255, 605], "candidate_idx": 255, "param_reduce_dim__n_compon": 255, "plot_grid_search_refit_cal": [255, 272], "moon": [256, 293, 300, 339, 340, 500], "moder": [256, 367, 401, 433, 963], "352": [256, 339, 340, 372], "repeatedstratifiedkfold": [256, 395, 789, 793, 1005], "repetit": [256, 371, 395, 789, 790, 965, 1012], "rank_test_scor": [256, 264, 774, 788, 1004], "rename_axi": 256, "9400": 256, "079297": 256, "9300": 256, "077846": 256, "3_poli": 256, "9044": [256, 1005], "098776": 256, "2_poli": 256, "6852": 256, "169106": 256, "stori": [256, 362, 956], "certainti": [256, 368, 719, 957], "conduct": [256, 401, 977, 1012], "repreat": 256, "model_scor": [256, 274], "regex": [256, 341, 443, 445], "_test_scor": [256, 451, 572, 1011], "lineplot": 256, "labelpad": 256, "882561": 256, "783392": 256, "351390": 256, "746492": 256, "298688": 256, "355440": 256, "nadeau": [256, 1006], "bengio": [256, 833, 834, 946, 970], "framework": [256, 354, 368, 377, 379, 385, 391, 615, 666, 772, 953, 954, 961, 975, 978, 981, 998, 1004], "diebold": 256, "mariano": 256, "proven": [256, 951, 955, 981], "replic": [256, 366, 368], "cdot": [256, 388, 391, 396, 397, 401, 592, 593, 597, 600, 601, 842, 949, 951, 957, 961, 967], "sum_": [256, 265, 334, 388, 389, 391, 396, 397, 398, 516, 518, 525, 674, 732, 951, 953, 954, 957, 959, 961, 962, 964, 965, 971, 972, 973], "ij": [256, 286, 388, 391, 396, 516, 518, 525, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 953, 954, 957, 959, 962, 972], "corrected_std": 256, "crossvalid": [256, 270], "corrected_var": 256, "ddof": [256, 856, 866], "compute_corrected_ttest": 256, "t_stat": 256, "p_val": 256, "model_1_scor": 256, "model_2_scor": 256, "ncorrect": 256, "uncorrect": [256, 573, 576], "t_stat_uncorrect": 256, "p_val_uncorrect": 256, "convent": [256, 367, 368, 370, 379, 409, 410, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 448, 449, 450, 451, 452, 453, 454, 455, 486, 487, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 525, 541, 544, 547, 548, 559, 560, 561, 566, 567, 569, 605, 606, 607, 608, 655, 666, 667, 668, 669, 677, 696, 772, 773, 804, 805, 820, 822, 824, 828, 840, 848, 851, 852, 854, 867, 868, 879, 906, 907, 957, 984, 998, 1005, 1006, 1009, 1011, 1012], "benavoli": 256, "colleagu": 256, "conjug": [256, 431, 441, 650, 652, 665, 673, 953], "overlin": [256, 388], "t_post": 256, "ppf": 256, "infin": [256, 519, 660, 661, 690, 797, 882, 894, 960], "minu": [256, 737, 957], "better_prob": 256, "cdf": 256, "773": [256, 339, 626, 814], "essenti": [256, 311, 365, 368, 391, 395, 396, 487, 949, 957, 960, 978, 981, 1006], "rope": 256, "rope_interv": 256, "rope_prob": 256, "432": [256, 393], "x_rope": 256, "uncertain": [256, 315, 366], "credibl": 256, "cred_interv": 256, "cred_int_df": 256, "000977": 256, "019023": 256, "005422": 256, "025422": 256, "016445": 256, "036445": 256, "bonferroni": 256, "n_comparison": 256, "pairwise_t_test": 256, "model_i": 256, "model_k": 256, "model_i_scor": 256, "model_k_scor": 256, "pairwise_comp_df": 256, "model_1": 256, "model_2": 256, "657": 256, "302": [256, 605], "565": 256, "276": 256, "851": 256, "pairwise_bayesian": 256, "worse_prob": 256, "pairwise_bayesian_df": 256, "882": 256, "dietterich": [256, 806, 958], "1998": [256, 362, 364, 396, 398, 533, 534, 806, 811, 842, 958, 959, 961, 967, 971], "bouckaert": 256, "frank": [256, 807, 958, 1003, 1007, 1008], "pacif": 256, "asia": [256, 967], "confer": [256, 362, 372, 391, 396, 402, 419, 424, 429, 489, 513, 541, 674, 686, 703, 733, 832, 833, 834, 957, 963, 969, 973], "discoveri": [256, 362, 372, 375, 391, 398, 400, 402, 424, 489, 533, 534, 541, 570, 573, 574, 576, 577, 578, 584, 698, 717, 760, 957, 969, 981, 1012, 1013], "corani": 256, "dem\u0161ar": 256, "zaffalon": 256, "accompani": [256, 1006], "1995": [256, 364, 389, 398, 531, 532, 806, 872, 958], "econom": 256, "144": [256, 276, 335, 337, 372, 998], "plot_grid_search_stat": [256, 272], "loader": [257, 318, 339, 360, 361, 362, 476, 477, 486, 977, 978, 992, 998, 1003, 1005, 1006, 1009], "fetch20newsgroup": 257, "857": 257, "complementnb": [257, 339, 811, 812, 814, 815, 959, 1006, 1010, 1011, 1013], "tfidfvectorizertfidfvector": 257, "complementnbcomplementnb": 257, "vect__": 257, "clf__": 257, "parameter_grid": 257, "vect__max_df": 257, "vect__min_df": 257, "vect__ngram_rang": [257, 992], "unigram": [257, 362, 399, 566, 567, 569, 1005], "bigram": [257, 399, 566, 567, 569, 992], "vect__norm": 257, "clf__alpha": [257, 992], "exhaust": [257, 306, 307, 308, 309, 310, 311, 354, 364, 371, 378, 386, 391, 774, 777, 778, 788, 865, 866, 868, 953, 992, 994], "parallelis": [257, 447, 873, 1005], "random_search": [257, 264], "best_paramet": 257, "get_param": [257, 369, 379, 401, 405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 946, 1008, 1009, 1010, 1012, 1013], "param_nam": [257, 271, 334, 803, 952, 992], "816": [257, 450, 451], "ambigu": [257, 371, 399, 550, 690, 912, 960, 1007, 1009, 1011], "shorten_param": 257, "plotli": [257, 367, 382, 384], "cursor": 257, "px": 257, "error_x": 257, "std_score_tim": [257, 774, 788], "error_i": 257, "hover_data": 257, "update_layout": 257, "xanchor": 257, "yanchor": 257, "autom": [257, 370, 382, 670, 946, 953, 954, 957, 977, 981], "parallel_coordin": 257, "understood": [257, 367, 391, 989], "column_result": 257, "transform_func": 257, "fromkei": [257, 890], "ngram_rang": [257, 318, 399, 566, 567, 569], "color_continuous_scal": 257, "viridis_r": 257, "mambaforg": 257, "env": [257, 365, 374, 382], "testenv": 257, "lib": [257, 355, 365, 382, 977], "python3": [257, 365, 382], "site": [257, 365, 367, 369, 374, 382, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 981, 1006], "_core": 257, "iteritem": 257, "slide": [257, 622, 953, 976, 977], "intersect": [257, 323, 388, 391, 715], "undo": [257, 846, 1002], "844": [257, 272, 398, 533, 534], "plot_grid_search_text_feature_extract": [257, 272], "depict": [258, 398, 956], "score_typ": [258, 780], "ax_idx": 258, "resort": [258, 362, 533, 1008], "learning_curv": [258, 311, 780, 952, 1001, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013], "return_tim": [258, 800, 1008], "test_scores_nb": 258, "fit_times_nb": 258, "score_times_nb": 258, "test_scores_svm": 258, "fit_times_svm": 258, "score_times_svm": 258, "score_tim": [258, 395, 799, 800], "rapidli": [258, 972, 981, 986], "inflect": 258, "177": [258, 272, 372], "plot_learning_curv": [258, 272], "class_likelihood_ratio": [259, 957, 1013], "medicin": [259, 690, 957], "medic": [259, 395, 690, 953, 981], "truli": [259, 263, 356, 690, 957], "odd": [259, 398, 492, 690, 957, 1005, 1006], "suppos": [259, 314, 354, 355, 368, 372, 393, 398, 399, 400, 535, 539, 542, 636, 637, 644, 646, 652, 653, 654, 719, 822, 875, 877, 880, 883, 885, 901, 961, 1007, 1009], "physiolog": [259, 364, 990], "hopefulli": [259, 374, 998], "indirect": [259, 379], "bio": 259, "minor": [259, 263, 362, 369, 380, 474, 957, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "diagnos": [259, 364, 374, 381, 392], "diagnosi": [259, 364, 823], "pos_lr": 259, "neg_lr": 259, "raise_warn": [259, 690, 943], "positive_likelihood_ratio": [259, 690], "negative_likelihood_ratio": [259, 690], "extract_scor": 259, "test_positive_likelihood_ratio": 259, "test_negative_likelihood_ratio": 259, "718894": 259, "724619": 259, "321091": 259, "054054": 259, "dummyclassifi": [259, 530, 957, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "108843": 259, "986989": 259, "268147": 259, "034278": 259, "compat": [259, 276, 307, 361, 369, 375, 376, 377, 379, 382, 399, 442, 448, 486, 544, 554, 560, 563, 564, 567, 581, 592, 593, 596, 597, 598, 600, 601, 610, 611, 612, 626, 636, 637, 647, 651, 653, 658, 751, 755, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795, 820, 821, 841, 849, 850, 887, 888, 891, 922, 954, 957, 960, 962, 977, 978, 981, 994, 998, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "diagnost": [259, 360, 379, 478, 690, 798, 799, 957, 977, 978, 994], "most_frequ": [259, 529, 605, 608, 826, 947, 957, 1006, 1008, 1010], "undefin": [259, 379, 690, 706, 715, 718, 760, 926, 957, 1006, 1010], "373333": 259, "5557": 259, "235430": 259, "stand": [259, 341, 370, 377, 396, 509, 515, 523, 524, 574, 587, 656, 683, 695, 713, 714, 734, 763, 765, 770, 956, 957, 963], "lr_base": 259, "pos_lr_bas": 259, "pos_lr_base_std": 259, "neg_lr_bas": 259, "neg_lr_base_std": 259, "plot_indic": 259, "scoring_on_bootstrap": 259, "n_bootstrap": [259, 999], "results_for_preval": 259, "bootstrap_indic": 259, "default_rng": 259, "2039": 259, "507943": 259, "113516": 259, "207667": 259, "009778": 259, "3419": 259, "445329": 259, "125197": 259, "198280": 259, "008907": 259, "422287": 259, "123864": 259, "192630": 259, "006340": 259, "6196": [259, 1003], "410507": 259, "163975": 259, "193761": 259, "005864": 259, "7578": [259, 1005], "335398": 259, "175224": 259, "189120": 259, "005820": 259, "8963": 259, "198284": 259, "238943": 259, "185496": 259, "005020": 259, "band": [259, 300, 967], "831": [259, 269, 272], "plot_likelihood_ratio": [259, 272], "scorer_nam": [260, 774, 788], "predefin": [260, 787, 946, 960, 987], "403": 260, "return_train_scor": [260, 395, 774, 777, 778, 788, 799, 1004, 1005, 1007], "402": 260, "73": [260, 295, 315, 378, 774, 788, 822, 884, 967, 988, 998, 1000], "maskedarrai": [260, 1004], "param_min_samples_split": 260, "sample_score_mean": 260, "sample_score_std": 260, "std_": [260, 1003], "rank_test_": 260, "best_scor": 260, "mean_test_": 260, "913": [260, 272, 398, 537], "plot_multi_metric_evalu": [260, 272], "cawlei": [261, 957], "talbot": 261, "mach": [261, 389, 395, 571, 572], "2079": 261, "2107": 261, "007581": 261, "007833": 261, "num_trial": 261, "x_iri": [261, 991], "y_iri": [261, 991], "p_grid": 261, "non_nested_scor": 261, "nested_scor": 261, "leaveoneout": [261, 395, 987], "leaveonegroupout": [261, 395, 775, 782, 783, 987, 1004], "inner_cv": 261, "outer_cv": 261, "non_nest": 261, "score_differ": 261, "non_nested_scores_lin": 261, "nested_lin": 261, "difference_plot": 261, "plot_nested_cross_validation_iri": [261, 272], "permutation_test_scor": [262, 395, 998, 1005, 1010], "plant": [262, 265, 266, 360, 957, 994], "uncorrel": [262, 363, 506, 512, 519, 957, 990], "n_uncorrelated_featur": 262, "x_rand": 262, "undergo": 262, "score_iri": 262, "perm_scores_iri": 262, "pvalue_iri": 262, "n_permut": [262, 395, 801], "score_rand": 262, "perm_scores_rand": 262, "pvalue_rand": 262, "evid": [262, 339, 374, 391, 395, 396, 398, 622, 772, 956], "ndata": 262, "destroi": [262, 399, 770, 845, 967], "ojala": [262, 395, 801], "garriga": [262, 395, 801], "268": [262, 272], "plot_permutation_tests_for_classif": [262, 272], "incorrect": [263, 303, 317, 350, 367, 391, 585, 586, 610, 611, 711, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "t_p": 263, "plu": [263, 364, 371, 657, 807, 810, 958, 971], "f_p": 263, "f_n": 263, "denomin": [263, 399, 454, 568, 682, 734, 951], "stairstep": 263, "ap": [263, 685, 686, 957], "sum_n": [263, 685, 957], "r_n": [263, 685, 957], "p_n": [263, 685, 957], "nth": [263, 685, 957], "r_k": 263, "p_k": [263, 957], "trapezoid": [263, 684, 685, 957], "binar": [263, 265, 266, 359, 361, 390, 392, 731, 811, 840, 841, 843, 847, 849, 859, 957, 959, 983, 994, 1012], "average_precision_scor": [263, 684, 686, 719, 759, 765, 957, 998, 1001, 1005, 1006, 1012], "differenti": [263, 398, 401, 537, 538, 597, 600], "mt19937": [263, 268, 1009], "0x7f50bad81c40": 263, "precisionrecalldisplai": [263, 309, 759, 761, 764, 1008, 1011], "got": [263, 350, 371, 529, 627, 643, 1011, 1013], "label_binar": [263, 265, 843, 1002], "average_precis": [263, 678, 685, 719, 957], "setup": [263, 265, 354, 365, 368, 372, 374, 567, 960, 984], "f_score": 263, "extens": [263, 265, 281, 354, 355, 361, 362, 365, 369, 370, 374, 375, 377, 385, 396, 474, 481, 512, 718, 906, 914, 954, 956, 957, 976, 977, 981, 998, 1004, 1011, 1012], "plot_precision_recal": [263, 272], "pose": [264, 953, 991], "deem": [264, 265, 512, 965, 1011], "989": 264, "02609033912823174": 264, "42051460619101577": 264, "02643963679281342": 264, "45881054883054606": 264, "981": [264, 364, 957], "04051263593736082": 264, "9874551511893069": 264, "993": 264, "8888888888888888": 264, "2222222222222222": 264, "1111111111111111": 264, "n_top": 264, "param_dist": [264, 268, 308], "n_iter_search": 264, "983": [264, 272, 531, 705], "plot_randomized_search": [264, 272], "unambigu": [265, 958, 1004], "notion": [265, 340, 356, 377, 396, 398, 953, 957], "scheme": [265, 281, 362, 379, 391, 395, 397, 399, 544, 568, 636, 637, 683, 787, 843, 844, 847, 849, 853, 859, 864, 875, 880, 946, 953, 971, 998, 1006, 1009, 1010], "harder": [265, 266, 302, 362, 366, 368, 374, 391, 493, 539, 540, 980], "bulk": [265, 402, 424], "scrutin": 265, "y_onehot_test": 265, "class_id": [265, 266], "class_of_interest": 265, "nvirginica": 265, "versicolor": [265, 266, 482], "tp_c": 265, "fn_c": 265, "fp_c": 265, "tn_c": 265, "briefli": [265, 366, 378, 398, 946, 1008], "nreceiv": 265, "micro_roc_auc_ovr": 265, "mcclish": [265, 765], "deci": 265, "1989": [265, 613, 765, 833, 834, 953, 960], "jul": 265, "fpr_grid": 265, "mean_tpr": [265, 266], "interp": [265, 266, 326], "macro_roc_auc_ovr": 265, "deeppink": 265, "aqua": 265, "role": [265, 354, 366, 370, 377, 396, 975], "pair_list": 265, "pair_scor": 265, "label_a": 265, "label_b": 265, "a_mask": 265, "b_mask": 265, "ab_mask": 265, "a_tru": 265, "b_true": 265, "idx_a": 265, "idx_b": 265, "fpr_a": 265, "tpr_a": 265, "fpr_b": 265, "tpr_b": 265, "macro_roc_auc_ovo": 265, "ovo_tpr": 265, "pool": [265, 377, 425, 613, 926, 978, 1009], "746": [265, 272, 364], "plot_roc": [265, 272], "mean_fpr": 266, "viz": [266, 373], "interp_tpr": 266, "mean_auc": 266, "std_auc": 266, "std_tpr": 266, "tprs_upper": 266, "tprs_lower": 266, "plot_roc_crossv": [266, 272], "halvinggridsearchcv": [267, 268, 308, 556, 778, 946, 1010, 1012, 1013], "1e4": [267, 637, 657, 869, 969], "gsh": 267, "gsh_time": 267, "gs_time": 267, "make_heatmap": 267, "is_sh": 267, "make_cbar": 267, "param_c": [267, 774], "param_gamma": [267, 774, 788], "sh": [267, 370, 374, 946], "scores_matrix": 267, "pivot_t": 267, "aggfunc": 267, "0e": [267, 527, 528], "get_xticklabel": 267, "rotation_mod": 267, "cbar_ax": 267, "911": [267, 272], "plot_successive_halving_heatmap": [267, 272], "rsh": [268, 308], "0x7f50de404140": 268, "_distn_infrastructur": 268, "rv_discrete_frozen": 268, "0x7f50cbb37160": 268, "0x7f50dc77dee0": 268, "halvingrandomsearchcvhalvingrandomsearchcv": 268, "params_str": 268, "drop_dupl": 268, "n_resources_": [268, 777, 778, 946], "nn_candid": 268, "n_candidates_": [268, 777, 778, 946], "n_iterations_": [268, 777, 778], "multialign": 268, "468": [268, 272], "plot_successive_halving_iter": [268, 272], "n_samples_train": [269, 877, 878, 879, 880, 881], "n_samples_test": [269, 877, 878, 879, 880, 881, 960, 967], "train_error": 269, "test_error": 269, "i_alpha_optim": 269, "alpha_optim": 269, "0004237587160604063": 269, "plot_train_error_vs_test_error": [269, 272], "nonlinear": [270, 309, 622, 666, 667, 671, 674, 842, 953, 954, 962, 967], "true_fun": 270, "polynomial_featur": 270, "218": [270, 272, 364, 450, 693, 763], "plot_underfitting_overfit": [270, 272], "validation_curv": [271, 334, 952, 1005, 1006, 1007, 1010], "subset_mask": 271, "isin": 271, "param_rang": [271, 334, 803, 952], "train_scores_mean": 271, "train_scores_std": 271, "test_scores_mean": 271, "test_scores_std": 271, "702": [271, 272], "plot_validation_curv": [271, 272], "797": 272, "auto_examples_model_select": 272, "yeast": 274, "2417": 274, "jaccard": [274, 388, 429, 436, 677, 681, 697, 706, 711, 715, 755, 756, 757, 771, 1006, 1007], "arrang": [274, 610, 807, 808, 809, 810, 957], "presum": [274, 391, 399, 811], "adam": [274, 293, 833, 834, 961, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "kleczewski": [274, 1005, 1006], "classifierchain": [274, 379, 808, 810, 1005, 1010, 1013], "jaccard_scor": [274, 681, 706, 711, 771, 957, 1007, 1010], "40597": 274, "wrapper": [274, 276, 372, 375, 395, 401, 522, 598, 649, 875, 973, 977, 1002, 1010], "base_lr": [274, 807], "y_pred_ovr": 274, "ovr_jaccard_scor": 274, "y_pred_chain": 274, "chain_jaccard_scor": 274, "y_pred_ensembl": 274, "ensemble_jaccard_scor": 274, "x_po": 274, "plot_classifier_chain_yeast": [274, 275], "auto_examples_multioutput": 275, "kneighborstransform": [276, 278, 306, 828, 960, 1008, 1012, 1013], "annoi": [276, 355], "nmslib": 276, "pip": [276, 306, 307, 308, 309, 310, 311, 355, 365, 367, 370, 372, 382, 973], "mnist_2000": 276, "annoytransform": 276, "305": [276, 372], "nmslibtransform": 276, "090": [276, 283, 290], "818": 276, "592": [276, 589, 592, 603, 964], "nearestneighbor": [276, 310, 391, 402, 424, 427, 440, 666, 667, 671, 818, 819, 820, 822, 826, 827, 828, 960, 998, 1002, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "364": [276, 450, 451, 999], "mnist_10000": 276, "874": [276, 765, 766, 957], "098": 276, "118": [276, 568], "281": 276, "nullifi": 276, "csr_matrix": [276, 307, 420, 424, 431, 474, 512, 522, 535, 536, 537, 538, 541, 542, 543, 544, 566, 571, 572, 692, 802, 851, 877, 878, 880, 881, 883, 884, 885, 886, 958, 967, 971, 972, 973, 1013], "transformermixin": [276, 368, 379, 444, 1006], "assert_array_almost_equ": 276, "sw": 276, "n_samples_fit_": [276, 818, 819, 820, 822, 824, 826, 827, 828], "cosinesimil": 276, "nmslib_": 276, "adddatapointbatch": 276, "createindex": 276, "n_samples_transform": [276, 820, 828], "knnquerybatch": 276, "num_thread": 276, "annoyindex": 276, "search_k": 276, "annoy_": 276, "add_item": 276, "_transform": 276, "get_n_item": 276, "get_nns_by_item": 276, "include_dist": 276, "get_nns_by_vector": 276, "test_transform": 276, "xt0": 276, "ann": [276, 998, 1010, 1012], "xt1": 276, "nm": [276, 354], "xt2": 276, "run_benchmark": 276, "tsne_param": 276, "barnes_hut": [276, 670, 1005, 1006], "i_ax": 276, "msg": [276, 941], "transformer_nam": 276, "longest": 276, "whitespac": [276, 399], "int32": [276, 367, 379, 423, 426, 428, 430, 432, 877, 878, 879, 880, 881, 924, 972, 1007, 1013], "approximate_nearest_neighbor": [276, 290], "slow": [278, 298, 339, 354, 361, 365, 367, 396, 399, 426, 677, 850, 851, 855, 877, 880, 912, 954, 960, 978, 991, 1005], "temporarydirectori": [278, 306], "n_neighbors_list": 278, "graph_model": 278, "classifier_model": 278, "sklearn_graph_cache_": 278, "tmpdir": [278, 306], "full_model": 278, "classifier__n_neighbor": 278, "grid_model": 278, "mean_fit_tim": [278, 774, 788], "std_fit_tim": [278, 774, 788], "plot_caching_nearest_neighbor": [278, 290], "cmap_light": [279, 284, 287], "cmap_bold": [279, 284, 287], "darkblu": [279, 287], "neighbour": [279, 287, 441, 670, 962], "548": [279, 290], "plot_classif": [279, 290], "79269019073225": 280, "kerneldens": [280, 281, 289, 397, 1000, 1006, 1007, 1011, 1012, 1013], "new_data": [280, 368], "4x11": 280, "real_data": 280, "set_clim": 280, "921": [280, 290, 292, 296], "plot_digits_kde_sampl": [280, 290], "block": [281, 298, 310, 362, 364, 367, 371, 374, 379, 388, 391, 394, 397, 431, 432, 441, 452, 458, 466, 467, 489, 491, 673, 925, 960, 962], "wildli": [281, 956], "kd": [281, 391, 397, 960, 1006, 1007, 1008], "jakevdp": [281, 289], "aaaaff": [281, 284], "tophat": [281, 397, 816, 817, 821], "log_den": 281, "x_src": 281, "format_func": 281, "ih": 281, "epanechnikov": [281, 397, 816, 817, 821], "funcformatt": 281, "nullloc": 281, "true_den": 281, "652": [281, 290], "plot_kde_1d": [281, 290], "NOT": [282, 364, 369, 784, 816, 817], "plot_lof_novelty_detect": [282, 290], "x_inlier": 283, "ground_truth": 283, "n_error": 283, "x_score": [283, 460, 461, 462, 463], "radiu": [283, 326, 364, 391, 422, 429, 666, 741, 758, 816, 817, 818, 819, 820, 824, 826, 827, 828, 830, 960, 1000, 1002, 1012], "legendhandl": 283, "_size": 283, "plot_lof_outlier_detect": [283, 290], "ffaaaa": 284, "aaffaa": 284, "00ff00": 284, "532": [284, 290], "plot_nca_classif": [284, 290], "neighborhoodcomponentanalysi": 285, "dim_reduction_method": 285, "acc_knn": 285, "x_embed": [285, 286, 670, 674, 825, 960], "ntest": 285, "plot_nca_dim_reduct": [285, 290], "logsumexp": [286, 1005], "get_yaxi": [286, 298], "link_thickness_i": 286, "diff_embed": 286, "dist_embed": 286, "einsum": 286, "exp_dist_embed": 286, "relate_point": 286, "pt_i": 286, "pt_j": 286, "plot_nca_illustr": [286, 290], "8133333333333334": 287, "nearestcentroid": [287, 339, 958, 960, 998, 1002, 1005, 1010, 1013], "shrink_threshold": [287, 823, 960, 998, 1010], "179": [287, 290, 364, 372, 398, 998], "plot_nearest_centroid": [287, 290], "barycent": [288, 998], "plot_regress": [288, 290], "geospati": [289, 397], "haversin": [289, 397, 677, 739, 741, 1007, 1010], "latitud": [289, 298, 362, 476, 677, 741], "longitud": [289, 298, 362, 476, 677, 741], "xtrain": 289, "ytrain": 289, "radian": [289, 677, 741], "land_mask": 289, "ball_tre": [289, 402, 424, 429, 436, 666, 667, 816, 818, 819, 820, 821, 822, 824, 826, 827, 828, 960, 998], "ocean": 289, "825": [289, 290, 727], "plot_species_kd": [289, 290], "auto_examples_neighbor": 290, "combat": [292, 396], "encourag": [292, 326, 366, 367, 377, 972, 977], "lesser": [292, 379, 422, 519, 953], "curvatur": 292, "complic": [292, 372, 401, 672, 960], "plot_mlp_alpha": [292, 296], "bfg": [293, 588, 589, 626, 627, 636, 647, 650, 652, 658, 665, 960, 961, 1013], "980000": 293, "096950": 293, "momentum": [293, 833, 834, 961], "049530": 293, "nesterov": [293, 833, 834, 961], "049540": 293, "360000": 293, "978444": 293, "860000": 293, "503452": 293, "504185": 293, "045311": 293, "956038": 293, "243802": 293, "992766": 293, "041297": 293, "993879": 293, "042898": 293, "638843": 293, "855465": 293, "912632": 293, "290584": 293, "909293": 293, "318387": 293, "991653": 293, "045934": 293, "840000": 293, "601052": 293, "940000": 293, "157334": 293, "154453": 293, "500000": 293, "692470": 293, "689143": 293, "689751": 293, "150527": 293, "850000": 293, "341523": 293, "336188": 293, "335919": 293, "689015": 293, "830000": 293, "512595": 293, "513034": 293, "930000": 293, "170087": 293, "schedul": [293, 355, 370, 654, 655, 656, 833, 834, 925, 971, 981, 1005], "nesterovs_momentum": [293, 833, 834], "invscal": [293, 654, 655, 656, 833, 834, 971], "plot_arg": 293, "plot_on_dataset": 293, "nlearn": 293, "loss_": [293, 537, 538, 833, 834, 961, 1012], "loss_curve_": [293, 833, 834], "data_set": 293, "get_lin": 293, "plot_mlp_training_curv": [293, 296], "28x28": 294, "throw": [294, 375, 894, 1002, 1005, 1006, 1007, 1008, 1012], "infrastructur": [294, 975, 977, 978], "44139186": 294, "19174891": 294, "13983521": 294, "11378556": 294, "09443967": 294, "07846529": 294, "06506307": 294, "05534985": 294, "986429": 294, "953061": 294, "plot_mnist_filt": [294, 296], "greyscal": 295, "bernoulli": [295, 399, 400, 811, 812, 813, 814, 815, 832, 833, 834, 839, 953, 967, 979, 994, 998], "bernoullirbm": [295, 833, 834, 962, 967, 1000, 1001, 1010, 1012], "yann": [295, 998, 1000], "dauphin": [295, 1000], "gabriel": [295, 1006, 1007, 1008, 1011, 1012], "synnaev": 295, "convolv": 295, "minmax_scal": [295, 298, 846, 1003, 1006], "nudge_dataset": 295, "1px": 295, "direction_vector": 295, "apply_along_axi": 295, "feature_rang": [295, 846, 861, 967, 1000, 1010], "cg": [295, 636, 637, 650, 652, 665, 953, 1002, 1003, 1005, 1009, 1011, 1012], "rbm": [295, 832, 833, 834, 962], "rbm_features_classifi": 295, "6000": [295, 605], "raw_pixel_classifi": 295, "207": [295, 998], "154": [295, 629, 958], "808": [295, 296], "plot_rbm_logistic_classif": [295, 296], "auto_examples_neural_network": 296, "incom": [298, 362, 420], "unscal": [298, 303, 953, 957, 1006, 1012], "notabl": [298, 361, 379, 474, 705, 849, 954, 956, 960, 1002, 1005, 1012], "unterthin": [298, 1001, 1002, 1003], "medinc": [298, 308, 362], "housag": 298, "averoom": [298, 308, 362], "room": [298, 362, 371, 391, 980], "avebedrm": [298, 362], "bedroom": [298, 362], "aveoccup": [298, 308, 362], "features_idx": 298, "quantile_rang": [298, 854, 865, 1004], "yeo": [298, 302, 852, 863, 967, 1006, 1012], "cox": [298, 302, 852, 863, 967, 1006], "plasma": 298, "plasma_r": 298, "create_ax": 298, "bottom_h": 298, "left_h": 298, "rect_scatt": 298, "rect_histx": 298, "rect_histi": 298, "ax_scatt": 298, "ax_histx": 298, "ax_histi": 298, "ax_scatter_zoom": 298, "ax_histx_zoom": 298, "ax_histy_zoom": 298, "rect_colorbar": 298, "ax_colorbar": 298, "plot_distribut": 298, "hist_nbin": 298, "x0_label": 298, "x1_label": 298, "hist_x1": 298, "hist_x0": 298, "aesthet": [298, 973, 1003], "layout": [298, 377, 875, 876, 877, 880, 896, 972, 1001, 1003], "tick_bottom": 298, "tick_left": 298, "outward": 298, "ec": [298, 508], "make_plot": 298, "item_idx": 298, "ax_zoom_out": 298, "ax_zoom_in": 298, "zoom_in_percentile_rang": 298, "cutoffs_x0": 298, "cutoffs_x1": 298, "non_outliers_mask": 298, "colorbarbas": 298, "OR": [298, 391, 402, 424, 1009], "indistinguish": 298, "quadrant": 298, "plot_all_sc": [298, 304, 845, 846, 848, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 866], "straightforward": [299, 366, 396, 981], "anywher": 299, "qinhanmin2005": 299, "sina": [299, 1011], "rnd": 299, "enc": [299, 301, 310, 849, 850, 967], "x_bin": 299, "line_bin": 299, "plot_discret": [299, 304], "get_nam": 300, "broader": [300, 953], "logisticregression__c": 300, "linearsvc__c": 300, "kbinsdiscretizer__n_bin": 300, "gradientboostingclassifier__learning_r": 300, "svc__c": 300, "cm_piyg": 300, "piyg": 300, "b30065": 300, "178000": 300, "est_idx": 300, "596": [300, 304, 694], "plot_discretization_classif": [300, 304], "centers_0": 301, "centers_1": 301, "x_list": 301, "grid_encod": 301, "stripe": 301, "plot_discretization_strategi": [301, 304], "powertransform": [302, 853, 863, 947, 967, 1006, 1009, 1012], "johnwon": 302, "weibul": 302, "bimod": [302, 397], "ineffect": [302, 967, 1006, 1007], "eric": [302, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ericchang2017": 302, "northwestern": [302, 636], "contact": [302, 377, 977], "font_siz": 302, "304": [302, 364], "bc": 302, "qt": [302, 853], "x_lognorm": [302, 967], "x_chisq": 302, "chisquar": 302, "x_weibul": 302, "x_gaussian": 302, "x_uniform": 302, "loc_a": 302, "loc_b": 302, "x_a": 302, "x_b": 302, "x_bimod": 302, "d81b60": 302, "0188ff": 302, "ffc107": 302, "b7a2ff": 302, "2ec5ac": 302, "figaspect": 302, "axes_idx": 302, "axes_list": 302, "x_trans_bc": 302, "lmbda_bc": 302, "lambdas_": [302, 852, 1011], "x_trans_yj": 302, "lmbda_yj": 302, "x_trans_qt": 302, "ax_origin": 302, "ax_bc": 302, "ax_yj": 302, "ax_qt": 302, "x_tran": [302, 368, 387, 422, 443, 852, 863, 967], "meth_nam": 302, "lmbda": 302, "plot_map_data_to_norm": [302, 304], "involv": [303, 306, 326, 354, 356, 362, 367, 370, 379, 380, 394, 401, 677, 804, 805, 954, 958, 960, 964, 972, 981, 990, 1006], "prime": 303, "meter": 303, "kilo": 303, "kilogram": 303, "alcohol": [303, 364], "malic": [303, 364], "acid": [303, 364], "wherein": [303, 379], "vastli": 303, "76e": 303, "36e": 303, "55e": 303, "31e": 303, "02e": 303, "53e": 303, "12e": 303, "33e": 303, "54e": 303, "43e": 303, "00e": 303, "tyler": [303, 1005, 1011, 1012, 1013], "lanigan": [303, 1005], "tylerlanigan": 303, "sebastian": [303, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "raschka": [303, 1003, 1004, 1005, 1006, 1007, 1010], "sebastianraschka": 303, "fig_siz": 303, "unscaled_clf": 303, "std_clf": 303, "pred_test_std": 303, "npredict": 303, "pca_std": 303, "npc": 303, "x_train_transform": [303, 350, 395], "scaled_x_train": 303, "x_train_std_transform": 303, "untouch": 303, "target_class": 303, "233": [303, 304], "plot_scaling_import": [303, 304], "239": [304, 998], "auto_examples_preprocess": 304, "announc": [306, 307, 308, 309, 310, 311, 370, 380], "bug": [306, 307, 308, 309, 310, 311, 357, 365, 368, 369, 370, 371, 374, 377, 379, 975, 978, 998, 999, 1000, 1008, 1009, 1010, 1011, 1012, 1013], "latest": [306, 307, 308, 309, 310, 311, 365, 367, 370, 372, 374, 973, 975, 1012], "upgrad": [306, 307, 308, 309, 310, 311, 382, 978, 998, 1003, 1006], "conda": [306, 307, 308, 309, 310, 311, 355, 367, 369, 370, 374, 384, 973], "forg": [306, 307, 308, 309, 310, 311, 355, 369, 370, 374, 382], "plot_roc_curv": [306, 1008, 1010], "plot_precision_recall_curv": [306, 1008, 1010, 1011], "stackingclassifi": [306, 350, 398, 546, 1008, 1009, 1010, 1011, 1012, 1013], "9473684210526315": 306, "radiusneighborstransform": [306, 820, 960, 1008, 1010, 1012, 1013], "sklearn_cache_": 306, "isomap__n_neighbor": 306, "nan_euclidean_dist": [306, 739, 947, 1008], "ccp_alpha": [306, 344, 535, 536, 537, 538, 542, 543, 883, 884, 885, 886, 973, 1008], "tree_": [306, 344, 348, 821, 883, 884, 885, 886], "node_count": [306, 344, 348, 883, 884, 885, 886], "check_estim": [306, 368, 379, 907, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "pytest": [306, 355, 365, 367, 368, 369, 382, 384, 906, 907, 1008, 1011], "estimator_check": [306, 368, 379, 1005, 1006, 1008, 1009, 1012, 1013], "parametrize_with_check": [306, 368, 906, 1008, 1009], "test_sklearn_compatible_estim": [306, 907], "ovo": [306, 765, 804, 877, 880, 957, 958, 972], "preval": [306, 379, 690, 957], "decision_function_shap": [306, 335, 877, 880, 972, 1003, 1004, 1007, 1008], "9969333333333333": 306, "361": [306, 312, 362, 398, 533, 534], "plot_release_highlights_0_22_0": [306, 312], "await": 307, "lam": [307, 308, 1009], "3577618906572577": 307, "42425183539869404": 307, "openmp": [307, 365, 369, 377, 379, 391, 398, 925, 1009, 1011], "thread": [307, 310, 365, 377, 379, 391, 398, 808, 809, 925, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1011], "7663433197344942": 307, "10k": [307, 426], "monotoinc": 307, "gbdt_cst": 307, "999791942438998": 307, "644": [307, 312], "plot_release_highlights_0_23_0": [307, 312], "art": [308, 372, 627, 670, 977, 981], "footprint": [308, 311, 354, 356, 391, 396, 533, 534, 541, 1000, 1003, 1004, 1009, 1010, 1013], "yarowski": [308, 872, 970], "selftrainingclassifi": [308, 317, 318, 319, 970, 1010], "random_unlabeled_point": [308, 870, 871, 872], "self_training_model": [308, 872], "base_estim": [308, 368, 389, 417, 531, 532, 533, 534, 649, 807, 810, 872, 946, 953, 1009, 1011, 1012, 1013], "selftrainingclassifierselftrainingclassifi": 308, "7331": [308, 1005], "linear_baselin": 308, "7137": 308, "houseag": [308, 362], "decisiontreeregressordecisiontreeregressor": 308, "effort": [308, 367, 372, 977, 981, 1009, 1011], "plot_release_highlights_0_24_0": [308, 312], "l2_regular": [309, 398, 539, 540], "max_bin": [309, 310, 398, 539, 540], "typeerror": [309, 371, 689, 899, 941, 1005, 1006, 1009, 1011], "quantileregressor": [309, 953, 957, 1011, 1012, 1013], "min_": [309, 391, 398, 846, 953, 967, 971, 972, 973], "sum_i": [309, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 948, 949, 953, 955, 957, 962], "pb_q": [309, 953], "_1": [309, 393, 396, 399, 509, 515, 516, 518, 523, 524, 525, 624, 625, 630, 631, 632, 633, 634, 638, 639, 640, 641, 659, 660, 661, 662, 743, 953, 955, 957, 972], "get_feature_nam": [309, 1006, 1007, 1009, 1010, 1011], "pet": [309, 765, 957], "dog": [309, 310, 560, 760, 967], "fish": 309, "pet_cat": 309, "pet_dog": 309, "pet_fish": 309, "plot_": [309, 382], "017": [309, 312, 372, 450, 451], "plot_release_highlights_1_0_0": [309, 312], "x_1d": 310, "hist_quantil": 310, "log_reg_input_featur": 310, "gather": [310, 374, 380, 390, 391, 967, 981], "min_frequ": [310, 849, 967, 1012], "max_categori": [310, 849, 967, 1012], "rabbit": [310, 967], "snake": [310, 967], "infrequent_categories_": [310, 849, 967], "x0_cat": [310, 967], "x0_rabbit": [310, 967], "x0_infrequent_sklearn": [310, 967], "refactor": [310, 998, 1000, 1001, 1002, 1008, 1011, 1012, 1013], "kneighbor": [310, 818, 819, 820, 822, 824, 960, 1002, 1007, 1011, 1012, 1013], "radius_neighbor": [310, 824, 826, 827, 828, 1002, 1007, 1008, 1010, 1011, 1012, 1013], "summari": [310, 350, 364, 377, 670, 691, 888, 955, 958, 977, 992], "pairwise_distances_argmin_min": [310, 756, 1001, 1006, 1012, 1013], "radiusneighborsclassifi": [310, 818, 819, 824, 827, 958, 960, 998, 1000, 1004, 1006, 1008, 1010, 1011, 1012, 1013], "radiusneighborsregressor": [310, 818, 819, 824, 826, 960, 998, 1000, 1006, 1008, 1010, 1011, 1012, 1013], "trustworthi": [310, 1006, 1007, 1012, 1013], "labelpropag": [310, 316, 871, 872, 958, 970, 999, 1004, 1005, 1008, 1009, 1010, 1012, 1013], "labelspread": [310, 314, 315, 316, 318, 319, 870, 872, 958, 970, 999, 1004, 1005, 1008, 1009, 1012, 1013], "blog": [310, 354, 367, 372, 374, 1009], "cython": [310, 354, 355, 365, 367, 369, 375, 377, 382, 384, 387, 391, 398, 486, 967, 968, 971, 972, 977, 978, 998, 1001, 1002, 1004, 1010, 1013], "readili": [310, 396, 973, 981], "true_w": 310, "true_h": 310, "x_reconstruct": [310, 460, 461, 462], "00364": 310, "divis": [310, 372, 391, 399, 568, 569, 572, 690, 691, 706, 707, 715, 723, 760, 761, 764, 957, 991, 1002, 1006, 1007, 1010], "repeatedli": [310, 350, 379, 391, 398, 401, 486, 524, 644, 645, 654, 655, 656, 758, 947, 961, 987], "bisect_km": 310, "plot_release_highlights_1_1_0": [310, 312], "video": [311, 357, 361, 369, 481, 958, 981, 984], "sepal_col": 311, "petal_col": 311, "kbin": 311, "x_out": [311, 840, 849, 850], "114": [311, 998], "052506": 311, "592373": 311, "189830": 311, "973554": 311, "416010": 311, "630382": 311, "765012": 311, "362176": 311, "021849": 311, "788808": 311, "hist_no_interact": 311, "v1": [311, 361, 382, 403, 419, 511, 537, 539, 654, 733, 772, 773, 811, 812, 813, 815, 1010, 1013], "liac": [311, 361, 367, 474, 1013], "arff": [311, 367, 474, 1010, 1013], "ticket": [311, 367], "cabin": 311, "boat": 311, "allen": [311, 1001, 1003, 1005, 1008], "elisabeth": 311, "walton": 311, "24160": 311, "3375": 311, "b5": 311, "loui": [311, 1003, 1004, 1008, 1010, 1012], "mo": [311, 1009], "allison": 311, "hudson": 311, "9167": 311, "113781": 311, "5500": [311, 666, 954], "c22": 311, "c26": 311, "montreal": 311, "pq": 311, "chestervil": 311, "ON": 311, "helen": 311, "lorain": 311, "joshua": [311, 362, 1000, 1001, 1003, 1004, 1010, 1013], "creighton": 311, "135": [311, 364], "bessi": 311, "waldo": 311, "compliant": [311, 367], "cupi": [311, 387], "gpu": [311, 387, 961, 978, 992], "changelog": [311, 370, 379], "plot_release_highlights_1_2_0": [311, 312], "855": 312, "auto_examples_release_highlight": 312, "semisupervis": [314, 379], "clai": [314, 315, 316, 319, 998], "woolam": [314, 315, 316, 319, 998], "n_total_sampl": [314, 315], "n_labeled_point": [314, 315], "unlabeled_set": 314, "everyth": [314, 350, 370, 372, 377, 443, 918, 977, 978, 998], "lp_model": [314, 315], "predicted_label": [314, 315], "transduction_": [314, 315, 316, 870, 871, 872], "true_label": [314, 315], "_plot": 314, "0x7f50de9f3490": 314, "pred_entropi": [314, 315], "label_distributions_": [314, 315, 870, 871, 1009], "uncertainty_index": [314, 315], "image_index": [314, 315], "376": [314, 320, 965], "plot_label_propagation_digit": [314, 320], "max_iter": 315, "______________________________________________________________________": 315, "290": [315, 666, 667, 671, 954], "330": 315, "280": 315, "270": 315, "unlabeled_indic": 315, "transduc": 315, "in1d": [315, 1005], "delete_indic": 315, "183": [315, 372, 958, 998], "nfit": 315, "delete_index": 315, "558": [315, 320], "plot_label_propagation_digits_active_learn": [315, 320], "label_spread": 316, "labelspreadinglabelspread": 316, "output_label": 316, "output_label_arrai": 316, "outer_numb": 316, "inner_numb": 316, "plot_label_propagation_structur": [316, 320], "breast_canc": 317, "569": [317, 364, 478, 570, 573, 574, 576], "augment": [317, 608, 857, 981], "oliv": [317, 319, 1006, 1007, 1009, 1010, 1011], "rausch": [317, 319, 1006, 1007, 1010], "rauscho": [317, 319], "ethz": [317, 319], "total_sampl": [317, 514], "base_classifi": [317, 319, 970], "x_valu": 317, "99999": 317, "amount_label": 317, "amount_iter": 317, "self_training_clf": 317, "skfold": 317, "y_test_tru": 317, "labeled_iter_": [317, 872], "return_count": [317, 340, 828], "capsiz": 317, "twinx": 317, "plot_self_training_varying_threshold": [317, 320], "2823": 318, "2117": [318, 340], "751": 318, "1687": 318, "1111": [318, 628, 634], "836": 318, "tfidftransform": [318, 340, 341, 399, 467, 569, 992, 1005, 1006, 1012], "sdg_param": 318, "vectorizer_param": 318, "selftrain": 318, "st_pipelin": 318, "ls_pipelin": 318, "eval_and_print_metr": 318, "y_mask": 318, "x_20": 318, "y_20": 318, "590": [318, 320], "plot_semi_supervised_newsgroup": [318, 320], "y_rand": 319, "y_30": 319, "y_50": 319, "ls30": 319, "ls50": 319, "ls100": 319, "st30": 319, "st50": 319, "rbf_svc": [319, 972], "color_map": 319, "138": [319, 320, 372, 398, 401, 957], "plot_semi_supervised_versus_svm_iri": [319, 320], "697": 320, "auto_examples_semi_supervis": 320, "my_kernel": [322, 972], "102": [322, 337, 372, 990, 1000], "plot_custom_kernel": [322, 337], "2x2": [323, 391, 731], "254": [323, 337, 340], "plot_iris_svc": [323, 337], "convention": [324, 379, 871], "support_vector_indic": 324, "162": [324, 337, 364], "plot_linearsvc_support_vector": [324, 337], "plot_oneclass": [325, 337], "midpoint": 326, "blink": 326, "act": [326, 339, 367, 378, 397, 398, 691, 706, 707, 715, 760, 761, 764, 851, 855, 954, 957, 960, 972, 1006], "spuriou": [326, 374, 1011, 1012], "c_rang": 326, "gamma_rang": 326, "midpointnorm": 326, "masked_arrai": [326, 774, 788], "x_2d": 326, "y_2d": 326, "cheat": [326, 961, 971, 1000], "c_2d_rang": 326, "gamma_2d_rang": 326, "bright": 326, "brutal": 326, "plot_rbf_paramet": [326, 337], "plot_separating_hyperplan": [327, 337], "plain": [328, 401, 635, 971], "n_samples_1": [328, 972], "n_samples_2": [328, 972], "clusters_std": 328, "wclf": 328, "wdisp": 328, "surface_": [328, 609], "plot_separating_hyperplane_unbalanc": [328, 337], "blown": 329, "score_mean": 329, "score_std": 329, "plot_svm_anova": [329, 337], "fignum": [330, 331], "plot_svm_kernel": [330, 337], "plot_svm_margin": [331, 337], "unreg": 331, "perpendicular": 331, "yy_down": 331, "yy_up": 331, "085": [331, 337], "nusvc": [332, 354, 878, 958, 998, 999, 1000, 1003, 1006, 1008, 1009, 1010, 1012], "692": [332, 337], "plot_svm_nonlinear": [332, 337], "svr_rbf": 333, "svr_lin": 333, "svr_poli": 333, "kernel_label": 333, "model_color": 333, "setdiff1d": 333, "907": [333, 337], "plot_svm_regress": [333, 337], "mathcal": [334, 396, 398, 605, 674, 949, 951, 953, 957, 971, 1011], "omega": [334, 394, 951], "model_l1": 334, "logx": 334, "train_size_idx": 334, "results_sc": 334, "c_scale": 334, "model_l2": 334, "546": [334, 337], "plot_svm_scale_c": [334, 337], "break_ti": [335, 877, 880, 972, 1008], "accent": [335, 566, 567, 569, 1008], "plot_svm_tie_break": [335, 337], "emphasi": [336, 394, 877, 878, 879, 880, 881, 964, 977], "subtl": [336, 350, 956, 978], "plot_decision_funct": 336, "sample_weight_last_ten": 336, "sample_weight_const": 336, "clf_no_weight": 336, "clf_weight": 336, "562": [336, 337], "plot_weighted_sampl": [336, 337], "auto_examples_svm": 337, "signatur": [339, 340, 362, 466, 467, 572, 588, 589, 637, 651, 653, 689, 719, 780, 798, 800, 803, 946, 1005, 1011], "size_mb": 339, "utf": [339, 341, 399, 465, 481, 560, 566, 567, 569], "load_dataset": 339, "sublinear_tf": [339, 396, 399, 568, 569], "duration_train": 339, "duration_test": 339, "data_train_size_mb": 339, "data_test_size_mb": 339, "2034": [339, 362], "98mb": 339, "1353": 339, "87mb": 339, "418": 339, "515mb": 339, "7831": 339, "027mb": 339, "ridgeclassifi": [339, 354, 650, 651, 653, 953, 958, 1003, 1007, 1011, 1012, 1013], "sparse_cg": [339, 650, 652, 665, 953, 999, 1005, 1007, 1008, 1012], "rarer": [339, 341, 399], "deeper": [339, 973], "plot_feature_effect": 339, "average_feature_effect": 339, "top5": 339, "top_indic": 339, "predictive_word": 339, "bar_siz": 339, "y_loc": 339, "keith": [339, 998, 1003], "atheist": 339, "orbit": [339, 340], "caltech": 339, "expectedli": 339, "pollut": [339, 705, 762, 957, 963], "sender": [339, 362], "livesei": 339, "solntz": 339, "wpd": 339, "sgi": 339, "jon": [339, 1005, 1008, 1009, 1011, 1012], "nntp": [339, 362, 992], "1qlettinn8oi": 339, "cco": 339, "allan": [339, 1010], "schneider": [339, 1011], "me": 339, "instinct": 339, "happi": [339, 377, 792, 793], "listen": 339, "murder": 339, "voluntari": 339, "disregard": [339, 379, 399, 412, 444, 460, 461, 462, 530, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 699, 700, 701, 762, 809, 810, 819, 827, 834, 845, 846, 852, 853, 856, 860, 863, 864, 866, 876, 878, 881, 884, 886, 957, 1006], "beings": 339, "bahavior": 339, "theirs": 339, "mimicri": 339, "imit": 339, "parrot": 339, "polli": 339, "pulchritud": 339, "anim": [339, 399], "kill": 339, "Or": [339, 348, 395, 396, 849, 957, 963, 971], "sigh": 339, "wonder": 339, "bahaviour": 339, "believ": [339, 374, 377, 981], "primat": 339, "arbitarili": 339, "poster": [339, 366, 367, 991], "weren": [339, 850, 1007], "slai": 339, "mate": 339, "ritual": 339, "whatnot": 339, "aren": [339, 362, 370, 382, 390, 703, 733, 962, 1008, 1010], "ye": [339, 374, 379, 843, 859, 953], "child": [339, 348, 355, 377, 379, 391, 398, 422, 535, 536, 537, 538, 539, 540, 542, 543, 544, 883, 884, 885, 886, 925, 1005], "gorilla": 339, "dolphin": 339, "platypu": 339, "writer": 339, "launch": [339, 340, 382, 981], "custom_nam": 339, "clf_descr": 339, "rocchio": [339, 823], "000693": 339, "5316": 339, "0362": 339, "000752": 339, "00107": 339, "704": 339, "0311": 339, "000718": 339, "752": 339, "0278": 339, "000645": 339, "762": 339, "00301": 339, "00109": 339, "748": [339, 372], "00189": 339, "000463": 339, "779": 339, "training_tim": 339, "txt": [339, 361, 471, 481], "curs": [339, 340, 391, 397, 401, 959, 960, 986, 991], "harm": [339, 368, 399, 770], "373": [339, 342], "plot_document_classification_20newsgroup": [339, 342], "discov": [340, 391, 396, 399, 402, 424, 427, 983, 1013], "metadata": [340, 361, 362, 385, 466, 467, 474, 977, 978, 983], "category_s": 340, "true_k": 340, "3387": 340, "evaluations_std": 340, "fit_and_evalu": 340, "evaluation_std": 340, "score_valu": 340, "std_score": [340, 1011], "reweight": [340, 379, 393, 398, 568, 569, 626, 647, 658], "collis": [340, 341, 399, 560, 567], "x_tfidf": 340, "434": 340, "7929": [340, 1005], "devid": 340, "prod": [340, 599], "phenomenon": [340, 967], "cluster_s": 340, "3384": 340, "1733": 340, "238": 340, "1115": 340, "1417": 340, "599": [340, 658], "1695": 340, "649": 340, "446": [340, 401, 703, 733, 957], "557": 340, "973": [340, 395], "987": 340, "347": 340, "397": [340, 362], "redo": 340, "x_lsa": 340, "explained_vari": [340, 957], "393": 340, "329": [340, 429], "021": 340, "minibatch_kmean": 340, "371": 340, "079": [340, 364], "401": 340, "024": 340, "382": 340, "341": 340, "influenti": [340, 981], "original_space_centroid": 340, "order_centroid": 340, "bibl": 340, "shuttl": 340, "satellit": [340, 960], "sparciti": 340, "lsa_vector": 340, "50_000": 340, "x_hashed_lsa": 340, "412": [340, 474, 953], "439": 340, "328": [340, 707], "345": [340, 364], "055": [340, 364, 957], "358": 340, "309": 340, "df_std": 340, "speak": [340, 354, 367, 971], "safer": [340, 350, 391, 395, 998], "849": [340, 342], "plot_document_clust": [340, 342], "assembl": [341, 836], "18000": [341, 362], "raw_data": 341, "data_size_mb": 341, "3803": 341, "245mb": 341, "anyth": [341, 372, 379, 395, 560, 923, 1012], "unicod": [341, 399, 465, 481, 560, 566, 567, 569, 924, 998, 1006, 1010], "charact": [341, 367, 371, 379, 399, 481, 486, 487, 566, 567, 569, 887, 962, 992, 998, 1011], "underscor": [341, 368, 379, 941, 989, 998, 1008, 1011], "tok": [341, 399], "findal": 341, "token_freq": 341, "dict_count_vector": 341, "145": [341, 391], "47928": 341, "vocabulary_": [341, 399, 559, 566, 569, 992, 998], "19145": 341, "n_nonzero_column": 341, "616": [341, 813, 959, 967], "43873": 341, "inact": [341, 361, 367], "47668": 341, "input_typ": [341, 399, 443, 560], "551": 341, "y_po": 341, "downsid": 341, "featureheash": 341, "implicitli": [341, 375, 398, 575, 610, 611, 855, 947, 949, 964, 967, 972], "token_pattern": [341, 399, 566, 567, 569], "749": 341, "47885": 341, "756": 341, "plot_hashing_vs_dict_vector": [341, 342], "739": 342, "auto_examples_text": 342, "parameter": [344, 401, 592, 593, 600, 601, 772, 773, 953, 954, 962, 967, 973], "weakest": [344, 973], "cost_complexity_pruning_path": [344, 883, 884, 885, 886], "drawstyl": [344, 678], "3272984419327777": 344, "015": [344, 965], "plot_cost_complexity_prun": [344, 349], "ryb": 345, "pairidx": 345, "borderpad": 345, "handletextpad": 345, "plot_iris_dtc": [345, 349], "plot_tre": [345, 348, 973, 1007, 1009, 1010, 1011, 1013], "761": [345, 349], "092": [346, 349], "plot_tree_regress": [346, 349], "regr_3": 347, "y_3": 347, "261": [347, 349], "plot_tree_regression_multioutput": [347, 349], "decision_path": [348, 535, 536, 542, 543, 544, 883, 884, 885, 886, 1004, 1009], "children_left": 348, "children_right": 348, "n_node_sampl": 348, "travers": [348, 960, 964], "n_node": [348, 421, 425, 442, 535, 536, 542, 543, 544, 883, 884, 885, 886, 917], "node_depth": 348, "is_leav": 348, "pop": [348, 377, 890, 987, 1006], "visit": [348, 367, 964], "node_id": [348, 887, 889], "is_split_nod": 348, "children": [348, 391, 398, 421, 425, 442, 544, 1002], "800000011920929": 348, "950000047683716": 348, "node_index": 348, "node_ind": 348, "leaf_id": 348, "sample_id": [348, 362, 475], "threshold_sign": 348, "inequ": [348, 379, 391, 423, 426, 438, 677, 954, 955, 960], "boolean": [348, 362, 367, 368, 375, 392, 398, 399, 400, 443, 539, 540, 559, 560, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 607, 610, 611, 614, 627, 649, 677, 805, 811, 832, 839, 858, 891, 941, 947, 953, 959, 964, 967, 973, 998, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013], "common_nod": 348, "common_node_id": 348, "plot_unveil_tree_structur": [348, 349], "627": 349, "auto_examples_tre": 349, "anti": [350, 584, 811, 959], "x_test_transform": [350, 395], "standard_norm": 350, "unfair": 350, "x_select": 350, "gbc": 350, "x_train_select": 350, "x_test_select": 350, "tip": [350, 353, 357, 367, 369, 386, 399, 512, 519, 623, 670, 953, 979, 993, 994, 996, 1001], "glossari": [350, 357, 367, 368, 372, 390, 402, 403, 417, 420, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 443, 446, 448, 451, 453, 466, 469, 470, 473, 475, 481, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 561, 562, 572, 580, 585, 586, 588, 589, 605, 610, 612, 617, 618, 619, 620, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 668, 669, 670, 671, 672, 673, 679, 751, 755, 758, 768, 772, 773, 774, 776, 777, 778, 779, 780, 786, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 818, 819, 821, 822, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 838, 841, 853, 864, 867, 868, 870, 871, 875, 876, 877, 880, 883, 884, 885, 886, 911, 912, 928, 931, 946, 947, 953, 983, 1006], "mtrand": 350, "_rand": 350, "85418642": 350, "79084103": 350, "13077794": 350, "11915045": 350, "56479934": 350, "70814003": 350, "25291366": 350, "55212743": 350, "18197458": 350, "37845099": 350, "snippet": [350, 367, 371, 374, 377, 387, 398, 399, 400, 947, 967, 980, 1011], "mutat": [350, 1006], "somewhat": [350, 356, 367, 368, 396, 398, 877, 880, 953, 972, 973], "debug": [350, 355, 369, 372, 379, 381, 605, 874, 977, 992, 1006, 1010], "govern": [350, 354, 357, 367, 379, 975, 981], "implic": 350, "rf_123": 350, "rf_inst": 350, "didn": [350, 379, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "strict": [350, 365, 379, 396, 481, 513, 566, 567, 569, 953, 998, 1007, 1010], "pervas": [350, 367], "throughout": [350, 379, 605, 775, 833, 834, 983, 1001, 1006], "codebas": [350, 367, 368, 372, 399, 998, 1004], "unlucki": 350, "lucki": 350, "fairer": 350, "temptat": [350, 367], "throughput": [353, 994, 1001], "switch": [353, 656, 682, 695, 714, 732, 734, 770, 816, 817, 911, 912, 957, 960, 994, 998], "offlin": [354, 367], "review": [354, 362, 368, 369, 371, 372, 377, 380, 395, 396, 513, 519, 957, 967, 984], "bottleneck": [354, 372, 398, 427, 833, 834], "hurt": [354, 512, 1006], "toolkit": [354, 977, 981], "branch": [354, 365, 367, 369, 370, 391, 398, 422, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 883, 884, 885, 886, 888, 960, 964, 973], "sklearn_assume_finit": 354, "config_context": [354, 355, 387, 604, 873, 1005, 1011], "assume_finit": [354, 355, 447, 873], "assert_all_finit": [354, 375, 447], "csc": [354, 377, 379, 399, 529, 531, 532, 648, 670, 843, 845, 851, 856, 858, 860, 866, 891, 895, 896, 922, 932, 933, 935, 936, 937, 938, 960, 967, 1006, 1007, 1009, 1012], "32bit": [354, 924], "speedup": [354, 396, 398, 628, 632, 635, 998, 999, 1000, 1001, 1013], "multithread": [354, 391, 875, 876, 877, 878, 879, 880, 881], "bla": [354, 355, 365, 372, 998, 1006, 1007, 1009, 1010], "sparsity_ratio": 354, "gbt": 354, "speedi": 354, "packet": 354, "reuter": [354, 362], "carefulli": [354, 396], "spawn": [354, 377, 774, 788, 797, 798, 799, 1009], "gil": [354, 355, 925, 1001, 1006, 1007, 1010, 1011], "ought": 354, "lapack": [354, 355, 365, 510, 513, 519, 666, 1013], "dgemm": 354, "show_vers": [354, 365, 367, 374, 382, 1006], "atla": [354, 365], "rebuild": [354, 385, 399, 422], "openbla": [354, 355, 365, 377, 925, 1011], "mkl": [354, 355, 365, 377, 925, 998], "veclib": [354, 377], "osx": 354, "nouri": [354, 999, 1001], "instruct": [354, 367, 368, 369, 370, 371, 374, 377, 378, 481, 566, 567, 569, 983, 992, 998], "ubuntu": [354, 365, 372, 374], "1gb": 354, "mib": [354, 447, 873], "working_memori": [354, 355, 447, 758, 873, 1006], "adher": [354, 368, 379, 906, 907, 998, 999], "pairwise_distances_chunk": [354, 755, 1006, 1009], "facilit": [354, 379, 385, 977, 978, 1004, 1007], "moment": [354, 396, 401, 420, 593, 601, 833, 834, 923, 961, 962], "000024": 354, "027400": 354, "mileag": 354, "deploi": [354, 381, 385, 978, 981], "upstream": [354, 367, 370, 374, 377, 967, 1007], "lighter": [354, 680, 766], "threadpoolctl": [355, 365, 382, 384], "subsect": [355, 390], "worker": [355, 379, 399, 925], "14228": 355, "loki": [355, 925, 957, 1006, 1009], "duplic": [355, 366, 367, 379, 391, 402, 424, 427, 428, 493, 613, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 800, 847, 943, 960, 998, 1001, 1010, 1012], "memmap": [355, 362, 379, 396, 486, 512, 1006], "1mb": [355, 1003], "parallel_backend": [355, 402, 417, 424, 427, 429, 431, 436, 437, 440, 443, 446, 451, 509, 513, 514, 515, 517, 520, 521, 523, 524, 526, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 548, 572, 580, 588, 610, 612, 617, 625, 629, 631, 633, 635, 636, 637, 639, 641, 643, 644, 646, 654, 657, 666, 667, 668, 669, 670, 671, 672, 751, 755, 758, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 818, 819, 822, 824, 826, 827, 829, 830, 835, 838, 870, 871, 1006], "exclus": [355, 377, 396, 398, 605, 606, 608, 946, 953, 957, 958, 981, 1005, 1009], "omp_num_thread": 355, "my_script": 355, "algebra": [355, 365, 369, 377, 396, 399, 441, 842, 967], "bli": [355, 365, 377], "mkl_num_thread": 355, "openblas_num_thread": 355, "blis_num_thread": 355, "bash": [355, 374], "zsh": 355, "prompt": [355, 365, 367, 382, 384, 399, 983], "pypi": [355, 365, 367, 368, 370, 372, 382, 973, 1006, 1010, 1012, 1013], "channel": [355, 362, 365, 377, 399, 471, 472, 561, 562, 564, 565], "subscript": [355, 925, 1011], "max_thread": [355, 372], "n_cpu": [355, 379], "_num_thread": 355, "singleton": [355, 782, 898, 1011], "aforement": [355, 958], "global_random_se": 355, "fixtur": [355, 367], "ci": [355, 369, 370, 374, 959, 1004, 1006], "build_numb": 355, "disrupt": 355, "config": [355, 367, 370, 374, 604, 1006], "contributor": [355, 369, 370, 371, 374, 377, 379, 957, 975, 978, 999, 1000, 1001], "encount": [355, 365, 385, 391, 398, 399, 474, 539, 540, 559, 811, 812, 813, 815, 849, 932, 967, 971, 980, 981, 992, 1006, 1009], "unrel": [355, 371, 374, 399, 493], "watch": [355, 372], "test_your_test_nam": 355, "skip": [355, 367, 368, 375, 399, 447, 546, 624, 625, 630, 638, 639, 640, 649, 659, 873, 992, 1002, 1005, 1008, 1010, 1012], "global_dtyp": 355, "boundscheck": 355, "segfault": [355, 998, 1006, 1011], "posix": [355, 377], "pairwisedistancesreduct": 355, "adequ": [355, 372, 545, 983, 1011], "drive": [356, 396, 397, 398, 527, 971, 981, 992], "passiveaggressiveregressor": [356, 953, 999, 1002, 1005, 1006, 1009, 1011], "maxabsscal": [356, 840, 860, 947, 967, 1003, 1006, 1007, 1008, 1009], "routin": [356, 361, 364, 367, 368, 369, 374, 377, 379, 400, 650, 652, 665, 677, 877, 878, 879, 880, 881, 954, 960, 967, 968, 971, 977, 981, 998, 1012, 1013], "passiveaggress": [356, 399], "late": 356, "fledg": [356, 399], "naivebay": 356, "dramat": 356, "welcom": [357, 366, 367, 374, 380, 978, 980], "roadmap": [357, 975], "persist": [357, 374, 377, 396, 588, 589, 832, 962, 977, 994, 1004, 1007], "miscellan": [357, 360, 361, 1004, 1005, 1012, 1013], "craft": [357, 369], "curat": [357, 367, 369, 370], "conveni": [359, 374, 377, 392, 395, 399, 401, 406, 423, 426, 428, 430, 432, 443, 467, 589, 654, 656, 677, 705, 762, 835, 836, 931, 947, 949, 953, 954, 964, 981, 992, 998], "commun": [360, 366, 369, 371, 374, 379, 382, 391, 398, 516, 518, 525, 670, 688, 848, 947, 954, 960, 967, 971, 975, 977, 981, 1006, 1007], "fetcher": [360, 1003, 1005], "linnerrud": [360, 994], "breast": [360, 478, 994, 1003], "cancer": [360, 478, 571, 572, 823, 994, 1003], "covertyp": [360, 469, 994], "rcv1": [360, 475, 994, 1003], "kddcup": [360, 470, 994], "svmlight": [360, 465, 486, 487, 977, 994, 998, 999, 1005, 1007], "jpeg": [361, 362, 471, 472], "publish": [361, 362, 368, 370, 374, 379, 969, 978, 1010], "creativ": 361, "spare": [361, 652, 653], "pyplpt": 361, "load_svmlight_fil": [361, 998, 999, 1004, 1005, 1006, 1013], "test_dataset": 361, "everybodi": [361, 367], "upload": [361, 365, 370, 377, 649], "mice": [361, 605, 947], "brain": 361, "miceprotein": 361, "1080": [361, 391], "sc": [361, 391], "clara": [361, 1010], "higuera": 361, "katheleen": 361, "gardin": 361, "krzysztof": 361, "cio": 361, "protein": [361, 977], "cite": [361, 391, 975], "kj": [361, 959], "critic": [361, 367, 378, 385, 398, 670, 954, 957, 965, 972, 981, 1009], "syndrom": 361, "plo": [361, 585, 586], "ONE": [361, 585, 586], "e0129126": 361, "40966": 361, "upload_d": 361, "08t16": 361, "17928620": 361, "file_id": 361, "default_target_attribut": 361, "row_id_attribut": 361, "mouseid": 361, "ignore_attribut": 361, "genotyp": 361, "cc18": 361, "study_135": 361, "study_98": 361, "study_99": 361, "md5_checksum": 361, "3c479a6885bfa0438971388283a1ce32": 361, "websit": [361, 362, 364, 367, 380, 961, 971, 981, 992, 999, 1000, 1001], "4550": 361, "creator": [361, 364], "17t14": 361, "1804243": 361, "pone": 361, "0129126": 361, "openml100": 361, "study_14": 361, "study_34": 361, "earliest": [361, 954], "iris_61": 361, "iris_969": 361, "969": 361, "iris_version_3": 361, "vanschoren": [361, 1010], "rijn": [361, 1006], "bischl": 361, "torgo": 361, "acm": [361, 362, 391, 402, 424, 429, 436, 439, 489, 541, 654, 703, 733, 822, 957, 960, 963, 969], "sigkdd": [361, 362, 489, 654, 969], "newslett": 361, "legaci": [361, 370, 379, 925, 998, 1005, 1010], "my": [361, 367, 371, 374, 474], "columnar": [361, 443, 977], "usabl": [361, 367, 368, 379, 385, 399, 774, 925, 998, 1005, 1012, 1013], "io": [361, 364, 365, 367, 370, 372, 374, 379, 385, 670, 977, 996], "json": [361, 367, 382], "sql": 361, "smoothli": 361, "manipul": [361, 387, 485, 925, 977, 1004], "mat": [361, 399], "load_fil": [361, 362, 992, 1000, 1012], "audio": [361, 481], "wish": [361, 367, 373, 375, 382, 391, 628, 629, 632, 633, 634, 642, 643, 912, 984, 992, 1005], "imageio": 361, "wavfil": 361, "wav": 361, "hdf5": 361, "h5py": 361, "pytabl": 361, "april": [362, 642, 663, 664, 1002, 1010], "1992": [362, 364, 395, 398, 545, 546, 623, 953], "1994": [362, 364, 622], "AT": [362, 473], "laboratori": [362, 977], "cambridg": [362, 396, 568, 811, 815, 953, 955, 959], "facial": 362, "upright": 362, "frontal": 362, "movement": 362, "credit": [362, 374, 398, 953, 981], "18846": [362, 466, 467], "20news_hom": 362, "newsgroups_train": 362, "11314": 362, "1073": 362, "20new": [362, 992], "34118": 362, "01327": 362, "newsgroups_test": 362, "vectors_test": 362, "class_prior": [362, 811, 812, 813, 815, 999, 1002], "fit_prior": [362, 811, 812, 813, 815], "88213": 362, "suspici": 362, "show_top10": 362, "top10": 362, "affili": 362, "abund": 362, "clue": [362, 374, 954], "bare": [362, 954, 992], "quotat": 362, "77310": 362, "76995": 362, "cleveland": 362, "indian": 362, "leagu": 362, "team": [362, 369, 370, 377, 379, 975, 977, 981, 998], "ohio": 362, "spark": [362, 978], "death": 362, "floyd": [362, 666, 954], "reckon": 362, "coloni": 362, "owner": [362, 364], "paul": [362, 1001, 1004, 1005, 1006, 1007, 1011, 1012], "dolan": 362, "nicknam": 362, "tribe": 362, "theme": [362, 998], "mlb": [362, 847], "inappropri": [362, 395, 401, 687, 795], "nlp": [362, 396, 399, 811, 815, 955, 981], "cultur": 362, "inflammatori": 362, "famou": [362, 364, 972], "internet": [362, 371, 967, 990], "offici": [362, 368, 372, 379, 382, 471, 475, 977, 992, 1006, 1007, 1010], "verif": [362, 957, 981], "identif": [362, 367, 475, 946, 984], "viola": [362, 1006], "opencv": 362, "detector": [362, 379, 822], "5749": [362, 471, 472], "13233": [362, 471, 472], "5828": [362, 471, 472], "200m": 362, "lfw_home": 362, "rectangular": [362, 379, 912, 978], "1140": 362, "fetch_lfw_pair": [362, 1003, 1013], "lfw_pairs_train": 362, "subdivid": [362, 401], "10_fold": [362, 471], "gari": [362, 1005], "huang": [362, 636, 1004, 1009], "manu": 362, "ramesh": [362, 981, 1001, 1004, 1008], "tamara": 362, "berg": [362, 999, 1000, 1010], "erik": [362, 981, 1001], "miller": [362, 1006, 1007, 1011], "massachusett": 362, "amherst": 362, "30m": 362, "seven": [362, 950], "homepag": [362, 508, 973], "581012": [362, 469], "newswir": 362, "ltd": [362, 981], "804414": [362, 475], "47236": [362, 475], "fetch_rcv1": [362, 1003, 1007], "v2": [362, 475, 642, 663, 664, 953], "chronolog": [362, 475], "23149": [362, 475, 1012], "781265": [362, 475], "lyrl2004": [362, 475], "2286": 362, "810596": 362, "2287": 362, "2288": 362, "uint32": [362, 475], "gmil": 362, "381327": 362, "ccat": 362, "e11": 362, "ecat": 362, "m11": 362, "656": 362, "lewi": [362, 1005, 1009], "yang": [362, 391, 396, 512, 617, 1004, 1005, 1008, 1010, 1011, 1012], "rose": 362, "cup": [362, 957], "tcpdump": 362, "darpa": 362, "intrus": 362, "mit": [362, 372, 391, 401, 588, 589, 592, 597, 600, 621, 644, 645, 654, 813, 950], "lincoln": 362, "inject": [362, 398], "attack": 362, "unrealist": 362, "logged_in": 362, "resp": [362, 398, 575, 772, 773, 971, 1006], "4898431": [362, 470], "976158": 362, "699691": 362, "619052": 362, "95373": 362, "kddcup99": [362, 470], "richard": [362, 400, 636, 999, 1008, 1010, 1012, 1013], "lippmann": 362, "hain": 362, "jonathan": [362, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "korba": 362, "da": [362, 1013], "yamanishi": 362, "takeuchi": 362, "william": [362, 364, 401, 588, 589, 592, 597, 600, 617, 957, 961, 1005, 1006, 1007, 1008], "miln": 362, "discount": [362, 391, 703, 733, 1005, 1008], "sixth": 362, "press": [362, 391, 396, 401, 402, 424, 568, 588, 589, 592, 597, 600, 621, 811, 815, 950, 953, 955, 959], "household": 362, "statlib": 362, "dcc": 362, "ltorgo": 362, "cal_hous": 362, "1990": 362, "censu": 362, "bureau": 362, "resid": 362, "surpinsingli": 362, "vacat": 362, "pace": 362, "kellei": [362, 1000, 1001], "ronald": [362, 961, 1001, 1011], "barri": [362, 1006], "autoregress": 362, "291": [362, 364], "297": 362, "hyperspher": [363, 977], "interleav": [363, 500], "simplif": [363, 366, 371, 998, 1004], "realiti": 363, "make_sparse_uncorrel": 363, "make_friedman1": [363, 398, 517, 521, 571, 572, 610], "make_friedman2": [363, 589, 591, 592, 593, 594, 595, 599, 602, 603], "reciproc": [363, 957], "make_friedman3": 363, "7826": 364, "4194": 364, "9490": 364, "9565": 364, "fisher": [364, 398, 482, 614, 977], "donor": 364, "michael": [364, 391, 429, 606, 615, 669, 772, 947, 953, 981, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1013], "marshal": 364, "arc": [364, 398], "juli": [364, 400, 711, 1001, 1005, 1006, 1007], "1988": 364, "sir": 364, "referenc": [364, 368, 369, 374, 379, 867, 868, 960, 1005, 1011], "duda": [364, 951], "hart": [364, 951, 1006], "taxonom": 364, "annual": [364, 391, 703, 733, 872, 957, 970], "eugen": [364, 999, 1004], "1936": 364, "john": [364, 399, 514, 686, 712, 746, 851, 877, 878, 880, 881, 947, 953, 957, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1011, 1013], "wilei": [364, 947], "1950": [364, 957], "1973": 364, "scene": [364, 960, 962, 1011], "q327": 364, "d83": 364, "son": [364, 947], "isbn": [364, 391, 953], "22361": 364, "dasarathi": 364, "1980": 364, "nose": [364, 1001, 1005], "pami": [364, 391, 702], "gate": [364, 1011], "1972": 364, "mlc": 364, "cheeseman": 364, "autoclass": 364, "conceptu": [364, 398, 955], "alpaydin": 364, "boun": 364, "nist": [364, 957], "bitmap": 364, "preprint": 364, "32x32": 364, "nonoverlap": 364, "4x4": [364, 396, 399], "garri": 364, "candela": 364, "dimmick": 364, "geist": 364, "grother": 364, "janet": 364, "handprint": 364, "nistir": 364, "5469": 364, "kaynak": 364, "msc": 364, "graduat": 364, "bogazici": 364, "cascad": 364, "kybernetika": 364, "ken": [364, 992, 1000, 1007], "tang": [364, 1008, 1009, 1010], "ponnuthurai": 364, "suganthan": 364, "yao": [364, 1004, 1005, 1006, 1007], "kai": [364, 541, 963, 1005], "dimensionalityreduct": 364, "nanyang": 364, "technolog": 364, "claudio": [364, 1012, 1013], "gentil": [364, 1010], "linnerud": [364, 483], "men": 364, "club": 364, "waist": 364, "puls": 364, "chin": [364, 1002], "situp": 364, "tenenhau": 364, "pratiqu": 364, "alcalin": 364, "magnesium": 364, "phenol": 364, "nonflavanoid": 364, "proanthocyanin": 364, "od280": 364, "od315": 364, "dilut": 364, "prolin": 364, "class_2": [364, 488], "1680": 364, "315": 364, "chemic": 364, "grown": [364, 398, 535, 536, 542, 543, 883, 884, 885, 886, 973], "itali": 364, "cultiv": 364, "thirteen": 364, "constitu": 364, "forina": 364, "parvu": 364, "pharmaceut": 364, "food": 364, "technologi": [364, 391, 977, 981], "brigata": 364, "salerno": 364, "16147": 364, "genoa": 364, "lichman": 364, "irvin": 364, "ca": [364, 391, 422, 883, 884, 969, 973], "aeberhard": 364, "cooman": 364, "vel": 364, "rep": [364, 977], "dept": 364, "cook": [364, 998, 1004], "north": [364, 391], "queensland": 364, "submit": [364, 365, 366, 368, 369, 370, 371, 374, 379, 380], "technometr": [364, 393, 448, 453, 963], "rda": 364, "1nn": 364, "THE": 364, "OF": 364, "chemometr": 364, "perimet": 364, "textur": [364, 735, 736, 955], "concav": 364, "symmetri": [364, 677, 849, 852, 863, 955], "fractal": 364, "malign": [364, 478], "benign": [364, 478], "143": [364, 450, 451, 969, 998, 999], "2501": 364, "019": [364, 372, 450], "427": [364, 484, 485, 561, 562], "873": 364, "885": 364, "542": 364, "4254": 364, "664": 364, "208": 364, "357": [364, 478, 876], "wolberg": 364, "nick": [364, 998, 1004, 1005, 1006, 1007], "olvi": 364, "mangasarian": 364, "goo": [364, 478], "gl": [364, 478], "u2uwz2": [364, 478], "needl": 364, "aspir": [364, 367], "fna": 364, "nuclei": 364, "multisurfac": 364, "msm": 364, "bennett": [364, 957], "midwest": 364, "cognit": 364, "societi": [364, 391, 393, 448, 453, 519, 605, 852, 863, 953, 971], "insepar": 364, "uw": [364, 1010], "ftp": [364, 660, 661], "wisc": [364, 870], "prog": 364, "cpo": 364, "nuclear": 364, "tumor": 364, "spie": 364, "1993": [364, 453, 642, 663, 664, 973], "symposium": [364, 391, 439], "861": [364, 765, 766, 957], "870": 364, "san": [364, 399, 969], "jose": [364, 636, 957, 1006, 1008], "prognosi": 364, "577": 364, "august": [364, 391, 489, 512, 972, 998, 1000, 1001, 1005, 1012], "961": [365, 382, 383, 384, 833], "wheel": [365, 367, 370, 382, 1008, 1010, 1012], "quickest": 365, "registri": [365, 382], "uninstal": 365, "git": [365, 368, 370, 374, 980, 998], "fork": [365, 367, 370, 374, 377], "miniforge3": [365, 374], "miniforg": [365, 374, 382], "virtualenv": [365, 367], "venv": [365, 382], "dev0": [365, 370], "pyx": [365, 367, 372, 374], "pxd": [365, 367], "sklearn_fail_no_openmp": 365, "checkout": [365, 367, 370, 374], "cumbersom": 365, "reinstal": [365, 382], "setuptool": 365, "unix": [365, 399], "makefil": 365, "studio": [365, 981], "vs_buildtool": 365, "desktop": 365, "screenshot": 365, "secondli": [365, 367, 377, 391, 398, 635, 953, 992], "architectur": [365, 368, 374, 377, 385, 447, 873, 961, 975, 981, 998], "cmd": 365, "powershel": 365, "struct": [365, 379, 1001], "calcsiz": 365, "distutils_use_sdk": 365, "x86": 365, "buildtool": 365, "vc": 365, "vcvarsal": 365, "bat": 365, "x64": 365, "clang": 365, "confusingli": 365, "usr": 365, "gcc": [365, 372, 377], "libomp": [365, 1010], "silicon": [365, 975], "m1": [365, 975], "januari": [365, 367, 382, 998, 999, 1008, 1010], "arm64": [365, 367, 369, 382], "llvm": 365, "toolchain": 365, "xcode": 365, "conflict": [365, 367, 374, 382, 1005, 1006], "condarc": 365, "channel_prior": 365, "reactiv": 365, "echo": [365, 370], "cxx": 365, "cflag": 365, "cxxflag": 365, "ldflag": 365, "subfold": [365, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 481, 1011], "fopenmp": 365, "export": [365, 368, 385, 887, 888, 973, 977, 980, 1007], "cppflag": 365, "xpreprocessor": 365, "wl": 365, "rpath": 365, "lomp": 365, "sudo": [365, 382], "apt": [365, 374, 382], "pip3": 365, "pythonx": 365, "precompil": 365, "arm": [365, 374, 946], "cython3": 365, "cento": 365, "yum": 365, "devel": 365, "gnu": 365, "port": [365, 382, 1008], "pkg": 365, "build_ext": [365, 372], "sklearn_build_parallel": 365, "tracker": [366, 369, 374, 377, 380, 385, 975, 978], "prioriti": [366, 610, 804, 805, 978, 1001], "guidelin": [366, 369, 371, 372, 374, 390, 391, 398], "reformul": 366, "xyz": 366, "someestim": 366, "glanc": 366, "relabel": [366, 792, 793, 872], "stall": [366, 369], "sprint": [366, 367, 975, 998], "unfinish": [366, 367], "supersed": [366, 1003], "overflow": [366, 374, 377, 1001, 1005, 1006, 1007, 1008, 1009, 1011], "submitt": 366, "strive": [366, 380, 981], "expertis": [366, 367, 377], "unclear": [366, 367, 479], "pleasant": [366, 981], "chime": 366, "permiss": [366, 370, 380, 382, 981, 1013], "matthew": [366, 371, 514, 720, 998, 1001, 1005, 1007, 1011, 1012], "rocklin": [366, 371], "acknowledg": [366, 587], "struggl": 366, "everyon": [367, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "underrepres": 367, "merit": [367, 370, 380], "teach": 367, "priceless": 367, "abid": 367, "codeofconduct": 367, "hesit": 367, "typo": [367, 380, 998], "send": [367, 391, 403, 511], "valuabl": [367, 947, 981], "burden": [367, 848, 978], "slep": [367, 379, 975], "templat": [367, 370, 371, 379, 380, 977], "ecosystem": [367, 947, 976, 981], "contrib": [367, 368, 374, 377, 379, 977, 978], "numpydoc": [367, 379, 382, 384], "compli": [367, 379, 906, 978], "fulfil": [367, 391, 398, 774, 777, 778, 788, 836, 840, 953], "anyon": [367, 380, 981], "gist": [367, 374, 980], "repo": [367, 370, 978], "feasibl": [367, 845, 846, 856], "traceback": [367, 371, 374, 377, 447, 957, 980], "doubt": [367, 953, 963, 977], "companion": [367, 967], "transcript": 367, "inclus": [367, 368, 374, 429, 435, 731, 763, 957, 958, 998, 1012], "yourlogin": 367, "flake8": [367, 382, 384, 556], "mypi": [367, 370, 382, 384, 1009], "synchron": [367, 399], "my_featur": 367, "commit": [367, 370, 374, 380, 980, 998, 999, 1000, 1001], "modified_fil": 367, "committ": [367, 998], "modif": [367, 394, 398, 399, 970], "approv": [367, 380, 398], "mrg": [367, 374], "incomplet": [367, 382, 391, 683, 770, 947, 954, 992, 1002, 1004], "wip": [367, 374, 382], "matur": [367, 977, 978], "broad": [367, 379, 977], "collabor": 367, "_logist": 367, "doctest": [367, 379, 984, 998], "test_logist": [367, 374], "rst": [367, 370, 374, 992, 998, 1003], "test_common": [367, 374], "caught": [367, 374], "editor": [367, 374, 377], "submodul": [367, 370, 372, 390, 949, 955, 998], "intricaci": 367, "narr": [367, 379, 636, 875, 880, 998, 999], "unittest": 367, "tests_for_packag": 367, "static": [367, 368, 372, 374, 624, 625, 630, 631, 638, 639, 640, 641], "workaround": [367, 774, 788], "astropi": 367, "linux": [367, 368, 369, 374, 977, 998], "circleci": 367, "lint": [367, 374], "aarch64": [367, 374, 382], "gh": 367, "nogil": 367, "cpython": [367, 1013], "sklearn_run_float32_test": 367, "lengthi": [367, 377], "etiquett": 367, "she": [367, 865, 866, 1008], "he": [367, 703, 733, 833, 834, 865, 866, 957, 992, 1005, 1012, 1013], "failur": [367, 370, 374, 895, 896, 980, 981, 1011, 1012], "shorten": [367, 972, 1011], "leader": [367, 981], "grab": 367, "familiar": [367, 397, 1006], "acquaint": 367, "experienc": 367, "abandon": 367, "someon": [367, 379, 998], "glad": 367, "restructuredtext": 367, "_build": 367, "viewabl": 367, "pillow": [367, 382, 384], "sphinxext": [367, 382, 384], "opengraph": [367, 382, 384], "vast": 367, "examples_pattern": 367, "your_regex_goes_her": 367, "no_mathjax": 367, "latexpdf": 367, "elabor": [367, 958], "paragraph": [367, 399, 481, 992], "hood": [367, 953, 972], "colon": 367, "selectfpr": [367, 400, 570, 573, 576, 577, 578, 584], "some_param": 367, "hello": [367, 374, 919], "goodby": 367, "liter": [367, 370, 981], "array_paramet": 367, "list_param": 367, "typed_ndarrai": 367, "multioutput_arrai": 367, "bracket": [367, 953], "delimit": [367, 963], "unwritten": 367, "bibliograph": 367, "arxiv": [367, 441], "backtick": [367, 371], "nowadai": 367, "syntax": [367, 371, 372, 374, 392, 946, 983, 1009, 1011], "_my": 367, "ref": [367, 373, 374, 947, 1004], "currentmodul": 367, "succeed": 367, "stone": [367, 883, 884, 973], "subdirectori": 367, "subpackag": [367, 370, 975, 1002, 1007], "cleanup": [367, 998], "charg": 367, "test_requiring_mpl_fixtur": 367, "hang": [367, 980, 1008, 1009], "fruit": [367, 958], "asv": 367, "asv_benchmark": 367, "airspe": 367, "veloc": 367, "publicli": [367, 1008], "zero_on": [367, 999], "example_funct": 367, "exampleestim": 367, "_n_cluster": 367, "versionchang": 367, "meet": [367, 377, 380, 400, 550, 581, 833, 834, 872, 957, 970, 981, 1006, 1007, 1008], "nit": 367, "retract": 367, "grammar": 367, "disambigu": [367, 804, 872, 970, 1013], "immedi": [367, 377, 774, 788, 797, 798, 799, 1006], "Will": [367, 475, 512, 605, 622, 623, 624, 626, 630, 634, 635, 638, 639, 640, 641, 642, 643, 647, 651, 653, 658, 685, 692, 765, 841, 845, 849, 856, 1001, 1002, 1004, 1006], "clariti": [367, 374], "unhelp": 367, "extran": 367, "rewritten": [367, 627, 1000, 1002], "generos": 367, "reward": 367, "heard": 367, "ve": [367, 399, 980, 981, 992, 1005], "enemi": 367, "courtesi": 367, "justifi": [367, 372, 389, 543], "occas": 367, "deserv": [367, 372], "digest": [367, 1013], "overwhelm": 367, "sheer": [367, 981], "myself": 367, "trickiest": 367, "buri": 367, "inherit": [367, 368, 378, 379, 554, 654, 904, 906, 953, 998, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "mixin": [367, 379, 406, 407, 408, 409, 410, 411, 412, 413, 579, 906, 1000, 1009, 1013], "classifiermixin": [367, 368, 379, 395, 1009], "grep": 367, "delai": [367, 474, 774, 788, 797, 798, 799, 925, 1012], "some_funct": [367, 902], "some_iter": 367, "flavor": [367, 960], "pointer": [367, 374, 422, 1007], "mandatori": [367, 399], "favorit": [367, 377, 981], "Being": [367, 380, 385, 953, 960], "killer": [367, 981], "blame": [367, 370], "migrat": [367, 998], "ignorerevsfil": 367, "rev": [367, 585, 586], "ruin": 367, "prolifer": 368, "adopt": [368, 379, 871, 957, 971, 1006, 1013], "predomin": [368, 999], "overrid": [368, 399, 429, 436, 520, 526, 566, 567, 569, 571, 572, 575, 634, 642, 663, 664, 818, 819, 820, 822, 824, 826, 827, 828, 998, 1006, 1008, 1012], "creation": [368, 489, 490, 491, 493, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 634, 816, 817, 981, 1005, 1006, 1007, 1011], "optimis": [368, 391, 960, 977, 1001, 1011, 1013], "rememb": [368, 371, 382, 399, 960, 964, 973], "param1": [368, 989], "param2": [368, 989], "param3": 368, "postpon": [368, 370], "requisit": 368, "liner": [368, 802], "ipython": [368, 371, 372, 374, 984, 992], "session": [368, 372, 377, 382, 976, 981, 992], "trainabl": 368, "trail": [368, 941], "overridden": [368, 379, 401, 520, 526, 594, 599, 602, 672, 1006, 1007], "n_features_in_": [368, 379, 411, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 605, 606, 607, 608, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 1009, 1011, 1013], "slep010": [368, 1009], "duck": [368, 379, 1008], "boilerpl": [368, 981, 992], "check_x_i": [368, 375, 1002, 1006, 1007, 1012], "check_arrai": [368, 375, 512, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "templateclassifi": 368, "demo_param": 368, "myestim": 368, "subestim": 368, "my_extra_param": 368, "my_estim": [368, 392], "subestimator__c": 368, "subestimator__class_weight": 368, "subestimator__du": 368, "subestimator__fit_intercept": 368, "subestimator__intercept_sc": 368, "subestimator__l1_ratio": 368, "subestimator__max_it": 368, "subestimator__multi_class": 368, "subestimator__n_job": 368, "subestimator__penalti": 368, "subestimator__random_st": 368, "subestimator__solv": 368, "subestimator__tol": 368, "subestimator__verbos": 368, "subestimator__warm_start": 368, "__c": 368, "__class_weight": 368, "unpack": 368, "easiest": [368, 374, 392, 954], "__repr__": [368, 978, 1007], "setattr": 368, "accomplish": [368, 524, 954, 958, 960, 981], "deepcopi": 368, "_estimator_typ": [368, 379, 1003], "regressormixin": [368, 379, 444, 1009], "clustermixin": 368, "is_classifi": [368, 379], "predict_log_proba": [368, 379, 527, 528, 529, 531, 533, 535, 537, 542, 571, 572, 636, 637, 654, 774, 777, 778, 788, 797, 811, 812, 813, 814, 815, 833, 836, 872, 877, 880, 883, 885, 972, 998, 1011], "_base": 368, "programmat": [368, 477, 1007], "_get_tag": [368, 1009], "allow_nan": [368, 894, 896], "binary_onli": [368, 1008, 1009], "multioutput_onli": 368, "no_valid": 368, "non_determinist": [368, 1012], "primari": [368, 379, 396, 493, 964, 981], "_safe_split": 368, "preserves_dtyp": 368, "poor_scor": 368, "requires_fit": 368, "requires_positive_x": [368, 1008, 1013], "requires_i": [368, 1009], "requires_positive_i": 368, "_skip_test": 368, "_xfail_check": 368, "check_nam": 368, "xfail": [368, 374], "skiptestwarn": 368, "x_type": 368, "2darrai": 368, "signifi": [368, 391, 559, 785, 962], "1dlabel": 368, "2dlabel": 368, "_more_tag": 368, "mymultioutputestim": 368, "_required_paramet": 368, "ridgeregress": 368, "idiosyncrat": 368, "subclass": [368, 401, 552, 1003, 1006, 1011], "onetoonefeaturemixin": [368, 413], "classnameprefixfeaturesoutmixin": [368, 413, 1013], "auto_wrap_output_kei": 368, "mytransform": 368, "__init_subclass__": 368, "ownership": 368, "pep8": [368, 370, 374], "indent": 368, "nsampl": [368, 772, 773], "statement": [368, 371, 374, 377, 379, 396, 975, 992], "flow": 368, "client": 368, "corollari": 368, "foo": [368, 559, 961], "baz": [368, 559], "pyflak": 368, "asanyarrai": 368, "hadamard": 368, "choose_random_sampl": 368, "freestand": 368, "unmodifi": [368, 379], "random_state_": [368, 514, 515, 605, 825, 1012], "gaussiannois": 368, "showcas": 368, "quasi": [368, 833, 834, 953], "assert_allclos": 368, "rtol": [368, 816, 817, 821], "atol": [368, 816, 817, 821], "checklist": 369, "unclaim": 369, "workflow": [369, 370, 378, 395], "boil": [369, 393], "markdown": 369, "saniti": [369, 840, 957, 998, 999], "outdat": 369, "diff": [369, 957], "valgrind": 369, "platform": [369, 377, 379, 385, 981, 1003, 1006, 1007, 1009, 1011, 1012], "x86_64": 369, "yep": 369, "gperftool": 369, "gprof": 369, "callgrind": 369, "kcachegrind": 369, "warm": [369, 379, 509, 515, 521, 523, 524, 588, 631, 637, 644, 646, 654, 655, 656, 953, 978, 1008, 1010, 1012], "maco": [369, 382, 1006, 1010, 1012], "homebrew": [369, 382], "freebsd": 369, "cron": 369, "rrrcn": 370, "pep101": 370, "build_tool": 370, "blocker": 370, "mileston": 370, "maint_tool": 370, "sort_whats_new": 370, "whats_miss": 370, "fixm": [370, 379], "recip": [370, 954, 981], "yaml": 370, "feedstock": 370, "whats_new": [370, 374], "v0": [370, 450, 451, 457, 490, 566, 567, 569, 774, 788, 835, 838, 999, 1006, 1007, 1008], "alia": [370, 374, 379, 595, 931, 946, 963, 978, 998, 1012], "freez": [370, 382, 385, 978, 981, 1006], "afterward": [370, 513, 519, 800], "0rc1": 370, "__version__": 370, "rebas": 370, "cherri": 370, "shortlog": 370, "f2": [370, 958], "sed": [370, 998], "front": [370, 1005], "rc1": 370, "suffix": [370, 799, 957, 1008], "brows": 370, "3a": 370, "22wheel": 370, "pyproject": 370, "toml": 370, "oldest": [370, 474], "abi": 370, "acronym": 370, "deliveri": 370, "whl": 370, "22publish": 370, "went": [370, 957], "bot": [370, 962, 1012], "sync": 370, "testpypi": 370, "tarbal": [370, 1013], "wheelhouse_upload": 370, "twine": 370, "rrr": 370, "symlink": 370, "latestst": 370, "tmp": 370, "ln": [370, 953, 961, 967], "versionwarn": 370, "secur": [370, 379, 977, 978, 981, 994], "twitter": 370, "linkedin": 370, "squash": [370, 401, 509, 515, 520, 526], "significanli": 370, "authorship": 370, "weekli": 370, "yml": 370, "ui": 370, "enable_hist_gradient_boost": [370, 1007], "permalink": 370, "_hist_gradient_boost": 370, "_iter": 370, "pickl": [370, 379, 385, 399, 566, 567, 569, 816, 817, 977, 978, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012], "checker": [370, 796], "protect": [370, 372], "type_check": 370, "test_enable_hist_gradient_boost": 370, "enable_my_experimental_featur": 370, "indefinit": 370, "incentiv": 370, "workabl": 371, "stackoverflow": [371, 374, 377, 980], "blogpost": 371, "mcve": [371, 374, 377], "my_data": 371, "with_mean": [371, 856, 866, 967, 1006, 1011], "default_scor": 371, "other_scor": 371, "scrollbar": 371, "tripl": 371, "fenc": 371, "qualifi": 371, "a674e682c281": 371, "lda_featur": 371, "lda_model": 371, "n_topic": [371, 514, 1005], "minimalist": [371, 399, 980], "continuous_featur": 371, "positive_featur": 371, "invest": [372, 981], "idiom": 372, "wast": [372, 395, 396, 946], "crunch": 372, "performancetip": 372, "reimplement": [372, 379, 1004, 1008], "spottabl": 372, "amen": [372, 401, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 946], "cpp": 372, "engag": [372, 380], "tent": 372, "somewher": [372, 957, 992], "prun": 372, "magic": [372, 401, 594, 599, 602], "14496": [372, 1007], "682": 372, "ncall": 372, "tottim": 372, "percal": 372, "cumtim": 372, "lineno": 372, "042": 372, "_nls_subproblem": 372, "1263": 372, "_po": 372, "681": 372, "057": 372, "047": 372, "_initialize_nmf": 372, "_spars": 372, "_neg": 372, "337": 372, "461": 372, "spent": [372, 800, 1013], "hotspot": 372, "16159": [372, 1009], "840": 372, "2833": 372, "653": [372, 589, 592, 603], "_dotbla": 372, "651": 372, "036": [372, 451], "1397": 372, "2780": 372, "167": [372, 998], "064": [372, 965], "1542": 372, "2734": 372, "fromnumer": 372, "1185": 372, "lapack_lit": 372, "dgesdd": 372, "rewrit": [372, 973, 991, 998], "shallow": [372, 398, 539, 540, 890], "4x": [372, 1013], "line_profil": 372, "wire": [372, 512, 519], "profile_default": 372, "ipython_config": 372, "terminalipythonapp": 372, "interactiveshellapp": 372, "lprun": 372, "qtconsol": 372, "73153": 372, "h_init": 372, "5863": 372, "nl": 372, "112141": 372, "wtv": 372, "176": [372, 809, 958, 965], "16144": 372, "336": [372, 967], "wtw": 372, "113": [372, 1001], "638": 372, "1880": 372, "195133": 372, "grad": [372, 981], "495761": 372, "777": 372, "proj_gradi": 372, "2449": 372, "1474": 372, "4474": 372, "inner_it": 372, "83833": 372, "hn": 372, "194239": 372, "48858": 372, "150407": 372, "gradd": 372, "193": [372, 398, 693, 763, 970], "515390": 372, "349": 372, "dqd": 372, "pin": 372, "memory_profil": [372, 382, 384], "memit": 372, "mprun": 372, "my_func": 372, "152": 372, "1e7": 372, "402344": 372, "standalon": [372, 636, 875, 980], "youtub": 372, "gmvkiq": 372, "gow8": 372, "scipy2009": 372, "paper_1": 372, "paper_2": 372, "_openmp_help": 372, "IF": 372, "sklearn_openmp_parallelism_en": 372, "cimport": [372, 375, 1006], "omp_get_max_thread": 372, "prang": 372, "bianp": 372, "recompil": [372, 382], "dbg": 372, "fortun": [372, 398, 992, 1011, 1012], "my_fil": 372, "callgrin": 372, "prof": 372, "encapsul": [373, 392], "artist": [373, 418, 610, 676, 678, 679, 680, 780, 889], "classmethod": [373, 418, 609, 610, 675, 676, 678, 679, 680, 780], "line_": [373, 418, 676, 678, 679, 680, 780], "gridspecfromsubplotspec": 373, "subplot_spec": 373, "get_subplotspec": 373, "ax_top_left": 373, "ax_top_right": 373, "ax_bottom": 373, "bounding_ax_": [373, 610], "lines_": [373, 610, 780], "contours_": [373, 610], "advic": [374, 401, 600, 601], "forth": 374, "userscript": 374, "tampermonkei": 374, "greasemonkei": 374, "shortcut": [374, 401], "pr_number": 374, "navig": [374, 1000], "overlai": [374, 610], "codecov": 374, "test_sparsifi": 374, "pdb": 374, "debugg": 374, "ipdb": [374, 992], "shell": [374, 377, 983, 992], "pdbcl": 374, "terminalpdb": 374, "lf": 374, "ff": 374, "tb": [374, 549, 550, 551, 552, 553, 554, 555], "runxfail": 374, "werror": 374, "mailman": 374, "listinfo": 374, "crowd": [374, 380, 954, 978, 980], "imped": 374, "attent": [374, 585, 586, 971], "pytb": 374, "stdin": [374, 992], "perman": 374, "25163598": 374, "issuenumb": 374, "1506": 374, "volunt": 374, "establish": [374, 377, 380, 947], "clarifi": [374, 380, 768], "regression_test": 374, "0008": 374, "patienc": [374, 379], "manifest": [374, 954, 960], "fault": [374, 1006, 1008, 1010], "glibc": 374, "uniniti": 374, "trace": [374, 391, 404, 452, 454, 455, 458, 459, 667, 671, 954, 1009], "supp": 374, "readm": [374, 399, 471], "my_test_script": 374, "mobil": 374, "deploy": [374, 977, 978, 981], "scalewai": 374, "aw": 374, "graviton": 374, "laptop": [374, 447, 873, 1012, 1013], "workstat": 374, "qemu": 374, "docker": [374, 385, 1011, 1012], "multiarch": 374, "ppc64le": 374, "filesystem": [374, 382, 1011], "pushd": 374, "wget": 374, "arm64v8": 374, "mount": 374, "privileg": 374, "pwd": 374, "reinit": 374, "bashrc": 374, "ephemer": 374, "backport": [375, 1005], "evolv": [375, 1013], "as_float_arrai": 375, "column_or_1d": [375, 1009, 1013], "multitarget": 375, "multi_output": [375, 895], "safe_index": [375, 1008], "check_memori": [375, 379, 1005], "5488135": 375, "71518937": 375, "60276338": 375, "54488318": 375, "has_fit_paramet": 375, "randomized_range_find": [375, 999, 1004], "arrayfunc": 375, "cholesky_delet": 375, "min_po": 375, "least_angl": 375, "fast_logdet": 375, "safe_sparse_dot": [375, 1008], "weighted_mod": 375, "sample_without_replac": [375, 1004], "n_popul": [375, 926], "sparsefunc": [375, 1011], "mean_variance_axi": [375, 1004, 1011], "sparsefuncs_fast": 375, "inplace_csr_row_normalize_l1": 375, "inplace_csr_row_normalize_l2": 375, "inplace_csr_column_scal": 375, "sort_graph_by_row_valu": [375, 1013], "single_source_shortest_path_length": 375, "dijkstra": [375, 666, 954], "graph_shortest_path": [375, 1011], "all_estim": [375, 1008, 1009, 1013], "all_displai": [375, 1013], "all_funct": [375, 1013], "is_multilabel": 375, "dict_learn": [375, 509, 515, 524, 999, 1006, 1008, 1011, 1012], "gen_batch": [375, 916], "safe_mask": 375, "safe_sqr": 375, "unifi": [375, 377, 378, 398, 615, 977, 998], "murmurhash3_32": 375, "murmurhash3_x86_32": [375, 924], "cryptograph": 375, "lookup": [375, 924, 1007], "bloom": [375, 924], "384616559": 375, "3910350737": 375, "murmurhash": 375, "graphical_lasso": [375, 450, 451, 1006], "kit": 377, "toolbox": [377, 977, 981], "multilay": [377, 955], "kera": [377, 977], "forese": 377, "redesign": [377, 998], "pystruct": [377, 977], "ssvm": 377, "seqlearn": 377, "4143": 377, "meanwhil": [377, 972], "pipegraph": 377, "squared_loss": [377, 1011], "undertak": 377, "discourag": [377, 382, 667], "slowli": [377, 379, 522, 912], "ordinarili": [377, 379], "corrobor": 377, "proof": [377, 398, 869, 969], "road": 377, "bridg": [377, 954, 977], "reproduct": [377, 953, 980], "guidanc": [377, 401], "gitter": [377, 975, 1005, 1006], "value_kei": [377, 890], "levenshtein": 377, "dna": [377, 606, 947], "rna": 377, "pain": 377, "suppli": [377, 391, 624, 895, 896, 960, 981, 1002, 1004, 1006, 1011], "leven": 377, "acctcctagaag": 377, "acctactagaagtt": 377, "gaatattaggccga": 377, "lev_metr": 377, "algoritum": 377, "brute": [377, 386, 395, 402, 424, 429, 436, 610, 611, 666, 667, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 964, 994, 1002, 1006, 1010, 1013], "multiprocess": [377, 379, 925, 960, 998, 1006, 1012], "exec": 377, "nvidia": 377, "cuda": [377, 387], "reiniti": 377, "culprit": 377, "refus": [377, 865, 866], "forkserv": 377, "joblib_start_method": 377, "set_start_method": 377, "dozen": [378, 401], "unsuperv": [378, 394], "newli": [378, 398, 442, 964, 1004, 1005], "leakag": [378, 379, 392, 994], "disclos": 378, "entail": [378, 854, 856, 971], "r_squar": 378, "searchcv": [378, 1013], "tacit": 379, "inconsist": [379, 399, 486, 487, 877, 880, 899, 963, 972, 994, 998, 1003, 1004, 1005, 1006, 1008, 1011], "elsewher": [379, 441, 442, 450, 451, 457], "formal": [379, 380, 391, 398, 816, 817, 954, 957, 958, 961], "thereof": 379, "transduct": [379, 391, 870, 871, 978], "position": 379, "serial": [379, 977, 978, 994, 998, 1006, 1010], "unpickl": [379, 385, 816, 817, 1004, 1010], "inadvert": 379, "pep257": 379, "nuanc": 379, "flaw": [379, 398], "terminologi": [379, 1006], "est1": [379, 610], "est2": [379, 610], "exemplifi": 379, "_score": [379, 774, 788, 799, 957, 998, 1011], "_loss": [379, 957], "divers": [379, 398], "abstract": [379, 396, 401, 596, 746, 977, 998], "notfittederror": [379, 825, 941, 1002, 1004, 1007, 1008], "descriptor": [379, 486, 487], "hoc": 379, "spectral_embed": [379, 954, 999, 1002, 1004, 1006, 1008, 1011, 1012, 1013], "maxabs_scal": [379, 845, 1006], "astrai": 379, "readthedoc": 379, "entireti": 379, "shield": 379, "n_output": [379, 398, 408, 412, 413, 417, 422, 425, 444, 448, 460, 461, 462, 509, 510, 512, 514, 515, 517, 520, 521, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 606, 608, 611, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 648, 650, 651, 652, 653, 654, 656, 657, 699, 700, 705, 722, 723, 725, 727, 728, 730, 731, 762, 765, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 825, 826, 827, 832, 833, 834, 835, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 867, 868, 870, 871, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 901, 928, 957, 958, 973, 1005, 1008], "synonym": [379, 818, 819, 820, 826, 827, 828], "themat": 379, "alphanumer": [379, 566, 567, 569], "statistician": [379, 856], "prescrib": 379, "baggingclassifi": [379, 398, 534, 885, 1001, 1004, 1005, 1006, 1009, 1013], "estimator__max_depth": [379, 946], "improp": [379, 1005], "pairwise_kernel": [379, 401, 431, 621, 742, 842, 955, 998, 1005], "distancemetr": [379, 397, 816, 817, 960, 1006, 1010, 1011, 1012], "di": [379, 391, 396, 509, 515, 642, 663, 664, 868, 1002, 1011], "vectori": [379, 1008], "noun": 379, "rout": [379, 1012], "fit_param": [379, 413, 417, 422, 425, 444, 509, 510, 512, 514, 515, 517, 520, 521, 527, 545, 546, 547, 548, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 606, 608, 613, 616, 617, 618, 619, 620, 774, 777, 778, 780, 788, 797, 798, 799, 800, 801, 803, 808, 809, 810, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 867, 868, 1005, 1008, 1009, 1010, 1012], "venu": [379, 980], "broadli": [379, 391], "consolid": [379, 380, 998], "coo": [379, 531, 532, 670, 843, 891, 895, 896, 960, 999], "lil": [379, 531, 532, 843, 891, 917, 960], "csgraph": [379, 1011], "absent": [379, 399, 731, 797], "densifi": [379, 396, 636, 637, 644, 646, 654, 655, 656, 875, 947, 1000], "lossili": 379, "unnorm": [379, 514, 954, 1004, 1005], "encompass": [379, 429, 435, 533, 534, 954], "is_regressor": 379, "get_n_split": [379, 775, 776, 779, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 794, 795], "elasticnetcv": [379, 624, 630, 638, 639, 640, 641, 659, 953, 998, 1001, 1009, 1011, 1012], "logisticregressioncv": [379, 636, 953, 958, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1013], "estimatorcv": [379, 978], "loo": [379, 782, 1009], "type_of_target": [379, 843, 958, 1012, 1013], "hashabl": [379, 844, 847, 968], "labelencod": [379, 547, 850, 968, 998, 1006, 1013], "canonic": 379, "xxx": 379, "everywher": 379, "multilabelbinar": [379, 805, 840, 849, 958, 983, 1001, 1003, 1004, 1006, 1007], "nonetheless": [379, 957], "amber": 379, "return_cov": [379, 545, 546, 589, 836], "test_idx": 379, "_idx": 379, "label1": 379, "label2": 379, "class_label": [379, 535, 539, 542, 636, 637, 644, 646, 652, 653, 654, 883, 885, 901, 972], "bincount": [379, 395, 535, 539, 542, 636, 637, 644, 646, 652, 653, 654, 875, 877, 880, 883, 885, 900, 901, 1005], "rebalanc": 379, "compute_class_weight": [379, 1001, 1012], "check_cv": [379, 1003], "obei": [379, 955], "triangl": [379, 396, 423, 426, 438, 677, 955, 960], "concurr": [379, 399, 1010, 1012], "unset": [379, 1006], "get_scor": [379, 710, 1005], "check_scor": 379, "uppercas": [379, 1011], "unavail": [379, 636, 637, 919, 1005, 1011], "deadlock": 380, "meritocrat": 380, "earn": 380, "concret": [380, 400, 537, 538, 646, 652, 653, 654, 655, 867, 868, 953, 971], "consult": [380, 957], "unanim": 380, "outreach": 380, "brand": [380, 382], "social": [380, 391, 981], "ongo": 380, "emeritu": [380, 975], "recant": 380, "strateg": 380, "entiti": [380, 703, 733], "duti": 380, "resign": 380, "occasion": [380, 704, 1007], "escal": 380, "fallback": [380, 804, 805, 957], "hereaft": 380, "lazi": [380, 399, 971, 1002], "opinion": 380, "veto": 380, "appeal": 380, "insuffici": [381, 956, 991], "greatest": [382, 843, 1006], "afraid": 382, "64bit": [382, 998], "miniconda": 382, "administr": 382, "venvpython": 382, "venvsourc": 382, "activatesourc": 382, "activatesklearn": 382, "activatepip": 382, "learnpip": 382, "learnpip3": 382, "learnconda": 382, "installedpython3": 382, "virtualenvpython3": 382, "installedpython": 382, "virtualenvpython": 382, "installedconda": 382, "environmentpython": 382, "virtual": [382, 395, 981], "dnf": 382, "pacman": 382, "raspberri": 382, "lock": [382, 384, 925], "pypy3": [382, 1006], "v5": [382, 1006], "19137": 382, "py3": 382, "apk": 382, "bind": [382, 998, 1005, 1006], "buster": 382, "fedora30": 382, "pkgsrc": 382, "py39": 382, "daal": 382, "daal4pi": 382, "intelpython": 382, "plugin": 382, "appdata": 382, "usernam": 382, "windowsapp": 382, "environmenterror": 382, "errno": 382, "pythonsoftwarefound": 382, "7_qbz5n2kfra8p0": 382, "localcach": 382, "python37": 382, "data_nam": 382, "australian": 382, "data_vers": 382, "lift": 382, "regedit": 382, "menu": 382, "hkey_local_machin": 382, "currentcontrolset": 382, "longpathsen": 382, "broken": [382, 395, 577, 578, 613, 698, 891, 957, 1001, 1005, 1006, 1007, 1009, 1012], "retrain": [385, 978], "untrust": 385, "malici": 385, "unsupport": [385, 471, 1006, 1011], "inadvis": 385, "immut": 385, "snapshot": [385, 537, 538, 978], "portabl": 385, "alex": [385, 399, 972, 998, 1001, 1006, 1008, 1009, 1010, 1012, 1013], "gaynor": 385, "sio": 385, "obj": [385, 545, 546, 919], "get_untrusted_typ": 385, "unknown_typ": 385, "exchang": [385, 980], "markup": 385, "pmml": [385, 977], "onnx": [385, 977, 978], "xml": 385, "sklearn2pmml": [385, 977], "affero": 385, "gplv3": 385, "datastructur": [387, 1006, 1010], "namespac": 387, "array_api": 387, "xp": [387, 394, 851], "x_np": 387, "y_np": 387, "x_cu": 387, "y_cu": 387, "devic": [387, 395, 560], "array_api_dispatch": [387, 447, 873], "_estimator_with_converted_arrai": 387, "transfer": [387, 953, 978], "_array_api": 387, "cupy_to_ndarrai": 387, "_arrai": 387, "lda_np": 387, "submatrix": [388, 406, 430, 432], "unusu": [388, 963, 967, 1006], "submatric": 388, "bipartit": [388, 432, 489, 962], "subgraph": 388, "a_n": 388, "lceil": [388, 963], "log_2": [388, 541, 963], "rceil": [388, 963], "bmatrix": 388, "u_2": 388, "u_": [388, 460, 461, 462], "n_column": [388, 430, 432], "inderjit": [388, 432], "cartesian": [388, 611, 960, 1013], "blockwis": [388, 953], "bistochast": [388, 430], "l_": [388, 589, 630, 718, 957], "k_": [388, 401, 594, 597, 599, 602, 751, 967], "u_1": 388, "v_1": 388, "v_2": 388, "v_": [388, 399], "kluger": [388, 430, 491], "yuval": [388, 430], "microarrai": [388, 430, 491, 606, 947], "cap": [388, 391, 732, 957, 1007], "hochreit": [388, 697], "hungarian": [388, 697], "bodenhof": [388, 697], "fabia": [388, 697], "acquisit": [388, 697], "wilk": 389, "f_i": 389, "train_set": 389, "test_set": 389, "disjoint": [389, 391, 392, 417, 682, 708, 732, 734, 954], "platt": [389, 417, 877, 878, 880, 881, 972], "_i": [389, 398, 948, 953, 957, 961, 972], "_j": [389, 948], "f_j": [389, 965], "precipit": 389, "wea": 389, "640": [389, 468, 484, 485, 561, 562, 946], "1990a": 389, "menon": 389, "ak": [389, 1012, 1013], "jiang": [389, 1002, 1009], "xj": 389, "vembu": 389, "ohno": 389, "machado": [389, 700], "703": [389, 491], "kull": [389, 957], "silva": [389, 666, 954, 1009, 1011], "filho": 389, "flach": [389, 957], "refurbish": 390, "rough": [390, 963, 985], "uniti": 390, "lipschitz": [390, 969], "usecas": 391, "mu_j": 391, "coher": 391, "elong": 391, "lloyd": [391, 423, 426, 428, 438, 1012, 1013], "distant": [391, 670, 687, 960], "sergei": [391, 1000, 1004, 1005, 1006, 1007, 1008], "vassilvitskii": [391, 426, 439], "eighteenth": 391, "siam": [391, 395, 431, 439, 441, 513, 519], "industri": [391, 977], "predetermin": [391, 954], "scullei": 391, "19th": 391, "exemplar": [391, 420, 433, 991], "sent": [391, 805], "leftarrow": [391, 961, 971], "foral": [391, 401, 591], "neq": [391, 957, 959, 967], "notin": 391, "x_j": [391, 401, 592, 593, 597, 600, 601, 603, 948, 949, 953, 960, 972, 973], "dictat": 391, "solvabl": 391, "stella": [391, 431, 441], "yu": [391, 431, 441, 636, 953, 961, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "jianbo": [391, 431, 441, 669], "shi": [391, 431, 441, 669], "anil": [391, 431, 441], "daml": [391, 431, 441], "victor": [391, 431, 441, 1005, 1008], "minden": [391, 431, 441], "lex": [391, 431, 441], "ying": [391, 431, 441, 1012], "adjac": [391, 396, 431, 441, 563, 564, 613, 669, 673, 917, 954, 960, 991], "adjacency_matrix": 391, "ulrik": [391, 431, 441, 669], "von": [391, 431, 441, 669, 977, 1005, 1006], "luxburg": [391, 431, 441, 669], "jitendra": [391, 431, 441, 669], "malik": [391, 431, 441, 669], "walk": [391, 397, 1001], "marina": 391, "meila": 391, "ng": [391, 396, 669, 822, 961, 963, 1009], "jordan": [391, 396, 669, 772, 1008, 1009, 1012, 1013], "yair": [391, 669], "precondit": [391, 431, 441, 673, 973], "zhuzhunashvili": [391, 441], "forbid": [391, 398], "macroscop": 391, "occupi": [391, 957], "manhattan": [391, 421, 425, 429, 436, 677, 739, 748, 755, 756, 757, 823, 955, 960, 1002, 1007], "bisecting_strategi": [391, 423], "largest_clust": [391, 423], "biggest_inertia": [391, 423], "biggest": [391, 394, 396, 423], "steinbach": [391, 1013], "karypi": 391, "vipin": 391, "egin": 391, "minnesota": 391, "june": [391, 954, 1004], "weblog": 391, "abirami": 391, "mayilvahanan": 391, "emerg": [391, 981], "ijet": 391, "jian": 391, "xinyu": 391, "gou": 391, "baod": 391, "hebei": 391, "knee": 391, "triangular": [391, 442, 589, 954], "whichev": [391, 398, 522, 539, 540, 611, 628, 632, 634, 642, 660, 661, 675], "conjunct": [391, 572, 774, 777, 778, 780, 788, 797, 798, 799, 800, 803, 947, 953], "extract_dbscan": 391, "radius_neighbors_graph": [391, 402, 424, 818, 819, 820, 822, 824, 826, 827, 828, 829, 960, 1002, 1007, 1010], "ester": [391, 402, 424], "kriegel": [391, 402, 424, 429, 436, 822, 963], "sander": [391, 402, 424, 429, 436, 822, 963, 1007, 1008], "xu": [391, 394, 402, 424, 971, 1011, 1012], "portland": [391, 402, 424], "aaai": [391, 402, 424, 811, 959], "226": [391, 402, 424], "revisit": [391, 402, 424], "schubert": [391, 402, 424, 429, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1012], "tod": [391, 402, 424], "max_ep": [391, 429, 434, 436], "nearbi": [391, 960], "cluster_hierarchy_": [391, 429], "planar": 391, "peripheri": 391, "hdbscan": [391, 977], "wall": 391, "ankerst": [391, 429, 436], "mihael": [391, 429, 436], "marku": [391, 429, 436, 1006, 1008, 1009, 1010], "breunig": [391, 429, 436, 822, 963], "han": [391, 422, 429, 436, 998, 1006, 1007, 1011], "j\u00f6rg": [391, 429, 436, 1006], "sigmod": [391, 429, 436, 822, 963], "cft": 391, "lossi": 391, "cf": [391, 394, 422, 678, 953, 967, 978], "subclust": [391, 422], "enter": [391, 422, 964], "till": [391, 422, 765, 957], "temporarili": [391, 1003], "farthest": 391, "brc": [391, 422], "tian": [391, 422, 1003, 1004, 1005], "raghu": [391, 422], "ramakrishnan": [391, 422], "maron": [391, 422], "livni": [391, 422], "sfu": [391, 422], "coursecentr": [391, 422], "zhang96": [391, 422], "roberto": [391, 422], "perdisci": [391, 422], "jbirch": [391, 422], "java": [391, 422, 977], "satisfi": [391, 628, 632, 677, 695, 713, 714, 816, 817], "labels_pr": [391, 682, 683, 692, 693, 695, 708, 713, 714, 732, 734, 763, 770], "unadjust": [391, 957, 1010], "swap": [391, 396, 694, 713, 936, 937, 998], "ri": [391, 683, 763], "c_2": [391, 954], "unord": [391, 398], "esp": [391, 998], "hubert": [391, 683, 693, 763], "arabi": [391, 683, 693, 763], "steinlei": [391, 683], "psycholog": [391, 683, 694], "agreement": [391, 682, 694, 732, 734, 770, 957], "22504": 391, "10526": 391, "u_i": [391, 460, 461, 462, 732], "v_j": [391, 732, 962], "veb2009": 391, "a_i": 391, "b_j": 391, "yat2016": 391, "average_method": [391, 682, 734, 1006], "vinh": [391, 682], "veb2010": 391, "strehl": 391, "joydeep": 391, "583": [391, 990], "1162": 391, "153244303321897735": 391, "epp": [391, 682], "bailei": [391, 682], "26th": [391, 703, 733, 957], "1553374": 391, "1553511": 391, "9781605585161": 391, "csail": [391, 644, 645, 654, 813], "volume11": 391, "vinh10a": 391, "algesheim": 391, "tesson": 391, "30750": 391, "1038": 391, "srep30750": 391, "rosenberg": [391, 695, 714, 770], "hirschberg": [391, 695, 714, 770], "b2011": 391, "homogeneity_completeness_v_measur": [391, 1007], "n_k": [391, 528], "n_c": [391, 637], "julia": [391, 695, 714, 770], "media": [391, 981], "hila": 391, "becker": [391, 981, 1001, 1010], "fowlkes_mallows_scor": [391, 957, 1004, 1006], "fmi": [391, 708], "fp": [391, 690, 696, 708, 759, 760, 761, 764, 957], "fn": [391, 690, 696, 708, 759, 760, 761, 764, 957, 958], "47140": 391, "fowkl": [391, 708], "1983": [391, 708, 856], "tandfonlin": 391, "01621459": 391, "10478008": 391, "kmeans_model": 391, "1987": [391, 585, 586, 767, 768], "calinski_harabasz_scor": [391, 1006], "dispers": [391, 688, 702, 953], "561": 391, "n_e": 391, "mathrm": [391, 393, 396, 400, 953, 973], "b_k": 391, "w_k": [391, 953], "c_q": 391, "n_q": 391, "c_e": 391, "cali\u0144ski": 391, "1974": [391, 399, 688], "dendrit": [391, 688], "davies_bouldin_scor": [391, 1006], "6619": 391, "bould": 391, "c_i": [391, 960], "c_j": [391, 962], "s_i": 391, "diamet": 391, "nonneg": [391, 396, 432, 516, 518, 525, 853], "s_j": 391, "max_": [391, 957], "1979": [391, 702, 746], "halkidi": 391, "batistaki": 391, "yanni": 391, "vazirgianni": 391, "michali": 391, "contingency_matrix": [391, 732, 1006], "pair_confusion_matrix": [391, 1010], "permit": [392, 446, 566, 567, 569, 774, 777, 778, 788, 798, 837, 838, 957, 958, 959, 1004], "clf__c": 392, "pca1": [392, 407], "svm1": 392, "77484909e": 392, "07058917e": 392, "pca2": [392, 407], "svm2": 392, "raw_target_regr": 392, "bypass": [392, 577, 624, 630, 883, 884, 885, 886], "check_invers": [392, 444, 840, 967, 1006, 1012], "caller": [392, 624, 625, 630, 638, 639, 640, 659, 865, 866, 925, 933, 934, 935, 1007], "linear_pca": 392, "make_union": [392, 835, 1001, 1005], "incorpor": [392, 398, 956, 977, 981], "unreli": 392, "citi": [392, 399, 445, 992], "london": [392, 399, 445], "sallisaw": [392, 445], "bow": 392, "watson": [392, 977], "moveabl": 392, "feast": 392, "grape": 392, "wrath": 392, "expert_r": 392, "user_r": 392, "city_categori": 392, "title_bow": 392, "city_london": 392, "city_pari": 392, "city_sallisaw": 392, "507": 392, "301": [392, 971], "ignored_new_col": 392, "estimator_html_repr": [392, 1009, 1010, 1011, 1012], "shrunk_covari": 393, "sigma_": [393, 622, 623, 1011], "365": [393, 452], "_k": [393, 951, 953], "glasso": [393, 457], "biostatist": [393, 457], "uncommon": [393, 636, 875, 972], "downweight": [393, 514], "driessen": [393, 448, 453, 963], "fastmcd": [393, 448, 453], "raw_location_": [393, 448, 453], "raw_covariance_": [393, 448, 453], "multidimension": [394, 666, 668, 670, 672, 954, 960], "plsw2a": 394, "u_k": [394, 396], "v_k": [394, 396, 509, 515, 523, 524], "x_k": [394, 396, 951, 960], "y_k": 394, "xi_k": 394, "omega_k": [394, 951], "gamma_k": 394, "delta_k": 394, "deflat": [394, 403, 511], "nipal": [394, 461, 462], "x_rotations_": [394, 460, 461, 462], "y_rotations_": [394, 460, 461, 462], "ty": 394, "x_weights_": [394, 460, 461, 462, 463], "y_weights_": [394, 460, 461, 462, 463], "yv": 394, "tx": 394, "pls1": [394, 462], "pls2": [394, 462], "tx_k": [394, 951], "ty_k": 394, "ja": [394, 1005], "wegelin": 394, "methodolog": [395, 980], "academ": [395, 981], "commerci": [395, 981], "flowchart": [395, 985], "f1_macro": [395, 957, 1002], "custom_cv_2fold": 395, "custom_cv": 395, "9333": 395, "scorer1_nam": 395, "scorer2_nam": 395, "precision_macro": [395, 987], "recall_macro": [395, 957], "test_precision_macro": 395, "test_recall_macro": 395, "prec_macro": 395, "rec_macro": 395, "test_prec_macro": 395, "test_rec_macro": 395, "train_prec_macro": 395, "train_rec_macro": 395, "undistinguish": 395, "kf": [395, 779], "12883823": 395, "rkf": [395, 789], "weigh": [395, 1005], "caveat": [395, 401], "part3": 395, "spector": 395, "submodel": 395, "kohavi": 395, "jnt": 395, "bharat": [395, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "rao": [395, 1010, 1013], "fung": 395, "rosal": 395, "witten": 395, "leavepout": [395, 782, 987], "ss": 395, "gkf": 395, "sgkf": [395, 792], "suboptim": [395, 680, 766, 960, 1006], "leavepgroupsout": [395, 776, 987, 1004], "n_group": [395, 783, 987, 1004], "lpgo": [395, 783], "gss": [395, 776], "withheld": 395, "prohibit": [395, 398, 605, 962, 970, 1005], "predefinedsplit": [395, 987, 1002], "test_fold": [395, 787], "train_indx": 395, "test_indx": 395, "autocorrel": 395, "superset": [395, 795, 957], "surplu": 395, "tscv": [395, 795], "inbuilt": 395, "some_integ": 395, "n_cv": [395, 417], "isotropi": 396, "alik": [396, 955], "halko": [396, 513, 519, 522, 911, 912], "szlam": [396, 911, 912], "disadvantag": [396, 401, 953, 954, 961, 971, 972, 973], "parsimoni": [396, 967], "jen09": 396, "mrl09": 396, "ell_1": [396, 953], "underset": [396, 953, 960, 973], "operatornam": [396, 718, 953, 957, 973], "fro": [396, 516, 518, 525, 671, 953], "gentli": 396, "spirit": 396, "mairal": [396, 509, 515], "bach": [396, 509, 514, 515, 516, 636, 953], "ponc": [396, 509, 515], "sapiro": [396, 509, 515], "jenatton": 396, "obozinski": 396, "scholkopf1997": 396, "bakir2003": 396, "smola": [396, 399, 513, 842, 967, 972], "klau": [396, 513, 842], "berlin": [396, 513, 674, 703, 733, 957], "heidelberg": [396, 513, 674, 703, 733, 957], "eigendecompos": 396, "eigensolv": [396, 431, 441, 513, 522, 673, 954], "eigsh": [396, 513, 1004, 1005], "lehoucq": 396, "sorensen": 396, "lsa": [396, 522, 1000], "synonymi": 396, "polysemi": 396, "lsi": 396, "sigma_k": [396, 951], "columnwis": 396, "sublinear": [396, 568, 569], "use_idf": [396, 399, 568, 569, 992], "textual": [396, 973, 1007], "man": [396, 568, 746, 811, 815, 955, 957, 959], "prabhakar": 396, "raghavan": [396, 568, 811, 815, 955, 957, 959], "hinrich": 396, "sch\u00fctze": [396, 568, 955, 957, 959], "transform_method": 396, "split_cod": 396, "dictionarylearn": [396, 515, 517, 518, 520, 521, 522, 523, 524, 999, 1003, 1005, 1008, 1011, 1012], "overcomplet": 396, "mammalian": 396, "cortex": 396, "inpaint": 396, "h_i": [396, 962], "unobserv": 396, "psi": 396, "sim": [396, 990], "wh_i": 396, "ww": 396, "superflu": 396, "psi_1": 396, "psi_2": 396, "psi_n": 396, "superimpos": 396, "plug": [396, 953, 981, 992], "wh": [396, 516, 518, 525], "hoyer": [396, 1001], "nndsvd": [396, 516, 518, 525, 1007, 1010], "nndsvdar": [396, 516, 518, 525, 1007], "elementwis": [396, 516, 518, 525], "_featur": [396, 516, 518, 525], "kl": [396, 954, 1006], "itakura": [396, 516, 518, 525, 1005], "saito": [396, 516, 518, 525, 1005], "w_new": 396, "forget_factor": [396, 516], "lee": [396, 998, 999, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1013], "seung": 396, "boutsidi": 396, "gallopoulo": 396, "cichocki": [396, 516, 518, 525], "phan": 396, "fevott": [396, 516, 518, 525], "idier": [396, 516, 518, 525], "lefevr": [396, 516], "corpora": 396, "hoffman": [396, 514, 1003, 1010], "unshad": 396, "beta_k": 396, "eta": [396, 514, 654, 655, 656, 961, 971, 1003], "topic_word_prior": [396, 514], "theta_d": 396, "doc_topic_prior": [396, 514], "z_": 396, "w_": [396, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 953, 957, 959, 962], "beta_": 396, "elbo": 396, "overset": [396, 964], "e_": 396, "blei": [396, 514, 772], "wang": [396, 514, 657, 667, 671, 703, 733, 953, 954, 957, 1001, 1003, 1004, 1005, 1006, 1010], "paislei": [396, 514], "kaiser": [396, 510], "talli": 397, "disproportion": 397, "41075698": 397, "41076071": 397, "rho_k": 397, "unsmooth": 397, "scott": [397, 821, 998, 999, 1004, 1006, 1007, 1008, 1013], "silvermann": 397, "propto": [397, 959], "2h": 397, "angular": [397, 670, 741], "contin": [397, 692, 967], "generaliz": 398, "flavour": 398, "b1999": 398, "b1996": 398, "h1998": 398, "lg2012": 398, "bootstrap_featur": [398, 533, 534], "geurt": [398, 533, 534, 535, 536, 543, 544, 885, 886], "346": [398, 479, 533, 534], "b1998": 398, "decoupl": [398, 959], "cancel": [398, 399, 740], "b2001": 398, "bear": [398, 977], "ernst": [398, 535, 536, 543, 544, 885, 886], "wehenkel": [398, 535, 536, 543, 544, 885, 886], "l2014": 398, "lieg": 398, "freund": [398, 531, 532], "fs1995": 398, "w_1": [398, 953, 961], "w_2": [398, 953, 961], "w_n": 398, "w_i": [398, 948, 957], "reappli": 398, "htf": 398, "zzrh2009": 398, "d1997": 398, "semin": 398, "friedman2001": 398, "shelf": 398, "ecologi": 398, "lightgbm": [398, 539, 540, 1007], "nr": 398, "f_m": 398, "h_m": 398, "f_": [398, 613, 957], "l_m": 398, "taylor": [398, 1006, 1008, 1009, 1012], "g_i": [398, 627], "absolute_error": [398, 536, 538, 540, 543, 649, 884, 886, 1011], "sum_m": 398, "softmax": [398, 539, 636, 637, 953, 960, 961], "superior": 398, "ineffici": [398, 423, 552, 804, 805, 960, 962], "r2007": 398, "friedman2002": 398, "1189": 398, "1232": 398, "367": [398, 998], "tremend": 398, "8965": 398, "kown": 398, "grower": [398, 539, 540], "missing": [398, 605, 606, 608, 1007], "comfort": 398, "fisher1958": 398, "loan": [398, 512, 953, 981], "nevertheless": 398, "mayer2022": 398, "mayer": [398, 1010, 1012], "bourassa": 398, "hoesli": 398, "scognamiglio": 398, "valuat": 398, "tianqi": 398, "guestrin": 398, "ke": [398, 1009, 1010], "boostingdecis": 398, "w2": 398, "w3": 398, "lr__c": 398, "rf__n_estim": 398, "w1992": 398, "knr": 398, "stack_method": [398, 545], "286": 398, "225": 398, "126": 398, "stack_method_": [398, 545, 546], "final_layer_rfr": 398, "final_layer_gbr": 398, "final_lay": 398, "multi_layer_regressor": 398, "wolpert": [398, 545, 546], "dubai": 399, "francisco": [399, 969], "movi": [399, 984], "movie_entri": 399, "thriller": [399, 847], "drama": 399, "000e": 399, "003e": 399, "011e": 399, "974e": 399, "unseen_featur": [399, 559], "speech": [399, 957], "chunker": 399, "pos_window": 399, "pos_vector": 399, "1x6": 399, "part_of_speech": 399, "token_featur": 399, "isupp": 399, "uppercase_initi": 399, "all_uppercas": 399, "raw_x": [399, 560], "pos_tagg": 399, "comprehens": [399, 735, 736, 955, 981, 1006], "murmurhash3": [399, 560, 567, 924], "weinberg": 399, "modulo": [399, 1009], "kilian": [399, 1013], "anirban": 399, "dasgupta": [399, 869, 969], "langford": [399, 666, 954], "josh": [399, 1005], "attenberg": 399, "multitask": [399, 958], "punctuat": [399, 566, 567, 569], "diminish": 399, "4x9": 399, "build_analyz": [399, 566, 567, 569, 1008], "interrog": 399, "bigram_vector": 399, "bi": 399, "cool": [399, 998], "feature_index": 399, "him": 399, "constru": 399, "nqy18": 399, "smooth_idf": [399, 568, 569], "_n": [399, 957], "textbook": [399, 568], "6x3": 399, "81940995": 399, "57320793": 399, "47330339": 399, "88089948": 399, "58149261": 399, "81355169": 399, "term1": 399, "term2": 399, "term3": 399, "0986": [399, 840], "819": 399, "8473": 399, "8515": [399, 1005], "5243": 399, "85151335": 399, "52433293": 399, "55422893": 399, "83236428": 399, "63035731": 399, "77630514": 399, "idf_": [399, 568, 569, 1006], "western": 399, "europ": [399, 967], "koi8": 399, "russian": 399, "modern": [399, 447, 481, 568, 668, 672, 707, 873, 954, 978], "unicodedecodeerror": [399, 566, 567, 569], "told": 399, "silent": [399, 559, 832, 967, 1003, 1004, 1006, 1007, 1011, 1012], "chardet": 399, "chardetect": 399, "damag": 399, "sloppili": 399, "ftfy": 399, "mish": 399, "mash": 399, "text1": 399, "sei": 399, "mir": 399, "gegr": 399, "xc3": 399, "xbc": 399, "x9ft": 399, "mein": 399, "sauerkraut": 399, "text2": 399, "holdselig": 399, "sind": 399, "dein": 399, "ger": 399, "xfcche": 399, "text3": 399, "xff": 399, "xfea": 399, "x00u": 399, "x00f": 399, "x00": 399, "x00l": 399, "xfc": 399, "x00g": 399, "x00e": 399, "x00n": 399, "x00d": 399, "x00a": 399, "x00h": 399, "x00r": 399, "x00z": 399, "x00i": 399, "x00b": 399, "x00c": 399, "x00t": 399, "x00o": 399, "spolski": 399, "nnmf": [399, 993, 994, 998], "phrase": 399, "misspel": 399, "rescu": 399, "resili": 399, "wprd": 399, "ngram_vector": 399, "char_wb": [399, 566, 567, 569], "rd": 399, "wo": 399, "wp": [399, 635, 649], "char": [399, 566, 567, 569, 998], "jumpi": 399, "fox": 399, "1x4": 399, "umpi": 399, "1x5": 399, "mpy": 399, "fo": 399, "barrier": 399, "hv": 399, "4x10": 399, "discrep": [399, 992, 1002], "4x1048576": 399, "collid": 399, "ingest": 399, "spend": 399, "my_token": 399, "lowercas": [399, 407, 422, 423, 425, 426, 428, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 566, 567, 569, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 837, 842, 867, 868, 1011], "lucen": 399, "build_preprocessor": [399, 566, 567, 569, 1008], "fanci": 399, "lemmat": 399, "nltk": [399, 976, 977], "word_token": 399, "wordnetlemmat": 399, "lemmatoken": 399, "wnl": 399, "british": 399, "spell": 399, "to_british": 399, "1or": 399, "bt": 399, "1er": 399, "ing": 399, "ation": 399, "1z": 399, "ogu": 399, "og": 399, "customvector": 399, "asian": 399, "one_imag": [399, 562], "fake": 399, "assert_array_equ": 399, "patchextractor": 399, "five_imag": 399, "variancethreshold": [400, 841, 947, 1001, 1008, 1011], "sel": 400, "selectfdr": [400, 570, 574, 576, 577, 578, 584, 1002, 1004, 1005], "selectfw": [400, 570, 573, 574, 577, 578, 584], "genericunivariateselect": [400, 573, 574, 576, 577, 578, 580, 1012], "r_regress": [400, 584, 1011, 1012], "mutual_info_classif": [400, 570, 573, 574, 577, 578, 1004, 1010, 1013], "nonparametr": [400, 585, 586], "bewar": 400, "importance_gett": [400, 571, 572, 575, 1010], "unimport": 400, "lsvc": 400, "baraniuk": 400, "isr": 400, "ist": 400, "utl": 400, "aguiar": 400, "cs_note": 400, "ferri": [400, 957], "versatil": [401, 972, 981], "optima": 401, "markov": [401, 589, 962, 977, 998], "maxima": 401, "ppmv": 401, "0336": 401, "4ppm": 401, "27ppm": 401, "197ppm": 401, "nuisanc": 401, "logit": [401, 636, 637, 953], "one_vs_on": [401, 588, 958], "ingredi": 401, "duv2014": 401, "theta_l": 401, "x_bound": [401, 595], "operand": 401, "k1__": 401, "k2__": 401, "constant_valu": [401, 591, 595], "constant_value_bound": [401, 589, 591, 595], "k1__k1__constant_valu": 401, "value_typ": [401, 595], "n_element": [401, 595], "k2__length_scal": 401, "k1": [401, 599, 602], "k1__k1": 401, "k1__k1__constant_value_bound": 401, "k1__k2": 401, "k1__k2__length_scale_bound": 401, "k2": [401, 599, 602], "k2__length_scale_bound": 401, "69314718": [401, 590, 967], "30258509": 401, "interoper": [401, 975, 978, 994], "pairwisekernel": 401, "_valu": [401, 591], "_level": [401, 603], "k_1": [401, 599, 602], "k_2": [401, 599, 602], "__add__": [401, 602], "__mul___": 401, "__pow__": [401, 594], "2l": [401, 600], "bigg": [401, 597], "bessel": [401, 597], "rightarrow": [401, 597, 961], "quad": [401, 960, 971], "tfrac": 401, "3l": 401, "pp84": 401, "x_d": [401, 592], "inhomogen": [401, 592], "expon": [401, 594, 654, 655, 656, 786, 833, 834, 851, 946], "carl": [401, 588, 589, 592, 597, 600], "rasmussen": [401, 588, 589, 592, 597, 600], "duvenaud": [401, 600, 601], "cookbook": [401, 600, 601], "minkowski": [402, 424, 429, 436, 666, 677, 755, 756, 757, 816, 817, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 960, 998, 1001, 1012, 1013], "metric_param": [402, 424, 429, 436, 666, 670, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 1002, 1005, 1012], "leaf_siz": [402, 424, 429, 436, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828], "kd_tree": [402, 424, 429, 436, 666, 667, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 960, 1011], "balltre": [402, 424, 429, 436, 666, 667, 677, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 954, 998, 1000, 1002, 1006, 1011], "ckdtree": [402, 424, 1000], "inhibit": [402, 424], "core_sampl": 402, "n_core_sampl": [402, 424], "attract": [402, 424, 951, 960, 977], "fun": [403, 511, 981], "logcosh": [403, 511], "fun_arg": [403, 511], "w_init": [403, 511], "whiten_solv": [403, 511, 1013], "return_x_mean": 403, "compute_sourc": 403, "return_n_it": [403, 433, 438, 457, 523, 524, 624, 625, 630, 631, 638, 639, 640, 641, 659, 660, 661, 662, 663, 664, 665, 672, 1012], "cube": [403, 511], "my_g": [403, 511], "x_mean": 403, "AS": 403, "fortran": [403, 519, 624, 625, 630, 631, 638, 639, 640, 641, 643, 659, 662, 663, 664, 895, 896, 998, 1001, 1002, 1006], "hyvarinen": [403, 511], "oja": [403, 511], "shrunk_cov": [404, 458, 459], "subobject": [405, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 443, 444, 448, 449, 450, 451, 452, 453, 454, 455, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 559, 560, 561, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 666, 667, 668, 669, 670, 772, 773, 774, 777, 778, 788, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886], "row_ind": [406, 430, 432], "intp": [406, 430, 432], "col_ind": [406, 430, 432], "get_submatrix": [406, 430, 432], "pca0": 407, "_n_features_out": 407, "class_name0": [407, 422, 423, 425, 426, 428, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 842, 867, 868], "class_name1": [407, 422, 423, 425, 426, 428, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 842, 867, 868], "class_name2": [407, 422, 423, 425, 426, 428, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 842, 867, 868], "feature_names_out": [407, 411, 422, 423, 425, 426, 428, 443, 460, 461, 462, 463, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 527, 544, 545, 546, 547, 548, 559, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 605, 606, 607, 608, 613, 616, 617, 618, 619, 620, 666, 667, 820, 825, 828, 832, 835, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 867, 868, 1012], "harsh": [408, 417, 448, 527, 528, 529, 531, 533, 535, 537, 539, 542, 545, 547, 588, 636, 644, 646, 652, 653, 654, 804, 805, 806, 807, 811, 812, 813, 814, 815, 818, 823, 826, 833, 870, 871, 875, 877, 880, 883, 885, 1008, 1010, 1013], "wrt": [408, 412, 417, 444, 460, 461, 462, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 588, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 650, 651, 652, 653, 654, 656, 657, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 826, 827, 833, 834, 870, 871, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886], "n_samples_fit": [412, 444, 460, 461, 462, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 666, 809, 810, 818, 819, 820, 822, 824, 826, 827, 828, 834, 876, 878, 881, 884, 886], "uniform_averag": [412, 444, 460, 461, 462, 532, 534, 536, 538, 540, 543, 546, 548, 589, 613, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 648, 650, 651, 656, 657, 699, 700, 705, 722, 723, 725, 727, 728, 730, 762, 809, 810, 819, 827, 834, 876, 878, 881, 884, 886, 957, 1007], "n_features_new": [413, 422, 425, 509, 510, 512, 514, 515, 517, 520, 521, 527, 545, 546, 547, 548, 560, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 606, 608, 613, 616, 617, 618, 619, 620, 825, 832, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 867, 868], "base_clf": 417, "calibrated_clf": 417, "072": [417, 626], "927": 417, "x_calib": 417, "y_calib": 417, "prob_tru": [418, 419], "prob_pr": [418, 419], "ref_lin": 418, "alexandru": 419, "22nd": 419, "525": [419, 606, 947], "convergence_it": [420, 433], "hardcod": [420, 433, 1006], "affinity_matrix_": [420, 431, 669], "cluster_center_indic": [420, 433], "compute_full_tre": [421, 425, 1002], "compute_dist": [421, 425, 1010], "inferior": [421, 425, 1009], "n_leaves_": [421, 425], "n_connected_components_": [421, 425, 1007], "branching_factor": 422, "compute_label": [422, 428], "promot": [422, 686, 977, 1009, 1011], "redistribut": 422, "overwritten": [422, 510, 511, 512, 514, 519, 526, 585, 586, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 650, 652, 657, 659, 660, 661, 662, 664, 925, 927, 1011], "root_": 422, "_cfnode": 422, "cftree": 422, "dummy_leaf_": 422, "subcluster_labels_": 422, "scratch": [422, 957, 1000], "centroids_": [422, 823], "copy_x": [423, 426, 438, 513, 622, 623, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 650, 652, 657, 659, 660, 661, 662, 663, 1000, 1006, 1007], "smart": [423, 438, 439, 568], "k_init": [423, 438], "sse": 423, "bisect_mean": 423, "pooling_func": [425, 1006], "xred": 425, "socg2006": 426, "min_bin_freq": [427, 440], "cluster_al": [427, 440], "get_bin_se": 427, "orphan": [427, 440, 998], "hill": [427, 440, 1008], "climb": [427, 440], "reassignment_ratio": 428, "eec": [428, 619], "tuft": 428, "dscullei": 428, "fastkmean": 428, "97727273": 428, "43181818": 428, "cluster_method": 429, "predecessor_correct": [429, 435], "unprocess": [429, 566, 567, 569], "heap": 429, "braycurti": [429, 436, 677, 755, 756, 757], "canberra": [429, 436, 677, 755, 756, 757], "chebyshev": [429, 436, 677, 755, 756, 757, 960], "dice": [429, 436, 677, 755, 756, 757], "kulsinski": [429, 436, 677, 755, 756, 757], "rogerstanimoto": [429, 436, 677, 755, 756, 757], "russellrao": [429, 436, 677, 755, 756, 757], "seuclidean": [429, 436, 677, 755, 756, 757, 823, 1006, 1009, 1010], "sokalmichen": [429, 436, 677, 755, 756, 757], "sokalsneath": [429, 436, 677, 755, 756, 757], "yule": [429, 436, 755, 756, 757], "manhattan_dist": [429, 436, 666, 739, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830, 998, 1008, 1013], "minkowski_dist": [429, 436, 666, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830], "l_p": [429, 436, 666, 818, 819, 820, 822, 824, 826, 827, 828, 829, 830], "upward": [429, 435], "successor": [429, 435, 973, 977], "predecessor": [429, 435, 436], "kdtree": [429, 436, 666, 667, 816, 818, 819, 820, 821, 822, 824, 826, 827, 828, 1000, 1002, 1006, 1010, 1011], "predecessor_": [429, 436], "erich": [429, 1002, 1003, 1006, 1007, 1009, 1010, 1011, 1012], "gertz": 429, "lernen": 429, "wissen": 429, "daten": [429, 1006, 1007], "analysen": 429, "lwda": 429, "318": 429, "n_best": 430, "n_svd_vec": [430, 432], "mini_batch": [430, 432], "n_row_clust": [430, 432, 491], "n_column_clust": [430, 432, 491], "ncv": [430, 432], "n_oversampl": [430, 432, 519, 522, 912, 1012], "kernel_param": [431, 513, 617, 621], "precomputed_nearest_neighbor": [431, 669], "eigendecomposit": [431, 441, 651, 669, 673, 842], "dist_matrix": 431, "517": [431, 441, 990], "csc_matrix": [431, 535, 536, 541, 542, 543, 544, 853, 883, 884, 885, 886, 947, 967, 973, 1003], "best_n_it": 438, "n_local_tri": 439, "n_seed": 440, "multigrid": 441, "multiscal": 441, "preliminari": 441, "heapq": 442, "topolog": [442, 977], "n_connected_compon": 442, "n_leav": [442, 883, 884, 885, 886], "untransform": [443, 446, 968], "transformers_": 443, "fitted_transform": 443, "remaining_column": 443, "named_transformers_": 443, "sparse_output_": [443, 529], "output_indices_": [443, 1011], "datatyp": [443, 445, 1005, 1008], "norm1": 443, "norm2": 443, "text_preprocess": 443, "num_preprocess": 443, "x_t": [443, 605, 835], "sum_n_compon": [443, 835], "transformer_": 444, "predict_param": [444, 545, 546, 836, 1011], "y_hat": 444, "90453403": 445, "50755672": 445, "30151134": 445, "print_changed_onli": [447, 873, 1007, 1009, 1010], "pairwise_dist_chunk_s": [447, 873], "enable_cython_pairwise_dist": [447, 873], "cache_s": [447, 873, 877, 878, 879, 880, 881, 972], "get_config": [447, 758, 873], "offset_": [448, 541, 655, 822, 879, 1006], "raw_support_": [448, 453], "dist_": [448, 453], "true_cov": [448, 450, 451], "7411": [448, 453, 1004], "2535": [448, 453], "3053": [448, 453], "0813": [448, 453], "0427": [448, 453], "correct_covari": [448, 453], "rvd": [448, 453], "covariance_correct": [448, 453], "comp_cov": [448, 449, 450, 451, 452, 453, 454, 455], "get_precis": [448, 449, 450, 451, 452, 453, 454, 455, 510, 512, 519], "is_inli": [448, 541, 822], "reweight_covari": [448, 453], "rvdriessen": [448, 453], "location_reweight": [448, 453], "covariance_reweight": [448, 453], "support_reweight": [448, 453], "negative_mahal_dist": 448, "7569": 449, "2818": 449, "3928": 449, "0622": [449, 455], "0193": [449, 455], "enet_tol": [450, 451, 457, 1003], "graphlasso": [450, 1003, 1006], "049": 450, "038": [450, 451, 833], "n_refin": 451, "graphlassocv": [451, 1000, 1006], "dualiti": [451, 953], "094": 451, "block_siz": [452, 458, 1002], "4406": 452, "1616": 452, "0595": 452, "0075": [452, 519], "rouseeuw1984": 453, "butlerdavi": 453, "butler": [453, 1001, 1009, 1010], "davi": [453, 702, 957, 1002], "jhun": 453, "1385": 453, "7533": [454, 1005], "2763": 454, "3964": 454, "7833": 454, "2431": 454, "3889": 454, "0195": 454, "7387": 455, "2536": 455, "4110": 455, "cov_init": 457, "return_cost": 457, "220446049250313e": [457, 628, 629, 632, 633, 634, 660, 661], "graph_lasso": [457, 1006], "dual_gap": [457, 624, 625, 630, 631, 638, 639, 640, 641, 659, 662], "x_loadings_": [460, 461, 462], "y_loadings_": [460, 461, 462], "plssvd": [460, 461, 979, 994, 1010, 1012], "x_c": [460, 461, 463, 964], "y_c": [460, 461, 463], "y_reconstruct": [460, 461, 462], "x_scores_": [462, 1010], "y_scores_": [462, 1010], "y_transform": 463, "data_hom": [464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 1005], "sklearn_learn_data": [464, 477], "zero_bas": [465, 486, 487], "query_id": [465, 486, 487], "grok": 465, "qid": [465, 486, 487, 999, 1004], "download_if_miss": [466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 1005], "ioerror": [466, 467, 468, 469, 470, 471, 472, 473, 475, 476], "stopword": [467, 992], "target_column": [467, 468, 474], "versionad": [470, 547, 548], "percent": [470, 578, 970], "494021": 470, "slice_": [471, 472, 1013], "195": [471, 472], "unrestrict": 471, "2914": 472, "5748": 472, "n_retri": [474, 1012], "timeout": [474, 1012], "silenc": 474, "ith": [474, 751, 755, 812, 833, 834, 849, 850], "1592": 476, "1212": 476, "1624": 476, "620": 476, "data_filenam": [479, 483], "target_filenam": [479, 483], "container_path": 481, "load_cont": 481, "allowed_extens": 481, "container_fold": 481, "category_1_fold": 481, "file_1": 481, "file_2": 481, "file_42": 481, "category_2_fold": 481, "file_43": 481, "file_44": 481, "mod": 481, "image_nam": 484, "first_img_data": 485, "backup": [486, 998], "instantan": 486, "mycach": 486, "get_data": 486, "mysvmlightfil": 486, "xn": 487, "yn": [487, 958, 959], "q1": 487, "qn": 487, "yi": [487, 959, 1002, 1006, 1007, 1010], "qi": [487, 1010], "triplet": 487, "minval": [489, 491], "maxval": [489, 491], "seventh": [489, 969], "269": 489, "274": 489, "return_cent": [490, 1009], "intric": 490, "basri": 491, "gerstein": 491, "genom": 491, "flip_i": 493, "interdepend": 493, "polytop": 493, "guyon": [493, 571, 572, 957], "madelon": 493, "1991": [494, 495, 496], "12000": 498, "effective_rank": [499, 502], "tail_strength": [499, 502], "bell": [499, 1006, 1008, 1010, 1011], "fat": [499, 502], "crawl": [499, 904], "return_ind": 501, "make_low_rank_matrix": 502, "norm_diag": 505, "make_spd_matrix": 505, "celeux": 506, "el": [506, 1011], "anbari": 506, "marin": 506, "frequentist": 506, "n_dim": [507, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "marsland": 508, "vuw": 508, "nz": 508, "marslast": 508, "ch6": 508, "code_init": [509, 523], "dict_init": [509, 515, 523, 524], "split_sign": [509, 515, 520], "transform_max_it": [509, 515, 516, 520, 1008], "_fro": [509, 515, 523, 524, 624, 625, 630, 638, 639, 640, 659], "lasso_cd": [509, 515, 520, 526], "error_": [509, 521], "minibatchsparsepca": [509, 511, 515, 518, 520, 521, 523, 524, 998, 999, 1009, 1011, 1012, 1013], "sierra": [509, 515], "icml09": [509, 515], "x_hat": [509, 515], "noise_variance_init": 510, "quartimax": [510, 1010], "loglike_": 510, "barber": 510, "bishop": [510, 512, 519, 718, 772, 953, 958, 972], "get_covari": [510, 512, 519], "unmixing_matrix": 511, "whitening_": 511, "kpca": [511, 512, 513, 993, 994, 998], "unsaf": 512, "singular_values_": [512, 519, 522, 1005], "var_": [512, 814, 856, 1011], "miketip": [512, 519], "mppca": [512, 519], "n_samples_seen_": [512, 845, 846, 856, 1006], "batch_size_": 512, "ross": [512, 585, 586, 973, 1012, 1013], "vision": [512, 735, 736, 949, 953, 955, 973, 977, 981, 999], "141": [512, 875, 958], "toronto": [512, 622, 832], "dross": 512, "ivt": 512, "rosslimlinyang_ijcv": 512, "karhunen": 512, "loev": 512, "levi": [512, 1005], "lindenbaum": 512, "1371": 512, "1374": 512, "abstain": 512, "holub": 512, "opportun": [512, 971], "golub": [512, 814, 856], "x_spars": [512, 928, 931], "sigma2": [512, 519], "x_origin": [512, 517, 519, 521, 522, 608, 867, 868], "check_input": [512, 526, 624, 625, 630, 638, 639, 640, 659, 665, 883, 884, 885, 886, 1006], "remove_zero_eig": [513, 1000, 1007], "x_fit_": [513, 621], "eigenvalues_": [513, 1011], "eigenvectors_": [513, 1011], "dual_coef_": [513, 621, 877, 878, 879, 880, 881, 972, 1002], "x_transformed_fit_": 513, "nathan": [513, 1006, 1010, 1013], "gunnar": [513, 912], "tropp": [513, 519], "288": [513, 519], "vladimir": [513, 912, 953, 1008, 1012], "rokhlin": [513, 519, 912], "tygert": [513, 519, 912], "learning_decai": 514, "evaluate_everi": 514, "perp_tol": 514, "mean_change_tol": 514, "max_doc_update_it": 514, "kappa": [514, 694], "tau_0": 514, "pseudocount": [514, 1006], "exp_dirichlet_component_": 514, "n_batch_iter_": 514, "bound_": 514, "doc_topic_prior_": 514, "topic_word_prior_": 514, "franci": [514, 636, 953, 1004], "onlineldavb": 514, "chong": 514, "00360392": 514, "25499205": 514, "0036211": 514, "64236448": 514, "09541846": 514, "15297572": 514, "00362644": 514, "44412786": 514, "39568399": 514, "003586": 514, "vb": 514, "sub_sampl": 514, "doc_topic_distr": [514, 1005], "callback": [515, 517, 523, 524, 825, 978], "invok": [515, 517, 523, 524, 545, 547, 548, 797, 872, 1010], "inner_stats_": [515, 1012], "iter_offset_": [515, 1012], "generattor": 515, "iter_offset": [515, 524, 1012], "fresh_restart": 516, "fresh_restarts_max_it": 516, "_w": [516, 518, 525], "_ratio": [516, 518, 525], "_h": [516, 518, 525], "fresh": [516, 978, 1008], "reconstruction_err_": [516, 518], "andrzej": [516, 518, 525], "anh": [516, 518, 525], "ieic": [516, 518, 525], "708": [516, 518, 525, 727], "waspa": 516, "ridge_alpha": [517, 521, 1005], "power_iteration_norm": [519, 522, 911, 912, 1012], "500x500": 519, "lu": [519, 522, 911, 912, 1004, 1005, 1006, 1007], "n_samples_": 519, "royal": [519, 605, 852, 863, 971], "methodologi": [519, 849, 947, 957, 981], "622": 519, "9924": 519, "30061": 519, "54980": 519, "00755": 519, "99244": 519, "ascontiguousarrai": 519, "sparse_encod": [520, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 660, 661, 662, 663, 664, 998, 1005, 1006, 1008, 1012], "u_init": 521, "v_init": 521, "9666": 521, "oversampl": [522, 998], "indeterminaci": 522, "x_dens": 522, "0157": 522, "0512": 522, "0499": 522, "0479": 522, "0453": 522, "2102": 522, "2410": 522, "5981": 522, "5420": 522, "4486": 522, "3288": 522, "method_max_it": [523, 524, 1008], "dict_learning_onlin": [523, 999, 1008, 1011, 1012], "return_cod": 524, "return_inner_stat": [524, 1012], "inner_stat": [524, 1012], "update_h": 525, "hal": [525, 636, 735, 736, 955], "copy_cov": 526, "orthogonal_mp": [526, 642, 643, 664, 953], "eigen": [527, 651, 669, 673, 951, 1004, 1007], "sum_k": [527, 973], "prior_k": 527, "c_k": 527, "priors_": [527, 528], "scalings_": [527, 528], "xbar_": 527, "reg_param": 528, "scaling_": 528, "colinear": 528, "rotations_": 528, "n_classes_": [529, 531, 533, 535, 537, 542, 588, 804, 805, 883, 885, 999, 1008, 1010], "class_prior_": [529, 814], "n_outputs_": [529, 530, 535, 536, 542, 543, 544, 833, 834, 883, 884, 885, 886], "dummy_clf": 529, "constant_": 530, "dummy_regr": 530, "base_estimator_": [531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 588, 872, 1013], "dok": [531, 532, 843, 1011], "brought": [531, 532, 535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "staged_decision_funct": [531, 537, 539], "staged_scor": [531, 532], "7972": 532, "9771": 532, "estimators_samples_": [533, 534, 541, 1004, 1006, 1009], "estimators_features_": [533, 534, 541], "oob_decision_function_": [533, 535, 542], "oob_prediction_": [534, 536, 543], "8720": [534, 1006], "min_weight_fraction_leaf": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 973, 1001, 1004, 1005], "min_impurity_decreas": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886, 973, 1005], "shannon": [535, 542, 883, 885, 954, 973], "unlimit": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "n_t": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "n_t_r": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "right_impur": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "n_t_l": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "left_impur": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "balanced_subsampl": [535, 542, 1006], "subtre": [535, 536, 537, 538, 542, 543, 883, 884, 885, 886, 973], "unprun": [535, 536, 542, 543, 883, 884, 885, 886], "x_leav": [535, 536, 537, 538, 542, 543, 544, 883, 884, 885, 886], "n_nodes_ptr": [535, 536, 542, 543, 544], "friedman_ms": [536, 537, 538, 543, 884, 886], "extratreeregressor": [536, 541, 544, 885, 963, 1007, 1008, 1009, 1011, 1012], "2727": 536, "dummyestim": [537, 538], "eras": [537, 538, 624, 630, 636, 638, 640, 644, 645, 646, 654, 655, 656, 833, 834], "lossfunct": [537, 538, 646, 654, 655, 1007], "init_": [537, 538], "init_estim": [537, 538], "max_features_": [537, 538, 575, 883, 884, 885, 886, 1012], "_fit_stag": [537, 538], "binary_crossentropi": [539, 1012], "categorical_crossentropi": [539, 1008, 1012], "crossentropi": 539, "deepest": [539, 540, 1009], "reserv": [539, 540, 981, 983], "no_interact": [539, 540, 1013], "do_early_stopping_": [539, 540], "n_trees_per_iteration_": [539, 540], "validation_score_": [539, 540], "is_categorical_": [539, 540], "n_trees_per_iter": 539, "longerr": 541, "max_samples_": 541, "fei": [541, 963], "ting": [541, 963, 1006, 1007], "ming": [541, 963, 1002, 1006, 1007, 1008, 1012], "zhou": [541, 617, 871, 963, 1006], "zhi": [541, 963], "hua": [541, 963], "icdm": [541, 963], "eighth": [541, 963], "tkdd": 541, "n_left": 541, "32987858": 543, "n_out": 544, "one_hot_encoder_": 544, "extratreeclassifi": [544, 886, 958, 1002, 1007, 1008, 1009, 1011, 1012], "moosmann": 544, "trigg": 544, "juri": 544, "random_tre": 544, "x_sparse_embed": 544, "randomtreesembedding_": 544, "final_estimator_": [545, 546], "named_estimators_": [545, 546, 547, 548, 1006, 1008], "named_estim": [545, 546, 547, 548], "parameter_nam": [545, 546, 547, 548], "new_valu": [545, 546, 547, 548], "linearsvr": [546, 881, 1002, 1004, 1009], "flatten_transform": [547, 1005], "le_": 547, "eclf1": 547, "array_equ": [547, 1005], "eclf2": 547, "eclf3": 547, "maj": 547, "probabilities_or_label": 547, "n_regressor": 548, "r1": 548, "r3": 548, "er": 548, "with_traceback": [549, 550, 551, 552, 553, 554, 555], "__traceback__": [549, 550, 551, 552, 553, 554, 555], "repr": [554, 1009, 1010, 1012], "linter": 556, "spam": [559, 687, 718, 811, 957, 959, 981], "feature_names_": 559, "xa": 559, "dict_typ": 559, "conform": [559, 606, 804, 805, 957, 977, 978, 1005, 1011], "1048576": [560, 567], "non_neg": [560, 1005], "eleph": 560, "patch_height": [561, 562, 565], "patch_width": [561, 562, 565], "pe": 561, "pe_fit": 561, "pe_tran": 561, "545706": 561, "image_height": [561, 562, 565], "image_width": [561, 562, 565], "n_channel": [561, 562, 565], "n_patch": [561, 562, 565], "272214": 562, "243": 562, "215": 562, "244": 562, "n_z": 563, "return_a": [563, 564, 1001], "_coo": [563, 564], "image_s": 565, "strip_acc": [566, 567, 569], "nfkd": [566, 567, 569, 1008], "unicodedata": [566, 567, 569], "regexp": [566, 567, 569], "min_n": [566, 567, 569, 998], "max_n": [566, 567, 569, 998], "fixed_vocabulary_": [566, 569], "stop_words_": [566, 569], "delattr": [566, 569, 1010], "vectorizer2": 566, "raw_docu": [566, 569], "get_stop_word": [566, 567, 569], "x_inv": [566, 569], "con": 567, "yates2011": 568, "baeza": [568, 707, 1001], "yate": [568, 707], "ribeiro": [568, 707, 1011], "neto": [568, 707], "addison": [568, 707], "weslei": [568, 707], "mrs2008": 568, "tfid": 568, "22314355": 568, "51082562": 568, "91629073": 568, "_check_stop_list": 569, "pvalu": [570, 573, 574, 576, 577, 578, 801], "k_best": [570, 872, 970], "fdr": 570, "fwe": 570, "iff": [570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 847], "retent": [570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581], "n_selected_featur": [570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581], "n_original_featur": [570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581], "attrgett": [571, 575], "barnhil": [571, 572], "vapnik": [571, 572], "389": [571, 572, 992], "422": [571, 572, 703, 733, 957], "n_subsets_of_featur": 572, "narrai": 572, "benjamini": [573, 1004, 1005], "hochberg": [573, 1004, 1005], "false_discovery_r": 573, "norm_ord": [575, 1005], "threshold_": [575, 1005], "3252302": 575, "83462377": 575, "49750423": 575, "55245": 575, "half_cal": 575, "half_selector": 575, "unspecifi": [577, 578, 776, 954], "_get_support_mask": 579, "n_features_to_select_": 580, "variances_": 581, "weed": 582, "p_valu": [582, 583, 584], "f_statist": [583, 584], "force_finit": [584, 587, 705, 762, 957, 1012], "pearson": [584, 587, 1011], "discrete_featur": [585, 586], "essenc": [585, 586, 720, 954, 957], "hardli": [585, 586], "kraskov": [585, 586], "stogbauer": [585, 586], "grassberg": [585, 586], "phy": [585, 586], "kozachenko": [585, 586], "leonenko": [585, 586], "probl": [585, 586], "peredachi": [585, 586], "correlation_coeffici": 587, "fmin_l_bfgs_b": [588, 589], "max_iter_predict": 588, "copy_x_train": [588, 589], "one_vs_rest": [588, 958], "compoundkernel": [588, 1012], "obj_func": [588, 589], "initial_theta": [588, 589], "theta_opt": [588, 589], "func_min": [588, 589], "_posterior_mod": 588, "log_marginal_likelihood_value_": [588, 589], "9866": [588, 597, 600], "83548752": 588, "03228706": 588, "13222543": 588, "79064206": 588, "06525643": 588, "14410151": 588, "clone_kernel": [588, 589, 1008], "n_kernel_param": [588, 589], "log_likelihood_gradi": [588, 589], "x_train_": 589, "y_train_": 589, "3680": [589, 592, 603], "y_cov": 589, "n_samples_x": [589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 677, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758], "requires_vector_input": [590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "51292546": 590, "09861229": [590, 967], "n_samples_i": [590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 677, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758], "n_kernel": 590, "k_gradient": [590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603], "k_diag": [590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603], "hyperparameter_constant_valu": 591, "3696": 591, "hyperparameter_sigma_0": 592, "edward": [592, 597, 600, 1001, 1006, 1007, 1008, 1009, 1013], "hyperparameter_length_scal": [593, 597, 600, 601], "hyperparameter_period": 593, "0144": 593, "457": 593, "3894": 593, "3467": 593, "namedtupl": 595, "maxsiz": 595, "mat\u00e9rn": 597, "appr": 597, "8513": 597, "0368": 597, "1117": 597, "8086": [597, 1005], "0693": 597, "1220": 597, "gamma_bound": 598, "pairwise_kernels_kwarg": 598, "additive_chi2": [598, 616, 742, 751], "pairwise_kernel_funct": [598, 621, 751], "hyperparameter_gamma": 598, "9733": [598, 601], "8880": 598, "05663": 598, "05532": 598, "8676": [598, 1005], "07073": 598, "06165": 598, "__mul__": 599, "8354": [600, 1005], "03228": 600, "1322": 600, "7906": [600, 627], "0652": 600, "1441": 600, "hyperparameter_alpha": 601, "8881": 601, "0566": 601, "05518": 601, "8678": 601, "0707": 601, "0614": 601, "hyperparameter_noise_level": 603, "initial_strategi": 605, "imputation_ord": [605, 1008], "skip_complet": 605, "min_valu": [605, 1009, 1010], "max_valu": [605, 1009, 1010], "keep_empty_featur": [605, 606, 608, 947, 1013], "nullabl": [605, 606, 607, 608, 1009], "na": [605, 606, 607, 608, 746, 755, 893, 895, 896, 1008, 1009, 1012, 1013], "known_val": 605, "Nearness": 605, "arab": 605, "broadcast": 605, "missingind": [605, 606, 608, 947, 1006, 1007, 1008, 1012], "initial_imputer_": 605, "imputation_sequence_": 605, "feat_idx": 605, "neighbor_feat_idx": 605, "n_features_with_missing_": 605, "indicator_": [605, 606, 608], "knp": 605, "stef": [605, 947], "buuren": [605, 947], "karin": [605, 947], "groothui": [605, 947], "oudshoorn": [605, 947], "buck": 605, "1960": [605, 694], "306": 605, "imp_mean": [605, 608], "9584": [605, 1005], "nan_euclidean": [606, 739, 755], "_pairwise_cal": 606, "kwd": [606, 748, 751, 755, 758, 767, 768], "olga": [606, 947], "troyanskaya": [606, 947], "cantor": [606, 947], "gavin": [606, 947], "sherlock": [606, 947], "pat": [606, 947], "botstein": [606, 947], "russ": [606, 947], "altman": [606, 947], "bioinformat": [606, 947], "520": [606, 825, 947, 960], "n_output_featur": 606, "error_on_new": 607, "features_": [607, 947], "n_missing_featur": 607, "x2_tr": 607, "n_features_with_miss": 607, "statistics_": 608, "n_features_missing_ind": 608, "x_imput": 608, "n_features_out": 608, "quadcontourset": 609, "quadmesh": 609, "feature_1": [609, 888], "feature_2": 609, "nicer": 609, "overwrit": [609, 983, 998, 1009], "pd_result": 610, "target_idx": 610, "decil": [610, 1009], "pdp_lim": 610, "is_categor": 610, "nonexist": 610, "deciles_vlines_": 610, "vlines_": 610, "deciles_hlines_": 610, "bars_": 610, "heatmaps_": 610, "ice_lines_kw": 610, "pd_line_kw": 610, "contour_kw": 610, "disp1": 610, "disp2": 610, "pdp_line_kw": 610, "bar_kw": 610, "heatmap_kw": 610, "seq": 611, "n_values_feature_j": 611, "bre": [612, 973], "4666": 612, "x_min_": 613, "x_max_": 613, "n_threshold": [613, 704, 759, 766], "stepwis": [613, 632, 633, 634, 660, 661, 953], "increasing_": 613, "isotonic_regress": [613, 1011], "secondari": [613, 1002], "leeuw": 613, "1977": 613, "nilotp": [613, 615], "chakravarti": [613, 615], "pava": 613, "hornik": 613, "mair": 613, "kruskal": [613, 668, 672, 954], "psychometrica": 613, "iso_reg": 613, "8628": 613, "7256": 613, "isotonicregression0": 613, "increasing_bool": 614, "fisher_transform": 614, "sample_step": 616, "sample_interv": 616, "sample_interval_": 616, "skewedchi2sampl": [616, 617, 618, 619, 949, 1005, 1012, 1013], "chi2_kernel": [616, 620, 735, 742, 955, 999], "additive_chi2_kernel": [616, 736, 742, 949], "vedaldi": [616, 949], "zisserman": [616, 949, 957], "chi2sampl": 616, "9499": 616, "component_indices_": [617, 1011], "normalization_": 617, "additivechi2sampl": [617, 618, 619, 620, 735, 736, 949, 1012], "kernel_metr": [617, 618, 619, 620], "seeger": 617, "mahdavi": 617, "jin": [617, 1009, 1010], "data_transform": 617, "9987": 617, "fft": 618, "indexhash": 618, "bithash": 618, "indexhash_": 618, "bithash_": 618, "kitchen": [619, 949], "sink": [619, 949], "random_offset_": [619, 620], "random_weights_": [619, 620], "rahimi": [619, 949], "benjamin": [619, 1000, 1001, 1009, 1010, 1011, 1012, 1013], "recht": [619, 949], "berkelei": [619, 883, 884], "brecht": 619, "rah": 619, "rbf_featur": [619, 949], "skewed": [620, 1005], "secant": 620, "hyperbol": [620, 833, 834, 955, 961], "fuxin": 620, "catalin": 620, "ionescu": [620, 949, 1008], "cristian": 620, "sminchisescu": [620, 949], "chi2_featur": 620, "2c": [621, 630, 650, 651, 652, 653, 665, 949], "murphi": [621, 950], "493": [621, 875, 950], "alpha_1": [622, 623, 953], "alpha_2": [622, 623, 953], "lambda_1": [622, 623, 953], "lambda_2": [622, 623, 953], "threshold_lambda": 622, "x_offset_": [622, 623, 1010], "x_scale_": [622, 623, 1010], "mackai": [622, 623, 953], "ashra": 622, "salakhutdinov": [622, 825, 960], "lectur": [622, 949, 976], "utstat": 622, "rsalakhu": 622, "sta4273": 622, "lecture2": 622, "computed_scor": 623, "appendix": [623, 654, 953, 967], "wipf": [623, 953], "nagarajan": [623, 953], "2_2": [624, 625, 630, 631, 632, 633, 634, 638, 639, 640, 641, 650, 659, 660, 661, 662], "glmnet": [624, 625, 998], "sparse_coef_": [624, 630, 638, 640, 998], "dual_gap_": [624, 625, 630, 631, 638, 639, 640, 641, 1011], "max_j": [624, 630], "w_j": [624, 630, 957, 971], "ext": 624, "83816048": 624, "55968825": 624, "451": 624, "coef_init": [624, 625, 630, 631, 638, 639, 640, 641, 644, 646, 654, 655, 656, 659, 662], "mono": [624, 625, 630, 631, 638, 639, 640, 641, 659, 662], "_21": [624, 625, 630, 631, 638, 639, 640, 641, 659, 662], "sum_j": [624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 953, 957, 962], "alpha_min": [624, 625, 628, 630, 631, 632, 634, 638, 639, 640, 641, 659, 660, 661, 662], "alpha_max": [624, 625, 630, 631, 638, 639, 640, 641, 659, 662], "ndim": [624, 625, 630, 631, 638, 639, 640, 641, 659, 662, 895, 896], "multitaskelasticnet": [624, 625, 630, 639, 640, 641, 659, 953, 998, 1005, 1006, 1009, 1011], "multitaskelasticnetcv": [624, 625, 630, 638, 640, 641, 659, 953, 1001, 1008, 1009, 1011], "l1_ratio_": [625, 637, 639], "n_l1_ratio": [625, 637, 639, 1001], "199": [625, 728, 972], "398": [625, 992], "unpen": [626, 647, 658, 953], "raphson": [626, 647, 658], "g_j": [626, 647, 658], "483": 626, "795": 626, "pg_i": 627, "scale_": [627, 845, 846, 854, 856, 865, 967, 1003], "outliers_": 627, "elvezio": [627, 953], "ronchetti": [627, 953], "concomit": [627, 953], "owen": [627, 1007, 1008], "hybrid": [627, 977], "statweb": [627, 660, 661], "hhu": [627, 1007], "284": 627, "7200": 627, "4923": 627, "1698": 627, "0106": 627, "9221": 627, "0226": 627, "fit_path": [628, 632, 633, 634, 660, 661], "jitter": [628, 632, 1009], "coef_path_": [628, 629, 632, 633, 953], "active_": [628, 629, 632, 633], "larscv": [628, 643, 660, 661, 1005, 1011], "max_n_alpha": [629, 633], "n_cv_alpha": [629, 633], "cv_alpha": [629, 633], "lassolar": [629, 630, 631, 633, 634, 641, 642, 643, 660, 661, 662, 953, 990, 998, 999, 1001, 1005, 1008, 1009, 1011], "9996": 629, "2961": 629, "3996": 629, "2_f": 630, "_11": 630, "4951": 631, "2_fro": [631, 640, 641, 662], "coef_path": [631, 641, 662], "46874778": [631, 641, 662], "2159048": [631, 641, 662], "4425765": [631, 641, 662], "23689075": [631, 641, 662], "coef_path_lar": [631, 641, 662], "coef_path_continu": [631, 641, 662], "interp1d": [631, 641, 662], "46915237": [631, 641, 662], "23668876": [631, 641, 662], "congruenc": [632, 633, 634, 660, 661], "fragil": 633, "3972": 633, "2222": 634, "rank_": 635, "singular_": 635, "maxent": [636, 637, 953], "primal": [636, 637, 655, 875, 876, 971, 972], "synthetic_feature_weight": [636, 637], "ciyou": 636, "byrd": 636, "jorg": [636, 1001, 1010, 1012], "noced": 636, "lui": [636, 999, 1001, 1002, 1006], "iem": 636, "lbfgsb": 636, "schmidt": [636, 953, 1001], "le": [636, 844, 948, 953, 960, 968, 970, 1006, 1010, 1011], "roux": [636, 953, 970], "00860051": 636, "defazio": [636, 953], "lacost": [636, 953], "hsiang": [636, 1002], "fu": [636, 1002], "fang": [636, 1005, 1006], "lan": 636, "chih": [636, 1003], "jen": [636, 1006], "maxent_du": 636, "cs_": 637, "l1_ratios_": 637, "coefs_paths_": [637, 1008], "coefs_path": 637, "n_l1_ratios_": 637, "w_ij": 638, "eps_": [638, 640], "45663524": 638, "45612256": 638, "0872422": 638, "fro_2": [639, 641], "multitasklassocv": [639, 1001, 1008, 1009, 1011], "52875032": 639, "46958558": 639, "00166409": 639, "60809415": 640, "94592424": 640, "41888636": 640, "87382323": 640, "9994": 641, "5713": 641, "153": 641, "7971": 641, "9015": [641, 1006], "n_nonzero_coefs_": [642, 643], "orthogonal_mp_gram": [642, 643, 663, 1012], "mallat": [642, 663, 664, 953], "3397": [642, 663, 664], "3415": [642, 663, 664], "papier": [642, 663, 664], "mallatpursuit93": [642, 663, 664], "rubinstein": [642, 663, 664], "zibulevski": [642, 663, 664], "elad": [642, 663, 664], "technion": [642, 663, 664, 953], "ronrubin": [642, 663, 664, 953], "ksvd": [642, 663, 664, 953], "9991": [642, 643, 1006], "3854": [642, 643], "previous_loss": [644, 645, 646, 655], "pa": [644, 645, 872, 953, 957, 970], "preset": [644, 646, 654, 961], "t_": [644, 645, 646, 654, 655, 656, 833, 834, 971], "loss_function_": [644, 646, 654, 655], "volume7": [644, 645], "crammer06a": [644, 645], "crammer": [644, 645, 712, 953, 957, 972], "dekel": [644, 645, 953], "keshat": [644, 645, 953], "shalev": [644, 645, 953, 971], "shwartz": [644, 645, 953, 971], "singer": [644, 645, 712, 953, 957, 971, 972], "26642044": 644, "45070924": 644, "67251877": 644, "64185414": 644, "84127814": 644, "intercept_init": [644, 646, 654, 656], "y_all": [644, 646, 654, 804, 805, 833], "epsilon_insensit": [645, 654, 656, 876, 953, 971], "squared_epsilon_insensit": [645, 654, 656, 876, 953, 1004], "48736655": 645, "18818427": 645, "59122734": 645, "94731329": 645, "02306214": 645, "eta0": [646, 654, 655, 656, 971], "therein": 646, "939": [646, 987], "088": [647, 965], "676": 647, "solver_opt": 648, "ipm": 648, "revis": 648, "linprog": [648, 953], "is_data_valid": [649, 953], "is_model_valid": [649, 953], "max_trial": [649, 953], "max_skip": 649, "stop_n_inli": [649, 953], "stop_scor": [649, 953], "stop_prob": 649, "mad": [649, 1004], "costlier": 649, "n_trials_": 649, "n_skips_no_inliers_": 649, "n_skips_invalid_data_": 649, "n_skips_invalid_model_": 649, "sri": [649, 953, 1005, 1006], "bmva": 649, "bmvc": [649, 953], "paper355": 649, "9885": 649, "9417": 649, "15000": [650, 665, 833, 834], "gcv_mode": [651, 1000], "store_cv_valu": [651, 653, 1006, 1009], "alpha_per_target": [651, 1010], "cv_values_": [651, 653], "ridgeclassifiercv": [651, 652, 765, 957, 958, 1006, 1008, 1009, 1011, 1012], "5166": 651, "gcv": [651, 653], "9595": 652, "9630": 653, "power_t": [654, 655, 656, 833, 834, 971], "best_loss": [654, 656], "leon": [654, 655, 656, 998], "bottou": [654, 655, 656, 961, 971], "pow": [654, 655, 656, 833, 834], "dl": 654, "775047": 654, "775151": 654, "justif": 654, "volume2": 654, "zhang02c": 654, "offset_init": 655, "unshifft": 655, "n_subsampl": [657, 901], "breakdown_": 657, "n_subpopulation_": 657, "xin": [657, 953, 1006], "dang": [657, 953], "hanxiang": [657, 953], "peng": [657, 953, 1004, 1005, 1006, 1008, 1010], "xueqin": [657, 953], "hepe": [657, 953], "olemiss": 657, "xdang": 657, "mtse": 657, "9884": 657, "5871": 657, "coeff": 658, "copy_gram": [660, 661, 664], "return_path": [660, 661, 663, 664], "lars_path_gram": [660, 953, 1007], "tib": [660, 661], "xgamma": 663, "norms_squar": 664, "copy_xi": 664, "return_intercept": [665, 1007], "linearoper": 665, "_preprocess_data": 665, "path_method": [666, 954], "neighbors_algorithm": [666, 667], "arnoldi": [666, 667, 671], "fw": 666, "warshal": [666, 954], "kernel_pca_": 666, "nbrs_": [666, 667], "dist_matrix_": 666, "tenenbaum": [666, 954], "reconstruction_error": 666, "frobenius_norm": 666, "d_fit": 666, "x_fit": 666, "n_queri": [666, 818, 819, 820, 822, 824, 826, 827, 828], "hessian_tol": [667, 671], "modified_tol": [667, 671], "reconstruction_error_": 667, "rowei": [667, 671, 825, 954, 960], "saul": [667, 671, 954, 1005, 1006, 1008], "2323": [667, 671, 954], "donoho": [667, 671, 954], "grime": [667, 671, 954], "natl": [667, 671, 954], "acad": [667, 671, 954], "5591": [667, 671, 954], "mlle": [667, 671, 954], "zha": [667, 671, 954], "shanghai": [667, 671, 954], "univ": [667, 671, 954], "406": [667, 671, 954], "immers": [668, 672], "nonmetr": [668, 672], "smacof": [668, 1013], "stress": [668, 672, 954, 1013], "stress_": 668, "dispar": [668, 672, 954], "dissimilarity_matrix_": 668, "psychometrika": [668, 672, 954], "1964": [668, 672, 852, 863, 954], "borg": [668, 672, 954], "groenen": [668, 672, 954], "affinity_matrix": 669, "n_neighbors_": [669, 822], "early_exagger": 670, "min_grad_norm": [670, 1004], "square_dist": [670, 1010], "der": [670, 674, 954, 1001, 1002, 1006], "maaten": [670, 674, 954], "bhtsne": [670, 1005], "opentsn": 670, "abort": 670, "pdist": [670, 677, 755, 758], "pairwise_distance_funct": [670, 674, 755, 758, 960], "barn": [670, 1003, 1005, 1008], "hut": [670, 1003, 1005, 1008], "nlogn": 670, "kl_divergence_": [670, 1005], "learning_rate_": [670, 834], "hinton": [670, 825, 832, 833, 834, 954, 960, 961, 962], "2579": 670, "2605": 670, "lvdmaaten": [670, 1005], "oct": [670, 746, 954, 960], "3221": [670, 954], "3245": [670, 954], "jmlr_2014": 670, "belkina": [670, 954], "ciccolella": [670, 954], "anno": [670, 954], "halpert": [670, 954], "spidlen": [670, 954], "snyder": [670, 954], "cappion": [670, 954], "kobak": [670, 1011], "beren": 670, "transcriptom": 670, "guttman": 672, "norm_laplacian": 673, "drop_first": 673, "nk": 674, "2n": [674, 949, 961], "3k": 674, "cosine_dist": [674, 739, 960, 1004], "jarkko": 674, "venna": 674, "samuel": [674, 981, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "kaski": 674, "icann": 674, "verlag": 674, "485": 674, "491": 674, "twelth": 674, "pmlr": 674, "391": 674, "im_": 675, "axesimag": 675, "text_": 675, "include_valu": 675, "values_format": [675, 1008], "im_kw": [675, 1012], "text_kw": [675, 1013], "get_metr": 677, "19615242": 677, "euclideandist": 677, "manhattandist": 677, "chebyshevdist": 677, "minkowskidist": [677, 1011], "wminkowski": [677, 823, 1010, 1012], "wminkowskidist": 677, "seuclideandist": 677, "mahalanobisdist": 677, "haversinedist": 677, "arcsin": [677, 741], "hammingdist": 677, "n_unequ": 677, "n_tot": 677, "canberradist": 677, "braycurtisdist": 677, "abbrevi": 677, "ntt": 677, "ntf": 677, "nft": 677, "nff": 677, "nneq": 677, "jaccarddist": 677, "matchingdist": 677, "dicedist": 677, "kulsinskidist": 677, "rogerstanimotodist": 677, "russellraodist": 677, "sokalmichenerdist": 677, "sokalsneathdist": 677, "pyfunc": 677, "pyfuncdist": 677, "dist_to_rdist": 677, "surrog": [677, 981], "cdist": [677, 1011], "rdist_to_dist": 677, "rdist": 677, "predictionrecalldisplai": [678, 957], "errors_lines_": 679, "with_error": 679, "scatter_": 679, "drop_intermedi": [680, 766], "balanced_accuracy_scor": [681, 764, 957, 1006], "imperfectli": [681, 711, 957], "label_tru": [682, 695, 714, 732, 734, 770], "upperlimit": 682, "nat": [682, 732, 734, 1012], "expected_ri": 683, "discord": 683, "hubert1985": 683, "1007": 683, "2fbf01908075": 683, "steinley2004": 683, "wk": 683, "rand_index": 683, "adjusted_rand_index": 683, "chacon": 683, "chac\u00f3n": 683, "rastrojo": 683, "balanced_accuraci": [686, 957, 1006], "brodersen": 686, "ong": 686, "stephan": [686, 1001, 1007, 1008, 1010], "buhmann": 686, "20th": 686, "3121": 686, "kelleh": [686, 957], "aoif": [686, 957], "arci": [686, 957], "y_true_categor": [687, 957], "037": 687, "calinski": [688, 1004], "harabasz": 688, "allow_non": 689, "thrown": [689, 1007, 1008], "tn": [690, 696, 957], "negative_class": 690, "zebra": 690, "output_dict": [691, 1006, 1010], "zero_divis": [691, 706, 707, 715, 760, 761, 764, 1008, 1010], "precision_recall_fscore_support": [691, 706, 707, 761, 764, 957, 1002, 1006, 1008], "multilabel_confusion_matrix": [691, 706, 707, 715, 761, 764, 957, 1007], "conting": [692, 693, 708, 732, 1004], "n_classes_tru": [692, 732], "n_classes_pr": [692, 732], "cohen": [694, 1006], "p_o": 694, "p_e": 694, "artstein": 694, "poesio": 694, "linguist": [694, 872, 970], "555": 694, "label_pr": [695, 713, 714, 732, 734, 770], "ant": [696, 731, 957], "bird": [696, 731, 957], "a_row": 697, "a_column": 697, "b_row": 697, "b_column": 697, "tsoumaka": [698, 711, 717, 957], "kataki": [698, 711, 717, 957], "vlahava": [698, 717, 957], "handbook": [698, 717, 957], "667": [698, 717, 957], "685": [698, 717, 957], "raw_valu": [699, 700, 705, 722, 723, 725, 727, 728, 730, 762, 957, 1006, 1009], "eq": [699, 700, 701], "wainwright": [699, 700, 701], "su": [699, 700, 701], "statlearnspars": [699, 700, 701], "764": [699, 957], "8125": 699, "57142857": 699, "d2": 700, "d2_absolute_error_scor": [700, 957, 1012], "koenker": [700, 953], "roger": [700, 1005, 1006, 1010], "jos\u00e9": [700, 1001, 1011], "772": 700, "487": 701, "630": 701, "bouldin": 702, "farther": 702, "log_bas": 703, "ignore_ti": [703, 733], "ndcg": [703, 733, 957, 1005], "ndcg_score": [703, 957, 1005, 1008, 1013], "sharper": 703, "discounted_cumulative_gain": 703, "dcg": [703, 733, 957, 1005], "jarvelin": [703, 733, 957], "kekalainen": [703, 733, 957], "colt": [703, 733, 957], "mcsherri": [703, 733, 957], "najork": [703, 733, 957], "european": [703, 733, 957], "421": [703, 733, 957], "groud": [703, 733], "true_relev": [703, 733], "propabl": 704, "imperfect": [705, 762, 957, 1000], "variance_weight": [705, 762, 957], "n_unique_label": [706, 707, 715, 760, 761, 764, 923], "fbeta_scor": [706, 719, 760, 957, 1000, 1001, 1002, 1003, 1008], "undefinedmetricwarn": [706, 707, 760, 761, 764, 1007], "66666667": [706, 759, 826, 967], "lend": [707, 981], "fowlk": [708, 1004], "mallow": [708, 1004], "get_scorer_nam": [709, 957, 1012], "forgiv": 711, "upperbound": 711, "grigorio": 711, "ioanni": 711, "wareh": 711, "septemb": [711, 957, 998, 1001, 1004, 1006, 1011], "pred_decis": [712, 957, 1011], "disagre": [712, 964], "kobi": 712, "yoram": 712, "265": [712, 811, 815, 959], "AND": 712, "denero": 712, "gluster": 713, "v_measur": [713, 770], "6666": [715, 957, 1004], "5833": [715, 957], "lrap": [716, 957], "416": [716, 957], "21616": 718, "needs_proba": [719, 1007], "needs_threshold": [719, 957], "ftwo_scor": [719, 957], "mcc": [720, 957, 1012], "baldi": 720, "brunak": 720, "chauvin": 720, "andersen": [720, 1012], "nielsen": [720, 1006], "gorodkin": 720, "jurman": 720, "riccadonna": 720, "furlanello": 720, "cen": 720, "mape": [723, 957], "3273": 723, "5515": 723, "6198": 723, "112589990684262": 723, "0568": 724, "4260": [726, 729], "612": 727, "822": 727, "41666667": 727, "msle": [728, 957], "rmsle": 728, "00462428": 728, "08377444": 728, "samplewis": [731, 957], "mcm": [731, 957], "mcm_": 731, "multi_confus": 731, "normalized_discounted_cumulative_gain": 733, "dcg_score": [733, 957, 1005, 1008], "kernel_matrix": [735, 736, 743, 753], "marszalek": [735, 736, 955], "lazebnik": [735, 736, 955], "schmid": [735, 736, 955], "ouvert": [735, 736, 955], "00171412": [735, 736, 955], "cosine_similar": [737, 742, 955, 1003], "dense_output": [738, 744, 868, 913, 1006], "linear_kernel": [738, 742, 955, 1006], "haversine_dist": [739, 1007], "y_norm_squar": 740, "x_norm_squar": [740, 1003], "catastroph": [740, 978], "paired_dist": [740, 746, 755, 1002], "41421356": [740, 746, 960], "ezeiza": 741, "airport": 741, "bueno": 741, "argentina": 741, "gaull": 741, "franc": 741, "bsa": 741, "83333": 741, "5166646": 741, "0083899664": 741, "53844117956": 741, "bsas_in_radian": 741, "paris_in_radian": 741, "6371000": 741, "kilomet": 741, "11099": 741, "54035582": 741, "polynomial_kernel": [742, 955], "rbf_kernel": [742, 955, 1002], "laplacian_kernel": [742, 955, 1003], "sigmoid_kernel": [742, 955], "kernal_metr": 742, "sum_over_featur": [745, 998, 1013], "componentwis": 745, "sq": 746, "dixon": [746, 1008, 1009], "cybernet": 746, "621": 746, "ieeexplor": 746, "4310090": 746, "filter_param": 751, "jth": [751, 755], "tanh": [754, 833, 834, 955, 972], "force_all_finit": [755, 893, 895, 896, 1009, 1012], "distance_metr": [755, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830], "metric_kwarg": [756, 757], "reduce_func": [758, 1009], "d_chunk": 758, "sought": 758, "neigh": [758, 818, 819, 820, 822, 824, 826, 827, 828], "gen": 758, "probas_pr": 759, "warn_for": 760, "shantanu": 760, "godbol": 760, "sunita": 760, "sarawagi": 760, "pig": 760, "948": [762, 957], "max_fpr": [765, 957, 1006], "provost": [765, 957], "ceder": [765, 957], "stern": [765, 957], "fawcett": [765, 766, 957], "generalis": [765, 957, 978], "multioutputclassifi": [765, 805, 807, 809, 957, 1005, 1007, 1008, 1009, 1010], "n_samples_a": [767, 768], "mean_prior": 772, "degrees_of_freedom_prior": 772, "verbose_interv": [772, 773], "wishart": 772, "emipr": 772, "precisions_": [772, 773], "precisions_cholesky_": [772, 773, 1012], "converged_": [772, 773], "lower_bound_": [772, 773, 1006], "weight_concentration_prior_": 772, "weight_concentration_": 772, "mean_precision_prior_": 772, "mean_precision_": 772, "mean_prior_": 772, "degrees_of_freedom_prior_": 772, "degrees_of_freedom_": 772, "covariance_prior_": 772, "hagai": 772, "attia": 772, "bgm": 772, "n_dimens": [772, 773], "log_prob": [772, 773], "weights_init": 773, "precisions_init": [773, 1012], "gm": 773, "pre_dispatch": [774, 780, 788, 797, 798, 799, 800, 803, 1001], "error_scor": [774, 777, 778, 780, 788, 798, 799, 800, 803, 946, 1002, 1006, 1010], "explos": [774, 788, 797, 798, 799], "lightweight": [774, 788, 797, 798, 799, 977], "fitfailedwarn": [774, 777, 778, 780, 788, 798, 799, 800, 803], "param_kernel": [774, 788], "param_degre": 774, "split0_test_scor": [774, 788, 1004], "rank_t": 774, "split1_test_scor": [774, 788], "split0_train_scor": [774, 788, 1004], "split1_train_scor": [774, 788], "mean_train_scor": [774, 788, 1004], "std_train_scor": [774, 788, 1004], "split0_test_precis": [774, 788], "mean_train_precis": [774, 788], "best_estim": [774, 777, 778, 788], "scorer_": [774, 777, 778, 788], "n_splits_": [774, 777, 778, 788], "refit_time_": [774, 777, 778, 788, 1006], "multimetric_": [774, 777, 778, 788], "parametergrid": [774, 1000, 1006], "split2_test_scor": 774, "num_sampl": [774, 788, 1013], "stratif": [775, 776, 782, 783, 792, 793, 794, 928, 1007], "group_kfold": 775, "aggressive_elimin": [777, 778, 946], "r0": [777, 778], "replai": [777, 778], "n_remaining_candidates_": [777, 778], "n_candid": [777, 778, 946], "max_resources_": [777, 778], "min_resources_": [777, 778], "n_required_iterations_": [777, 778], "n_possible_iterations_": [777, 778], "exceed": [777, 778, 1004], "n_unique_tick": [780, 800], "n_tick": [780, 800, 803], "errorbar_": 780, "errorbarcontain": 780, "line2d": 780, "fill_between_": 780, "polycollect": 780, "exploit_incremental_learn": [780, 800], "log_scal": 780, "fill_between_kw": 780, "errorbar_kw": 780, "model_selectionkfold": 780, "predispatch": [780, 800, 803], "negat": [780, 957], "neg_": [780, 1004], "combinator": 784, "lpo": 784, "param_list": 786, "rounded_list": 786, "89856": 786, "923223": 786, "878964": 786, "038159": 786, "parametersampl": [788, 1000, 1006, 1010], "2652124": 789, "rskf": 790, "36851234": 790, "sizeabl": [791, 794], "sad": [792, 793], "sss": 794, "kth": 795, "checked_cv": 796, "3315057": [798, 799], "08022103": [798, 799], "03531816": [798, 799], "test_r2": 799, "test_auc": 799, "train_r2": 799, "train_auc": 799, "3635": 799, "3573": 799, "6114": 799, "28009951": 799, "3908844": 799, "22784907": 799, "train_sizes_ab": 800, "train_size_ab": 800, "cv_train_scor": 800, "cv_test_scor": 800, "permutation_scor": 801, "n_valu": [803, 1006], "pairwise_indices_": 804, "label_binarizer_": 805, "multilabel_": [805, 1003], "code_s": [806, 958], "code_book_": 806, "onevsoneclassifi": [806, 999, 1001, 1002, 1004, 1005, 1007, 1010, 1012], "bakiri": [806, 958], "pict": [806, 958], "order_": [807, 810], "regressorchain": [807, 809, 1006, 1009, 1013], "jess": [807, 958, 1011], "pfahring": [807, 958], "geoff": [807, 958], "holm": [807, 958], "eib": [807, 958], "8387": 807, "9431": 807, "4576": 807, "8878": 807, "3684": 807, "2640": 807, "0321": 807, "9935": 807, "0625": 807, "y_decis": 807, "load_linnerud": [809, 1004, 1009], "force_alpha": [811, 812, 813, 815, 1013], "lidston": [811, 812, 813, 815, 959], "class_count_": [811, 812, 813, 814, 815], "class_log_prior_": [811, 812, 813, 815], "feature_count_": [811, 813, 815], "feature_log_prob_": [811, 812, 813, 815], "categoricalnb": [811, 813, 814, 815, 959, 1008, 1009, 1010, 1011, 1013], "renni": [811, 813, 959, 1006], "schuetz": [811, 815], "htmledit": [811, 815, 955], "mccallum": [811, 959], "nigam": [811, 959], "metsi": [811, 959], "androutsopoulo": [811, 959], "palioura": [811, 959], "cea": [811, 959], "predict_joint_log_proba": [811, 812, 813, 814, 815, 1013], "min_categori": [812, 1010], "n_categori": [812, 850, 967], "category_count_": 812, "n_categories_": 812, "mirror": [813, 946], "mahout": 813, "weka": 813, "feature_all_": 813, "shih": [813, 959], "teevan": [813, 959], "karger": [813, 959], "623": [813, 959], "jrenni": 813, "icml03": 813, "var_smooth": [814, 1006], "stan": 814, "levequ": [814, 856], "cstr": 814, "epsilon_": 814, "theta_": [814, 959], "clf_pf": 814, "valid_metr": [816, 817, 960], "random_sampl": [816, 817, 821], "19662693": [816, 817], "29473397": [816, 817], "tree_copi": [816, 817], "query_radiu": [816, 817], "count_onli": [816, 817], "kernel_dens": [816, 817], "94114649": [816, 817], "83281226": [816, 817], "2071716": [816, 817], "two_point_correl": [816, 817], "580": [816, 817], "get_arrai": [816, 817], "get_n_cal": [816, 817], "n_call": [816, 817], "get_tree_stat": [816, 817], "tree_stat": [816, 817], "breadth_first": [816, 817, 821], "return_log": [816, 817], "k_true": [816, 817], "k_ret": [816, 817], "breadth": [816, 817, 821, 981, 1000], "dualtre": [816, 817], "sort_result": [816, 817, 824, 826, 827, 828, 1010], "radii": [816, 817], "reset_n_cal": [816, 817], "effective_metric_": [818, 819, 820, 822, 824, 826, 827, 828, 960], "callbl": 818, "effective_metric_params_": [818, 819, 820, 822, 824, 826, 827, 828], "outputs_2d_": [818, 826, 1008], "nearest_neighbor_algorithm": [818, 826, 827], "333": 818, "n_index": [818, 819, 820, 822, 824, 826, 827], "neigh_dist": [818, 819, 820, 822, 824, 826, 827, 828], "neigh_ind": [818, 819, 820, 822, 824, 826, 827, 828], "nearest_neighbors_algorithm": [819, 824], "nearer": [820, 828, 960], "x_dist_graph": 820, "silverman": [821, 1013], "binarytre": [821, 1002, 1006, 1010], "bandwidth_": 821, "log_dens": 821, "52955942": 821, "51462041": 821, "60244657": 821, "logprob": 821, "negative_outlier_factor": 822, "9821": 822, "0370": 822, "3697": 822, "shifted_opposite_lof_scor": 822, "opposite_lof_scor": 822, "narasimhan": 823, "chu": 823, "shrunken": [823, 998], "6567": 823, "6572": 823, "nbr": [824, 960], "neighborsclassifi": [824, 826, 827, 828, 998], "n_features_a": 825, "n_features_b": 825, "goldberg": [825, 960], "neighbourhood": [825, 960], "513": [825, 960], "ncanip": 825, "neighbourhood_components_analysi": 825, "961904": 825, "outlier_label": [826, 1008], "outlier_label_": 826, "33333333": [826, 967], "x_cluster": 828, "warn_when_not_sort": 831, "efficiencywarn": [831, 1013], "sml": [832, 962], "pcd": [832, 962], "sweep": 832, "gibb": [832, 962, 977], "intercept_hidden_": 832, "intercept_visible_": 832, "h_samples_": 832, "osindero": [832, 962], "teh": [832, 962], "1527": 832, "1554": 832, "absp": 832, "fastnc": 832, "tieleman": [832, 962], "v_new": 832, "pseudo_likelihood": 832, "relu": [833, 834], "beta_1": [833, 834], "beta_2": [833, 834], "max_fun": [833, 834, 1008], "n_layer": [833, 834], "neuron": [833, 834, 955, 961], "tan": [833, 834, 961, 1005], "rectifi": [833, 834], "kingma": [833, 834, 961], "diederik": [833, 834, 961, 1013], "jimmi": [833, 834, 961, 1004, 1006], "gradual": [833, 834, 971], "effective_learning_r": [833, 834], "best_loss_": [833, 834, 1013], "ot": [833, 834], "best_validation_score_": [833, 834, 1013], "validation_scores_": [833, 834, 1013], "intercepts_": [833, 834, 961], "n_layers_": [833, 834], "out_activation_": [833, 834], "geoffrei": [833, 834, 961, 1009, 1010, 1011, 1012], "connectionist": [833, 834], "glorot": [833, 834], "xavier": [833, 834, 1006, 1007, 1008, 1010, 1011], "yoshua": [833, 834, 970], "feedforward": [833, 834], "kaim": [833, 834], "delv": [833, 834], "surpass": [833, 834], "imagenet": [833, 834], "log_y_prob": 833, "time_step": 834, "named_transform": [835, 1013], "transform_list": 835, "s__p": 836, "n_transformed_featur": 836, "predict_log_proba_param": 836, "y_log_proba": 836, "predict_proba_param": 836, "analyst": 839, "x_tr": [839, 845, 848, 849, 850, 854, 856, 858, 860, 861, 865, 866], "accept_spars": [840, 895, 896, 1005], "inv_kw_arg": 840, "pickleabl": [840, 1004], "6931": 840, "3862": 840, "onward": [841, 850, 1002], "n_bins_": 841, "int_": 841, "regener": 841, "xinv": 841, "tild": [842, 965, 967], "k_fit_rows_": 842, "k_fit_all_": 842, "1299": [842, 967], "1319": [842, 967], "n_samples1": 842, "n_samples2": 842, "k_new": 842, "neg_label": [843, 859], "y_type_": 843, "sparse_input_": 843, "tokyo": [844, 968], "amsterdam": [844, 968], "max_abs_": 845, "x_std": [846, 861, 967], "data_min_": [846, 1003], "data_max_": [846, 1003], "data_range_": [846, 1003], "unwieldi": 847, "fi": 847, "comedi": 847, "y_indic": 847, "yt": 847, "ands": 847, "categories_": [849, 850, 967, 1006], "unregular": [849, 871, 990, 1007], "intact": [849, 992], "infrequ": [849, 957, 998, 1012], "infrequent_if_exist": [849, 967], "drop_idx_": [849, 1009], "drop_idx": 849, "gender_femal": 849, "gender_mal": 849, "group_1": 849, "group_2": 849, "group_3": 849, "drop_enc": [849, 967], "drop_binary_enc": 849, "oh": [849, 1008], "infrequent_sklearn": [849, 967], "n_encoded_featur": [849, 850], "bpo": 850, "43475": 850, "lenient": [850, 978], "min_degre": [851, 1011], "max_degre": [851, 1011], "powers_": 851, "n_output_features_": 851, "nystrom": [851, 1007, 1008], "featurewis": 852, "power_transform": [852, 864, 1006], "biometrika": [852, 863], "954": [852, 863], "707": [852, 863], "ignore_implicit_zero": [853, 864], "landmark": [853, 864, 967], "n_quantiles_": 853, "quantiles_": [853, 967, 1008], "references_": 853, "robustscal": [853, 865, 947, 967, 1003, 1004, 1006, 1008, 1009, 1010], "with_cent": [854, 865], "with_scal": [854, 865], "unit_vari": [854, 865, 1010], "iqr": [854, 865], "interquartil": [854, 865], "quartil": 854, "75th": 854, "q_min": [854, 865], "q_max": [854, 865], "center_": 854, "robust_scal": [854, 864, 1006], "interquartile_rang": 854, "bspline": 855, "n_features_out_": 855, "with_std": [856, 866, 967, 1006], "n_samples_seen": 856, "5a": 856, "randal": [856, 1002, 1012], "242": [856, 998], "247": 856, "ahead": 859, "return_norm": [862, 1005], "notimplementederror": [862, 1005], "332": 863, "compute_inverse_compon": [867, 868, 969], "inverse_components_": [867, 868, 969, 1012], "2759": [867, 868], "afor": [867, 868], "baserandomproject": [867, 868], "ping": [868, 969, 1004, 1005], "density_": 868, "gaussianrandomproject": [868, 969, 999, 1012], "church": [868, 969], "kdd06_rp": 868, "cgi": 868, "uoa": 868, "gr": 868, "opta": 868, "0182": 868, "e2": [869, 953], "93lindenstrauss_lemma": 869, "sanjoi": [869, 969], "anupam": [869, 969, 1013], "gupta": [869, 969, 1005, 1006, 1009, 1010, 1011, 1012], "elementari": [869, 969], "663": [869, 965, 969], "11841": [869, 969], "1112658": [869, 969], "7894": [869, 969], "9868": [869, 969], "steadi": [870, 871], "baselabelpropag": [870, 1005], "xiaojin": 870, "zoubin": 870, "ghahramani": 870, "cmu": 870, "cald": 870, "carnegi": 870, "mellon": 870, "jerryzhu": 870, "label_prop_model": [870, 871], "clamp": [871, 970], "dengyong": 871, "bousquet": 871, "navin": 871, "lal": 871, "schoelkopf": 871, "termination_condition_": 872, "no_chang": 872, "all_label": 872, "33rd": [872, 970], "acl": [872, 970, 971], "stroudsburg": [872, 970], "crammer_sing": [875, 958, 972, 998], "seldom": 875, "readonli": [875, 876, 1011, 1013], "raw_coef_": [875, 876], "smo": [875, 876], "526": 875, "1693": 875, "unsur": 876, "582": 876, "023": [876, 965], "522": 876, "class_weight_": [877, 878, 879, 880, 881, 1013], "n_sv": [877, 878, 879, 880, 881, 972, 1008], "fit_status_": [877, 878, 879, 880, 881], "n_support_": [877, 878, 879, 880, 881, 972, 1008], "proba_": [877, 880, 1009], "probb_": [877, 880, 1009], "shape_fit_": [877, 878, 879, 880, 881], "n_dimensions_of_x": [877, 878, 879, 880, 881], "7798": 879, "0547": 879, "0556": 879, "0561": 879, "7332": 879, "unshift": 879, "impract": 880, "tube": [881, 972], "_tree": [883, 884, 885, 886, 999, 1001], "decision_tree_learn": [883, 884, 973], "olshen": [883, 884, 973], "wadsworth": [883, 884, 973], "belmont": [883, 884, 973], "cutler": [883, 884], "cc_home": [883, 884], "htm": [883, 884], "ccp_path": [883, 884, 885, 886], "get_depth": [883, 884, 885, 886, 1007], "get_n_leav": [883, 884, 885, 886, 1007], "extra_tre": [885, 886], "8947": 885, "decision_tre": [887, 888, 889, 973], "out_fil": [887, 973], "leaves_parallel": 887, "special_charact": [887, 973], "fontnam": [887, 1011], "helvetica": [887, 889], "graphviz": [887, 973], "postscript": 887, "tpng": 887, "paint": [887, 889], "dot_data": [887, 973], "digraph": 887, "show_weight": 888, "feature_0": 888, "unrepresent": 890, "keyerror": [890, 1008], "popitem": 890, "lifo": 890, "input_nam": [894, 896, 922, 1012], "accept_large_spars": [895, 896, 1006], "ensure_2d": [895, 896], "allow_nd": [895, 896], "ensure_min_sampl": [895, 896], "ensure_min_featur": [895, 896], "y_numer": 895, "bsr": [895, 896, 1011], "x_convert": 895, "y_convert": 895, "array_convert": 896, "target_typ": [899, 922], "min_val": 899, "max_val": 899, "include_boundari": [899, 1012], "y_org": 900, "class_weight_vect": 900, "king": 900, "zen": 900, "sample_weight_vect": 901, "parenthes": 902, "type_filt": 904, "generate_onli": [906, 1008], "checks_gener": 906, "test_check_estim": 907, "check_estimators_fit_returns_self": 907, "array_lik": 910, "logdet": 910, "slogdet": 910, "6375861597263857": 910, "flip_sign": 912, "svd_lapack_driv": 912, "gesdd": 912, "p5": 912, "transposit": 912, "gesvd": 912, "conquer": 912, "unitari": 912, "vh": 912, "dot_product": 913, "deweight": 914, "min_batch_s": 915, "n_pack": [915, 916], "path_length": 917, "sliceabl": 918, "truthi": 919, "helloifeven": 919, "_x_is_even": 919, "say_hello": 919, "ducktyp": [920, 1002], "inner_max_num_thread": 925, "backend_param": 925, "register_parallel_backend": [925, 1006], "pyiodin": 925, "dask": [925, 978, 1006], "workload": [925, 977], "register_rai": 925, "backend_nam": 925, "oversubscript": [925, 1012], "threadpool": 925, "effective_n_job": 925, "tracking_select": 926, "reservoir_sampl": 926, "reservoir": 926, "make_default": 927, "parallelbackendbas": 927, "resampled_arrai": 928, "3x2": [928, 931], "shuffled_arrai": 931, "last_mean": 932, "last_var": 932, "last_n": 932, "return_sum_weight": 938, "sum_weight": 938, "all_or_ani": [941, 1008], "is_fit": 941, "__sklearn_is_fitted__": [941, 1011, 1012], "eg": 941, "substitut": [941, 978, 1004], "raise_except": 943, "array_sym": 943, "is_paramet": 945, "counterpart": [946, 954, 972, 987], "enclos": 946, "set_stat": 946, "bergstra": [946, 998, 999], "tournament": 946, "dispos": [946, 992], "n_resources_i": 946, "n_resources_0": 946, "n_candidates_i": 946, "n_candidates_0": 946, "r_0": 946, "mutal": 946, "n_resourc": 946, "983667": 946, "951958": 946, "947958": 946, "961009": 946, "955989": 946, "jamieson": 946, "talwalkar": 946, "desalvo": 946, "rostamizadeh": 946, "hyperband": 946, "bandit": 946, "multimetr": [946, 1008], "calibrated_forest": 946, "select__k": 946, "model__estimator__max_depth": 946, "imp": 947, "sophist": [947, 959], "14338": 947, "13286": 947, "15611": 947, "amelia": 947, "scientist": [947, 981], "roderick": 947, "rubin": 947, "1986": [947, 973], "ol2001": 947, "mask_missing_values_onli": 947, "mask_al": 947, "rr2007": 949, "2x_iy_i": 949, "vz2010": 949, "vvz2010": 949, "prod_i": 949, "ls2010": 949, "c_0": [949, 955], "tensorsketch": 949, "pp2013": 949, "wikic": 949, "ccf2002": 949, "mercer": 949, "langl": [949, 957, 971, 972], "rangl": [949, 957, 971, 972], "y_j": [949, 957, 959, 972], "obviat": 949, "dagm": 949, "vempati": 949, "jawahar": 949, "charikar": 949, "farach": 949, "colton": 949, "m2012": 950, "mu_k": 951, "cst": 951, "omega_": 951, "k0": 951, "h_l": 951, "extrema": 951, "119": [951, 1001], "honei": 951, "stork": 951, "dilemma": 952, "valid_scor": 952, "w_0": 953, "w_p": 953, "x_p": 953, "34545455": 953, "13636": [953, 1007], "rifkin": 953, "lippert": 953, "2n_": 953, "softw": 953, "kim": [953, 1006, 1007, 1008, 1012], "koh": [953, 981], "lustig": 953, "boyd": 953, "gorinevski": 953, "c_p": 953, "cherkasski": 953, "yunqian": 953, "1691": 953, "1714": 953, "ell_2": 953, "equiangular": 953, "weisberg": 953, "ell_0": [953, 957], "_coef": 953, "mp": 953, "ell_": 953, "posteriori": [953, 959], "radford": 953, "neal": [953, 1011], "50000013": 953, "49999993": 953, "lambda_i": 953, "srikantan": 953, "tristan": 953, "fletcher": [953, 998, 1002], "nomenclatur": [953, 1004], "deliber": 953, "overparameter": 953, "ldot": [953, 957, 959, 961, 971], "w_l": 953, "min_w": 953, "iverson": 953, "broyden": 953, "goldfarb": 953, "shanno": 953, "shortcom": 953, "statsmodel": [953, 977], "aaron": [953, 1001, 1002, 1003, 1008], "simon": [953, 981, 1001, 1002, 1011, 1012, 1013], "93fletcher": 953, "93goldfarb": 953, "93shanno_algorithm": 953, "noah": 953, "multirespons": 953, "edm": 953, "agricultur": 953, "rainfal": 953, "bernouli": 953, "fraud": [953, 981], "cash": 953, "fraudul": [953, 981], "interrupt": 953, "drug": 953, "cure": 953, "entertain": 953, "mccullagh": 953, "nelder": 953, "boca": 953, "raton": 953, "chapman": 953, "hall": [953, 1005, 1009], "crc": 953, "31760": 953, "j\u00f8rgensen": 953, "monografia": 953, "matem\u00e1tica": 953, "2463": 953, "4337": 953, "7638": 953, "disappear": [953, 998], "photogrammetr": 953, "hypothes": 953, "paradigm": 953, "cartographi": 953, "fischler": 953, "boll": 953, "sunglok": 953, "choi": 953, "taemin": 953, "wonpil": 953, "93sen_estim": 953, "binom": 953, "infeas": [953, 960, 962], "k\u00e4rkk\u00e4inen": 953, "\u00e4yr\u00e4m\u00f6": 953, "h_": 953, "oarc": 953, "dae": 953, "bassett": 953, "jr": 953, "econometrica": 953, "econometr": 953, "portnoi": 953, "hare": 953, "tortois": 953, "paraboloid": 953, "w_3": 953, "w_4": 953, "w_5": 953, "z_1": 953, "z_2": 953, "z_3": 953, "z_4": 953, "z_5": 953, "streamlin": 953, "gotten": [953, 967], "necess": [954, 960], "strife": 954, "mother": 954, "baloo": 954, "song": 954, "jungl": 954, "rubric": 954, "defici": [954, 971], "hlle": 954, "revolv": 954, "belkin": 954, "niyogi": 954, "1373": 954, "molecul": 954, "countri": 954, "jk": 954, "delta_": 954, "c_1": 954, "disentangl": 954, "legitim": 954, "tricki": 954, "die": 954, "favour": [954, 956, 1007], "noisier": 954, "5415": 954, "circuit": 954, "brief": 955, "num_featur": [955, 1013], "quantum": 955, "nutshel": 955, "36787944": 955, "89483932": 955, "58364548": 955, "51341712": 955, "83822343": 955, "7768366": 955, "facil": 956, "equi": 956, "agnost": [956, 965], "cue": 956, "came": 956, "quicker": 956, "unpract": 956, "analogi": [956, 957], "top_k_accuraci": 957, "top_k_accuracy_scor": [957, 1010, 1012], "neg_brier_scor": [957, 1008], "f1_micro": [957, 1002], "f1_weight": [957, 1002], "f1_sampl": 957, "neg_log_loss": 957, "roc_auc_ovr": [957, 1008], "roc_auc_ovo": [957, 1008], "roc_auc_ovr_weight": [957, 1008], "roc_auc_ovo_weight": [957, 1008], "explained_variance_scor": [957, 1001, 1005, 1012], "max_error": [957, 1007], "neg_mean_squared_log_error": 957, "mean_squared_log_error": [957, 1005, 1011], "neg_median_absolute_error": 957, "neg_mean_poisson_devi": 957, "neg_mean_gamma_devi": 957, "mean_gamma_devi": [957, 1008], "d2_pinball_scor": [957, 1012], "d2_tweedie_scor": [957, 1011], "wrong_choic": 957, "_error": 957, "my_custom_loss_func": 957, "protocol": [957, 1001], "custom_scoring_funct": 957, "custom_scorer_modul": 957, "confusion_matrix_scor": 957, "test_tp": 957, "test_fn": 957, "untru": 957, "dividend": 957, "divisor": 957, "quotient": 957, "texttt": 957, "_class": 957, "youden": 957, "informed": 957, "mosley2013": 957, "kelleher2015": 957, "guyon2015": 957, "urbanowicz2015": 957, "escalant": 957, "escalera": 957, "maci\u00e0": [957, 1011, 1013], "saeed": 957, "statnikov": 957, "viega": 957, "chalearn": 957, "automl": [957, 977], "ijcnn": 957, "moslei": 957, "ijcv": 957, "urbanowicz": 957, "exstrac": 957, "evol": 957, "intel": 957, "cohen_kappa_scor": [957, 1003, 1005], "4285714285714286": 957, "manning2008": 957, "everingham2010": 957, "davis2006": 957, "flach2015": 957, "everingham": 957, "gool": 957, "winn": 957, "pascal": 957, "voc": 957, "goadrich": 957, "y_l": 957, "_l": 957, "emptyset": 957, "f_beta": 957, "hinge_loss": [957, 1002, 1010, 1011], "ne": [957, 960], "1738": 957, "matthews_corrcoef": [957, 998, 1004, 1005, 1012], "t_k": [957, 973], "ik": 957, "ki": 957, "kk": 957, "auroc": 957, "ht2001": 957, "fc2009": 957, "pd2000": 957, "f2006": 957, "f2001": 957, "inner_clf": 957, "c\u00e8sar": 957, "hernandez": 957, "orallo": 957, "modroiu": 957, "wikipediadet2017": 957, "martin1997": 957, "navratil2007": 957, "encyclopedia": 957, "utc": 957, "php": [957, 977], "detection_error_tradeoff": 957, "oldid": 957, "798982054": 957, "doddington": 957, "kamm": 957, "ordowski": 957, "przybocki": 957, "navractil": 957, "klusacek": 957, "acoust": 957, "icassp": 957, "honolulu": 957, "iv": 957, "232": 957, "brier1950": 957, "p_i": [957, 960], "bella2012": 957, "flach2008": 957, "bella": 957, "hern\u00e1ndez": 957, "ram\u00edrez": 957, "quintana": 957, "khosrow": 957, "pour": 957, "hershei": 957, "edson": [957, 1003], "matsubara": 957, "dagstuhl": 957, "seminar": 957, "schloss": 957, "leibniz": 957, "zentrum": 957, "lr_": 957, "brenner": 957, "gefel": 957, "coverage_error": [957, 1002, 1012], "label_ranking_average_precision_scor": [957, 1002, 1006, 1007, 1013], "label_ranking_loss": [957, 1003], "grade": 957, "unalt": 957, "epsilon_i": 957, "965": 957, "7083": 957, "log_": 957, "growth": [957, 1003, 1004], "commod": 957, "mapd": 957, "2e6": 957, "2666": 957, "y_n": [957, 961, 971], "elicit": 957, "2500": 957, "mean_pinball_loss_95p": 957, "skill": 957, "mcfadden": 957, "d2_tweedie_score_15": 957, "d2_pinball_score_08": 957, "heteroschedast": 957, "homoschedast": 957, "pear": 958, "y_dens": 958, "y_spars": 958, "advoc": 958, "financ": 958, "f3": 958, "y3": 958, "documentat": 958, "multi_target_forest": 958, "75474165": 958, "147": 958, "03498585": 958, "03812219": 958, "12165031": 958, "12914884": 958, "46081961": 958, "8948621": 958, "44373091": 958, "88978285": 958, "62745778": 958, "02891072": 958, "48204257": 958, "03260883": 958, "165": 958, "34867495": 958, "52003279": 958, "92529176": 958, "25719016": 958, "84253": 958, "25193977": 958, "16443186": 958, "12274212": 958, "170388": 958, "80956739": 958, "16979946": 958, "72667194": 958, "50941682": 958, "50447799": 958, "149": [958, 998], "37967282": 958, "15699552": 958, "72850319": 958, "prod_": 959, "downarrow": 959, "spite": 959, "famous": 959, "serious": 959, "flair": 959, "2_y": 959, "mu_i": 959, "sigma_i": 959, "theta_i": 959, "cnb": 959, "mnb": 959, "inventor": 959, "alpha_i": [959, 972], "cj": [959, 1001, 1002, 1003, 1004, 1005], "summat": [959, 961], "min_c": 959, "t_i": 959, "poorest": 959, "n_i": 959, "kdt": 960, "farawai": 960, "invent": 960, "orthotrop": 960, "bentlei": 960, "1975": 960, "omohundro": 960, "characteris": 960, "unaffect": 960, "amort": 960, "cache_path": 960, "gettempdir": 960, "unsort": [960, 999, 1002, 1006], "5807": 960, "nca_pip": 960, "96190476": 960, "limits_": 960, "lx": 960, "x_m": 961, "leftmost": 961, "w_1x_1": 961, "w_2x_2": 961, "w_mx_m": 961, "backpropag": 961, "998": 961, "b_1": 961, "b_2": 961, "z_l": 961, "dfrac": [961, 967], "nabla": 961, "deduct": 961, "rumelhart": 961, "jiquan": 961, "ngiam": 961, "chuan": 961, "yifan": 961, "carolin": 961, "suen": 961, "backprop": [961, 971], "lecun": [961, 971], "orr": [961, 971], "strai": 962, "v_ih_j": 962, "b_iv_i": 962, "c_jh_j": 962, "h_j": 962, "v_i": 962, "b_i": 962, "sum_h": 962, "fantasi": 962, "particl": 962, "thoroughli": 962, "hereund": 963, "1443": 963, "1471": 963, "outlying": 963, "h2009": 964, "g2015": 964, "absurd": 964, "m2019": 964, "mc_clf": 964, "466": 964, "624": 964, "overlaid": 964, "obscur": 964, "cice": [964, 1012], "pd_": 964, "dx_c": 964, "footnot": [964, 977], "opaqu": 965, "x_val": 965, "y_val": 965, "356": 965, "probe": 965, "204": [965, 970], "050": 965, "048": 965, "033": 965, "056": 965, "r_multi": 965, "1013": 965, "866": 965, "298": 965, "277": [965, 1000], "115": 965, "i_j": 965, "min_max_scal": [967, 1003], "x_train_minmax": 967, "x_test_minmax": 967, "max_abs_scal": 967, "x_train_maxab": 967, "x_test_maxab": 967, "excess": [967, 1005], "unintention": 967, "kernelcenter": [967, 1008, 1012], "semidefinit": [967, 972], "scholkopf1998": 967, "1_": 967, "x_train_tran": 967, "x_test_tran": 967, "8pt": 967, "x_normal": 967, "firefox": 967, "chrome": 967, "safari": 967, "africa": 967, "meth": 967, "dragon": 967, "lexicon": 967, "infant": 967, "kid": 967, "teen": 967, "adult": 967, "senior": [967, 981], "citizen": 967, "retbin": 967, "x_1x_2": 967, "x_1x_3": 967, "x_2x_3": 967, "x_1x_2x_3": 967, "rung": 967, "eiler": 967, "marx": 967, "perperogl": 967, "sauerbrei": 967, "abrahamowicz": 967, "bmc": 967, "methodol": 967, "38629436": 967, "sixteenth": 969, "uai": 969, "craig": [969, 1001, 1006], "boutili": 969, "mois\u00e9": 969, "goldszmidt": 969, "morgan": [969, 973, 975], "kaufmann": [969, 973, 1010], "ella": 969, "bingham": 969, "heikki": 969, "mannila": 969, "245": [969, 1000], "explic": 969, "3947": 969, "671": 969, "687": 969, "kenneth": [969, 998, 999, 1004, 1005, 1012, 1013], "12th": 969, "287": 969, "296": 969, "x_new_invers": 969, "x_new_again": 969, "delalleau": 970, "216": 970, "aistat": 970, "gatsbi": 970, "ucl": 970, "uk": [970, 992], "fullpap": 970, "xi_i": 971, "slack": 971, "varepsilon": [971, 972], "t_0": 971, "l\u00e9on": [971, 1012], "_init_t": 971, "basesgd": 971, "eta_0": 971, "_t": 971, "svmsgd": 971, "pegaso": 971, "srebro": 971, "tsuruoka": 971, "tsujii": 971, "ananiad": 971, "afnlp": 971, "lin_clf": 972, "grasp": [972, 978], "sv": 972, "builtin": 972, "qp": 972, "linear_svc": 972, "gram_train": 972, "gram_test": 972, "zeta": 972, "zeta_i": 972, "textrm": [972, 990], "q_": 972, "equiv": 972, "reparameter": 972, "wu": [972, 1002, 1010], "weng": 972, "975": 972, "1005": 972, "rong": 972, "aug": 972, "1871": 972, "1874": 972, "ofmulticlass": 972, "fitter": 973, "pariti": 973, "multiplex": 973, "export_graphviz": [973, 1003, 1005, 1011, 1013], "export_text": [973, 1007], "dumont": 973, "subwindow": 973, "beforehand": 973, "dichotomis": 973, "quinlan": 973, "multiwai": 973, "proprietari": 973, "ruleset": 973, "q_m": 973, "n_m": 973, "t_m": 973, "setminu": 973, "mk": 973, "probalist": 973, "_m": 973, "ge0": 973, "widetild": 973, "tradition": 973, "t_t": 973, "eff": 973, "predictive_analyt": 973, "troubleshoot": 975, "artwork": 975, "fund": 975, "spotifi": 975, "betawork": 975, "evernot": 975, "aweb": 975, "yhat": 975, "rangespan": 975, "birchbox": 975, "bestofmedia": 975, "phimeca": 975, "howaboutw": 975, "peerindex": 975, "datarobot": 975, "okcupid": 975, "love": [975, 992], "publica": 975, "machinali": 975, "solido": 975, "infonea": 975, "dataiku": 975, "otto": 975, "zopa": 975, "bnp": 975, "pariba": 975, "cardif": 975, "post1": [975, 996], "foot": 976, "gear": 976, "neuroimag": [976, 981], "astronom": 976, "pycon": 976, "thirti": 976, "nyc": [976, 981], "sister": 977, "sklearn_panda": 977, "sklearn_xarrai": 977, "xarrai": 977, "autoviml": 977, "tpot": 977, "featuretool": 977, "tempor": [977, 978], "neuraxl": 977, "neat": [977, 998], "checkpoint": 977, "funki": 977, "saver": 977, "evalml": 977, "neptun": 977, "mlop": 977, "sacr": 977, "dtreeviz": 977, "eli5": 977, "mlxtend": 977, "yellowbrick": 977, "deap": 977, "evolutionari": 977, "interchang": 977, "skop": [977, 994], "jpmml": 977, "porter": 977, "transpil": 977, "javascript": 977, "m2cgen": 977, "dart": 977, "haskel": 977, "rust": 977, "treelit": 977, "tslearn": 977, "sktime": 977, "hmmlearn": 977, "pomegran": 977, "crfsuit": 977, "nolearn": 977, "lasagn": 977, "theano": 977, "skorch": 977, "scikera": 977, "scikit_learn": 977, "feder": 977, "lego": 977, "subsembl": 977, "lightn": 977, "sdca": 977, "adagrad": 977, "svrg": 977, "nadaraya": 977, "gplearn": 977, "genet": 977, "multilearn": 977, "seglearn": 977, "libopf": 977, "fastfm": 977, "kmode": 977, "sphereclust": 977, "mise": 977, "giotto": 977, "tda": 977, "pymc": 977, "censor": 977, "lightfm": 977, "openrec": 977, "spotlight": 977, "gensim": 977, "nilearn": 977, "neuro": 977, "astroml": 977, "astronomi": 977, "msmbuilder": 977, "dissemin": 977, "chines": 977, "persian": 977, "spanish": 977, "disclaim": 977, "promis": 978, "eleven": 978, "incept": 978, "scala": 978, "numba": 978, "reinforc": 978, "era": 978, "7242": 978, "12147": 978, "5523": 978, "10733": 978, "13902": [978, 1008], "12800": 978, "12866": 978, "15550": 978, "5853": 978, "11805": 978, "15319": 978, "11977": 978, "12852": [978, 1008], "13911": [978, 1008], "amput": 978, "6284": 978, "beginn": 978, "priorit": [978, 1005], "4497": 978, "7646": 978, "6425": 978, "6424": 978, "8480": 978, "6231": 978, "8100": 978, "6599": 978, "6715": 978, "14582": 978, "3855": 978, "13227": 978, "6323": 978, "14180": [978, 1009], "9173": 978, "13146": [978, 1008], "8614": 978, "7608": 978, "5082": 978, "8243": 978, "searchgrid": 978, "6929": 978, "__array_function__": [978, 1008], "etl": [978, 981], "8370": 978, "6451": 978, "lifecycl": 978, "8157": 978, "7382": 978, "drift": 978, "11047": [978, 1008], "9326": 978, "slep011": 978, "1626": 978, "10463": 978, "id3": [979, 994], "cart": [979, 994], "touch": 980, "gdb": 980, "savetxt": 980, "cloneabl": 980, "datafil": 980, "printabl": 980, "indispens": 981, "stephen": [981, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011], "simmon": 981, "vp": 981, "athena": 981, "music": 981, "bernhardsson": 981, "pariet": [981, 998], "lear": 981, "visag": 981, "fantast": 981, "startup": 981, "bitli": 981, "chartbeat": 981, "digg": [981, 1005], "poncho": 981, "gilad": 981, "lotan": 981, "chief": 981, "chat": 981, "bread": 981, "butter": 981, "chaumond": [981, 1006], "offic": 981, "ayzenshtat": [981, 1006], "undergrad": 981, "professor": 981, "hotel": 981, "destin": 981, "agent": 981, "melani": [981, 1005, 1006], "awesom": 981, "stuff": 981, "randomizedpca": [981, 998, 1000, 1001, 1003, 1004, 1005], "boston": 981, "mdbecker": 981, "pydata_2013": 981, "ninja": 981, "thorough": 981, "notch": 981, "production": 981, "greg": [981, 1004, 1005, 1007, 1008], "lamp": 981, "founder": 981, "prototyp": 981, "jurgen": 981, "director": 981, "commerc": 981, "inventori": 981, "bertin": 981, "mahieux": 981, "invalu": 981, "vijai": [981, 1001], "traine": 981, "impress": 981, "traffic": 981, "tenur": 981, "matchmak": 981, "weitzenfeld": 981, "tweet": 981, "ferenc": 981, "huszar": 981, "shop": 981, "ourselv": 981, "jeremi": [981, 1003, 1004, 1005, 1006, 1009, 1010], "achin": 981, "ceo": 981, "marketplac": 981, "frid": [981, 1001], "radar": 981, "partnership": 981, "lebourgeoi": 981, "charron": [981, 1001, 1002, 1009, 1010, 1011], "cornerston": 981, "sheep": 981, "featureforg": 981, "rafael": [981, 999, 1000, 1002, 1005], "carrascosa": [981, 1002], "law": 981, "semiconductor": 981, "fab": [981, 1008, 1009], "bleed": 981, "chip": 981, "smartphon": 981, "automobil": 981, "trent": [981, 1004], "mcconaghi": 981, "rapid": 981, "immens": 981, "thorsten": 981, "kranz": 981, "coma": 981, "dss": 981, "douetteau": 981, "b2c": 981, "retail": 981, "palladium": 981, "rammig": [981, 1004], "peer": 981, "billion": 981, "gbp": 981, "grate": 981, "vlasio": [981, 1005], "vasilei": [981, 1005], "petfood": 981, "cocoa": 981, "worldwid": 981, "toolset": 981, "equip": 981, "fitzk": 981, "sr": 981, "fondat": 981, "s\u00e9bastien": [981, 1004, 1006], "conort": 981, "salmon": 983, "nine": 983, "sentiment": 984, "cli": 984, "doctest_mod": 984, "hardest": 985, "tightli": 986, "knit": 986, "x_fold": 987, "array_split": 987, "y_fold": 987, "934": 987, "956": 987, "train_indic": 987, "test_indic": 987, "963": 987, "922": 987, "930": 987, "96388889": 987, "92222222": 987, "9637883": 987, "93036212": 987, "96578289": 987, "92708922": 987, "96681476": 987, "96362897": 987, "93192644": 987, "0077": 987, "943": 987, "944": 987, "00375": 987, "lfw_": 988, "_lfw": 988, "gerhard_schroed": 988, "donald_rumsfeld": 988, "tony_blair": 988, "colin_powel": 988, "george_w_bush": 988, "282": [988, 998], "estimated_param_": 989, "iris_x": 990, "iris_i": 990, "iris_x_train": 990, "iris_y_train": 990, "iris_x_test": 990, "iris_y_test": 990, "pave": 990, "paltri": 990, "exabyt": 990, "30349955": 990, "237": 990, "63931533": 990, "510": 990, "53060544": 990, "73698041": 990, "13170937": 990, "81458798": 990, "84845219": 990, "60648906": 990, "51961675": 990, "09517222": 990, "585": 990, "5854": 990, "5855": 990, "occam": 990, "razor": 990, "best_alpha": [990, 998], "025118864315095794": 990, "508": 990, "knew": 991, "taxonomist": 991, "face_compress": 991, "x_approx": 991, "images_approx": 991, "18565811e": 991, "19346747e": 991, "43026679e": 991, "text_analyt": 992, "skeleton": [992, 1001], "sklearn_tut_workspac": 992, "cp": 992, "work_directori": 992, "tutorial_hom": 992, "fetch_data": 992, "lang": 992, "newsweed": 992, "netnew": 992, "bydat": 992, "twenty_train": 992, "holder": 992, "2257": 992, "sd345": 992, "collier": 992, "laserjet": 992, "iii": [992, 1012], "hampton": 992, "4gb": 992, "count_vect": 992, "x_train_count": 992, "35788": 992, "4690": 992, "downscal": 992, "tf_transform": 992, "x_train_tf": 992, "tfidf_transform": 992, "x_train_tfidf": 992, "na\u00efv": 992, "docs_new": 992, "opengl": 992, "x_new_count": 992, "x_new_tfidf": 992, "text_clf": 992, "twenty_test": 992, "docs_test": 992, "8348": 992, "9101": [992, 1006], "1502": 992, "380": 992, "353": 992, "tfidf__use_idf": 992, "searcher": 992, "gs_clf": 992, "workspac": 992, "fear": 992, "fire": 992, "exercise_xx_script": 992, "arg1": 992, "arg2": 992, "arg3": 992, "mortem": 992, "charngramanalyz": 992, "exercise_01_language_train_model": 992, "exercise_02_senti": 992, "movie_review": 992, "txt_sentoken": 992, "cpickl": 992, "polar": 992, "subtleti": 994, "subscrib": 996, "gzip": 998, "bzip2": 998, "decompress": 998, "auc_scor": [998, 1000], "kernc": [998, 1012, 1013], "led": 998, "probabilisticpca": [998, 1001], "hmm": [998, 999, 1000, 1001, 1003], "gaussianhmm": 998, "multinomialhmm": 998, "n_gram_rang": 998, "alexi": [998, 1001, 1002, 1005], "mignon": [998, 1001, 1002, 1005], "subhodeep": [998, 999, 1000], "moitra": [998, 999, 1000], "yannick": [998, 1000], "schwartz": [998, 1000, 1012], "duckworth": 998, "benediktsson": [998, 999, 1000], "marko": [998, 1007, 1008], "burjek": 998, "pinto": 998, "abraham": [998, 999, 1004, 1008], "hoenig": 998, "flyingimmidev": 998, "francoi": [998, 1011], "savard": 998, "hann": 998, "schulz": 998, "welind": 998, "companioni": 998, "brandyn": 998, "bussonni": [998, 1010], "matthia": [998, 1000, 1001, 1004, 1005, 1006, 1010, 1013], "pierr": [998, 1006, 1007, 1009, 1011, 1013], "astolfi": 998, "huiginn": 998, "goodman": [998, 1003], "ludwig": 998, "schwardt": 998, "hervieu": 998, "sergio": [998, 1000, 1001, 1010, 1013], "medina": [998, 1000], "sheerman": 998, "buguen": 998, "seq_dataset": [998, 1008], "weight_vector": [998, 1008], "reuben": 998, "costin": 998, "_basehmm": 998, "neighborsregressor": 998, "gone": [998, 999], "vbgmm": [998, 1002, 1004], "_pvalu": 998, "charset": [998, 1000], "test_fract": 998, "train_fract": 998, "198": 998, "marek": 998, "fcostin": 998, "adrien": 998, "gaidon": 998, "joona": 998, "sillanp\u00e4\u00e4": 998, "mccarthi": [998, 1006], "roi": [998, 1012], "hyunjin": 998, "ibay": 998, "scheidegg": 998, "clair": 998, "revillet": 998, "conrad": [998, 999, 1013], "meng": [998, 999, 1002, 1004, 1005], "xinfan": [998, 999, 1002], "udi": 998, "weinsberg": 998, "janso": 998, "palafox": 998, "overwrite_": 998, "copy_": 998, "buffer_mb": 998, "sparse_encode_parallel": 998, "accident": [998, 1002, 1007], "basedictionarylearn": 998, "sparsecodingmixin": 998, "fast_svd": 998, "arnold": [998, 999], "bala": [998, 1001], "subrahmanyam": [998, 1001], "varanasi": [998, 1001], "draxu": 998, "eickenberg": [998, 1000, 1001, 1002, 1003], "bogdan": 998, "trach": 998, "f\u00e9lix": [998, 1000, 1001, 1002, 1006], "antoin": [998, 1000, 1001, 1002, 1005], "fortin": [998, 1000, 1001, 1002], "manuel": [998, 1002, 1006, 1007, 1010, 1011], "caicedo": 998, "carvaj": 998, "tiziano": 998, "zito": [998, 1011], "jean": [998, 1001, 1002, 1003, 1004, 1005, 1011], "kossaifi": [998, 1002, 1003], "thumbnail": 998, "bugfix": [998, 1012], "univariate_select": 998, "mldata": [998, 1006], "pietro": [998, 1001], "berk": 998, "macosx": 998, "xarg": 998, "bscikit": 998, "cross_val": 998, "bcross_val": 998, "lurk": 998, "l1_distanc": 998, "387": 998, "andi": [998, 1005], "amit": [998, 1012, 1013], "salvator": [998, 1012, 1013], "masecchia": 998, "schut": 998, "metaireau": [998, 1001], "bryan": [998, 1001, 1007, 1008, 1011], "silverthorn": 998, "minwoo": 998, "luca": [998, 1008, 1009, 1010, 1011], "wiman": 998, "schl\u00fcter": [998, 1006], "malet": 998, "miott": [998, 1001], "feth": 998, "arezki": 998, "yamin": 998, "notes_neighbor": 998, "netbsd": 998, "kamel": 998, "ibn": 998, "hassen": 998, "derouich": 998, "virgilefritsch": 998, "example_gaussian_process_plot_gp_regress": 998, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 998, "tast": 998, "2x": 998, "10x": 998, "200x": 998, "laur": 998, "fouqu": 998, "ronan": [998, 1001, 1006], "amicel": [998, 1001], "osendorf": [998, 999], "gmmhmm": [998, 999], "latex": 998, "mlcomp": 998, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 998, "pybrain": 998, "116": 998, "rokem": [998, 1004], "100x": [998, 1001], "obsolet": 998, "attrselect": 998, "unmaintain": 998, "lite": 998, "filo": [998, 1001], "mailhot": 998, "huard": 998, "dave": [998, 1005, 1006, 1012], "morril": 998, "schofield": 998, "oliph": 998, "pearu": 998, "peterson": [998, 1000], "0d": 999, "marchman": [999, 1000], "hrishikesh": [999, 1000], "huilgolkar": [999, 1000], "bastiaan": [999, 1000], "diego": [999, 1000], "molla": [999, 1000], "cunha": [999, 1000], "almeida": [999, 1000, 1011], "rolando": [999, 1000], "espinoza": [999, 1000], "fuent": [999, 1000], "formerli": [999, 1002, 1004, 1005], "beauchamp": [999, 1002], "longstand": [999, 1005], "shaun": 999, "jackman": 999, "winterman": 999, "seberg": 999, "n_atom": 999, "label_propag": 999, "learn_rat": 999, "basegradientboost": 999, "mean_square_error": 999, "gmm_": 999, "eig_tol": 999, "chunk_siz": 999, "zero_one_scor": 999, "117": 999, "aymer": 999, "masurel": 999, "syhw": [999, 1000], "corei": [999, 1006, 1007], "lynch": [999, 1005], "shu": [999, 1002, 1006], "tadej": [999, 1000], "jane\u017e": [999, 1000], "caje": 999, "tiago": [999, 1003], "nune": 999, "cow": 999, "anz": 999, "jauvin": 999, "jacqu": [999, 1001], "kvam": [999, 1001], "doug": [999, 1000, 1010], "coleman": [999, 1000], "dickerson": 999, "approximateident": 999, "veronda": 999, "matti": [999, 1002, 1003], "lyra": [999, 1002, 1003], "mikhail": [999, 1000, 1001, 1004, 1005], "korobov": [999, 1000, 1001, 1004, 1005], "alejandro": [999, 1004], "weinstein": 999, "deil": [999, 1009, 1010], "nizhibitski": 999, "coelho": [999, 1001, 1002, 1006], "miroslav": [999, 1000, 1003], "batchkarov": [999, 1003], "pavel": [999, 1007], "bob": [999, 1005], "dengemann": 999, "emanuel": 999, "x006": 999, "justin": [1000, 1006, 1010], "stochastic_gradi": [1000, 1001, 1007], "crombach": 1000, "sheet": 1000, "jaccard_similarity_scor": [1000, 1002, 1007], "jochen": 1000, "wersd\u00f6rfer": 1000, "sinayev": 1000, "unpleas": 1000, "novic": 1000, "tini": [1000, 1013], "hyperlink": 1000, "luessi": 1000, "philipp": [1000, 1001, 1004, 1013], "gervai": [1000, 1001], "cleverless": 1000, "nosetest": 1000, "compute_import": 1000, "return_model": [1000, 1002], "itergrid": 1000, "tacitli": 1000, "charset_error": 1000, "precompute_gram": 1000, "2224": 1000, "jim": 1000, "holmstr\u00f6m": 1000, "steven": [1000, 1001, 1003, 1005, 1006, 1011], "gryze": [1000, 1003], "sergeyf": 1000, "ben": [1000, 1001, 1002, 1005, 1006, 1007, 1010], "speer": 1000, "federico": [1000, 1001, 1006, 1007, 1012], "vaggi": [1000, 1001], "raul": [1000, 1001], "garreta": [1000, 1001], "gei": 1000, "flaxman": [1000, 1002], "denton": 1000, "cockburn": 1000, "dougal": [1000, 1002, 1003, 1005, 1006, 1007, 1008], "sutherland": [1000, 1002, 1003, 1005, 1006, 1007, 1008], "ian": [1000, 1002, 1007, 1008, 1010], "ozsvald": 1000, "johann": [1000, 1001, 1006, 1008, 1009, 1012], "sch\u00f6nberger": [1000, 1001], "szabo": [1000, 1001], "roland": [1000, 1001], "imran": [1000, 1001, 1002], "haqu": [1000, 1001, 1002], "karayev": 1000, "jamestwebb": [1000, 1001], "abhijeet": 1000, "kolh": 1000, "velkov": 1000, "fazlul": 1000, "shahriar": 1000, "felix": [1000, 1005, 1006, 1008, 1010, 1011, 1012], "brockherd": 1000, "harikrishnan": 1000, "jack": [1000, 1003, 1011, 1012], "hale": [1000, 1012], "jakemick": 1000, "mcdermott": 1000, "zwinck": 1000, "vredevoogd": [1000, 1001], "pati": 1000, "ekman": [1000, 1004], "shubernetskii": 1000, "naoki": [1000, 1010], "orii": 1000, "seamu": 1000, "absher": 1000, "feldman": [1000, 1005, 1006, 1007, 1008], "stefano": 1000, "lattarini": 1000, "steve": [1000, 1002, 1006, 1011, 1013], "koch": [1000, 1006, 1007, 1009, 1010], "sturla": 1000, "molden": 1000, "jarosch": 1000, "nikolai": [1001, 1002, 1003, 1004, 1006, 1007, 1012], "mayorov": [1001, 1002, 1003, 1004], "msvc": 1001, "mingw": 1001, "resourcewarn": 1001, "calvin": [1001, 1002], "gile": [1001, 1002], "billing": [1001, 1002, 1003], "safe_realloc": 1001, "bradshaw": [1001, 1002, 1005], "pico": [1001, 1002], "restor": [1001, 1006, 1007, 1008, 1009], "raff": 1001, "__array__": [1001, 1008], "jeffrei": [1001, 1004], "blackburn": [1001, 1004], "danni": [1001, 1002, 1003], "sullivan": [1001, 1002, 1003], "wignal": [1001, 1002, 1008, 1009], "grid_tograph": 1001, "gracefulli": [1001, 1002], "gaussianprocess": 1001, "novak": 1001, "tulloch": [1001, 1002], "wardagglomer": 1001, "wardclust": 1001, "mean_l1_ratio": 1001, "phlypo": 1001, "bommarito": [1001, 1002], "brook": [1001, 1002, 1010], "osborn": [1001, 1002], "eltermann": 1001, "bwignal": 1001, "ankit": [1001, 1008, 1010, 1012], "agraw": [1001, 1006, 1012, 1013], "carei": [1001, 1002, 1003, 1004, 1005], "ugurthemast": [1001, 1002], "schumach": [1001, 1002, 1003], "baptist": [1001, 1009], "lagard": 1001, "rajat": [1001, 1008], "khanduja": 1001, "pascual": 1001, "ignacio": 1001, "rossi": 1001, "s\u00e4ger": [1001, 1004], "ilambharathi": [1001, 1002], "kanniah": [1001, 1002], "sdenton4": 1001, "alyssa": [1001, 1005], "amo": 1001, "waterland": 1001, "murad": 1001, "maud": 1001, "karol": 1001, "pysniak": 1001, "cgohlk": [1001, 1002], "jacobsen": 1001, "collin": 1001, "kaushik94": 1001, "erwin": 1001, "marsi": 1001, "csytraci": 1001, "lk": 1001, "laurent": [1001, 1002, 1005, 1006, 1013], "direr": [1001, 1002, 1005, 1006], "shilt": 1001, "yoshiki": [1001, 1004], "v\u00e1zquez": 1001, "yung": [1001, 1004], "siang": 1001, "liau": 1001, "abhishek": [1001, 1002, 1008, 1012], "thakur": [1001, 1002], "rohit": [1001, 1002, 1006, 1007], "sivaprasad": [1001, 1002], "amormachin": 1001, "oscar": [1001, 1005], "carlsson": 1001, "nanta": 1001, "nardelli": 1001, "jess010": 1001, "kowalski87": 1001, "clegg": 1001, "ralf": [1001, 1004, 1005], "gommer": [1001, 1004, 1005], "aft": 1001, "rupesh": 1001, "srivastava": [1001, 1013], "ryan": [1001, 1004, 1006, 1007], "skipper": [1001, 1003, 1004], "seabold": [1001, 1003, 1004], "stefan": [1001, 1002, 1006, 1008], "walt": [1001, 1002, 1006], "riddel": [1001, 1003, 1005], "valentin": [1001, 1003, 1013], "haenel": 1001, "myer": [1001, 1005], "yoni": 1001, "meshulam": 1001, "yuri": [1001, 1003], "zaytsev": 1001, "adrinjalali": [1001, 1010], "ai8rahim": 1001, "alemagnani": 1001, "chalmerlow": 1001, "dziki": 1001, "dro\u017cd\u017c": 1001, "matrixorz": 1001, "popo": 1001, "samuela": 1001, "fran\u00e7oi": 1001, "boulogn": 1001, "ethan": [1001, 1004], "guilherm": 1001, "trein": 1001, "heuer": 1001, "ivicajov": 1001, "rouli": 1001, "eduardo": [1001, 1003, 1011, 1012], "ari\u00f1o": 1001, "rubia": 1001, "jell": 1001, "zijlstra": 1001, "eddi": 1001, "jansson": [1001, 1013], "ca\u00f1ardo": 1001, "alastuei": 1001, "joseph": [1001, 1002, 1003, 1004, 1010, 1012, 1013], "perla": 1001, "ricardo": [1001, 1011, 1012], "kenta": 1001, "sato": 1001, "medri": 1001, "luce": 1001, "pierron": 1001, "danielweitzenfeld": 1001, "thompson": 1001, "brett": [1001, 1003, 1004, 1005, 1006, 1013], "feurer": [1001, 1006], "earl": 1001, "hank": 1001, "orr\u00f9": 1001, "lunt": 1001, "kearn": 1001, "pawe\u0142": [1001, 1005, 1010, 1011], "mandera": 1001, "zambelli": 1001, "staubda": 1001, "dedupl": 1002, "heilman": [1002, 1003], "precompute_dist": [1002, 1009], "lshforest": [1002, 1005], "qiang": 1002, "luo": 1002, "clemen": 1002, "brunner": 1002, "matteo": [1002, 1004, 1012], "visconti": 1002, "oleggio": 1002, "castello": 1002, "linkage_tre": 1002, "jatin": [1002, 1004], "shah": [1002, 1003, 1004, 1010], "saurabh": [1002, 1003, 1004, 1005, 1006, 1010], "jha": [1002, 1008, 1012], "blanchard": [1002, 1003], "michal": [1002, 1005, 1011, 1012], "romaniuk": 1002, "gilmor": 1002, "stapl": 1002, "hedyati": 1002, "antoni": [1002, 1004, 1010, 1013], "parel": 1002, "herv\u00e9": 1002, "bredin": 1002, "hasil": 1002, "sharma": [1002, 1004, 1006, 1007, 1009, 1010, 1012], "download_20newsgroup": 1002, "friend": 1002, "cathi": [1002, 1008], "deng": [1002, 1003, 1004], "dawson": 1002, "garret": 1002, "hanna": [1002, 1003, 1009], "wallach": [1002, 1003], "yan": [1002, 1010], "artem": [1002, 1005], "sobolev": 1002, "fit_ovr": 1002, "predict_ovr": 1002, "predict_proba_ovr": 1002, "fit_ovo": 1002, "predict_ovo": 1002, "fit_ecoc": 1002, "predict_ecoc": 1002, "lamond": 1002, "outweigh": 1002, "thresh": 1002, "akshai": [1002, 1005, 1010], "akshayah3": 1002, "aldrian": 1002, "obaja": 1002, "ander": [1002, 1008], "aagaard": 1002, "cranenburgh": 1002, "walker": 1002, "banilo": [1002, 1003], "barmalei": [1002, 1003], "benedikt": 1002, "koehler": 1002, "bhsu": 1002, "bori": [1002, 1010], "feld": 1002, "borja": 1002, "ayerdi": 1002, "boyuan": [1002, 1003, 1004], "brent": [1002, 1006, 1007], "pedersen": 1002, "celeo": 1002, "chebee7i": 1002, "stade": 1002, "schuldt": 1002, "christof": [1002, 1003], "angermuel": [1002, 1003], "daiki": 1002, "aminaka": 1002, "danfrankj": 1002, "dmitrij": 1002, "milajev": 1002, "floydsoft": 1002, "garrett": 1002, "gpassino": 1002, "gwulf": [1002, 1003], "hampu": 1002, "bengtsson": 1002, "harri": [1002, 1004, 1010, 1011], "mavroforaki": [1002, 1004], "helder": [1002, 1011, 1012], "herv": 1002, "hugu": 1002, "salamin": 1002, "ism": 1002, "dlabal": 1002, "javier": 1002, "l\u00f3pez": [1002, 1006, 1007, 1010], "pe\u00f1a": 1002, "jdcaballero": 1002, "jeff": [1002, 1004, 1011, 1012], "hammerbach": 1002, "helmu": 1002, "kaicheng": 1002, "markham": [1002, 1009, 1010], "lagacheri": 1002, "leepei": 1002, "loic": [1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "estev": [1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "luka": [1002, 1009], "michelbach": 1002, "mario": [1002, 1004, 1012], "krell": [1002, 1004], "ku": [1002, 1003], "mateusz": [1002, 1009, 1010], "susik": 1002, "mehdi": [1002, 1011], "cherti": 1002, "mlg": 1002, "montecchio": 1002, "okal": 1002, "billi": 1002, "\u00f3scar": [1002, 1003, 1004, 1005], "n\u00e1jera": [1002, 1003, 1004, 1005], "puggioni": 1002, "pratap": [1002, 1005, 1012], "vardhan": 1002, "pvnguyen": 1002, "queqichao": 1002, "rahiel": 1002, "kasim": 1002, "mason": 1002, "saket": [1002, 1003, 1010], "choudhari": [1002, 1003, 1012], "sam": [1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "nichol": 1002, "sethdandridg": 1002, "sinhrk": [1002, 1003], "snuderl": 1002, "ott": 1002, "tjoa": 1002, "swu": 1002, "zimmer": [1002, 1012], "tejesh95": 1002, "terrycojon": 1002, "delteil": 1002, "toma": 1002, "kazmar": 1002, "trevorstephen": [1002, 1004], "tttthomasssss": 1002, "tzu": 1002, "kuo": 1002, "ugurcaliskan": 1002, "vinayak": [1002, 1003, 1004, 1006, 1007], "mehta": [1002, 1003, 1004, 1006, 1007, 1008, 1009], "vjacheslav": 1002, "murashkin": 1002, "wadawson": 1002, "x0l": 1002, "vendor": [1003, 1006, 1007], "6147": 1003, "presort": [1003, 1008], "5857": 1003, "mcculloh": [1003, 1004], "6258": 1003, "giorgio": [1003, 1004, 1005], "patrini": [1003, 1004, 1005], "joe": 1003, "jevnik": 1003, "labelkfold": [1003, 1004], "labelshufflesplit": [1003, 1004], "mcfee": [1003, 1004], "3659": 1003, "4738": 1003, "projectedgradientnmf": 1003, "nls_max_it": 1003, "erick": 1003, "moodi": 1003, "4025": 1003, "mean_shift_": 1003, "mean_shift": [1003, 1006], "martino": 1003, "sorbaro": 1003, "cori": 1003, "konstantin": [1003, 1004, 1005], "shmelkov": 1003, "backlink": 1003, "jaidev": 1003, "deshpand": [1003, 1004], "dictlearn": 1003, "kashif": 1003, "rasul": [1003, 1005, 1006], "galvez": 1003, "sonni": 1003, "hu": [1003, 1006, 1008], "santi": [1003, 1005, 1006], "villalba": [1003, 1006, 1010], "5186": 1003, "stolbunov": 1003, "booster": 1003, "graham": [1003, 1004], "clenaghan": [1003, 1004], "clyde": 1003, "subproblem": 1003, "forestclassifi": 1003, "ankur": 1003, "ankan": 1003, "henri": [1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "5431": 1003, "buddha": 1003, "prakash": [1003, 1005, 1011], "5182": 1003, "lamb": [1003, 1011], "5282": 1003, "5355": 1003, "5360": 1003, "4478": 1003, "5337": 1003, "4362": 1003, "5495": 1003, "elvi": [1003, 1004, 1005], "dohmatob": [1003, 1004, 1005], "data_min": 1003, "data_max": 1003, "data_rang": 1003, "_learntselectormixin": 1003, "gradientboost": 1003, "metatransfom": 1003, "load_lfw_pair": 1003, "wardagglom": 1003, "residues_": 1003, "indicator_matrix_": 1003, "adithya": 1003, "ganesh": 1003, "akitti": 1003, "alexei": 1003, "grigorev": 1003, "ali": [1003, 1006, 1007, 1010, 1011], "baharev": 1003, "ando": 1003, "saaba": 1003, "anish": [1003, 1004], "anthoni": [1003, 1005, 1006], "erling": 1003, "rouvinen": 1003, "rachez": [1003, 1004], "benjaminirv": 1003, "naul": [1003, 1004], "gohlk": 1003, "bourguignat": 1003, "cindi": [1003, 1011], "sridharan": 1003, "kronovet": 1003, "data1010": 1003, "dotson": 1003, "djipei": [1003, 1004], "dmitri": [1003, 1005, 1006, 1007, 1011], "spikhalskii": 1003, "donn": 1003, "duart": [1003, 1011, 1013], "caro": 1003, "larson": [1003, 1007, 1008, 1010, 1012], "fernando": [1003, 1010], "carrillo": 1003, "eckert": 1003, "zalkow": 1003, "ganiev": [1003, 1004, 1005], "ibraim": [1003, 1004, 1005], "giorgiop": 1003, "gryllo": [1003, 1006], "prokopi": [1003, 1006], "hsuan": 1003, "tien": 1003, "ishank": [1003, 1004, 1005], "gulati": [1003, 1004, 1005], "jeffrey04": [1003, 1004], "jfraj": 1003, "jiali": 1003, "mei": [1003, 1008], "kirkham": [1003, 1004, 1006], "wittenau": 1003, "loyal": 1003, "jungkook": 1003, "park": [1003, 1008, 1010], "kamalakerdadi": [1003, 1004], "kyler": 1003, "lilian": [1003, 1004], "besson": [1003, 1004], "tiao": [1003, 1004], "marktab": 1003, "spacek": 1003, "martinbpr": [1003, 1004], "martinosorb": 1003, "maryanmorel": [1003, 1004], "masafumi": 1003, "oyamada": 1003, "krump": 1003, "kolganov": 1003, "mbilling": 1003, "mhg": 1003, "patterson": 1003, "omer": 1003, "katz": [1003, 1010, 1011], "pauli": 1003, "virtanen": 1003, "fischer": [1003, 1004], "pianomania": 1003, "preston": [1003, 1004, 1005], "parri": [1003, 1004, 1005], "rohan": [1003, 1004, 1006, 1007, 1011], "ramanath": 1003, "bansod": [1003, 1004, 1005], "scls19fr": 1003, "saeger": [1003, 1004, 1005], "shivan": 1003, "sornarajah": 1003, "simonpl": 1003, "sseg": 1003, "hoover": [1003, 1004, 1005, 1007], "seguin": 1003, "theodor": 1003, "vasiloudi": 1003, "freita": [1003, 1005, 1006], "pereira": [1003, 1006, 1007], "timothi": [1003, 1011], "hopper": 1003, "tokoroten": 1003, "vstolbunov": 1003, "wangz10": 1003, "yucheng": 1003, "zhauniarovich": 1003, "zac": 1003, "stewart": [1003, 1008, 1011, 1013], "zhai_pro": 1003, "zichen": 1003, "7946": 1004, "8355": 1004, "9010": 1004, "8040": 1004, "9149": 1004, "aman": [1004, 1005, 1006, 1012, 1013], "dalmia": [1004, 1005, 1006], "nate": [1004, 1005, 1011], "guerin": [1004, 1005], "lebedev": [1004, 1005], "utilis": 1004, "6497": 1004, "7724": 1004, "bing": [1004, 1005], "explained_variance_ratio": 1004, "7632": 1004, "jpfrancoia": [1004, 1005], "7676": 1004, "moham": [1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "affan": 1004, "7756": 1004, "7786": 1004, "srivatsan": [1004, 1005, 1008], "7799": 1004, "7490": [1004, 1005], "6282": 1004, "7301": 1004, "6178": 1004, "7680": 1004, "n_iters_": 1004, "7553": 1004, "ekaterina": [1004, 1005, 1006, 1007, 1009], "krivich": [1004, 1005, 1007], "5874": 1004, "7593": 1004, "7594": 1004, "7660": 1004, "7750": 1004, "7732": 1004, "artsion": 1004, "lieu": [1004, 1005], "grid_scores_": [1004, 1010, 1011], "leaveonelabelout": 1004, "leaveplabelout": 1004, "plural": 1004, "mean_tim": 1004, "std_time": 1004, "3204": 1004, "5291": 1004, "sounder": 1004, "7295": 1004, "5299": 1004, "bravi": 1004, "fouchet": 1004, "calinski_harabaz_scor": [1004, 1006], "harabaz": 1004, "6586": 1004, "4294": 1004, "6667": 1004, "6954": 1004, "unveil": 1004, "yelit": 1004, "basebag": [1004, 1006], "staub": 1004, "5805": 1004, "5251": 1004, "imacul": 1004, "1000x": 1004, "arfa": 1004, "6691": 1004, "6913": 1004, "5762": 1004, "utkarsh": [1004, 1005, 1006, 1007], "upadhyai": [1004, 1005, 1006, 1007], "6846": 1004, "5929": 1004, "podshumok": [1004, 1005], "6173": 1004, "ryad": 1004, "zenin": 1004, "devashish": 1004, "asish": [1004, 1005], "dowl": 1004, "6697": 1004, "ori": 1004, "ziv": 1004, "sear": 1004, "merritt": 1004, "7325": 1004, "7239": 1004, "hong": [1004, 1006, 1010, 1011, 1012], "guangguo": 1004, "jensen": [1004, 1010], "7419": 1004, "gregori": [1004, 1008, 1009, 1010, 1011], "stupp": [1004, 1005], "bernardo": 1004, "stein": 1004, "sparse_func": [1004, 1010], "incr_mean_variance_axi": [1004, 1010], "fuse": 1004, "7049": 1004, "7152": 1004, "load_boston": [1004, 1006, 1011], "7154": 1004, "manvendra": [1004, 1005], "singh": [1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "5540": 1004, "7248": 1004, "6764": 1004, "wenhua": 1004, "6817": 1004, "6902": 1004, "leonieborn": 1004, "5141": 1004, "4995": 1004, "5012": 1004, "_transform_select": 1004, "7194": 1004, "caio": [1004, 1006, 1008], "oliveira": [1004, 1006, 1008, 1012], "6182": 1004, "6121": 1004, "6472": 1004, "7350": 1004, "russel": [1004, 1005], "smith": [1004, 1005, 1006, 1007, 1008, 1010], "7159": 1004, "yichuan": [1004, 1005], "5460": 1004, "document_clust": 1004, "7353": 1004, "_search": 1004, "_check_param_grid": 1004, "xrang": 1004, "7323": 1004, "viacheslav": 1004, "kovalevskyi": 1004, "7101": 1004, "residual_metr": 1004, "6651": 1004, "reorgan": 1004, "7187": 1004, "7260": 1004, "sebasti\u00e1n": 1004, "vanrel": 1004, "leaveplabelsout": 1004, "6660": 1004, "unprefix": 1004, "7261": 1004, "aditya": [1004, 1006, 1007, 1008, 1012, 1013], "joshi": [1004, 1006, 1012], "loginov": 1004, "minyushkin": 1004, "rudi": 1004, "abadi": [1004, 1005], "saint": 1004, "alexfield": 1004, "alvaro": [1004, 1006], "ulloa": 1004, "alyssaq": 1004, "amlan": 1004, "kar": 1004, "giessel": 1004, "jackson": [1004, 1005, 1007], "murrai": [1004, 1005], "arafat": 1004, "archit": 1004, "asnt": 1004, "b0noi": 1004, "behzad": 1004, "tabibian": 1004, "kratzwald": 1004, "bhargav": 1004, "mangipudi": 1004, "blakeflei": 1004, "brandon": [1004, 1005, 1012, 1013], "carter": [1004, 1005, 1013], "camilo": 1004, "lamu": 1004, "carol": [1004, 1005], "Willing": [1004, 1005], "cass": 1004, "ceshin": 1004, "truong": 1004, "codevig": 1004, "shiebler": 1004, "hnyk": [1004, 1005], "elli": [1004, 1007], "nicholson": [1004, 1005, 1006], "thaler": 1004, "warshaw": 1004, "lasagna": 1004, "deborah": [1004, 1005], "definitelyuncertain": 1004, "didi": [1004, 1005, 1006, 1007], "zev": [1004, 1005, 1006, 1007], "dsquareindia": 1004, "edwinensa": 1004, "elia": 1004, "kuth": 1004, "fabio": 1004, "ticconi": 1004, "fisach": 1004, "donovan": 1004, "ghg": 1004, "giovanni": [1004, 1006], "cherubin": 1004, "lanzani": 1004, "glenn": 1004, "qian": [1004, 1009], "mohr": 1004, "govin": 1004, "vatsan": 1004, "reda": 1004, "gustav": 1004, "m\u00f6rtberg": 1004, "halwai": 1004, "harizo": [1004, 1005], "rajaona": [1004, 1005], "hashcode55": 1004, "hdmetor": 1004, "hobson": 1004, "lane": 1004, "bown": 1004, "igor": [1004, 1005, 1011], "andriushchenko": [1004, 1005], "inki": 1004, "hwang": 1004, "isaac": [1004, 1005, 1007, 1008], "sijaranamu": 1004, "iver": 1004, "jordal": 1004, "jackmartin": 1004, "fiedler": 1004, "routlei": 1004, "zike": 1004, "janna": 1004, "brettingen": 1004, "jarfa": 1004, "laska": 1004, "jblackburn": 1004, "levesqu": 1004, "hintz": 1004, "jeremynixon": 1004, "jeroen": 1004, "jessica": 1004, "jill": 1004, "j\u00eann": 1004, "vie": 1004, "jia": 1004, "jiyuan": 1004, "johannah": 1004, "boersma": 1004, "moeller": 1004, "striebel": [1004, 1005], "joncral": 1004, "jordi": 1004, "munoz": [1004, 1010], "jrfiedler": 1004, "juliankahnert": 1004, "juliathebrav": 1004, "kaichogami": 1004, "lyon": [1004, 1005], "kingjr": 1004, "kjell": 1004, "krishna": [1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013], "kalyan": 1004, "krishnakalyan3": 1004, "kvle": 1004, "putnam": 1004, "ldavid": 1004, "leig": 1004, "leightonzhang": 1004, "leland": [1004, 1005, 1006, 1008, 1009], "mcinn": [1004, 1005, 1006, 1008, 1009], "liang": [1004, 1009, 1010], "hsieh": 1004, "lizsz": 1004, "l\u00e9oni": 1004, "born": 1004, "maniteja": [1004, 1005, 1006], "nandana": [1004, 1005, 1006], "marco": [1004, 1006, 1007, 1011, 1012, 1013], "bao": [1004, 1012], "szepieniec": 1004, "madsen": [1004, 1006], "massil": 1004, "matheu": 1004, "duboi": [1004, 1006], "moroz": 1004, "scherer": 1004, "michiaki": 1004, "ariga": 1004, "moussa": 1004, "taifi": 1004, "mrandrewandrad": 1004, "mridul": 1004, "seth": 1004, "nadya": 1004, "naoya": [1004, 1005, 1006, 1007], "kanai": [1004, 1005, 1006], "nickledav": 1004, "nico": [1004, 1011], "ningchi": 1004, "nlathia": 1004, "okbalefthand": 1004, "okhlopkov": [1004, 1005], "pano": 1004, "lourida": 1004, "strickland": 1004, "perrin": 1004, "letelli": 1004, "pestrickland": 1004, "practicalswift": 1004, "qimu": 1004, "zheng": [1004, 1005, 1010], "rachit": [1004, 1010, 1013], "kansal": 1004, "ramana": [1004, 1005], "randi": 1004, "olson": 1004, "lutz": [1004, 1008, 1011], "schucker": 1004, "jain": [1004, 1005, 1006, 1010, 1012, 1013], "ruifeng": [1004, 1005, 1010], "r\u00e9my": 1004, "l\u00e9one": 1004, "saihttam": 1004, "saiw": 1004, "yeung": 1004, "shleifer": [1004, 1005], "sartaj": 1004, "sasank": 1004, "chilamkurthi": 1004, "seal": 1004, "shagun": 1004, "sodhani": 1004, "shanmuga": 1004, "shashank": [1004, 1010], "shekhar": 1004, "shawpan": 1004, "shengxiduan": 1004, "shota": 1004, "shuckle16": 1004, "smedbergm": 1004, "srvanrel": 1004, "leriqu": [1004, 1006], "taranjeet": 1004, "themrmax": [1004, 1005], "hallock": 1004, "moreau": [1004, 1005, 1006, 1007, 1008], "tkammi": 1004, "toastedcornflak": [1004, 1005], "tomdlt": 1004, "toshihiro": [1004, 1005, 1011], "kamishima": [1004, 1005], "tracer0tong": 1004, "hauck": 1004, "vo": [1004, 1012], "varun": [1004, 1005, 1006, 1012, 1013], "jewalikar": 1004, "vikram": 1004, "villu": 1004, "ruusmann": 1004, "walter": 1004, "waterponei": [1004, 1005], "wenjian": 1004, "welch": 1004, "wyseguy7": 1004, "xyguo": [1004, 1006], "yanlend": 1004, "yen": [1004, 1005], "yenchenlin": 1004, "yoav": 1004, "zivori": 1004, "10723": [1005, 1006], "9623": 1005, "undocu": 1005, "deleteri": 1005, "9677": 1005, "ashutosh": [1005, 1006, 1008, 1010], "correlation_model": 1005, "regression_model": 1005, "belatedli": 1005, "9717": 1005, "9693": 1005, "steingold": [1005, 1006], "9711": 1005, "goncalo": [1005, 1006], "rodrigu": [1005, 1006, 1011], "9641": 1005, "bourbeau": [1005, 1006, 1007], "9865": 1005, "sachin": [1005, 1006, 1012], "kelkar": [1005, 1006, 1008], "9922": 1005, "charli": [1005, 1006], "brummitt": [1005, 1006], "9945": 1005, "9830": 1005, "9600": 1005, "kerimov": [1005, 1006], "9593": 1005, "reiichiro": [1005, 1006], "nakano": [1005, 1006], "9604": 1005, "interim": 1005, "9558": 1005, "9847": 1005, "joan": [1005, 1006, 1007, 1008], "massich": [1005, 1006, 1007, 1008], "oli": 1005, "blum": 1005, "9697": 1005, "9750": 1005, "9788": 1005, "9815": 1005, "9802": 1005, "vrishank": [1005, 1006], "bhardwaj": [1005, 1006], "nagarjuna": [1005, 1006], "nathaniel": [1005, 1006, 1008], "diegodlh": [1005, 1006], "jkleint": [1005, 1006], "oliblum90": [1005, 1006], "pasbi": [1005, 1006], "lawson": [1005, 1006, 1007], "nielsenmarkus11": [1005, 1006], "excit": 1005, "cautiou": 1005, "min_impurity_split": 1005, "7823": [1005, 1006], "8446": 1005, "5279": 1005, "8363": 1005, "5295": 1005, "7388": 1005, "userguid": 1005, "7655": 1005, "karan": [1005, 1006, 1007], "desai": [1005, 1007, 1010, 1011, 1013], "7739": 1005, "gasquez": 1005, "8120": 1005, "neeraj": 1005, "gangwar": 1005, "7548": 1005, "9206": 1005, "7441": 1005, "6101": 1005, "7674": 1005, "8698": 1005, "7794": 1005, "herilalaina": [1005, 1006, 1008], "rakotoarison": [1005, 1006, 1008], "5036": 1005, "4939": 1005, "esuli": [1005, 1010], "n_skips_": 1005, "7914": 1005, "horrel": 1005, "8591": 1005, "hadrien": [1005, 1008], "7838": 1005, "8835": 1005, "8061": 1005, "cordier": 1005, "6288": 1005, "9145": 1005, "reddi": [1005, 1006, 1007, 1012], "chinthala": 1005, "7721": 1005, "crall": [1005, 1011], "7685": 1005, "tommi": [1005, 1006, 1007], "l\u00f6fstedt": 1005, "9277": 1005, "hongkahjun": 1005, "7089": 1005, "randomized_svd_low_rank": 1005, "9067": 1005, "6181": 1005, "wendling": 1005, "8065": 1005, "lejeun": 1005, "7567": 1005, "jay": 1005, "doepk": 1005, "7573": 1005, "romain": [1005, 1010], "brault": 1005, "5229": 1005, "7990": 1005, "8586": 1005, "7723": 1005, "8028": 1005, "booth": 1005, "8005": 1005, "7863": 1005, "7506": 1005, "5991": 1005, "8845": 1005, "8053": 1005, "8282": 1005, "8117": 1005, "9259": 1005, "8094": 1005, "8335": 1005, "poughon": 1005, "7880": 1005, "karnofski": 1005, "935": 1005, "8931": 1005, "attractador": [1005, 1006], "8002": 1005, "8549": 1005, "zerodivisionerror": [1005, 1008], "7501": 1005, "dominik": 1005, "krzeminski": 1005, "7970": 1005, "8006": 1005, "p\u00f6lsterl": [1005, 1008, 1011], "8936": 1005, "8672": 1005, "mike": 1005, "benfield": 1005, "broke": 1005, "8068": 1005, "5732": 1005, "ytrue": 1005, "ypred": 1005, "8087": 1005, "7983": 1005, "features_nam": 1005, "8512": 1005, "8251": 1005, "aivision2020": 1005, "5814": 1005, "7849": 1005, "jair": 1005, "montoya": 1005, "martinez": 1005, "randomizedlasso": 1005, "5359": 1005, "9302": 1005, "8160": 1005, "8224": 1005, "gedeck": 1005, "vathsala": [1005, 1006, 1007, 1008], "achar": [1005, 1006, 1007, 1008], "9022": 1005, "mehmet": [1005, 1011], "basbug": 1005, "9024": 1005, "8973": 1005, "paulo": [1005, 1011, 1013], "haddad": 1005, "unmeaning": 1005, "6573": 1005, "quazi": [1005, 1006], "marufur": 1005, "rahman": [1005, 1006, 1010], "9239": 1005, "andr": [1005, 1012], "ambrosio": 1005, "boechat": 1005, "early_exager": 1005, "assertionerror": 1005, "8992": 1005, "7954": 1005, "foreman": 1005, "9105": 1005, "9108": 1005, "8306": 1005, "7872": 1005, "_c_step": 1005, "3367": 1005, "steward": 1005, "8768": 1005, "detomaso": 1005, "6507": 1005, "7819": 1005, "jayzed82": 1005, "6126": 1005, "7814": 1005, "7702": 1005, "9219": 1005, "7771": 1005, "ang": 1005, "randomizedlogisticregress": 1005, "8259": 1005, "mandatorili": 1005, "7565": 1005, "8181": 1005, "basesearchcv": [1005, 1006], "8344": 1005, "eriksson": 1005, "7661": 1005, "8295": 1005, "batula": 1005, "dylan": [1005, 1008], "werner": [1005, 1010], "meier": 1005, "7365": 1005, "aleksandr": 1005, "sandrovskii": 1005, "5697": 1005, "stijn": 1005, "tonk": 1005, "outputcodeclassifi": [1005, 1010], "6250": 1005, "8093": 1005, "bull": 1005, "9507": 1005, "7356": 1005, "dingwal": 1005, "_check_target": 1005, "8377": 1005, "5211": 1005, "rhinehart": 1005, "8159": 1005, "8198": 1005, "fetch_": 1005, "7944": 1005, "7825": 1005, "kathleen": 1005, "7376": 1005, "yangarbit": 1005, "__getstate__": 1005, "obstruct": 1005, "8316": 1005, "holger": 1005, "8010": 1005, "7986": 1005, "najera": 1005, "9289": 1005, "makedir": 1005, "9284": 1005, "sebastin": [1005, 1006], "alert": 1005, "lgtm": 1005, "9278": 1005, "heli": 1005, "8449": 1005, "9078": 1005, "purport": 1005, "sergul": [1005, 1006, 1009], "aydor": [1005, 1006, 1009], "8922": 1005, "8137": 1005, "8139": 1005, "8995": 1005, "2879": 1005, "7459": 1005, "7812": 1005, "9100": 1005, "8481": 1005, "8174": 1005, "tahar": 1005, "zanouda": 1005, "8854": 1005, "8874": 1005, "7998": 1005, "jiacheng": 1005, "argpartit": 1005, "frombuffer_empti": 1005, "rankdata": 1005, "safe_copi": 1005, "eig": 1005, "fast_dot": 1005, "pinvh": [1005, 1007], "graph_laplacian": 1005, "sparsetool": 1005, "connected_compon": 1005, "check_decision_proba_consist": 1005, "shubham": [1005, 1008], "9019": 1005, "baseensembl": [1005, 1008], "7464": 1005, "rishikesh": 1005, "taehoon": [1005, 1006], "aashil": 1005, "balakumaran": [1005, 1006], "manoharan": [1005, 1006], "petrov": [1005, 1006], "minghui": [1005, 1006], "jc": [1005, 1006], "alexandercbooth": 1005, "chkoar": 1005, "aarshai": [1005, 1006], "gilliam": 1005, "subramanyam": 1005, "clement": [1005, 1006, 1010], "joudet": [1005, 1006], "robl": 1005, "kati": 1005, "luangkot": 1005, "lacchia": 1005, "akshay0724": 1005, "omtcyfz": 1005, "rickiepark": 1005, "jbdelafoss": 1005, "vivek": [1005, 1006, 1007], "elliott": 1005, "ldirer": 1005, "sid": 1005, "kapur": 1005, "midina": 1005, "mikebenfield": 1005, "sourav": [1005, 1008], "aseem": 1005, "bansal": 1005, "aishwaryark": 1005, "howel": 1005, "dokato": 1005, "kathi": [1005, 1008], "ferria": 1005, "nikita": [1005, 1006, 1008, 1011, 1012, 1013], "basil": 1005, "beirouti": 1005, "possa": 1005, "bednar": 1005, "janin": 1005, "harper": 1005, "artsiom": 1005, "ligo": 1005, "rahn": [1005, 1008], "seanpwilliam": 1005, "julian": [1005, 1006], "kuhlmann": [1005, 1006], "aubert": 1005, "j\u00f6rn": 1005, "hee": [1005, 1008], "shivamgargsya": [1005, 1009, 1011], "kat": 1005, "hempstalk": 1005, "kaushik": [1005, 1012], "lakshmikanth": 1005, "kennedi": [1005, 1008], "yap": 1005, "kiril": [1005, 1006, 1008, 1010], "bobyrev": 1005, "imbert": [1005, 1007, 1010, 1012], "lera": 1005, "douillard": 1005, "mainak": 1005, "tobychees": [1005, 1006], "manraj": 1005, "marc": [1005, 1007, 1008], "meketon": 1005, "marcofalk": 1005, "gilch": 1005, "mehul": 1005, "ahuja": [1005, 1012, 1013], "goetz": [1005, 1006], "dezub": 1005, "baumgartn": 1005, "vibrantabhi19": 1005, "golubin": 1005, "milen": 1005, "paskov": 1005, "antonin": 1005, "carett": 1005, "morikko": 1005, "mrmjauh": 1005, "nalepa": 1005, "namiya": 1005, "narinek": [1005, 1006], "angu": [1005, 1006, 1012], "nicol": 1005, "vavrova": 1005, "nitish": 1005, "pandei": [1005, 1010], "daniil": 1005, "olegovich": 1005, "craze": 1005, "om": 1005, "parmind": 1005, "patrick": [1005, 1006, 1011, 1012], "carlson": 1005, "pei": 1005, "ganssl": 1005, "lorek": 1005, "pete": [1005, 1009, 1010], "bachant": 1005, "csizsek": 1005, "jong": 1005, "puneet": 1005, "mathur": [1005, 1007, 1008, 1013], "quentin": [1005, 1006, 1007], "hibon": 1005, "1kastner": 1005, "rameshwar": [1005, 1006], "bhaskaran": [1005, 1006], "rebecca": 1005, "bilbro": 1005, "remi": 1005, "rampin": 1005, "pratik": 1005, "agarw": [1005, 1006, 1008], "sailesh": [1005, 1006], "choyal": [1005, 1006], "samson": 1005, "samu\u00ebl": 1005, "weber": 1005, "sarah": [1005, 1007, 1010], "abhyudai": 1005, "sharan": [1005, 1006], "yalburgi": [1005, 1006], "willduan": 1005, "siddharth": [1005, 1009], "almer": 1005, "theofilo": 1005, "papapanagiot": 1005, "alison": 1005, "boucher": 1005, "folkman": 1005, "jung": [1005, 1009, 1013], "shenoi": 1005, "vilhelm": [1005, 1006], "ehrenheim": [1005, 1006], "alan": [1005, 1006, 1009, 1011, 1012], "yee": [1005, 1006], "warut": [1005, 1006], "vijitbenjaronk": [1005, 1006], "yuichi": 1005, "fujikawa": 1005, "affanv14": 1005, "andreh7": 1005, "bradi": 1005, "salz": 1005, "campustrampu": 1005, "agamemnon": [1005, 1006, 1007, 1008, 1010, 1011], "krasouli": [1005, 1006, 1007, 1008, 1010, 1011], "ditenberg": 1005, "elena": 1005, "sharova": 1005, "filipj8": [1005, 1006], "fukatani": 1005, "guiniol": 1005, "guoci": 1005, "hakaa1": [1005, 1006], "xhy": 1005, "jakirkham": [1005, 1006, 1007, 1013], "jaroslaw": 1005, "jeroko": 1005, "jmontoyam": 1005, "josephsalmon": [1005, 1006, 1007], "jschendel": [1005, 1006], "leereev": 1005, "hahn": [1005, 1006], "mathurinm": [1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "mehak": 1005, "sachdeva": 1005, "mlewis1729": 1005, "mlliou112": 1005, "mthorrel": [1005, 1008], "ndingwal": 1005, "nuff": 1005, "plagre": 1005, "pldtc325": 1005, "breno": [1005, 1006], "olsen": 1005, "alfano": 1005, "burn": [1005, 1006], "polmauri": 1005, "charlton": 1005, "austin": 1005, "chayant": 1005, "t15h": 1005, "chinmaya": 1005, "pancholi": 1005, "danielsen": 1005, "chung": [1005, 1006], "pravarmahajan": [1005, 1006], "dariu": [1005, 1006], "morawiec": [1005, 1006], "haberth\u00fcr": 1005, "heryanto": 1005, "kirkbi": [1005, 1006], "rashchedrin": 1005, "gertrud": 1005, "devansh": [1005, 1006], "dickson": 1005, "baxlei": 1005, "don86": 1005, "klarup": 1005, "elizabeth": [1005, 1007, 1010], "ferriss": 1005, "ellen": 1005, "egli": 1005, "chieh": [1005, 1006], "chou": [1005, 1006], "grzegorz": [1005, 1008], "szpak": [1005, 1008], "zxcvbniu": 1005, "icyblad": 1005, "ilya": 1005, "laughlin": 1005, "iv\u00e1n": [1005, 1011], "vall\u00e9": 1005, "aur\u00e9lien": [1005, 1006, 1007, 1011, 1012], "bellet": [1005, 1006, 1007], "mahapatra": 1005, "bundl": [1006, 1007], "indexerror": [1006, 1007], "11756": [1006, 1007], "14237": [1006, 1007], "schuder": [1006, 1007, 1008], "13903": [1006, 1007], "13124": [1006, 1007], "13772": [1006, 1007], "vya": [1006, 1007, 1008], "12949": 1006, "prabakaran": [1006, 1007, 1010, 1012, 1013], "kumaresshan": [1006, 1007, 1010], "12946": 1006, "tallott": 1006, "13276": 1006, "13005": 1006, "13312": 1006, "11295": 1006, "vacaliuc": [1006, 1007], "13046": 1006, "12360": 1006, "aakanksha": 1006, "13134": 1006, "sandro": [1006, 1013], "casagrand": [1006, 1007], "12881": 1006, "13165": 1006, "13221": 1006, "bertrandhaut": [1006, 1007], "raghunathan": [1006, 1007, 1008, 1009, 1010, 1011, 1012], "dowon": [1006, 1007], "aria": [1006, 1007, 1013], "fibins": [1006, 1007], "finn": [1006, 1007], "shea": [1006, 1007], "joaak": [1006, 1007], "m\u00e9hault": [1006, 1007], "kms15": [1006, 1007], "kossori": [1006, 1007], "aruku": [1006, 1007], "lakshya": [1006, 1007, 1008], "ib\u00e1\u00f1ez": [1006, 1007, 1010], "gorelli": [1006, 1007, 1011, 1013], "marcogorelli": [1006, 1007], "mferrari3": [1006, 1007], "micka\u00ebl": [1006, 1007], "schoentgen": [1006, 1007], "pavlo": [1006, 1007], "kalli": [1006, 1007], "glaser": [1006, 1007], "pierretallott": [1006, 1007, 1008], "kapoor": [1006, 1007], "sandrocasagrand": [1006, 1007], "tashai": [1006, 1007], "vishaal": [1006, 1007], "zhuyi": [1006, 1007], "ziji": [1006, 1007], "zj": [1006, 1007], "poh": [1006, 1007], "12704": 1006, "12701": 1006, "12685": 1006, "12699": 1006, "adanhawth": [1006, 1007], "stine": [1006, 1007], "feda": [1006, 1007], "curic": [1006, 1007], "jeremiedbb": [1006, 1007, 1008], "katrin": [1006, 1007], "leinweb": [1006, 1007], "muhammad": [1006, 1007, 1011], "hassaan": [1006, 1007], "rafiqu": [1006, 1007], "paczuski": [1006, 1007], "waterburi": [1006, 1007], "shivam": [1006, 1007, 1008], "kotwalia": [1006, 1007], "12159": 1006, "12105": 1006, "11912": 1006, "12304": 1006, "12339": 1006, "12246": 1006, "10811": 1006, "feldbauer": [1006, 1007, 1008, 1009, 1012], "12441": 1006, "12517": 1006, "12234": 1006, "12165": 1006, "12388": 1006, "connor": [1006, 1011], "tann": [1006, 1011], "12393": 1006, "12122": 1006, "sharedmem": 1006, "12518": 1006, "12481": 1006, "12612": 1006, "12211": 1006, "lisa": [1006, 1007, 1009, 1010, 1012, 1013], "hannel": [1006, 1007], "melissa": 1006, "ferrari": 1006, "12451": 1006, "12171": 1006, "12365": 1006, "_encod": 1006, "12514": 1006, "12522": 1006, "12471": 1006, "marzinotto": [1006, 1007], "12317": 1006, "12338": 1006, "bauk": [1006, 1007], "12625": 1006, "sklearn_site_joblib": 1006, "12350": 1006, "12467": 1006, "unvendor": 1006, "12345": 1006, "navarret": [1006, 1007, 1008], "benjastudio": [1006, 1007], "cheuk": [1006, 1007], "connossor": [1006, 1007], "levinson": [1006, 1007], "kieker": [1006, 1007], "kataev": [1006, 1007], "dillon": [1006, 1007, 1008], "gardner": [1006, 1007], "vukolov": [1006, 1007], "caselli": [1006, 1007], "gauravahlawat": [1006, 1007], "gustavo": [1006, 1007, 1012], "haroldfox": [1006, 1007], "jacklangerman": [1006, 1007], "jacopo": [1006, 1007], "notarstefano": [1006, 1007], "janvanrijn": [1006, 1007], "jdethuren": [1006, 1007], "koen": [1006, 1007], "kushal": [1006, 1007], "chauhan": [1006, 1007], "jie": [1006, 1007, 1010], "lili": [1006, 1007], "xiong": [1006, 1007, 1012], "liam": [1006, 1007], "melsyt": [1006, 1007], "nichola": [1006, 1007, 1009], "shebanov": [1006, 1007], "oleksandr": [1006, 1007, 1008, 1009, 1012], "pavlyk": [1006, 1007, 1008, 1009], "hausamann": [1006, 1007], "pulkit": [1006, 1007, 1009], "maloo": [1006, 1007], "batista": [1006, 1007, 1011], "radostin": [1006, 1007], "stoyanov": [1006, 1007], "ramil": [1006, 1007], "nugmanov": [1006, 1007], "rebekah": [1006, 1007, 1008], "roopam": [1006, 1007], "tiernei": [1006, 1007, 1008], "sylvainlan": [1006, 1007, 1008, 1009, 1010], "takingitcasu": [1006, 1007], "tulio": [1006, 1007], "xing": [1006, 1007], "zach": [1006, 1007, 1012], "mountain": 1006, "sorri": 1006, "basemultilayerperceptron": [1006, 1008], "11924": 1006, "macbook": 1006, "9354": 1006, "9372": 1006, "astel": 1006, "10933": 1006, "hansen": 1006, "10471": 1006, "gaurav": [1006, 1007, 1008, 1009, 1010, 1012], "dhingra": [1006, 1007, 1010], "8003": 1006, "jo\u00ebl": 1006, "billaud": 1006, "10059": 1006, "braun": 1006, "9612": 1006, "jonatan": 1006, "samoocha": 1006, "8129": 1006, "margeta": 1006, "k_means_elkan": 1006, "11353": 1006, "11901": 1006, "9875": 1006, "9012": 1006, "11315": 1006, "9041": 1006, "9858": 1006, "artiem": 1006, "krinitsyn": 1006, "9908": 1006, "8617": 1006, "maskani": [1006, 1008, 1009, 1010], "filali": 1006, "konstantino": 1006, "katriopla": 1006, "10774": 1006, "catalfo": 1006, "10795": 1006, "takeshi": [1006, 1011, 1012, 1013], "yoshizawa": 1006, "11082": 1006, "sadhana": 1006, "srinivasan": [1006, 1009], "9731": 1006, "10045": 1006, "fetch_mldata": 1006, "11466": 1006, "6374": 1006, "normalize_compon": [1006, 1008], "11585": 1006, "ivan": [1006, 1007, 1010, 1013], "panico": [1006, 1010], "11420": 1006, "6452": 1006, "walli": 1006, "gauz": 1006, "9492": 1006, "8484": 1006, "9886": 1006, "underflow": [1006, 1011], "10142": 1006, "5956": 1006, "_class_mean": 1006, "_class_cov": 1006, "10898": 1006, "nanxin": 1006, "9832": 1006, "11951": 1006, "r\u00fcdiger": [1006, 1007, 1009], "busch": [1006, 1007, 1009], "9707": 1006, "wan": 1006, "7071": 1006, "9157": 1006, "11176": 1006, "forsyth": 1006, "11542": 1006, "anna": 1006, "9524": 1006, "9723": 1006, "10908": 1006, "10899": 1006, "melderi": 1006, "10101": 1006, "10\u2079": 1006, "9147": 1006, "clae": 1006, "fredrik": 1006, "mannbi": 1006, "10441": 1006, "mayur": 1006, "kulkarni": 1006, "6689": 1006, "nihar": 1006, "sheth": 1006, "11293": 1006, "9656": 1006, "greenhal": 1006, "n_features_to_comput": 1006, "9222": 1006, "hoh": 1006, "9234": 1006, "andrewww": 1006, "8075": 1006, "11211": 1006, "9484": 1006, "dalla": 1006, "card": 1006, "9043": 1006, "10112": 1006, "logistic_regression_path": [1006, 1007], "11724": 1006, "9939": 1006, "westov": 1006, "10998": 1006, "vazelh": [1006, 1007, 1008], "10071": 1006, "10153": 1006, "d\u00f6pfert": 1006, "10095": 1006, "cv_valu": 1006, "10297": 1006, "mabel": [1006, 1010], "10581": 1006, "yacin": 1006, "mazari": 1006, "10687": 1006, "10836": 1006, "aishwarya": 1006, "10397": 1006, "10992": 1006, "11327": 1006, "11905": 1006, "9837": 1006, "10593": 1006, "10610": 1006, "8554": 1006, "9775": 1006, "10827": 1006, "osa": 1006, "8066": 1006, "10587": 1006, "3840": 1006, "niederb\u00fchl": 1006, "9521": 1006, "11124": 1006, "arya": 1006, "11160": 1006, "barkhorn": 1006, "11679": 1006, "pacha": 1006, "10845": 1006, "perez": [1006, 1013], "parra": 1006, "toledano": 1006, "10999": 1006, "memoryerror": [1006, 1010], "11135": 1006, "10377": 1006, "9786": 1006, "10093": 1006, "alexryndin": 1006, "9772": 1006, "9515": 1006, "liddel": 1006, "manh": 1006, "dao": 1006, "9851": 1006, "10280": 1006, "10336": 1006, "haoran": 1006, "basemixtur": [1006, 1007], "10740": 1006, "10869": 1006, "g\u00e9ron": 1006, "9686": 1006, "11310": 1006, "_fit_and_scor": 1006, "11576": 1006, "ronsin": [1006, 1007], "_run_search": 1006, "9599": 1006, "11006": 1006, "11557": 1006, "boucaud": 1006, "iid": 1006, "9085": 1006, "10677": 1006, "zhdanovich": 1006, "10982": 1006, "juliet": 1006, "lawton": 1006, "10928": 1006, "solutu": 1006, "immensu": 1006, "9257": 1006, "8190": 1006, "alcorn": 1006, "9681": 1006, "mottl": [1006, 1007], "10005": 1006, "10346": 1006, "tobia": [1006, 1011, 1013], "10887": 1006, "11136": 1006, "4394": 1006, "9579": 1006, "kober": 1006, "9655": 1006, "bjerr": 1006, "11556": 1006, "11774": 1006, "9456": 1006, "unexpectedli": 1006, "9304": 1006, "11144": [1006, 1007], "9151": 1006, "10521": 1006, "7668": 1006, "9647": 1006, "10195": 1006, "10192": 1006, "11272": 1006, "11467": 1006, "11505": 1006, "giusepp": [1006, 1007], "costa": [1006, 1011], "10210": 1006, "11520": 1006, "11011": 1006, "11005": 1006, "11308": 1006, "11206": 1006, "11306": 1006, "10437": 1006, "lucija": 1006, "gregov": 1006, "10452": 1006, "10181": 1006, "nirvan": [1006, 1010], "anjirbag": 1006, "9399": 1006, "10913": 1006, "rodrigo": 1006, "agundez": 1006, "10458": 1006, "9816": 1006, "newei": 1006, "11042": 1006, "11235": 1006, "active_features_": 1006, "feature_indices_": 1006, "n_values_": 1006, "9726": 1006, "10829": 1006, "gilberto": 1006, "olimpio": 1006, "10655": 1006, "python2": 1006, "10412": 1006, "jiongyan": 1006, "9497": 1006, "8361": 1006, "neo": 1006, "_criterion": 1006, "classificationcriterion": 1006, "regressioncriterion": 1006, "10325": 1006, "camil": 1006, "stap": 1006, "basedecisiontre": [1006, 1007, 1010], "10536": 1006, "ohayon": [1006, 1007], "11464": 1006, "stott": 1006, "10663": 1006, "10229": 1006, "11553": 1006, "10881": 1006, "sevin": 1006, "ridge_regress": [1006, 1007, 1013], "10306": 1006, "siebert": 1006, "11741": 1006, "11166": 1006, "11010": 1006, "lami": 1006, "11596": 1006, "marcu": 1006, "voss": 1006, "9569": 1006, "12462": 1006, "zachariah": 1006, "10474": 1006, "10500": 1006, "9701": 1006, "9378": 1006, "check_set_param": 1006, "7738": 1006, "alvin": 1006, "chiang": 1006, "8102": 1006, "ankita": 1006, "sinha": 1006, "check_methods_subset_invari": [1006, 1012], "10428": 1006, "check_sample_weights_pandas_seri": 1006, "11558": 1006, "211217613": 1006, "absolutelynowarranti": 1006, "richi": 1006, "halford": 1006, "adelr": 1006, "adityadaflapurkar": 1006, "aidan": 1006, "fitzgerald": 1006, "aishgrt1": 1006, "akash": 1006, "shivram": 1006, "lenail": [1006, 1010], "egg": 1006, "diaz": 1006, "amanda": [1006, 1009, 1010, 1011, 1012], "aniruddha": 1006, "annaayzenshtat": 1006, "antonio": [1006, 1008], "quinonez": 1006, "anubhav": 1006, "marwaha": 1006, "arik": 1006, "pamnani": 1006, "ozga": 1006, "arunava": 1006, "geron": [1006, 1011, 1012], "ayush": [1006, 1011], "bangda": 1006, "bastian": 1006, "venthur": 1006, "benn": 1006, "koonc": 1006, "cclauss": 1006, "chadi": 1006, "kamar": 1006, "holdgraf": 1006, "hirsch": 1006, "hogan": 1006, "cnx": 1006, "cwitt": 1006, "ferreira": [1006, 1011, 1012], "gomez": [1006, 1013], "klevebr": 1006, "shwed": 1006, "mohn": [1006, 1010], "danil": 1006, "baibak": [1006, 1007], "beach": 1006, "pickup": 1006, "derek": 1006, "niederhut": [1006, 1008], "dilutedsauc": 1006, "dlovel": 1006, "dor": 1006, "dougla": 1006, "duhaim": 1006, "tuzova": 1006, "eunji": 1006, "farahsae": 1006, "raimundo": 1006, "fenx": 1006, "frankhui": 1006, "franz": 1006, "wompner": 1006, "freija": 1006, "descamp": 1006, "frsi": 1006, "calvo": [1006, 1007], "georgi": [1006, 1009], "peev": [1006, 1009], "gkevinyen5418": 1006, "vermeil": 1006, "hongh": 1006, "hossein": [1006, 1007, 1008], "pourbozorg": [1006, 1007, 1008], "hristo": [1006, 1013], "hunan": 1006, "rostomyan": 1006, "iampat": 1006, "jaewon": 1006, "malcolm": 1006, "jami": 1006, "wolosonovich": 1006, "jeb": 1006, "bearer": 1006, "jinkun": 1006, "jjabl": 1006, "johnstott": 1006, "jotasi": 1006, "julietcl": 1006, "shenk": 1006, "karl": 1006, "kasper": 1006, "primdal": 1006, "lauritzen": 1006, "ksemb": 1006, "kuai": [1006, 1007], "kyeongpil": 1006, "kang": [1006, 1008], "kye": 1006, "kyledrogo": 1006, "l\u00e9o": 1006, "liutong": 1006, "lizao": 1006, "lkjcalc": 1006, "louib": [1006, 1007], "luciano": [1006, 1013], "luke": 1006, "persola": 1006, "markiwanchyshyn": 1006, "marsgui": 1006, "gubri": [1006, 1007], "koko": [1006, 1012, 1013], "copeland": [1006, 1007], "meghann": [1006, 1008], "minh": 1006, "jamaoui": [1006, 1007, 1010], "mohammad": [1006, 1007], "shahebaz": 1006, "muayyad": 1006, "alsadi": 1006, "nabarun": 1006, "pal": [1006, 1012], "narendran": 1006, "santhanam": 1006, "suh": 1006, "eng": 1006, "av": 1006, "nicolau": 1006, "werneck": 1006, "titov": [1006, 1008, 1011, 1012], "nilesh": 1006, "kevlani": 1006, "notmatthancock": [1006, 1008], "nzw": 1006, "oren": 1006, "milman": 1006, "osaid": 1006, "rehman": 1006, "nasir": 1006, "fernand": [1006, 1012, 1013], "olden": 1006, "pierreablin": 1006, "pietruh": 1006, "pinaki": 1006, "nath": 1006, "chowdhuri": [1006, 1012], "piotr": [1006, 1007], "szyma\u0144ski": [1006, 1007], "pradeep": [1006, 1007], "raamana": [1006, 1007], "pravar": 1006, "mahajan": [1006, 1008], "qingi": 1006, "rajendra": 1006, "arora": [1006, 1013], "rankylau": 1006, "kosobrodov": 1006, "rragundez": 1006, "sagnik": 1006, "bhattacharya": 1006, "radhakrishnan": 1006, "saqib": 1006, "nizam": 1006, "shamsi": 1006, "satish": 1006, "gigant": [1006, 1008], "flennerhag": 1006, "sebastien": 1006, "shalil": 1006, "awalei": 1006, "shangwu": [1006, 1007], "sharad": 1006, "vijalapuram": 1006, "shenhanc78": 1006, "rastogi": 1006, "siftikha": 1006, "sinclert": 1006, "p\u00e9rez": 1006, "solutusimmensu": 1006, "somya": 1006, "anand": [1006, 1010], "srajan": 1006, "paliw": 1006, "sriharsha": [1006, 1007], "hatwar": [1006, 1007], "mcdowel": 1006, "syonekura": 1006, "takanori": 1006, "hayashi": 1006, "tarcusx": 1006, "theriley106": 1006, "heavei": 1006, "augspurg": [1006, 1008], "trishnendu": 1006, "ghorai": 1006, "twosigmajab": 1006, "umar": [1006, 1007], "farouk": [1006, 1007], "urvang": [1006, 1008], "patel": [1006, 1008, 1009, 1010, 1012], "vadim": [1006, 1010, 1011], "markovtsev": 1006, "vinit": 1006, "vinod": 1006, "viraj": 1006, "mavani": 1006, "navkal": 1006, "vqean3": [1006, 1007], "vufg": 1006, "wallygauz": 1006, "wdevazelh": 1006, "barnett": 1006, "rosenfeld": 1006, "yime": 1006, "ymazari": 1006, "yufeng": 1006, "griffith": [1006, 1007], "z\u00e9": 1006, "vin\u00edciu": 1006, "zhenq": 1006, "zhiqe": 1006, "xiao": [1006, 1008, 1011, 1012, 1013], "couldn": [1007, 1008, 1009, 1010, 1011, 1012, 1013], "12955": 1007, "klopfer": 1007, "14197": 1007, "14024": 1007, "nicolashug": 1007, "13974": 1007, "hoang": [1007, 1008], "fhoang7": 1007, "14393": 1007, "guillem": [1007, 1008, 1013], "subi": [1007, 1008, 1013], "14087": 1007, "14067": 1007, "stalei": [1007, 1008], "14092": 1007, "14053": 1007, "13947": 1007, "instanci": 1007, "suffient": 1007, "13910": 1007, "13894": 1007, "myatt": [1007, 1008], "min_max_axi": 1007, "13741": 1007, "roddi": [1007, 1008], "macsween": [1007, 1008], "14309": 1007, "13864": 1007, "paresh": [1007, 1008], "13877": 1007, "_sag": 1007, "sag_solv": 1007, "3591": 1007, "13317": 1007, "13157": 1007, "13086": 1007, "cole": 1007, "13485": 1007, "assia": 1007, "benbihi": 1007, "13651": 1007, "reloc": 1007, "13486": 1007, "13427": 1007, "couvreur": [1007, 1008], "9069": 1007, "13835": 1007, "10727": 1007, "wood": 1007, "13250": 1007, "13241": 1007, "12143": 1007, "11650": 1007, "non_negative_factor": [1007, 1009, 1010, 1011], "12988": 1007, "8769": 1007, "11000": 1007, "thibault": 1007, "sejourn": 1007, "changedbehaviourwarn": 1007, "11526": 1007, "6848": 1007, "glemaitr": [1007, 1008, 1010], "11727": 1007, "13266": 1007, "13545": 1007, "sorro": 1007, "12807": 1007, "12513": 1007, "12543": 1007, "storch": 1007, "13260": 1007, "13283": 1007, "13524": 1007, "13174": 1007, "13496": 1007, "13620": 1007, "12436": 1007, "12983": 1007, "13251": 1007, "joshuakennethjon": 1007, "12715": 1007, "13164": 1007, "12834": 1007, "leastsquareserror": 1007, "update_terminal_region": 1007, "6463": 1007, "movelikeriv": 1007, "13193": 1007, "12599": 1007, "13779": 1007, "13780": 1007, "12916": 1007, "13641": 1007, "8478": 1007, "12177": 1007, "12583": 1007, "13601": 1007, "danylo": 1007, "densif": 1007, "13240": 1007, "bartosz": 1007, "13562": 1007, "11646": 1007, "11699": 1007, "make_dataset": 1007, "13336": 1007, "toleranbc": 1007, "11754": 1007, "13397": 1007, "fagan": 1007, "12174": 1007, "12972": 1007, "lucio": 1007, "fernandez": 1007, "arjona": 1007, "coeffeci": 1007, "13279": 1007, "13328": 1007, "13389": 1007, "basesgdclassifi": 1007, "13422": 1007, "cl\u00e9ment": [1007, 1011, 1013], "doumouro": 1007, "unhandl": 1007, "13363": 1007, "12821": 1007, "13350": 1007, "j\u00e9r\u00f4me": [1007, 1008, 1009], "dock\u00e8": [1007, 1008, 1009], "9907": 1007, "12232": 1007, "sangeeth": 1007, "11179": 1007, "13151": 1007, "12568": 1007, "8216": 1007, "romuald": 1007, "menuet": 1007, "12732": 1007, "12334": 1007, "13607": 1007, "12855": 1007, "pawel": 1007, "sendyk": 1007, "13628": 1007, "13447": 1007, "10580": 1007, "sandra": [1007, 1013], "mitrov": 1007, "13554": 1007, "celelibi": 1007, "13142": 1007, "11354": 1007, "12613": 1007, "12669": 1007, "torrella": [1007, 1008], "12861": 1007, "8773": 1007, "13366": 1007, "fournier": 1007, "10440": 1007, "12222": 1007, "10058": 1007, "chiotelli": 1007, "12279": 1007, "12582": 1007, "my_pipelin": 1007, "2568": 1007, "make_": 1007, "11364": 1007, "baze": 1007, "petrushev": 1007, "__len__": 1007, "13439": 1007, "12908": 1007, "drew": 1007, "13253": 1007, "12116": 1007, "12197": 1007, "12251": 1007, "float16": 1007, "13007": 1007, "raffaello": 1007, "baluyot": 1007, "13333": 1007, "13459": 1007, "hunter": 1007, "mcgushion": 1007, "8508": 1007, "6261": 1007, "vettigli": 1007, "justglow": 1007, "12300": 1007, "11458": 1007, "mitar": 1007, "milutinov": 1007, "12344": 1007, "13549": 1007, "warn_on_dtyp": 1007, "check_pairwise_arrai": 1007, "13382": 1007, "prathmesh": 1007, "saval": 1007, "11705": 1007, "11973": 1007, "our_rand_r": 1007, "madhura": [1007, 1009, 1010, 1013], "parikh": [1007, 1012, 1013], "13531": 1007, "check_fit_idempot": 1007, "alberto": [1007, 1011, 1012], "torr": 1007, "amourav": 1007, "assiaben": 1007, "micha\u0142owski": 1007, "brentfagan": 1007, "chenal": [1007, 1008, 1010], "choe": 1007, "drewmjohnston": 1007, "dror": 1007, "atariah": 1007, "esvhd": 1007, "falak": 1007, "gandenberg": 1007, "luqi": 1007, "jf": 1007, "kulbear": 1007, "leandro": [1007, 1011], "hermida": [1007, 1011], "luk": 1007, "manimaran": [1007, 1009, 1010, 1011, 1012], "gaido": 1007, "marinelm": 1007, "masstran": 1007, "roeschk": 1007, "aftab": 1007, "abdela": 1007, "ibraheem": 1007, "mwestt": 1007, "iijima": 1007, "oresti": 1007, "osman": [1007, 1013], "flanagan": [1007, 1008], "soriano": 1007, "peai": 1007, "pim": 1007, "haan": 1007, "raf": 1007, "rajdeep": 1007, "dua": 1007, "ra\u00fal": 1007, "garc\u00eda": [1007, 1008, 1013], "lekhwani": 1007, "varma": 1007, "shiyu": 1007, "duan": [1007, 1009], "smari": [1007, 1008, 1009], "st\u00e9phane": [1007, 1008, 1012, 1013], "surgan12": 1007, "thibsej": 1007, "xhan": 1007, "xinyuliu12": 1007, "zayd": 1007, "hammoudeh": 1007, "16397": [1008, 1009], "16500": 1008, "16505": 1008, "16076": 1008, "shack": [1008, 1009, 1010], "15930": 1008, "inder128": 1008, "15810": 1008, "15898": 1008, "gargsya": 1008, "15933": 1008, "15760": 1008, "15888": 1008, "15936": 1008, "dizietasahi": 1008, "15879": 1008, "bibhash": [1008, 1009], "chandra": [1008, 1009, 1012], "mitra": [1008, 1009, 1013], "15937": 1008, "blyston": [1008, 1009], "15863": 1008, "abstractmethod": 1008, "_check_x": 1008, "basenb": 1008, "15996": 1008, "brigitta": [1008, 1009, 1010], "sip\u0151cz": [1008, 1009, 1010], "15751": 1008, "tirth": [1008, 1009], "15868": 1008, "nikla": [1008, 1009], "smedemark": 1008, "marguli": 1008, "15797": 1008, "15947": 1008, "revamp": 1008, "14849": 1008, "_name_estim": 1008, "_gb": 1008, "facto": 1008, "_birch": 1008, "9250": 1008, "12927": 1008, "deprecationwarn": 1008, "interfer": 1008, "hinder": 1008, "15080": 1008, "14464": 1008, "13575": 1008, "10482": 1008, "13726": 1008, "shuzh": 1008, "9288": 1008, "15057": 1008, "korolev": 1008, "15120": 1008, "7943": 1008, "12303": 1008, "14510": 1008, "14890": 1008, "miguel": 1008, "cabrera": 1008, "14544": 1008, "15304": 1008, "jaim": 1008, "ferrando": 1008, "huerta": 1008, "12068": 1008, "12145": 1008, "13609": 1008, "camila": 1008, "williamson": 1008, "15661": 1008, "15160": 1008, "14259": 1008, "14764": 1008, "14740": 1008, "st\u00e9phan": 1008, "tulken": 1008, "14623": 1008, "sarra": 1008, "habchi": 1008, "15257": 1008, "willocx": 1008, "12650": 1008, "13960": 1008, "multiouput": 1008, "14908": 1008, "martina": [1008, 1010], "vila": [1008, 1010], "15382": 1008, "14933": 1008, "15138": 1008, "cusick": 1008, "14406": 1008, "14012": 1008, "faouzi": [1008, 1009], "13769": 1008, "14194": 1008, "least_absolute_devi": [1008, 1010, 1011], "13896": 1008, "13933": 1008, "14710": 1008, "14869": 1008, "14682": 1008, "hancock": 1008, "5963": 1008, "pablo": [1008, 1011, 1012], "dubou": 1008, "14287": 1008, "15375": 1008, "14305": 1008, "14114": 1008, "15084": 1008, "14294": 1008, "14907": 1008, "14602": 1008, "chawla": 1008, "vectorizermixin": 1008, "14430": 1008, "strip_accents_unicod": 1008, "15100": 1008, "gradi": 1008, "overflowerror": 1008, "15463": 1008, "norvan": 1008, "sahin": 1008, "14520": 1008, "11635": 1008, "alec": 1008, "13704": 1008, "15557": 1008, "14378": 1008, "masashi": [1008, 1010], "shibata": 1008, "ashim": 1008, "bhattarai": 1008, "15010": 1008, "skip_comput": 1008, "13773": 1008, "14356": 1008, "15393": 1008, "venkatachalam": [1008, 1009, 1010, 1011, 1012], "14646": 1008, "14028": 1008, "15429": 1008, "14706": 1008, "14108": 1008, "14170": 1008, "14296": 1008, "13618": 1008, "13995": 1008, "14458": 1008, "14591": 1008, "14864": 1008, "15044": 1008, "15086": 1008, "15038": 1008, "15082": 1008, "13213": 1008, "14647": 1008, "linalgerror": 1008, "13393": 1008, "13707": 1008, "training_data_": 1008, "14357": 1008, "14900": 1008, "socastro": 1008, "9951": 1008, "14936": 1008, "15083": 1008, "12789": 1008, "15274": 1008, "13938": 1008, "15049": 1008, "toccac": 1008, "ptocca": 1008, "13231": 1008, "dong": 1008, "13467": 1008, "14595": 1008, "14865": 1008, "l\u00e9onard": [1008, 1013], "binet": [1008, 1013], "14732": 1008, "14417": 1008, "15625": 1008, "12258": 1008, "14898": 1008, "matcovici": 1008, "14593": 1008, "reboul": 1008, "14549": 1008, "14704": 1008, "15096": 1008, "14629": 1008, "15488": 1008, "15490": 1008, "12569": 1008, "bicker": 1008, "9597": 1008, "wenbo": [1008, 1010], "zhao": [1008, 1010, 1011, 1012, 1013], "14336": 1008, "dexter": 1008, "9274": 1008, "perri": 1008, "13806": 1008, "ana\u00ebl": 1008, "beaugnon": 1008, "15119": 1008, "15053": 1008, "13290": 1008, "13987": 1008, "_pairwis": [1008, 1010], "13925": 1008, "robson": 1008, "15524": 1008, "xun": [1008, 1010], "12557": 1008, "border": 1008, "14286": 1008, "15099": 1008, "baselibsvm": 1008, "_sparse_fit": 1008, "14894": 1008, "danna": 1008, "naser": 1008, "12887": 1008, "15028": 1008, "guan": 1008, "14381": 1008, "11232": 1008, "sievert": 1008, "10815": 1008, "14035": 1008, "14475": 1008, "14538": 1008, "14872": 1008, "upcast": [1008, 1012], "15094": 1008, "choose_check_classifiers_label": 1008, "enforce_estimator_tags_i": 1008, "mock": 1008, "mockdatafram": 1008, "checkingclassifi": 1008, "newton_cg": 1008, "random_choice_csc": 1008, "fast_dict": 1008, "parallel_help": 1008, "14902": 1008, "14971": 1008, "nep": 1008, "14702": 1008, "13013": 1008, "13875": 1008, "14680": 1008, "check_classifier_multioutput": 1008, "check_regressor_multioutput": 1008, "13392": 1008, "rok": 1008, "mihevc": 1008, "check_transformer_data_not_an_arrai": 1008, "mro": [1008, 1009], "14884": 1008, "alphonsu": 1008, "abbi": [1008, 1009], "popa": [1008, 1009], "abdur": 1008, "rahmaan": 1008, "janhang": 1008, "abenbihi": 1008, "abhinav": [1008, 1011], "sagar": 1008, "jana": 1008, "lagat": 1008, "alessandro": [1008, 1010, 1013], "surac": 1008, "siqueira": 1008, "alexgoryainov": 1008, "itk": [1008, 1009, 1010], "alexshack": [1008, 1009, 1010], "akinkunl": 1008, "kaseorg": 1008, "maldonado": [1008, 1011], "angela": [1008, 1009, 1013], "ambroz": [1008, 1009], "anisha": 1008, "keshavan": 1008, "gutierrez": 1008, "anuja": 1008, "archana": [1008, 1010], "alva": 1008, "arnaudstiegl": 1008, "arpanchowdhri": 1008, "ashimb9": 1008, "ayomid": 1008, "bamidel": 1008, "baran": 1008, "buluttekin": 1008, "barrycg": 1008, "bill": [1008, 1009], "mill": 1008, "biswadip": 1008, "mandal": 1008, "blackd0t": 1008, "barklei": 1008, "c56poni": 1008, "camilaagw": 1008, "cartman_nabana": 1008, "catajara": 1008, "cgsavard": [1008, 1009], "vesteghem": 1008, "dakota": 1008, "grusak": 1008, "datenbergwerk": 1008, "dormagen": 1008, "deeplook": 1008, "drgfreeman": 1008, "cashman": 1008, "edvardlindelof": 1008, "ndirangu": [1008, 1012], "eunseop": 1008, "jeong": 1008, "fanni": 1008, "federicopisanu": 1008, "divo": 1008, "flaviomorelli": 1008, "francidona": 1008, "franco": 1008, "luqu": 1008, "freder": 1008, "haas": 1008, "g0g0gadget": 1008, "altai": 1008, "vale": 1008, "rio": [1008, 1010, 1011, 1012], "ganevgv": 1008, "gdex1": 1008, "getgaurav2": 1008, "gideon": 1008, "sonoiya": 1008, "gpapadok": [1008, 1012], "mogavero": 1008, "h4dr1en": 1008, "hadshirt": 1008, "hailei": [1008, 1009], "nguyen": [1008, 1009, 1012, 1013], "hannah": [1008, 1010, 1012], "bruce": [1008, 1009], "macdonald": [1008, 1009], "honglu": 1008, "ingrid": 1008, "spielman": 1008, "a16": [1008, 1009], "jaehong": 1008, "jai": [1008, 1012], "jeromedock": 1008, "jesper": 1008, "dramsch": 1008, "joanna": 1008, "ortiz": 1008, "kanika": 1008, "sabharw": 1008, "katarina": [1008, 1010], "slama": [1008, 1010], "kellycarmodi": 1008, "eth": 1008, "kensuk": 1008, "arai": 1008, "kesshi": [1008, 1009], "kevad": 1008, "lofti": [1008, 1009], "winata": [1008, 1010], "sheng": 1008, "dolmatov": 1008, "kirthi": 1008, "shankar": 1008, "sivamani": 1008, "katyal": 1008, "lakshmi": 1008, "krishnan": 1008, "lalliacqua": [1008, 1011], "lbfin": 1008, "loopym": 1008, "lostcoast": 1008, "huynh": [1008, 1010], "lrjball": [1008, 1009], "roeder": 1008, "maggiecheg": [1008, 1012], "maithreyi": 1008, "venkatesh": 1008, "maltimor": 1008, "maocx": 1008, "douriez": [1008, 1009], "oywa": 1008, "aladago": 1008, "mbillingr": 1008, "clare": 1008, "micah": 1008, "miguelbarao": 1008, "mina": [1008, 1009], "naghshhnejad": [1008, 1009], "motmoti": 1008, "mschaffenroth": 1008, "natasha": 1008, "nezar": 1008, "nidhin": 1008, "pattaniyil": 1008, "nishan": 1008, "mann": 1008, "nitya": 1008, "mandyam": 1008, "novaya": [1008, 1011], "nxorabl": 1008, "oleg": 1008, "stikhin": 1008, "omar": [1008, 1013], "saleem": 1008, "panpiort8": [1008, 1010], "paula": [1008, 1009], "poorna": [1008, 1010], "pspachtholz": [1008, 1009, 1010], "qdeffens": [1008, 1011], "garg": [1008, 1009], "rapha\u00ebl": 1008, "bournhonesqu": 1008, "reza": 1008, "gharibi": 1008, "payn": 1008, "rlm": 1008, "juergen": [1008, 1013], "sanjabi": 1008, "ruchitagard": 1008, "ruth": 1008, "waithera": 1008, "sackei": 1008, "samesh": [1008, 1009], "lakhotia": [1008, 1009], "sewook": 1008, "dare": 1008, "shreya": 1008, "simoncw": 1008, "smujjiga": 1008, "s\u00f6nke": 1008, "behrend": 1008, "soumirai": 1008, "steinfurt": [1008, 1010], "cowlei": 1008, "th0rwa": [1008, 1009], "theoptip": [1008, 1009], "theotheo": 1008, "thierno": 1008, "ibrahima": 1008, "diop": 1008, "schmitt": [1008, 1009], "tilen": 1008, "kusterl": 1008, "timsaur": 1008, "tola": 1008, "topisan": 1008, "ttang131": 1008, "veerlosar": 1008, "luzgin": 1008, "jeanselm": 1008, "lostanlen": 1008, "vnherdeiro": 1008, "wendi": 1008, "willdarnel": 1008, "wolframalpha": 1008, "xcjason": 1008, "martian": 1008, "xsat": 1008, "yinglr": 1008, "yokasr": 1008, "maxin": [1008, 1009], "yulia": 1008, "zamrii": 1008, "feng": [1008, 1010, 1011, 1012], "17959": 1009, "17848": 1009, "17742": 1009, "17995": 1009, "thomaz": 1009, "santana": [1009, 1012], "dsouza": [1009, 1010, 1011, 1012], "17433": 1009, "17985": 1009, "multinomialdevi": 1009, "logloss": [1009, 1013], "17694": 1009, "rempfler": 1009, "tsutomu": 1009, "kusanagi": [1009, 1011], "17357": 1009, "18016": 1009, "x_copi": 1009, "17914": 1009, "15730": 1009, "forrest": [1009, 1010], "17309": 1009, "swier": [1009, 1010], "heer": 1009, "17360": 1009, "17812": 1009, "bruno": [1009, 1010, 1011], "idl": 1009, "17210": 1009, "17235": 1009, "17204": 1009, "changed_onli": 1009, "17205": 1009, "15005": [1009, 1011], "slep009": [1009, 1011, 1012], "estimator_samples_": 1009, "16149": 1009, "11950": 1009, "11514": 1009, "16075": 1009, "16484": 1009, "agglomerativecluclust": 1009, "16257": 1009, "simona": [1009, 1010, 1011], "maggio": [1009, 1010, 1011], "16801": 1009, "rcwoolston": 1009, "16431": 1009, "14048": 1009, "15963": 1009, "16084": 1009, "15950": 1009, "stephani": 1009, "15980": 1009, "wconnel": 1009, "15709": 1009, "15707": 1009, "maciej": 1009, "mikulski": 1009, "16006": 1009, "rushabh": 1009, "vasani": 1009, "streamhandl": 1009, "logger": 1009, "handler": 1009, "16451": 1009, "16280": 1009, "16837": 1009, "wornbb": 1009, "15669": 1009, "chaitanya": 1009, "16224": 1009, "schwetlick": [1009, 1010], "gelavizh": 1009, "ahmadi": 1009, "marija": [1009, 1010], "vlajic": [1009, 1010], "wheeler": [1009, 1010], "16841": 1009, "16655": 1009, "16718": 1009, "miotto": 1009, "16981": 1009, "g\u00f3rski": [1009, 1010], "14696": 1009, "14516": 1009, "15582": 1009, "16069": 1009, "bail": 1009, "16183": 1009, "16182": 1009, "santhosh": 1009, "16437": 1009, "hwan": 1009, "cho": 1009, "16539": 1009, "deros": 1009, "16692": 1009, "16663": 1009, "15834": 1009, "santiago": 1009, "mola": 1009, "16103": 1009, "divyaprabha": 1009, "selectormixin": 1009, "16132": 1009, "trimeta": 1009, "15503": 1009, "15782": 1009, "plgreenliru": 1009, "16403": 1009, "narendra": 1009, "mukherje": 1009, "16508": 1009, "15864": 1009, "14300": 1009, "15436": 1009, "15652": 1009, "15179": 1009, "angelaambroz": 1009, "15773": 1009, "15655": 1009, "14848": 1009, "absgrad": 1009, "_newton_cg": 1009, "16266": 1009, "standard_coef_": 1009, "standard_intercept_": 1009, "average_coef_": 1009, "average_intercept_": 1009, "16261": 1009, "brandt": 1009, "16849": 1009, "14264": 1009, "17021": 1009, "16323": 1009, "16362": 1009, "16442": 1009, "parson": [1009, 1011], "rick": 1009, "mackenbach": 1009, "16993": 1009, "emit": 1009, "15622": 1009, "mors": 1009, "15918": 1009, "kubin": 1009, "fit_grid_point": 1009, "16401": 1009, "pratama": 1009, "sutiono": 1009, "15953": 1009, "15959": 1009, "16111": 1009, "16090": 1009, "jayaratn": [1009, 1010, 1013], "14075": 1009, "meyer89": 1009, "16117": 1009, "15785": 1009, "16245": 1009, "16585": 1009, "15762": 1009, "16466": 1009, "16632": 1009, "maura": 1009, "pintor": 1009, "battista": 1009, "biggio": 1009, "15946": 1009, "ngshya": 1009, "32767": 1009, "mersenn": 1009, "twister": 1009, "31bit": 1009, "63bit": 1009, "crude": 1009, "postprocessor": 1009, "lemir": 1009, "13511": 1009, "kennel": 1009, "11296": 1009, "15558": 1009, "15806": 1009, "16331": 1009, "batiss": 1009, "15926": 1009, "16021": 1009, "sparsearrai": 1009, "16728": 1009, "uint": 1009, "17032": 1009, "_safe_tag": 1009, "16950": 1009, "15380": 1009, "acitiv": 1009, "16726": 1009, "16112": 1009, "16622": 1009, "17061": 1009, "aleksandra": 1009, "kocot": 1009, "alonso": [1009, 1011], "allend": [1009, 1011], "ana": [1009, 1011], "casado": 1009, "ankit810": 1009, "arunav": 1009, "konwar": 1009, "maingret": 1009, "beier": 1009, "berni": 1009, "bharathi": 1009, "brigi": [1009, 1010], "castachick": 1009, "castor": 1009, "corri": 1009, "bartelheim": 1009, "dani\u00ebl": 1009, "gelder": 1009, "daphn": 1009, "breuer": 1009, "cort": [1009, 1010], "dbauer9": 1009, "borovikova": 1009, "eln": 1009, "emili": [1009, 1010], "leung": 1009, "evgeni": 1009, "chasnovski": 1009, "fabiana": 1009, "facundo": [1009, 1012], "ferr\u00edn": 1009, "franziska": 1009, "boenisch": 1009, "bolmier": [1009, 1010], "gholdman1": 1009, "gonthier": 1009, "hao": [1009, 1010, 1012, 1013], "chun": [1009, 1010, 1012, 1013], "haoyin": [1009, 1011, 1012], "h\u00e9lion": 1009, "bourboux": 1009, "himanshu": [1009, 1012], "hirofumi": [1009, 1010], "suzuki": [1009, 1010], "huangk10": 1009, "kemenad": 1009, "hye": 1009, "sung": 1009, "indecisiveus": [1009, 1010], "inderjeet": 1009, "jjmistri": 1009, "haitz": [1009, 1011, 1012], "legarreta": [1009, 1011, 1012], "gorro\u00f1o": [1009, 1011, 1012], "judithabk6": 1009, "jumon": 1009, "kathryn": 1009, "krishnachaitanya9": 1009, "gia": 1009, "thuan": 1009, "lkubin": 1009, "lopusz": 1009, "lucgiffon": 1009, "lucyleeow": 1009, "kemk": 1009, "magda": 1009, "zielinska": 1009, "mandi": [1009, 1012], "gu": [1009, 1010, 1012], "manish": 1009, "aradwad": 1009, "maren": [1009, 1010, 1011, 1012, 1013], "westermann": [1009, 1010, 1011, 1012, 1013], "mariana": 1009, "meirel": 1009, "mariel": 1009, "mc4229": 1009, "shoemak": 1009, "micha\u0142": 1009, "s\u0142apek": 1009, "mojca": 1009, "bertoncelj": 1009, "narendramukherje": 1009, "nicolasservel": 1009, "nkish": 1009, "noa": 1009, "tamir": [1009, 1012], "olicairn": 1009, "ur": 1009, "lenz": [1009, 1013], "delanou": 1009, "qizhi": 1009, "quang": 1009, "rachelcjordan": 1009, "raduspaimoc": 1009, "riccardo": 1009, "folloni": 1009, "ritchi": 1009, "rori": 1009, "hartong": 1009, "redden": 1009, "sambhav": 1009, "kothari": 1009, "santhoshbala18": 1009, "sarat": 1009, "addep": 1009, "scibol": 1009, "kie\u00dfl": 1009, "sergiodsr": 1009, "shiki": 1009, "shubh": 1009, "chatterje": 1009, "simonamaggio": [1009, 1010, 1011], "snowhit": 1009, "stareh": 1009, "marsh": 1009, "sunmi": 1009, "yoon": 1009, "talgatomarov": 1009, "tamirlan1": 1009, "nonner": 1009, "vink": [1009, 1011], "tiphain": 1009, "viard": 1009, "titu": 1009, "vachan": 1009, "vandana": 1009, "iyer": 1009, "waelbenamara": 1009, "wderos": 1009, "wenliwyan": 1009, "windber": 1009, "19579": 1010, "19646": 1010, "stopiter": 1010, "19922": 1010, "19732": 1010, "ishikawa": [1010, 1011], "19407": 1010, "ushtanit": [1010, 1011], "19982": 1010, "19939": 1010, "halvic": 1010, "19703": 1010, "sobkevich": 1010, "villaz\u00f3n": 1010, "terraza": 1010, "fonari": [1010, 1011], "19182": 1010, "yosuk": [1010, 1011], "kobayashi": [1010, 1011], "19721": 1010, "19659": 1010, "19211": 1010, "19847": 1010, "xiaoyu": 1010, "chai": [1010, 1013], "19308": 1010, "19234": 1010, "19727": 1010, "delong": [1010, 1011], "transfrom": 1010, "19888": 1010, "19924": 1010, "19271": 1010, "zhaowei": 1010, "19580": 1010, "brice": [1010, 1011], "adamson": 1010, "wil": 1010, "yegelwel": 1010, "css": 1010, "19417": 1010, "19179": 1010, "19126": 1010, "17448": 1010, "17107": 1010, "17546": 1010, "17856": 1010, "17984": 1010, "riedmann": 1010, "francesco": [1010, 1013], "casalegno": 1010, "18052": 1010, "sean": [1010, 1011, 1013], "stallei": 1010, "17937": 1010, "counts_": 1010, "init_size_": 1010, "17864": 1010, "17616": 1010, "18167": 1010, "18256": 1010, "jayratn": 1010, "16392": 1010, "17095": 1010, "18746": 1010, "18525": 1010, "norm_y_weight": 1010, "x_mean_": 1010, "y_mean_": 1010, "x_std_": 1010, "y_std_": 1010, "18768": 1010, "18302": 1010, "md5": 1010, "checksum": 1010, "14800": 1010, "17396": 1010, "jiaxiang": 1010, "17491": 1010, "18280": 1010, "17499": 1010, "17610": 1010, "11064": 1010, "17414": 1010, "18149": 1010, "17679": 1010, "18528": 1010, "villanova": [1010, 1011], "14446": 1010, "18394": 1010, "16985": 1010, "garbag": 1010, "18334": 1010, "multicor": [1010, 1011], "18341": 1010, "egor": 1010, "smirnov": 1010, "18410": 1010, "17702": 1010, "18326": 1010, "changedbehaviorwarn": 1010, "nonblasdotwarn": 1010, "17804": 1010, "17367": 1010, "15427": 1010, "gangesh": 1010, "gudmalwar": 1010, "erin": 1010, "6545": 1010, "17159": 1010, "15361": 1010, "17878": 1010, "17090": 1010, "_check_bounds_param": 1010, "12638": 1010, "lannuzel": 1010, "17526": 1010, "ayako": 1010, "yagi": 1010, "17612": 1010, "srimukh": 1010, "sripada": 1010, "16493": 1010, "darshan": 1010, "15636": 1010, "18987": 1010, "16619": 1010, "16906": 1010, "roei": 1010, "kahni": 1010, "18293": 1010, "16289": 1010, "kishimoto": 1010, "18639": 1010, "13003": 1010, "s\u00e1nchez": 1010, "18545": 1010, "laurenz": 1010, "reitsam": 1010, "17578": 1010, "knox": 1010, "6624": 1010, "marijn": 1010, "vliet": 1010, "18121": 1010, "18607": 1010, "fhaselbeck": 1010, "18622": 1010, "haesun": 1010, "10493": 1010, "17997": 1010, "maisonneuv": 1010, "17662": 1010, "18278": 1010, "17412": 1010, "16625": 1010, "10591": 1010, "karnowski": 1010, "plot_det_curv": [1010, 1011], "18176": 1010, "10708": 1010, "15007": 1010, "hathidara": 1010, "10711": 1010, "17192": 1010, "avi": [1010, 1011], "17225": 1010, "17569": 1010, "17651": 1010, "mato": 1010, "17777": 1010, "shubhanshu": 1010, "mishra": [1010, 1011], "17826": 1010, "decal": 1010, "willard": 1010, "17935": 1010, "cari": 1010, "goltermann": 1010, "18114": 1010, "18405": 1010, "yakov": 1010, "pchelintsev": 1010, "13900": 1010, "17478": 1010, "teon": 1010, "13204": 1010, "kosic": 1010, "18527": 1010, "18343": 1010, "devi": 1010, "sandeep": 1010, "18595": 1010, "18222": 1010, "18266": 1010, "subrat": 1010, "sahu": 1010, "15126": 1010, "17987": 1010, "17233": 1010, "zolisa": 1010, "bleki": 1010, "histgradientboost": 1010, "18124": 1010, "brocchini": 1010, "armstrong": 1010, "17427": 1010, "17038": 1010, "neighborsbas": [1010, 1013], "17148": 1010, "18691": 1010, "18370": 1010, "18612": 1010, "17603": 1010, "17604": 1010, "17606": 1010, "17608": 1010, "17609": 1010, "17633": 1010, "17661": 1010, "17932": 1010, "16352": 1010, "17759": 1010, "18269": 1010, "17876": 1010, "18429": 1010, "biernat": 1010, "17317": 1010, "17406": 1010, "wick": 1010, "18406": 1010, "17833": 1010, "yashika": 1010, "18510": 1010, "18447": 1010, "16066": 1010, "18682": 1010, "16935": 1010, "17193": 1010, "16335": 1010, "14982": 1010, "11682": 1010, "patric": [1010, 1011], "15763": 1010, "16530": 1010, "shuhua": 1010, "17386": 1010, "17187": 1010, "x_idx_sort": 1010, "17614": 1010, "check_methods_sample_order_invari": [1010, 1012], "17598": 1010, "ngo": 1010, "17992": 1010, "endian": 1010, "17644": 1010, "18508": 1010, "abo7atm": 1010, "spannbauer": 1010, "deodhar": 1010, "alexandracraciun": 1010, "amy12xx": 1010, "tiwari": 1010, "choraria": 1010, "subramaniyan": 1010, "kushwaha": 1010, "atsushi": [1010, 1011], "nukariya": [1010, 1011], "aura": 1010, "autoviz": 1010, "auto_viml": 1010, "avinash": 1010, "anak": 1010, "barankaraku": 1010, "barberogaston": 1010, "beatrizsmg": 1010, "mainy": 1010, "bossan": [1010, 1012], "pedigo": [1010, 1011], "bhavika": 1010, "devnani": 1010, "biprateep": 1010, "dei": 1010, "bmaisonn": 1010, "byron": 1010, "ceethinwa": [1010, 1011], "chaitanyamog": 1010, "clmbst": 1010, "coelhudo": 1010, "crispinlogan": 1010, "cristina": 1010, "mula": 1010, "darioka": [1010, 1012, 1013], "declan": 1010, "neill": 1010, "deeksha": 1010, "madan": 1010, "fiegel": [1010, 1011, 1013], "khoo": 1010, "eschibli": 1010, "fran": [1010, 1011, 1012], "larsson": [1010, 1011, 1012], "sheni": 1010, "genvalen": [1010, 1011, 1012], "kiragu": 1010, "gesa": 1010, "stupperich": 1010, "ghislain": 1010, "vaillant": 1010, "gim": 1010, "seng": 1010, "chevali": 1010, "bohl": [1010, 1012], "schole": 1010, "hitesh": 1010, "somani": 1010, "hoda1394": 1010, "moin": 1010, "hugorichard": 1010, "isuru": 1010, "wiryadi": 1010, "j0rd1smit": 1010, "jaehyun": 1010, "ahn": 1010, "tae": 1010, "hoctor": 1010, "vese": 1010, "jeevan": 1010, "jeroenpeterbo": 1010, "jhay": 1010, "jigna": 1010, "panchal": 1010, "jim0421": 1010, "joaquin": 1010, "gorb": 1010, "moya": 1010, "kartik": 1010, "chugh": 1010, "kaylani2": 1010, "kendrick": 1010, "cetina": 1010, "kenni": 1010, "isakov": 1010, "koki": 1010, "nishihara": 1010, "krum": [1010, 1012], "arnaudov": [1010, 1012], "oldja": 1010, "guitton": 1010, "mariam": 1010, "l\u00f6ning": 1010, "scheubrein": 1010, "megasari": 1010, "mathschi": 1010, "giudic": 1010, "milan": 1010, "straka": 1010, "muoki": 1010, "caleb": 1010, "haiat": 1010, "nadia": 1010, "tahiri": 1010, "ph": 1010, "hamada": 1010, "neil": 1010, "botelho": 1010, "nil": 1010, "noelano": 1010, "oj_lappi": 1010, "oleh": [1010, 1012], "kozynet": [1010, 1012], "pankaj": 1010, "jindal": 1010, "pardeep": 1010, "parthiv": 1010, "chigurupati": 1010, "pgithub": 1010, "probinette4": 1010, "pwalchessen": 1010, "rachel": [1010, 1013], "fischoff": 1010, "toshniw": 1010, "rafei": 1010, "iqbal": 1010, "rahul": 1010, "jakhar": 1010, "rachum": 1010, "ramyanp": [1010, 1011], "rauwuckl": 1010, "ravi": [1010, 1013], "kiran": 1010, "boggavarapu": 1010, "rishi": 1010, "advani": 1010, "rithvik": 1010, "romijnd": 1010, "tavenard": 1010, "rubi": 1010, "werman": 1010, "ryotaro": 1010, "tsukada": 1010, "sadak": 1010, "khandelw": 1010, "ezebunandu": 1010, "kimbinyi": 1010, "shail": 1010, "keller": 1010, "shao": [1010, 1011, 1012], "shooter23": [1010, 1011], "soledad": 1010, "galli": 1010, "subrat93": 1010, "sunitha": 1010, "selvan": 1010, "kusanagi2": 1010, "terenc": [1010, 1011], "honl": [1010, 1011], "thij": 1010, "thomas9292": 1010, "thorben": 1010, "tijanajovanov": 1010, "timo": 1010, "tnwei": 1010, "ufmay": 1010, "umberto": 1010, "lupo": 1010, "vika": [1010, 1012], "viniciu": [1010, 1011], "fuck": [1010, 1011], "violeta": 1010, "watchtheblur": 1010, "willpeppo": 1010, "xethan": 1010, "qianm": 1010, "yue": 1010, "yutaro": 1010, "ikeda": 1010, "zacchari": 1010, "ramzi": 1010, "zoj613": 1010, "21271": 1011, "21833": 1011, "siavash": 1011, "rezazadeh": 1011, "19210": 1011, "21295": 1011, "22050": 1011, "21991": 1011, "19869": 1011, "21481": [1011, 1012], "andr\u00e9": [1011, 1012], "babino": [1011, 1012], "disconnect": 1011, "21915": 1011, "21694": 1011, "minknowski": 1011, "21741": 1011, "21871": 1011, "21845": 1011, "21517": 1011, "21917": 1011, "21552": 1011, "escap": 1011, "21493": 1011, "21199": 1011, "20638": 1011, "bohn\u00e9": 1011, "21179": 1011, "21195": 1011, "21130": 1011, "20761": 1011, "21251": 1011, "min_idf": 1011, "max_idf": 1011, "20752": 1011, "alek": [1011, 1012], "lefebvr": [1011, 1012], "21340": 1011, "21093": 1011, "21351": 1011, "cve": 1011, "28975": 1011, "21336": 1011, "_check_sample_weight": 1011, "only_non_neg": 1011, "20880": 1011, "andr\u00e1": [1011, 1012], "if_delegate_has_method": [1011, 1012], "21145": 1011, "zahlii": 1011, "21389": 1011, "20002": 1011, "19310": 1011, "least_squar": 1011, "19733": 1011, "lad": 1011, "absolute_loss": 1011, "20165": 1011, "18444": 1011, "18010": 1011, "threadsaf": 1011, "18736": 1011, "17443": 1011, "19641": 1011, "20087": 1011, "fauchereau": 1011, "19002": 1011, "19052": 1011, "yusuk": 1011, "nagasaka": 1011, "17622": 1011, "19024": 1011, "franki": 1011, "robertson": 1011, "20117": 1011, "natchiappan": [1011, 1012], "19883": 1011, "20597": 1011, "20899": 1011, "20200": 1011, "fit_": 1011, "partial_fit_": 1011, "19297": 1011, "20560": 1011, "18393": 1011, "bittarello": 1011, "19263": 1011, "19244": 1011, "18459": 1011, "nd": 1011, "18898": 1011, "ora": 1011, "phongpanagnam": 1011, "21080": 1011, "ledoit_wolf_shrinkag": 1011, "20416": 1011, "defoi": 1011, "20583": 1011, "19365": 1011, "ateif": 1011, "sara": 1011, "19669": 1011, "importlib": 1011, "pyoxid": 1011, "20297": 1011, "20209": 1011, "19011": 1011, "20729": 1011, "12069": 1011, "19046": 1011, "surya": [1011, 1012], "18433": 1011, "19198": 1011, "19159": 1011, "beno\u00eet": 1011, "mal\u00e9zieux": 1011, "19908": 1011, "20512": 1011, "20960": 1011, "cgroup": [1011, 1012], "quota": [1011, 1012], "20477": 1011, "19799": 1011, "19564": 1011, "19836": 1011, "19162": 1011, "10096": 1011, "fenil": 1011, "suchak": 1011, "20159": 1011, "murata": [1011, 1012], "20534": 1011, "19296": 1011, "19035": 1011, "19520": 1011, "18964": 1011, "19401": 1011, "relova": 1011, "17169": 1011, "dmytro": 1011, "lituiev": 1011, "20380": 1011, "pulido": 1011, "felip": [1011, 1012, 1013], "bidu": [1011, 1012], "rutter": 1011, "20515": 1011, "carsten": 1011, "allefeld": 1011, "19568": 1011, "shyam": 1011, "20207": 1011, "tomohiro": 1011, "endo": 1011, "20161": 1011, "shuhei": 1011, "kayawari": 1011, "arka204": [1011, 1013], "20431": 1011, "pfaffel": 1011, "19428": 1011, "hamoumi": 1011, "19411": 1011, "20959": 1011, "20554": 1011, "xiangyin": 1011, "kong": 1011, "9978": 1011, "10027": 1011, "16449": 1011, "20231": 1011, "naka": 1011, "19571": 1011, "20155": 1011, "oura": [1011, 1012, 1013], "19004": 1011, "midvidi": 1011, "19055": 1011, "19172": 1011, "19426": 1011, "19499": 1011, "strubel": 1011, "19616": 1011, "19391": 1011, "19390": 1011, "linearmodel": 1011, "17743": 1011, "17772": 1011, "17746": 1011, "17785": 1011, "17750": 1011, "17769": 1011, "20683": 1011, "19491": 1011, "19472": 1011, "shortest_path": 1011, "20531": 1011, "19415": 1011, "17036": 1011, "20326": 1011, "uttam": 1011, "9843": 1011, "19643": 1011, "attard": 1011, "19784": 1011, "18328": 1011, "20312": 1011, "divyanshu": 1011, "deoli": 1011, "18543": 1011, "20552": 1011, "19278": 1011, "20030": 1011, "tingshan": 1011, "18649": 1011, "rodion": 1011, "martynov": 1011, "20619": 1011, "baseshufflesplit": 1011, "20056": 1011, "pabloduque0": 1011, "prematur": 1011, "20904": 1011, "tomasz": 1011, "jakubek": [1011, 1012], "18925": 1011, "poznik": [1011, 1012, 1013], "18842": 1011, "19473": 1011, "jiefangxuanyan": 1011, "20072": 1011, "20842": 1011, "mart\u00edn": [1011, 1012], "19631": 1011, "19790": 1011, "flynn": [1011, 1013], "18368": 1011, "19483": 1011, "20526": 1011, "19069": 1011, "19041": 1011, "20250": 1011, "20652": 1011, "19934": 1011, "gleb": [1011, 1013], "levitskii": 1011, "19734": 1011, "robinson": 1011, "19752": 1011, "zhehao": [1011, 1012, 1013], "19527": 1011, "19788": 1011, "19356": 1011, "makoeppel": 1011, "19879": 1011, "19906": 1011, "20727": 1011, "20961": 1011, "n_input_features_": 1011, "20240": 1011, "20843": 1011, "18959": 1011, "wstate": 1011, "20023": 1011, "19336": 1011, "20272": 1011, "19459": 1011, "bezuidenhout": 1011, "clifford": 1011, "akai": 1011, "nettei": 1011, "19948": 1011, "20657": 1011, "19766": 1011, "propreti": 1011, "20385": 1011, "_weighted_percentil": 1011, "huberlossfunct": 1011, "20528": 1011, "_safe_index": 1011, "20673": 1011, "is_scalar_nan": 1011, "assert_warn": 1011, "assert_warns_messag": 1011, "20521": 1011, "abdulelah": 1011, "mesfer": 1011, "adrian": [1011, 1012, 1013], "garcia": 1011, "badaracco": 1011, "sad\u0142ocha": 1011, "rubial": 1011, "alessia": 1011, "marcolini": 1011, "alihan": 1011, "zihna": 1011, "alin": 1011, "amol": 1011, "deshmukh": 1011, "pessoa": 1011, "anavelyz": 1011, "ashish": 1011, "ashvith": 1011, "shetti": 1011, "baam": [1011, 1012], "baptbillard": 1011, "bmalezieux": 1011, "bumblebe": 1011, "caherrera": 1011, "meli": [1011, 1012, 1013], "chrissobel": 1011, "yeh": 1011, "chuliang": 1011, "cliffordemmanuel": 1011, "conner": 1011, "shen": 1011, "dimitri": [1011, 1012, 1013], "papadopoulo": [1011, 1012, 1013], "orfano": [1011, 1012, 1013], "dmallia17": 1011, "ds_ana": 1011, "jardim": 1011, "edwinwenink": 1011, "eleni": 1011, "markou": 1011, "ericellwang": [1011, 1012], "ezri": 1011, "mudd": 1011, "fato": 1011, "morina": 1011, "hafner": 1011, "flyingdutchman23": 1011, "uwha": [1011, 1012], "bereng": 1011, "frederick": 1011, "frellwan": 1011, "vicent": [1011, 1012, 1013], "geroldcsend": 1011, "glen": 1011, "gl\u00f2ria": [1011, 1013], "mu\u00f1oz": [1011, 1013], "gregorystrubel": 1011, "groceryheist": 1011, "guiweb": 1011, "haidar": [1011, 1012], "almubarak": [1011, 1012], "moritz": [1011, 1013], "g\u00fcnther": 1011, "mirza": 1011, "harutaka": 1011, "kawamura": 1011, "hassan": 1011, "alsawadi": 1011, "geovan": [1011, 1012], "gome": [1011, 1012], "lima": [1011, 1012], "ilic": 1011, "ikko": 1011, "ashimin": 1011, "isaack": 1011, "mungui": 1011, "ishaan": 1011, "bhat": 1011, "ishan": [1011, 1012], "iwhalv": 1011, "preiss": 1011, "budarz": 1011, "jannik": 1011, "jennif": 1011, "jianzhu": 1011, "guo": 1011, "jnboehm": 1011, "johanwork": 1011, "paton": 1011, "n\u00e1pole": 1011, "julio": 1011, "julyrashchenko": 1011, "jvm": 1011, "kadatatlu": 1011, "kishor": 1011, "karen": 1011, "palacio": 1011, "kmatt10": 1011, "kobaski": 1011, "kot271828": 1011, "kunj": 1011, "kurumeyuta": 1011, "kxytim": 1011, "lacrosse91": 1011, "laveen": 1011, "bagai": 1011, "leonardo": 1011, "rocco": [1011, 1012, 1013], "uieda": 1011, "leopoldo": 1011, "corona": 1011, "lsturtew": 1011, "lucca": 1011, "quadro": 1011, "ly648499246": 1011, "mabu": 1011, "manaileng": 1011, "mariangela": 1011, "marielaraj": 1011, "hirzel": 1011, "mateo": 1011, "nore\u00f1a": 1011, "mathi": 1011, "batoul": 1011, "calcot": 1011, "prieur": 1011, "\u00f6zer": 1011, "miao": 1011, "cai": 1011, "karbownik": 1011, "michalkrawczyk": [1011, 1012], "mitzi": [1011, 1012], "mlondschien": 1011, "haseeb": [1011, 1012], "khoual": 1011, "jarir": 1011, "kanji": 1011, "nadim": 1011, "kawwa": 1011, "nanshan": 1011, "naozin555": 1011, "fultz": 1011, "nic": 1011, "annau": 1011, "stefani": [1011, 1013], "nigel": 1011, "bosch": 1011, "nodar": 1011, "okroshiashvili": 1011, "ogbonna": 1011, "chibuik": 1011, "ogordon100": 1011, "phongpanangam": 1011, "duqu": 1011, "ibieta": 1011, "jimenez": [1011, 1012], "lacouth": 1011, "olszewski": 1011, "dye": 1011, "pierreattard": [1011, 1012], "yve": 1011, "borgn": 1011, "pranayanchuri": 1011, "princ": 1011, "canuma": 1011, "putschblo": 1011, "ranjanikrishnan": 1011, "rene": 1011, "corneil": 1011, "ricardojnf": 1011, "richardscottoz": 1011, "sandi": 1011, "khosasi": 1011, "benhur": 1011, "flore": 1011, "shinehid": 1011, "shinnar": 1011, "tootoonian": 1011, "solosil": 1011, "kolawol": 1011, "stagg": 1011, "swpeas": 1011, "tfifi": 1011, "caswel": 1011, "timotheemathieu": 1011, "wolodzko": 1011, "tliu68": 1011, "uhmann": 1011, "tom1092": 1011, "tom\u00e1": [1011, 1012], "moreyra": 1011, "tommaso": 1011, "noto": 1011, "tsuga": 1011, "vang": 1011, "gkiasta": 1011, "vil\u00e9m": 1011, "zouhar": 1011, "vlasovet": 1011, "waijean": 1011, "whidou": 1011, "xiaoyuchai": 1011, "yasmeen": 1011, "alsaedi": 1011, "yoch": 1011, "yusukenagasaka": 1011, "yzhenman": 1011, "zeyusun": 1011, "zhaoweiwang": 1011, "msvcp140": 1012, "dll": 1012, "24631": 1012, "24446": 1012, "10805": 1012, "mathia": 1012, "23471": 1012, "24015": 1012, "23990": 1012, "23833": 1012, "24017": 1012, "sorski": [1012, 1013], "23395": 1012, "23636": 1012, "22063": 1012, "22059": 1012, "kurz": [1012, 1013], "23608": 1012, "23548": 1012, "24087": 1012, "23273": 1012, "23194": 1012, "23198": 1012, "lise": 1012, "kleiber": 1012, "23358": 1012, "23264": 1012, "feature_names_in": 1012, "23299": 1012, "23214": 1012, "collot": [1012, 1013], "baak": 1012, "23370": 1012, "23410": 1012, "compute_sample_weight": 1012, "23115": 1012, "22868": 1012, "multiindex": 1012, "22410": 1012, "23271": 1012, "21987": 1012, "22064": 1012, "22065": 1012, "22288": 1012, "22320": 1012, "21219": 1012, "21542": 1012, "23098": 1012, "22318": 1012, "23036": 1012, "23040": 1012, "23046": 1012, "22856": 1012, "21032": 1012, "18170": 1012, "21038": 1012, "14975": 1012, "22526": 1012, "23095": 1012, "silk": 1012, "20031": 1012, "krawczyk": 1012, "21148": 1012, "22255": 1012, "21881": 1012, "vassard": 1012, "22217": 1012, "21735": 1012, "22154": 1012, "22537": 1012, "iofal": 1012, "arisa": [1012, 1013], "22775": 1012, "22913": 1012, "randomgeek78": 1012, "22493": 1012, "19680": 1012, "thibaut": 1012, "22119": 1012, "22016": 1012, "22015": 1012, "19747": 1012, "attalla": 1012, "22498": 1012, "21482": 1012, "pujalt": 1012, "22412": 1012, "16605": 1012, "21901": 1012, "rileran": 1012, "23113": 1012, "ilion": 1012, "beyst": 1012, "21425": 1012, "stefanini": 1012, "16948": 1012, "patricio": 1012, "cerda": 1012, "22002": 1012, "21109": 1012, "18975": 1012, "22111": 1012, "22181": 1012, "21334": 1012, "21705": 1012, "stanlei": 1012, "21432": 1012, "22806": 1012, "jihan": 1012, "benni": 1012, "21713": 1012, "haya": 1012, "21567": 1012, "maggi": 1012, "chege": 1012, "22300": 1012, "15948": 1012, "sysuresh": 1012, "22553": 1012, "19490": 1012, "ferrin": 1012, "22120": 1012, "15984": 1012, "okon": 1012, "22696": 1012, "22486": 1012, "21800": 1012, "20567": 1012, "22159": 1012, "20811": 1012, "21814": 1012, "16748": 1012, "siqi": 1012, "22215": 1012, "23047": 1012, "22695": 1012, "22697": 1012, "21762": 1012, "22106": 1012, "gijsber": 1012, "21632": 1012, "genesi": 1012, "valencia": 1012, "22566": 1012, "22908": 1012, "23097": 1012, "23079": 1012, "20803": 1012, "23023": 1012, "21573": 1012, "21832": 1012, "20145": 1012, "22356": 1012, "18482": 1012, "gameiro": 1012, "kharsa": 1012, "22370": 1012, "17819": 1012, "22235": 1012, "21837": 1012, "wagner": 1012, "22199": 1012, "aidar": 1012, "shakerimoff": 1012, "tenavi": 1012, "nakamura": 1012, "22223": 1012, "marcom": 1012, "21617": 1012, "ritter": [1012, 1013], "21114": 1012, "21078": 1012, "21448": 1012, "16061": 1012, "19438": 1012, "18310": 1012, "elfner": 1012, "22249": 1012, "22137": 1012, "22694": 1012, "22808": 1012, "22950": 1012, "21086": 1012, "22206": 1012, "21808": 1012, "22548": 1012, "22062": 1012, "trujillo": [1012, 1013], "22148": 1012, "22240": 1012, "9087": 1012, "22525": 1012, "19689": 1012, "21606": 1012, "21341": 1012, "preservs": 1012, "21767": 1012, "21724": 1012, "yar": 1012, "khine": 1012, "phyo": 1012, "21998": 1012, "22891": 1012, "22899": 1012, "23256": 1012, "19794": 1012, "21534": 1012, "22254": 1012, "21805": 1012, "jeann": 1012, "dionisi": 1012, "22685": 1012, "n_neighbour": 1012, "18832": 1012, "23033": 1012, "21565": 1012, "17266": 1012, "interpet": 1012, "22118": 1012, "ohad": 1012, "22284": 1012, "19158": 1012, "nicki": 1012, "skaft": 1012, "20753": 1012, "22108": 1012, "22635": 1012, "19085": 1012, "22866": 1012, "21576": 1012, "emil": 1012, "dugnat": 1012, "21873": 1012, "21177": 1012, "20408": 1012, "ceballo": 1012, "22058": 1012, "23034": 1012, "22203": 1012, "21026": 1012, "21880": 1012, "mrinal": 1012, "tyagi": 1012, "22982": 1012, "22508": 1012, "comb": 1012, "22604": 1012, "22212": 1012, "21430": 1012, "desislava": 1012, "vasileva": 1012, "22687": 1012, "22150": 1012, "22248": 1012, "20860": 1012, "shubhraneel": 1012, "21888": 1012, "21954": 1012, "22953": 1012, "16018": 1012, "21445": 1012, "21988": 1012, "get_output_feature_nam": 1012, "21569": 1012, "21079": 1012, "20653": 1012, "21434": 1012, "19916": 1012, "22735": 1012, "compute_inverse_transform": 1012, "21701": 1012, "22114": 1012, "21330": 1012, "21408": 1012, "22149": 1012, "21436": 1012, "22191": 1012, "22476": 1012, "21278": 1012, "21316": 1012, "clickabl": 1012, "21298": 1012, "22237": 1012, "check_scalar": 1012, "22218": 1012, "validationerror": 1012, "check_requires_y_non": 1012, "22578": 1012, "arcidiacono": [1012, 1013], "22595": 1012, "21310": 1012, "22027": 1012, "lanterni": 1012, "23077": 1012, "22188": 1012, "22830": 1012, "2357juan": [1012, 1013], "adamgonzo": 1012, "adijohar": 1012, "kumawat": 1012, "raghuwanshi": 1012, "duron": 1012, "ahmadjubair33": 1012, "aj": 1012, "druck": 1012, "peixinho": 1012, "arroyo": 1012, "alexanmv": 1012, "almeidayoel": 1012, "amar": 1012, "amrcod": 1012, "griva": [1012, 1013], "andrii": 1012, "herrou": 1012, "ducout": 1012, "arth": 1012, "arthurmello": 1012, "arturoamor": 1012, "atharva": 1012, "patil": 1012, "aufarkari": 1012, "avm19": [1012, 1013], "ayan": 1012, "bardiya": [1012, 1013], "behrouz": 1012, "ben3940": 1012, "bijil": 1012, "subhash": 1012, "bmreinig": 1012, "brenden": 1012, "kadota": 1012, "cdrig": 1012, "chalmer": 1012, "chitteti": 1012, "srinath": [1012, 1013], "chloe": 1012, "agath": 1012, "azencott": 1012, "christopherlim98": 1012, "weidemann": 1012, "combsccod": 1012, "daniela": [1012, 1013], "darren": [1012, 1013], "eargl": 1012, "gilbertson": [1012, 1013], "dea": 1012, "mar\u00eda": 1012, "denni": 1012, "osei": 1012, "dessyvv": 1012, "dev514": 1012, "diwakar": 1012, "ries": 1012, "drskd": 1012, "emiko": 1012, "sano": 1012, "emmanouil": 1012, "gionanidi": 1012, "ermolaevpa": [1012, 1013], "estefania": 1012, "barreto": 1012, "ojeda": 1012, "eyast": 1012, "fatima": 1012, "gasmi": 1012, "luna": 1012, "glushchenkov": 1012, "fkaren27": 1012, "fpgawesom": 1012, "ftorres16": [1012, 1013], "gabor": 1012, "berei": 1012, "kertesz": 1012, "gauthier": 1012, "giancarlo": 1012, "glennfrutiz": 1012, "guillermo": 1012, "fern\u00e1ndez": 1012, "hansin": [1012, 1013], "henrymooresc": [1012, 1013], "hideaki": 1012, "imamura": 1012, "hind": 1012, "hmasdev": 1012, "hvassard": 1012, "aki": [1012, 1013], "iasoon": 1012, "ingela": 1012, "cowton": 1012, "jalexand3r": 1012, "jauhar": 1012, "jaya": 1012, "kommireddi": 1012, "je": 1012, "jelfner": 1012, "jenni": 1012, "jirka": 1012, "borovec": 1012, "cipri\u00e1n": 1012, "loayza": 1012, "chazalon": 1012, "mess": 1012, "jovan": [1012, 1013], "stojanov": [1012, 1013], "jschuerz": 1012, "katotten": 1012, "ken4git": 1012, "doucet": 1012, "kimayoung": 1012, "koushik": 1012, "kranthi": 1012, "sedamaki": 1012, "krumetoft": 1012, "lesne": 1012, "casino": [1012, 1013], "logan": 1012, "lucieclair": 1012, "luiz": 1012, "magali": 1012, "mandjev": 1012, "wurp": [1012, 1013], "boerner": 1012, "wimld": 1012, "martel": 1012, "corentin": 1012, "mat\u00eda": 1012, "matjansen": 1012, "francia": 1012, "megabyt": 1012, "mehrdad": 1012, "moradizadeh": 1012, "melemo2": 1012, "micky774": [1012, 1013], "milana2": 1012, "millawel": 1012, "miwojc": 1012, "mizuki": 1012, "mlant": 1012, "mohit": 1012, "moonkyung94": 1012, "mpoemsl": 1012, "mrinaltyagi": 1012, "leu": 1012, "msabati": 1012, "nadirhan": 1012, "\u015fahin": 1012, "naipawat": [1012, 1013], "poolsawat": [1012, 1013], "nartayxd": 1012, "nastegiano": 1012, "nathansquan": 1012, "detlefsen": 1012, "niket": 1012, "nikhil": 1012, "suresh": 1012, "kondratyev": 1012, "husak": 1012, "partev": 1012, "pelennor": 1012, "piet": [1012, 1013], "br\u00f6mmel": [1012, 1013], "pinki": 1012, "poloso": 1012, "pramod": 1012, "anantharam": 1012, "puhuk": [1012, 1013], "purna": 1012, "mansingh": 1012, "quadv": 1012, "rahil": [1012, 1013], "boy": 1012, "raz": 1012, "hoshia": 1012, "rishabh": 1012, "barnowski": [1012, 1013], "rsnegrin": 1012, "yadav": 1012, "sakinaouisrani": 1012, "sanjai": 1012, "marreddi": 1012, "seel": 1012, "sele": [1012, 1013], "seyedsaman": 1012, "emami": 1012, "shandeng123": 1012, "sharmadharmp": 1012, "shaymernaturalint": 1012, "shuangchi": [1012, 1013], "siavrez": 1012, "slishak": 1012, "spikebh": 1012, "sply88": 1012, "kailasa": [1012, 1013], "sultan": 1012, "orazbayev": 1012, "sumit": 1012, "saha": 1012, "sven": [1012, 1013], "eschlbeck": 1012, "stehl": [1012, 1013], "swapnil": 1012, "teunp": 1012, "ferr\u00e9": 1012, "hjortkj\u00e6r": 1012, "thiruvenkadam": 1012, "toastedyeast": [1012, 1013], "mctiernan": [1012, 1013], "udit": 1012, "ugo": 1012, "marchand": 1012, "vera": [1012, 1013], "komey": [1012, 1013], "victoireloui": 1012, "vishwakarma": 1012, "vikrant": 1012, "khedkar": 1012, "chernyi": 1012, "weijiadu": 1012, "yuan": [1012, 1013], "yiyangq": 1012, "yosshi999": 1012, "yuki": 1012, "koyama": 1012, "zeel": 1012, "zempleni": 1012, "zhenfish": 1012, "\u8d75\u4e30": 1012, "23619": 1013, "24354": 1013, "safiuddin": 1013, "khaja": 1013, "gsiisg": 1013, "23935": 1013, "22527": 1013, "_sgd_fast": 1013, "_plain_sgd": 1013, "oversc": 1013, "23798": 1013, "24543": 1013, "24465": 1013, "23734": 1013, "24699": 1013, "23865": 1013, "simd": 1013, "primit": 1013, "23446": 1013, "23197": 1013, "23604": 1013, "23585": 1013, "24556": 1013, "maladi\u00e8r": 1013, "24617": 1013, "sim4n6": 1013, "24688": 1013, "22054": 1013, "roic": 1013, "24264": 1013, "maladier": 1013, "14736": 1013, "hunt": 1013, "zhan": 1013, "20802": 1013, "pokorni": 1013, "22965": 1013, "22968": 1013, "23038": 1013, "propog": 1013, "23210": 1013, "24258": 1013, "23470": 1013, "21938": 1013, "23127": 1013, "19075": 1013, "ramo": 1013, "carre\u00f1o": 1013, "24951": 1013, "22268": 1013, "mohamedbsh": 1013, "23905": 1013, "11860": 1013, "ablin": 1013, "24528": 1013, "23726": 1013, "24421": 1013, "kshitij": 1013, "22554": 1013, "24218": 1013, "molin": 1013, "21020": 1013, "24856": 1013, "22014": 1013, "23252": 1013, "24538": 1013, "24889": 1013, "24146": 1013, "peretti": 1013, "nestor": 1013, "navarro": 1013, "nati": 1013, "tomatti": 1013, "24855": 1013, "24849": 1013, "20415": 1013, "24283": 1013, "24894": 1013, "23819": 1013, "edoardo": 1013, "abati": 1013, "24747": 1013, "24245": 1013, "24405": 1013, "salman": 1013, "16695": 1013, "vitor": 1013, "rosa": 1013, "18298": 1013, "25077": 1013, "24317": 1013, "24350": 1013, "24755": 1013, "levitski": 1013, "24637": 1013, "24767": 1013, "23275": 1013, "maxwelllzh": 1013, "24433": 1013, "yogendrasingh": 1013, "23637": 1013, "23877": 1013, "10168": 1013, "\u0142ukasz": 1013, "borchmann": 1013, "12285": 1013, "miltenberg": 1013, "13042": 1013, "parizi": 1013, "18094": 1013, "22562": 1013, "24714": 1013, "foor": 1013, "23834": 1013, "24051": 1013, "22518": 1013, "18020": 1013, "24338": 1013, "23442": 1013, "atukorala": 1013, "22710": 1013, "conroi": 1013, "trinh": 1013, "23461": 1013, "24365": 1013, "24630": 1013, "rushil": 1013, "24084": 1013, "iinfo": 1013, "24141": 1013, "24539": 1013, "23977": 1013, "23683": 1013, "andrei": 1013, "melnik": 1013, "16747": 1013, "18805": 1013, "hongshaoyang": 1013, "22269": 1013, "23139": 1013, "24645": 1013, "10468": 1013, "ruben": 1013, "22993": 1013, "24750": 1013, "rudresh": 1013, "veerkhar": 1013, "23874": 1013, "24075": 1013, "22665": 1013, "24683": 1013, "24058": 1013, "perdok": 1013, "20331": 1013, "23993": 1013, "22629": 1013, "24412": 1013, "22898": 1013, "23480": 1013, "21469": 1013, "lapack_svd_driv": 1013, "20617": 1013, "ouptut": 1013, "25067": 1013, "14862": 1013, "24512": 1013, "24667": 1013, "25080": 1013, "24523": 1013, "mia": 1013, "bajic": 1013, "3llobo": 1013, "anulekh": 1013, "aiko": 1013, "akshita": 1013, "prasanth": 1013, "miola": 1013, "lebel": 1013, "bera": 1013, "maennel": 1013, "aniket": 1013, "shirsat": 1013, "apostolo": 1013, "tsetogl": 1013, "aravindh": 1013, "ashwin": 1013, "b0rxington": 1013, "badr": 1013, "moufad": 1013, "bart\u0142omiej": 1013, "go\u0144da": 1013, "bdegraaff": 1013, "berkecanrizai": 1013, "bernd": 1013, "fritzk": 1013, "bhoomika": 1013, "biswaroop": 1013, "cannon": 1013, "bsh": 1013, "ceh": 1013, "chalulu": 1013, "zablit": 1013, "christianwaldmann": 1013, "christin": 1013, "verrier": 1013, "danielgaerb": 1013, "khant": 1013, "dhanshre": 1013, "diadochokinet": 1013, "diederikwp": 1013, "drewhogg": 1013, "oc": 1013, "dwight": 1013, "lindquist": 1013, "eden": 1013, "brekk": 1013, "eleanor": 1013, "eliaschiavon": 1013, "fabrizio": 1013, "damicelli": 1013, "fcharra": 1013, "tuveri": 1013, "franck": 1013, "charra": 1013, "geevarghes": 1013, "georgiamaydai": 1013, "gianr": 1013, "lazz": 1013, "guitar": 1013, "harshit5674": 1013, "hasan": 1013, "yaman": 1013, "vrigazov": 1013, "htsedebenham": 1013, "humahn": 1013, "iglesi": 1013, "iliya": 1013, "zhechev": 1013, "iren": 1013, "ivanllt": 1013, "sedykh": 1013, "jiten": 1013, "sidhpura": 1013, "jkarolczak": 1013, "jo\u00e3o": 1013, "koumenti": 1013, "johnthagen": 1013, "fleme": 1013, "choo": 1013, "yun": 1013, "keat": 1013, "juanfe88": 1013, "kanishk": 1013, "sachdev": 1013, "kanissh": 1013, "kendal": 1013, "eliasi": 1013, "lieret": 1013, "kirandevraj": 1013, "kraig": 1013, "vamsi": 1013, "kapadni": 1013, "lingyi1110": 1013, "mantovani": 1013, "maascha": 1013, "madinak": 1013, "maksym": 1013, "mansi": 1013, "mauroantonioserrano": 1013, "maxi": 1013, "marufo": 1013, "smolskii": 1013, "mehgarg": 1013, "mehmetcanakbai": 1013, "baji\u0107": 1013, "flak": 1013, "hornstein": 1013, "ruiter": 1013, "paradi": 1013, "misa": 1013, "ogura": 1013, "wilksch": 1013, "mrastgoo": 1013, "naois": 1013, "holohan": 1013, "nass": 1013, "jacobi": 1013, "nguy\u1ec5n": 1013, "v\u0103n": 1013, "di\u1ec5n": 1013, "nihal": 1013, "thukarama": 1013, "jare": 1013, "nima10khodaveisi": 1013, "nima": 1013, "sarajpoor": 1013, "nitinramvelraj": 1013, "nwanna": 1013, "nymark": 1013, "kho": 1013, "holman": 1013, "oll": 1013, "lukowski": 1013, "hassoun": 1013, "tamer": 1013, "oyindamola": 1013, "olatunji": 1013, "soar": 1013, "petar": 1013, "mlinari\u0107": 1013, "priyam": 1013, "kakati": 1013, "freeland": 1013, "keerti": 1013, "makhija": 1013, "rehan": 1013, "guha": 1013, "klima": 1013, "crockett": 1013, "homm": 1013, "roman4oo": 1013, "rowan": 1013, "mankoo": 1013, "sabri": 1013, "monaf": 1013, "safikh": 1013, "salahuddin": 1013, "yojana": 1013, "menes": 1013, "ephrem": 1013, "sangam": 1013, "sangamswadik": 1013, "sarahremu": 1013, "savkomax": 1013, "sec65": 1013, "seljak": 1013, "shellyfung": 1013, "shinsuk": 1013, "mori": 1013, "shoaib": 1013, "khan": 1013, "shrankhla": 1013, "stellalin7": 1013, "schmerler": 1013, "thedevpanda": 1013, "syd": 1013, "sre": 1013, "bonald": 1013, "ion": 1013, "timofei": 1013, "kornev": 1013, "pitter": 1013, "mathew": 1013, "tspeng": 1013, "egashira": 1013, "rey": 1013, "puerta": 1013, "vishal": 1013, "wattai": 1013, "wchathura": 1013, "wen": 1013, "x110": 1013, "xuniu": 1013, "yanhong": 1013, "ef": 1013, "adil": 1013, "khwaja": 1013}, "objects": {"sklearn": [[390, 0, 0, "-", "base"], [390, 0, 0, "-", "calibration"], [390, 0, 0, "-", "cluster"], [390, 0, 0, "-", "compose"], [447, 4, 1, "", "config_context"], [390, 0, 0, "-", "covariance"], [390, 0, 0, "-", "cross_decomposition"], [390, 0, 0, "-", "datasets"], [390, 0, 0, "-", "decomposition"], [390, 0, 0, "-", "discriminant_analysis"], [390, 0, 0, "-", "dummy"], [390, 0, 0, "-", "ensemble"], [390, 0, 0, "-", "exceptions"], [390, 0, 0, "-", "experimental"], [390, 0, 0, "-", "feature_extraction"], [390, 0, 0, "-", "feature_selection"], [390, 0, 0, "-", "gaussian_process"], [604, 4, 1, "", "get_config"], [390, 0, 0, "-", "impute"], [390, 0, 0, "-", "inspection"], [390, 0, 0, "-", "isotonic"], [390, 0, 0, "-", "kernel_approximation"], [390, 0, 0, "-", "kernel_ridge"], [390, 0, 0, "-", "linear_model"], [390, 0, 0, "-", "manifold"], [390, 0, 0, "-", "metrics"], [390, 0, 0, "-", "mixture"], [390, 0, 0, "-", "model_selection"], [390, 0, 0, "-", "multiclass"], [390, 0, 0, "-", "multioutput"], [390, 0, 0, "-", "naive_bayes"], [390, 0, 0, "-", "neighbors"], [390, 0, 0, "-", "neural_network"], [390, 0, 0, "-", "pipeline"], [390, 0, 0, "-", "preprocessing"], [390, 0, 0, "-", "random_projection"], [390, 0, 0, "-", "semi_supervised"], [873, 4, 1, "", "set_config"], [874, 4, 1, "", "show_versions"], [390, 0, 0, "-", "svm"], [390, 0, 0, "-", "tree"], [390, 0, 0, "-", "utils"]], "sklearn.base": [[405, 1, 1, "", "BaseEstimator"], [406, 1, 1, "", "BiclusterMixin"], [407, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [408, 1, 1, "", "ClassifierMixin"], [409, 1, 1, "", "ClusterMixin"], [410, 1, 1, "", "DensityMixin"], [411, 1, 1, "", "OneToOneFeatureMixin"], [412, 1, 1, "", "RegressorMixin"], [413, 1, 1, "", "TransformerMixin"], [414, 4, 1, "", "clone"], [415, 4, 1, "", "is_classifier"], [416, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[405, 2, 1, "", "get_params"], [405, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[406, 3, 1, "", "biclusters_"], [406, 2, 1, "", "get_indices"], [406, 2, 1, "", "get_shape"], [406, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[407, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[408, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[409, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[410, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[411, 2, 1, "", "get_feature_names_out"]], "sklearn.base.RegressorMixin": [[412, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[413, 2, 1, "", "fit_transform"], [413, 2, 1, "", "set_output"]], "sklearn.calibration": [[417, 1, 1, "", "CalibratedClassifierCV"], [418, 1, 1, "", "CalibrationDisplay"], [419, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[417, 2, 1, "", "fit"], [417, 2, 1, "", "get_params"], [417, 2, 1, "", "predict"], [417, 2, 1, "", "predict_proba"], [417, 2, 1, "", "score"], [417, 2, 1, "", "set_params"]], "sklearn.calibration.CalibrationDisplay": [[418, 2, 1, "", "from_estimator"], [418, 2, 1, "", "from_predictions"], [418, 2, 1, "", "plot"]], "sklearn.cluster": [[420, 1, 1, "", "AffinityPropagation"], [421, 1, 1, "", "AgglomerativeClustering"], [422, 1, 1, "", "Birch"], [423, 1, 1, "", "BisectingKMeans"], [424, 1, 1, "", "DBSCAN"], [425, 1, 1, "", "FeatureAgglomeration"], [426, 1, 1, "", "KMeans"], [427, 1, 1, "", "MeanShift"], [428, 1, 1, "", "MiniBatchKMeans"], [429, 1, 1, "", "OPTICS"], [430, 1, 1, "", "SpectralBiclustering"], [431, 1, 1, "", "SpectralClustering"], [432, 1, 1, "", "SpectralCoclustering"], [433, 4, 1, "", "affinity_propagation"], [434, 4, 1, "", "cluster_optics_dbscan"], [435, 4, 1, "", "cluster_optics_xi"], [436, 4, 1, "", "compute_optics_graph"], [402, 4, 1, "", "dbscan"], [437, 4, 1, "", "estimate_bandwidth"], [438, 4, 1, "", "k_means"], [439, 4, 1, "", "kmeans_plusplus"], [440, 4, 1, "", "mean_shift"], [441, 4, 1, "", "spectral_clustering"], [442, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[420, 2, 1, "", "fit"], [420, 2, 1, "", "fit_predict"], [420, 2, 1, "", "get_params"], [420, 2, 1, "", "predict"], [420, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[421, 2, 1, "", "fit"], [421, 2, 1, "", "fit_predict"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[422, 2, 1, "", "fit"], [422, 2, 1, "", "fit_predict"], [422, 2, 1, "", "fit_transform"], [422, 2, 1, "", "get_feature_names_out"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "partial_fit"], [422, 2, 1, "", "predict"], [422, 2, 1, "", "set_output"], [422, 2, 1, "", "set_params"], [422, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[423, 2, 1, "", "fit"], [423, 2, 1, "", "fit_predict"], [423, 2, 1, "", "fit_transform"], [423, 2, 1, "", "get_feature_names_out"], [423, 2, 1, "", "get_params"], [423, 2, 1, "", "predict"], [423, 2, 1, "", "score"], [423, 2, 1, "", "set_output"], [423, 2, 1, "", "set_params"], [423, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[424, 2, 1, "", "fit"], [424, 2, 1, "", "fit_predict"], [424, 2, 1, "", "get_params"], [424, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[425, 2, 1, "", "fit"], [425, 3, 1, "", "fit_predict"], [425, 2, 1, "", "fit_transform"], [425, 2, 1, "", "get_feature_names_out"], [425, 2, 1, "", "get_params"], [425, 2, 1, "", "inverse_transform"], [425, 2, 1, "", "set_output"], [425, 2, 1, "", "set_params"], [425, 2, 1, "", "transform"]], "sklearn.cluster.KMeans": [[426, 2, 1, "", "fit"], [426, 2, 1, "", "fit_predict"], [426, 2, 1, "", "fit_transform"], [426, 2, 1, "", "get_feature_names_out"], [426, 2, 1, "", "get_params"], [426, 2, 1, "", "predict"], [426, 2, 1, "", "score"], [426, 2, 1, "", "set_output"], [426, 2, 1, "", "set_params"], [426, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[427, 2, 1, "", "fit"], [427, 2, 1, "", "fit_predict"], [427, 2, 1, "", "get_params"], [427, 2, 1, "", "predict"], [427, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_predict"], [428, 2, 1, "", "fit_transform"], [428, 2, 1, "", "get_feature_names_out"], [428, 2, 1, "", "get_params"], [428, 2, 1, "", "partial_fit"], [428, 2, 1, "", "predict"], [428, 2, 1, "", "score"], [428, 2, 1, "", "set_output"], [428, 2, 1, "", "set_params"], [428, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_predict"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[430, 3, 1, "", "biclusters_"], [430, 2, 1, "", "fit"], [430, 2, 1, "", "get_indices"], [430, 2, 1, "", "get_params"], [430, 2, 1, "", "get_shape"], [430, 2, 1, "", "get_submatrix"], [430, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[431, 2, 1, "", "fit"], [431, 2, 1, "", "fit_predict"], [431, 2, 1, "", "get_params"], [431, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[432, 3, 1, "", "biclusters_"], [432, 2, 1, "", "fit"], [432, 2, 1, "", "get_indices"], [432, 2, 1, "", "get_params"], [432, 2, 1, "", "get_shape"], [432, 2, 1, "", "get_submatrix"], [432, 2, 1, "", "set_params"]], "sklearn.compose": [[443, 1, 1, "", "ColumnTransformer"], [444, 1, 1, "", "TransformedTargetRegressor"], [445, 4, 1, "", "make_column_selector"], [446, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_params"], [443, 3, 1, "", "named_transformers_"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "get_params"], [444, 3, 1, "", "n_features_in_"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "score"], [444, 2, 1, "", "set_params"]], "sklearn.covariance": [[448, 1, 1, "", "EllipticEnvelope"], [449, 1, 1, "", "EmpiricalCovariance"], [450, 1, 1, "", "GraphicalLasso"], [451, 1, 1, "", "GraphicalLassoCV"], [452, 1, 1, "", "LedoitWolf"], [453, 1, 1, "", "MinCovDet"], [454, 1, 1, "", "OAS"], [455, 1, 1, "", "ShrunkCovariance"], [456, 4, 1, "", "empirical_covariance"], [457, 4, 1, "", "graphical_lasso"], [458, 4, 1, "", "ledoit_wolf"], [404, 4, 1, "", "oas"], [459, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[448, 2, 1, "", "correct_covariance"], [448, 2, 1, "", "decision_function"], [448, 2, 1, "", "error_norm"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "get_precision"], [448, 2, 1, "", "mahalanobis"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "reweight_covariance"], [448, 2, 1, "", "score"], [448, 2, 1, "", "score_samples"], [448, 2, 1, "", "set_params"]], "sklearn.covariance.EmpiricalCovariance": [[449, 2, 1, "", "error_norm"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_precision"], [449, 2, 1, "", "mahalanobis"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLasso": [[450, 2, 1, "", "error_norm"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_precision"], [450, 2, 1, "", "mahalanobis"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_params"]], "sklearn.covariance.GraphicalLassoCV": [[451, 2, 1, "", "error_norm"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_precision"], [451, 2, 1, "", "mahalanobis"], [451, 2, 1, "", "score"], [451, 2, 1, "", "set_params"]], "sklearn.covariance.LedoitWolf": [[452, 2, 1, "", "error_norm"], [452, 2, 1, "", "fit"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "get_precision"], [452, 2, 1, "", "mahalanobis"], [452, 2, 1, "", "score"], [452, 2, 1, "", "set_params"]], "sklearn.covariance.MinCovDet": [[453, 2, 1, "", "correct_covariance"], [453, 2, 1, "", "error_norm"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_precision"], [453, 2, 1, "", "mahalanobis"], [453, 2, 1, "", "reweight_covariance"], [453, 2, 1, "", "score"], [453, 2, 1, "", "set_params"]], "sklearn.covariance.OAS": [[454, 2, 1, "", "error_norm"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "get_precision"], [454, 2, 1, "", "mahalanobis"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_params"]], "sklearn.covariance.ShrunkCovariance": [[455, 2, 1, "", "error_norm"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "get_precision"], [455, 2, 1, "", "mahalanobis"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_params"]], "sklearn.cross_decomposition": [[460, 1, 1, "", "CCA"], [461, 1, 1, "", "PLSCanonical"], [462, 1, 1, "", "PLSRegression"], [463, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[460, 3, 1, "", "coef_"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "fit_transform"], [460, 2, 1, "", "get_feature_names_out"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "inverse_transform"], [460, 2, 1, "", "predict"], [460, 2, 1, "", "score"], [460, 2, 1, "", "set_output"], [460, 2, 1, "", "set_params"], [460, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[461, 3, 1, "", "coef_"], [461, 2, 1, "", "fit"], [461, 2, 1, "", "fit_transform"], [461, 2, 1, "", "get_feature_names_out"], [461, 2, 1, "", "get_params"], [461, 2, 1, "", "inverse_transform"], [461, 2, 1, "", "predict"], [461, 2, 1, "", "score"], [461, 2, 1, "", "set_output"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[462, 3, 1, "", "coef_"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_transform"], [462, 2, 1, "", "get_feature_names_out"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "inverse_transform"], [462, 2, 1, "", "predict"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_output"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_transform"], [463, 2, 1, "", "get_feature_names_out"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "set_output"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "transform"]], "sklearn.datasets": [[464, 4, 1, "", "clear_data_home"], [465, 4, 1, "", "dump_svmlight_file"], [466, 4, 1, "", "fetch_20newsgroups"], [467, 4, 1, "", "fetch_20newsgroups_vectorized"], [468, 4, 1, "", "fetch_california_housing"], [469, 4, 1, "", "fetch_covtype"], [470, 4, 1, "", "fetch_kddcup99"], [471, 4, 1, "", "fetch_lfw_pairs"], [472, 4, 1, "", "fetch_lfw_people"], [473, 4, 1, "", "fetch_olivetti_faces"], [474, 4, 1, "", "fetch_openml"], [475, 4, 1, "", "fetch_rcv1"], [476, 4, 1, "", "fetch_species_distributions"], [477, 4, 1, "", "get_data_home"], [478, 4, 1, "", "load_breast_cancer"], [479, 4, 1, "", "load_diabetes"], [480, 4, 1, "", "load_digits"], [481, 4, 1, "", "load_files"], [482, 4, 1, "", "load_iris"], [483, 4, 1, "", "load_linnerud"], [484, 4, 1, "", "load_sample_image"], [485, 4, 1, "", "load_sample_images"], [486, 4, 1, "", "load_svmlight_file"], [487, 4, 1, "", "load_svmlight_files"], [488, 4, 1, "", "load_wine"], [489, 4, 1, "", "make_biclusters"], [490, 4, 1, "", "make_blobs"], [491, 4, 1, "", "make_checkerboard"], [492, 4, 1, "", "make_circles"], [493, 4, 1, "", "make_classification"], [494, 4, 1, "", "make_friedman1"], [495, 4, 1, "", "make_friedman2"], [496, 4, 1, "", "make_friedman3"], [497, 4, 1, "", "make_gaussian_quantiles"], [498, 4, 1, "", "make_hastie_10_2"], [499, 4, 1, "", "make_low_rank_matrix"], [500, 4, 1, "", "make_moons"], [501, 4, 1, "", "make_multilabel_classification"], [502, 4, 1, "", "make_regression"], [503, 4, 1, "", "make_s_curve"], [504, 4, 1, "", "make_sparse_coded_signal"], [505, 4, 1, "", "make_sparse_spd_matrix"], [506, 4, 1, "", "make_sparse_uncorrelated"], [507, 4, 1, "", "make_spd_matrix"], [508, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[509, 1, 1, "", "DictionaryLearning"], [510, 1, 1, "", "FactorAnalysis"], [511, 1, 1, "", "FastICA"], [512, 1, 1, "", "IncrementalPCA"], [513, 1, 1, "", "KernelPCA"], [514, 1, 1, "", "LatentDirichletAllocation"], [515, 1, 1, "", "MiniBatchDictionaryLearning"], [516, 1, 1, "", "MiniBatchNMF"], [517, 1, 1, "", "MiniBatchSparsePCA"], [518, 1, 1, "", "NMF"], [519, 1, 1, "", "PCA"], [520, 1, 1, "", "SparseCoder"], [521, 1, 1, "", "SparsePCA"], [522, 1, 1, "", "TruncatedSVD"], [523, 4, 1, "", "dict_learning"], [524, 4, 1, "", "dict_learning_online"], [403, 4, 1, "", "fastica"], [525, 4, 1, "", "non_negative_factorization"], [526, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[509, 2, 1, "", "fit"], [509, 2, 1, "", "fit_transform"], [509, 2, 1, "", "get_feature_names_out"], [509, 2, 1, "", "get_params"], [509, 2, 1, "", "set_output"], [509, 2, 1, "", "set_params"], [509, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[510, 2, 1, "", "fit"], [510, 2, 1, "", "fit_transform"], [510, 2, 1, "", "get_covariance"], [510, 2, 1, "", "get_feature_names_out"], [510, 2, 1, "", "get_params"], [510, 2, 1, "", "get_precision"], [510, 2, 1, "", "score"], [510, 2, 1, "", "score_samples"], [510, 2, 1, "", "set_output"], [510, 2, 1, "", "set_params"], [510, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[511, 2, 1, "", "fit"], [511, 2, 1, "", "fit_transform"], [511, 2, 1, "", "get_feature_names_out"], [511, 2, 1, "", "get_params"], [511, 2, 1, "", "inverse_transform"], [511, 2, 1, "", "set_output"], [511, 2, 1, "", "set_params"], [511, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[512, 2, 1, "", "fit"], [512, 2, 1, "", "fit_transform"], [512, 2, 1, "", "get_covariance"], [512, 2, 1, "", "get_feature_names_out"], [512, 2, 1, "", "get_params"], [512, 2, 1, "", "get_precision"], [512, 2, 1, "", "inverse_transform"], [512, 2, 1, "", "partial_fit"], [512, 2, 1, "", "set_output"], [512, 2, 1, "", "set_params"], [512, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_transform"], [513, 2, 1, "", "get_feature_names_out"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "inverse_transform"], [513, 2, 1, "", "set_output"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "partial_fit"], [514, 2, 1, "", "perplexity"], [514, 2, 1, "", "score"], [514, 2, 1, "", "set_output"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "fit_transform"], [515, 2, 1, "", "get_feature_names_out"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "partial_fit"], [515, 2, 1, "", "set_output"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "fit_transform"], [516, 2, 1, "", "get_feature_names_out"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "inverse_transform"], [516, 2, 1, "", "partial_fit"], [516, 2, 1, "", "set_output"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "fit_transform"], [517, 2, 1, "", "get_feature_names_out"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "inverse_transform"], [517, 2, 1, "", "set_output"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[518, 2, 1, "", "fit"], [518, 2, 1, "", "fit_transform"], [518, 2, 1, "", "get_feature_names_out"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "inverse_transform"], [518, 2, 1, "", "set_output"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[519, 2, 1, "", "fit"], [519, 2, 1, "", "fit_transform"], [519, 2, 1, "", "get_covariance"], [519, 2, 1, "", "get_feature_names_out"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "get_precision"], [519, 2, 1, "", "inverse_transform"], [519, 2, 1, "", "score"], [519, 2, 1, "", "score_samples"], [519, 2, 1, "", "set_output"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[520, 2, 1, "", "fit"], [520, 2, 1, "", "fit_transform"], [520, 2, 1, "", "get_feature_names_out"], [520, 2, 1, "", "get_params"], [520, 3, 1, "", "n_components_"], [520, 3, 1, "", "n_features_in_"], [520, 2, 1, "", "set_output"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[521, 2, 1, "", "fit"], [521, 2, 1, "", "fit_transform"], [521, 2, 1, "", "get_feature_names_out"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "inverse_transform"], [521, 2, 1, "", "set_output"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[522, 2, 1, "", "fit"], [522, 2, 1, "", "fit_transform"], [522, 2, 1, "", "get_feature_names_out"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "inverse_transform"], [522, 2, 1, "", "set_output"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[527, 1, 1, "", "LinearDiscriminantAnalysis"], [528, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[527, 2, 1, "", "decision_function"], [527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_transform"], [527, 2, 1, "", "get_feature_names_out"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "predict"], [527, 2, 1, "", "predict_log_proba"], [527, 2, 1, "", "predict_proba"], [527, 2, 1, "", "score"], [527, 2, 1, "", "set_output"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[528, 2, 1, "", "decision_function"], [528, 2, 1, "", "fit"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "predict"], [528, 2, 1, "", "predict_log_proba"], [528, 2, 1, "", "predict_proba"], [528, 2, 1, "", "score"], [528, 2, 1, "", "set_params"]], "sklearn.dummy": [[529, 1, 1, "", "DummyClassifier"], [530, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "predict"], [529, 2, 1, "", "predict_log_proba"], [529, 2, 1, "", "predict_proba"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_params"]], "sklearn.dummy.DummyRegressor": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "predict"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_params"]], "sklearn.ensemble": [[531, 1, 1, "", "AdaBoostClassifier"], [532, 1, 1, "", "AdaBoostRegressor"], [533, 1, 1, "", "BaggingClassifier"], [534, 1, 1, "", "BaggingRegressor"], [535, 1, 1, "", "ExtraTreesClassifier"], [536, 1, 1, "", "ExtraTreesRegressor"], [537, 1, 1, "", "GradientBoostingClassifier"], [538, 1, 1, "", "GradientBoostingRegressor"], [539, 1, 1, "", "HistGradientBoostingClassifier"], [540, 1, 1, "", "HistGradientBoostingRegressor"], [541, 1, 1, "", "IsolationForest"], [542, 1, 1, "", "RandomForestClassifier"], [543, 1, 1, "", "RandomForestRegressor"], [544, 1, 1, "", "RandomTreesEmbedding"], [545, 1, 1, "", "StackingClassifier"], [546, 1, 1, "", "StackingRegressor"], [547, 1, 1, "", "VotingClassifier"], [548, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[531, 3, 1, "", "base_estimator_"], [531, 2, 1, "", "decision_function"], [531, 3, 1, "", "estimator_"], [531, 3, 1, "", "feature_importances_"], [531, 2, 1, "", "fit"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "predict"], [531, 2, 1, "", "predict_log_proba"], [531, 2, 1, "", "predict_proba"], [531, 2, 1, "", "score"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "staged_decision_function"], [531, 2, 1, "", "staged_predict"], [531, 2, 1, "", "staged_predict_proba"], [531, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[532, 3, 1, "", "base_estimator_"], [532, 3, 1, "", "estimator_"], [532, 3, 1, "", "feature_importances_"], [532, 2, 1, "", "fit"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "staged_predict"], [532, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[533, 3, 1, "", "base_estimator_"], [533, 2, 1, "", "decision_function"], [533, 3, 1, "", "estimator_"], [533, 3, 1, "", "estimators_samples_"], [533, 2, 1, "", "fit"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "predict_log_proba"], [533, 2, 1, "", "predict_proba"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_params"]], "sklearn.ensemble.BaggingRegressor": [[534, 3, 1, "", "base_estimator_"], [534, 3, 1, "", "estimator_"], [534, 3, 1, "", "estimators_samples_"], [534, 2, 1, "", "fit"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesClassifier": [[535, 2, 1, "", "apply"], [535, 3, 1, "", "base_estimator_"], [535, 2, 1, "", "decision_path"], [535, 3, 1, "", "estimator_"], [535, 3, 1, "", "feature_importances_"], [535, 2, 1, "", "fit"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "predict_log_proba"], [535, 2, 1, "", "predict_proba"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_params"]], "sklearn.ensemble.ExtraTreesRegressor": [[536, 2, 1, "", "apply"], [536, 3, 1, "", "base_estimator_"], [536, 2, 1, "", "decision_path"], [536, 3, 1, "", "estimator_"], [536, 3, 1, "", "feature_importances_"], [536, 2, 1, "", "fit"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "predict"], [536, 2, 1, "", "score"], [536, 2, 1, "", "set_params"]], "sklearn.ensemble.GradientBoostingClassifier": [[537, 2, 1, "", "apply"], [537, 3, 1, "", "base_estimator_"], [537, 2, 1, "", "decision_function"], [537, 3, 1, "", "estimator_"], [537, 3, 1, "", "feature_importances_"], [537, 2, 1, "", "fit"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "predict"], [537, 2, 1, "", "predict_log_proba"], [537, 2, 1, "", "predict_proba"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "staged_decision_function"], [537, 2, 1, "", "staged_predict"], [537, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[538, 2, 1, "", "apply"], [538, 3, 1, "", "base_estimator_"], [538, 3, 1, "", "estimator_"], [538, 3, 1, "", "feature_importances_"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "predict"], [538, 2, 1, "", "score"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[539, 2, 1, "", "decision_function"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "get_params"], [539, 3, 1, "", "n_iter_"], [539, 2, 1, "", "predict"], [539, 2, 1, "", "predict_proba"], [539, 2, 1, "", "score"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "staged_decision_function"], [539, 2, 1, "", "staged_predict"], [539, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "get_params"], [540, 3, 1, "", "n_iter_"], [540, 2, 1, "", "predict"], [540, 2, 1, "", "score"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[541, 3, 1, "", "base_estimator_"], [541, 2, 1, "", "decision_function"], [541, 3, 1, "", "estimator_"], [541, 3, 1, "", "estimators_samples_"], [541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_predict"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "predict"], [541, 2, 1, "", "score_samples"], [541, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[542, 2, 1, "", "apply"], [542, 3, 1, "", "base_estimator_"], [542, 2, 1, "", "decision_path"], [542, 3, 1, "", "estimator_"], [542, 3, 1, "", "feature_importances_"], [542, 2, 1, "", "fit"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "predict"], [542, 2, 1, "", "predict_log_proba"], [542, 2, 1, "", "predict_proba"], [542, 2, 1, "", "score"], [542, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestRegressor": [[543, 2, 1, "", "apply"], [543, 3, 1, "", "base_estimator_"], [543, 2, 1, "", "decision_path"], [543, 3, 1, "", "estimator_"], [543, 3, 1, "", "feature_importances_"], [543, 2, 1, "", "fit"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "predict"], [543, 2, 1, "", "score"], [543, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomTreesEmbedding": [[544, 2, 1, "", "apply"], [544, 3, 1, "", "base_estimator_"], [544, 2, 1, "", "decision_path"], [544, 3, 1, "", "estimator_"], [544, 3, 1, "", "feature_importances_"], [544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[545, 2, 1, "", "decision_function"], [545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_params"], [545, 3, 1, "", "n_features_in_"], [545, 3, 1, "", "named_estimators"], [545, 2, 1, "", "predict"], [545, 2, 1, "", "predict_proba"], [545, 2, 1, "", "score"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_params"], [546, 3, 1, "", "n_features_in_"], [546, 3, 1, "", "named_estimators"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_params"], [547, 3, 1, "", "n_features_in_"], [547, 3, 1, "", "named_estimators"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_params"], [548, 3, 1, "", "n_features_in_"], [548, 3, 1, "", "named_estimators"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.exceptions": [[549, 1, 1, "", "ConvergenceWarning"], [550, 1, 1, "", "DataConversionWarning"], [551, 1, 1, "", "DataDimensionalityWarning"], [552, 1, 1, "", "EfficiencyWarning"], [553, 1, 1, "", "FitFailedWarning"], [554, 1, 1, "", "NotFittedError"], [555, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[549, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[550, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[551, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[552, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[553, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[554, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[555, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[556, 0, 0, "-", "enable_halving_search_cv"], [557, 0, 0, "-", "enable_hist_gradient_boosting"], [558, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[559, 1, 1, "", "DictVectorizer"], [560, 1, 1, "", "FeatureHasher"], [390, 0, 0, "-", "image"], [390, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_feature_names_out"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "inverse_transform"], [559, 2, 1, "", "restrict"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_transform"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "set_output"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[561, 1, 1, "", "PatchExtractor"], [562, 4, 1, "", "extract_patches_2d"], [563, 4, 1, "", "grid_to_graph"], [564, 4, 1, "", "img_to_graph"], [565, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[566, 1, 1, "", "CountVectorizer"], [567, 1, 1, "", "HashingVectorizer"], [568, 1, 1, "", "TfidfTransformer"], [569, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[566, 2, 1, "", "build_analyzer"], [566, 2, 1, "", "build_preprocessor"], [566, 2, 1, "", "build_tokenizer"], [566, 2, 1, "", "decode"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "get_stop_words"], [566, 2, 1, "", "inverse_transform"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[567, 2, 1, "", "build_analyzer"], [567, 2, 1, "", "build_preprocessor"], [567, 2, 1, "", "build_tokenizer"], [567, 2, 1, "", "decode"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "get_stop_words"], [567, 2, 1, "", "partial_fit"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "idf_"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[569, 2, 1, "", "build_analyzer"], [569, 2, 1, "", "build_preprocessor"], [569, 2, 1, "", "build_tokenizer"], [569, 2, 1, "", "decode"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_params"], [569, 2, 1, "", "get_stop_words"], [569, 3, 1, "", "idf_"], [569, 2, 1, "", "inverse_transform"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "transform"]], "sklearn.feature_selection": [[570, 1, 1, "", "GenericUnivariateSelect"], [571, 1, 1, "", "RFE"], [572, 1, 1, "", "RFECV"], [573, 1, 1, "", "SelectFdr"], [574, 1, 1, "", "SelectFpr"], [575, 1, 1, "", "SelectFromModel"], [576, 1, 1, "", "SelectFwe"], [577, 1, 1, "", "SelectKBest"], [578, 1, 1, "", "SelectPercentile"], [579, 1, 1, "", "SelectorMixin"], [580, 1, 1, "", "SequentialFeatureSelector"], [581, 1, 1, "", "VarianceThreshold"], [582, 4, 1, "", "chi2"], [583, 4, 1, "", "f_classif"], [584, 4, 1, "", "f_regression"], [585, 4, 1, "", "mutual_info_classif"], [586, 4, 1, "", "mutual_info_regression"], [587, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_params"], [570, 2, 1, "", "get_support"], [570, 2, 1, "", "inverse_transform"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[571, 3, 1, "", "classes_"], [571, 2, 1, "", "decision_function"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "get_support"], [571, 2, 1, "", "inverse_transform"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "predict_log_proba"], [571, 2, 1, "", "predict_proba"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[572, 3, 1, "", "classes_"], [572, 2, 1, "", "decision_function"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "fit_transform"], [572, 2, 1, "", "get_feature_names_out"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "get_support"], [572, 2, 1, "", "inverse_transform"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "predict_log_proba"], [572, 2, 1, "", "predict_proba"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_output"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[573, 2, 1, "", "fit"], [573, 2, 1, "", "fit_transform"], [573, 2, 1, "", "get_feature_names_out"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "get_support"], [573, 2, 1, "", "inverse_transform"], [573, 2, 1, "", "set_output"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "get_support"], [574, 2, 1, "", "inverse_transform"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "get_support"], [575, 2, 1, "", "inverse_transform"], [575, 3, 1, "", "n_features_in_"], [575, 2, 1, "", "partial_fit"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 3, 1, "", "threshold_"], [575, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "get_support"], [576, 2, 1, "", "inverse_transform"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_params"], [577, 2, 1, "", "get_support"], [577, 2, 1, "", "inverse_transform"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "get_support"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_support"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_feature_names_out"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "get_support"], [580, 2, 1, "", "inverse_transform"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_feature_names_out"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "get_support"], [581, 2, 1, "", "inverse_transform"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[588, 1, 1, "", "GaussianProcessClassifier"], [589, 1, 1, "", "GaussianProcessRegressor"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "get_params"], [588, 3, 1, "", "kernel_"], [588, 2, 1, "", "log_marginal_likelihood"], [588, 2, 1, "", "predict"], [588, 2, 1, "", "predict_proba"], [588, 2, 1, "", "score"], [588, 2, 1, "", "set_params"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "log_marginal_likelihood"], [589, 2, 1, "", "predict"], [589, 2, 1, "", "sample_y"], [589, 2, 1, "", "score"], [589, 2, 1, "", "set_params"]], "sklearn.gaussian_process.kernels": [[590, 1, 1, "", "CompoundKernel"], [591, 1, 1, "", "ConstantKernel"], [592, 1, 1, "", "DotProduct"], [593, 1, 1, "", "ExpSineSquared"], [594, 1, 1, "", "Exponentiation"], [595, 1, 1, "", "Hyperparameter"], [596, 1, 1, "", "Kernel"], [597, 1, 1, "", "Matern"], [598, 1, 1, "", "PairwiseKernel"], [599, 1, 1, "", "Product"], [600, 1, 1, "", "RBF"], [601, 1, 1, "", "RationalQuadratic"], [602, 1, 1, "", "Sum"], [603, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[590, 2, 1, "", "__call__"], [590, 3, 1, "", "bounds"], [590, 2, 1, "", "clone_with_theta"], [590, 2, 1, "", "diag"], [590, 2, 1, "", "get_params"], [590, 3, 1, "", "hyperparameters"], [590, 2, 1, "", "is_stationary"], [590, 3, 1, "", "n_dims"], [590, 3, 1, "", "requires_vector_input"], [590, 2, 1, "", "set_params"], [590, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[591, 2, 1, "", "__call__"], [591, 3, 1, "", "bounds"], [591, 2, 1, "", "clone_with_theta"], [591, 2, 1, "", "diag"], [591, 2, 1, "", "get_params"], [591, 3, 1, "", "hyperparameters"], [591, 2, 1, "", "is_stationary"], [591, 3, 1, "", "n_dims"], [591, 3, 1, "", "requires_vector_input"], [591, 2, 1, "", "set_params"], [591, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[592, 2, 1, "", "__call__"], [592, 3, 1, "", "bounds"], [592, 2, 1, "", "clone_with_theta"], [592, 2, 1, "", "diag"], [592, 2, 1, "", "get_params"], [592, 3, 1, "", "hyperparameters"], [592, 2, 1, "", "is_stationary"], [592, 3, 1, "", "n_dims"], [592, 3, 1, "", "requires_vector_input"], [592, 2, 1, "", "set_params"], [592, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[593, 2, 1, "", "__call__"], [593, 3, 1, "", "bounds"], [593, 2, 1, "", "clone_with_theta"], [593, 2, 1, "", "diag"], [593, 2, 1, "", "get_params"], [593, 3, 1, "", "hyperparameter_length_scale"], [593, 3, 1, "", "hyperparameters"], [593, 2, 1, "", "is_stationary"], [593, 3, 1, "", "n_dims"], [593, 3, 1, "", "requires_vector_input"], [593, 2, 1, "", "set_params"], [593, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[594, 2, 1, "", "__call__"], [594, 3, 1, "", "bounds"], [594, 2, 1, "", "clone_with_theta"], [594, 2, 1, "", "diag"], [594, 2, 1, "", "get_params"], [594, 3, 1, "", "hyperparameters"], [594, 2, 1, "", "is_stationary"], [594, 3, 1, "", "n_dims"], [594, 3, 1, "", "requires_vector_input"], [594, 2, 1, "", "set_params"], [594, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[595, 2, 1, "", "__call__"], [595, 5, 1, "", "bounds"], [595, 2, 1, "", "count"], [595, 5, 1, "", "fixed"], [595, 2, 1, "", "index"], [595, 5, 1, "", "n_elements"], [595, 5, 1, "", "name"], [595, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[596, 2, 1, "", "__call__"], [596, 3, 1, "", "bounds"], [596, 2, 1, "", "clone_with_theta"], [596, 2, 1, "", "diag"], [596, 2, 1, "", "get_params"], [596, 3, 1, "", "hyperparameters"], [596, 2, 1, "", "is_stationary"], [596, 3, 1, "", "n_dims"], [596, 3, 1, "", "requires_vector_input"], [596, 2, 1, "", "set_params"], [596, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[597, 2, 1, "", "__call__"], [597, 3, 1, "", "bounds"], [597, 2, 1, "", "clone_with_theta"], [597, 2, 1, "", "diag"], [597, 2, 1, "", "get_params"], [597, 3, 1, "", "hyperparameters"], [597, 2, 1, "", "is_stationary"], [597, 3, 1, "", "n_dims"], [597, 3, 1, "", "requires_vector_input"], [597, 2, 1, "", "set_params"], [597, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[598, 2, 1, "", "__call__"], [598, 3, 1, "", "bounds"], [598, 2, 1, "", "clone_with_theta"], [598, 2, 1, "", "diag"], [598, 2, 1, "", "get_params"], [598, 3, 1, "", "hyperparameters"], [598, 2, 1, "", "is_stationary"], [598, 3, 1, "", "n_dims"], [598, 3, 1, "", "requires_vector_input"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[599, 2, 1, "", "__call__"], [599, 3, 1, "", "bounds"], [599, 2, 1, "", "clone_with_theta"], [599, 2, 1, "", "diag"], [599, 2, 1, "", "get_params"], [599, 3, 1, "", "hyperparameters"], [599, 2, 1, "", "is_stationary"], [599, 3, 1, "", "n_dims"], [599, 3, 1, "", "requires_vector_input"], [599, 2, 1, "", "set_params"], [599, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[600, 2, 1, "", "__call__"], [600, 3, 1, "", "bounds"], [600, 2, 1, "", "clone_with_theta"], [600, 2, 1, "", "diag"], [600, 2, 1, "", "get_params"], [600, 3, 1, "", "hyperparameters"], [600, 2, 1, "", "is_stationary"], [600, 3, 1, "", "n_dims"], [600, 3, 1, "", "requires_vector_input"], [600, 2, 1, "", "set_params"], [600, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[601, 2, 1, "", "__call__"], [601, 3, 1, "", "bounds"], [601, 2, 1, "", "clone_with_theta"], [601, 2, 1, "", "diag"], [601, 2, 1, "", "get_params"], [601, 3, 1, "", "hyperparameters"], [601, 2, 1, "", "is_stationary"], [601, 3, 1, "", "n_dims"], [601, 3, 1, "", "requires_vector_input"], [601, 2, 1, "", "set_params"], [601, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[602, 2, 1, "", "__call__"], [602, 3, 1, "", "bounds"], [602, 2, 1, "", "clone_with_theta"], [602, 2, 1, "", "diag"], [602, 2, 1, "", "get_params"], [602, 3, 1, "", "hyperparameters"], [602, 2, 1, "", "is_stationary"], [602, 3, 1, "", "n_dims"], [602, 3, 1, "", "requires_vector_input"], [602, 2, 1, "", "set_params"], [602, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[603, 2, 1, "", "__call__"], [603, 3, 1, "", "bounds"], [603, 2, 1, "", "clone_with_theta"], [603, 2, 1, "", "diag"], [603, 2, 1, "", "get_params"], [603, 3, 1, "", "hyperparameters"], [603, 2, 1, "", "is_stationary"], [603, 3, 1, "", "n_dims"], [603, 3, 1, "", "requires_vector_input"], [603, 2, 1, "", "set_params"], [603, 3, 1, "", "theta"]], "sklearn.impute": [[605, 1, 1, "", "IterativeImputer"], [606, 1, 1, "", "KNNImputer"], [607, 1, 1, "", "MissingIndicator"], [608, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.inspection": [[609, 1, 1, "", "DecisionBoundaryDisplay"], [610, 1, 1, "", "PartialDependenceDisplay"], [611, 4, 1, "", "partial_dependence"], [612, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[609, 2, 1, "", "from_estimator"], [609, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[610, 2, 1, "", "from_estimator"], [610, 2, 1, "", "plot"]], "sklearn.isotonic": [[613, 1, 1, "", "IsotonicRegression"], [614, 4, 1, "", "check_increasing"], [615, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "fit_transform"], [613, 2, 1, "", "get_feature_names_out"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_output"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[616, 1, 1, "", "AdditiveChi2Sampler"], [617, 1, 1, "", "Nystroem"], [618, 1, 1, "", "PolynomialCountSketch"], [619, 1, 1, "", "RBFSampler"], [620, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "fit_transform"], [616, 2, 1, "", "get_feature_names_out"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "set_output"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "fit_transform"], [617, 2, 1, "", "get_feature_names_out"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "set_output"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "fit_transform"], [618, 2, 1, "", "get_feature_names_out"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "set_output"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "fit_transform"], [619, 2, 1, "", "get_feature_names_out"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "set_output"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "fit_transform"], [620, 2, 1, "", "get_feature_names_out"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "set_output"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[621, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_params"]], "sklearn.linear_model": [[622, 1, 1, "", "ARDRegression"], [623, 1, 1, "", "BayesianRidge"], [624, 1, 1, "", "ElasticNet"], [625, 1, 1, "", "ElasticNetCV"], [626, 1, 1, "", "GammaRegressor"], [627, 1, 1, "", "HuberRegressor"], [628, 1, 1, "", "Lars"], [629, 1, 1, "", "LarsCV"], [630, 1, 1, "", "Lasso"], [631, 1, 1, "", "LassoCV"], [632, 1, 1, "", "LassoLars"], [633, 1, 1, "", "LassoLarsCV"], [634, 1, 1, "", "LassoLarsIC"], [635, 1, 1, "", "LinearRegression"], [636, 1, 1, "", "LogisticRegression"], [637, 1, 1, "", "LogisticRegressionCV"], [638, 1, 1, "", "MultiTaskElasticNet"], [639, 1, 1, "", "MultiTaskElasticNetCV"], [640, 1, 1, "", "MultiTaskLasso"], [641, 1, 1, "", "MultiTaskLassoCV"], [642, 1, 1, "", "OrthogonalMatchingPursuit"], [643, 1, 1, "", "OrthogonalMatchingPursuitCV"], [644, 1, 1, "", "PassiveAggressiveClassifier"], [645, 4, 1, "", "PassiveAggressiveRegressor"], [646, 1, 1, "", "Perceptron"], [647, 1, 1, "", "PoissonRegressor"], [648, 1, 1, "", "QuantileRegressor"], [649, 1, 1, "", "RANSACRegressor"], [650, 1, 1, "", "Ridge"], [651, 1, 1, "", "RidgeCV"], [652, 1, 1, "", "RidgeClassifier"], [653, 1, 1, "", "RidgeClassifierCV"], [654, 1, 1, "", "SGDClassifier"], [655, 1, 1, "", "SGDOneClassSVM"], [656, 1, 1, "", "SGDRegressor"], [657, 1, 1, "", "TheilSenRegressor"], [658, 1, 1, "", "TweedieRegressor"], [659, 4, 1, "", "enet_path"], [660, 4, 1, "", "lars_path"], [661, 4, 1, "", "lars_path_gram"], [662, 4, 1, "", "lasso_path"], [663, 4, 1, "", "orthogonal_mp"], [664, 4, 1, "", "orthogonal_mp_gram"], [665, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_params"]], "sklearn.linear_model.BayesianRidge": [[623, 2, 1, "", "fit"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_params"]], "sklearn.linear_model.ElasticNet": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "path"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "path"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_params"]], "sklearn.linear_model.GammaRegressor": [[626, 3, 1, "", "family"], [626, 2, 1, "", "fit"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_params"]], "sklearn.linear_model.HuberRegressor": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_params"]], "sklearn.linear_model.Lars": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"]], "sklearn.linear_model.LarsCV": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"]], "sklearn.linear_model.Lasso": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "path"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "path"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLars": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsCV": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_params"]], "sklearn.linear_model.LassoLarsIC": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_params"]], "sklearn.linear_model.LinearRegression": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_params"]], "sklearn.linear_model.LogisticRegression": [[636, 2, 1, "", "decision_function"], [636, 2, 1, "", "densify"], [636, 2, 1, "", "fit"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "predict_log_proba"], [636, 2, 1, "", "predict_proba"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[637, 2, 1, "", "decision_function"], [637, 2, 1, "", "densify"], [637, 2, 1, "", "fit"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "predict_log_proba"], [637, 2, 1, "", "predict_proba"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "path"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_params"], [638, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "path"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_params"]], "sklearn.linear_model.MultiTaskLasso": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "path"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_params"], [640, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "path"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[644, 2, 1, "", "decision_function"], [644, 2, 1, "", "densify"], [644, 2, 1, "", "fit"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "partial_fit"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[646, 2, 1, "", "decision_function"], [646, 2, 1, "", "densify"], [646, 2, 1, "", "fit"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "partial_fit"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[647, 3, 1, "", "family"], [647, 2, 1, "", "fit"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_params"]], "sklearn.linear_model.QuantileRegressor": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_params"]], "sklearn.linear_model.RANSACRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifier": [[652, 3, 1, "", "classes_"], [652, 2, 1, "", "decision_function"], [652, 2, 1, "", "fit"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"]], "sklearn.linear_model.RidgeClassifierCV": [[653, 3, 1, "", "classes_"], [653, 2, 1, "", "decision_function"], [653, 2, 1, "", "fit"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_params"]], "sklearn.linear_model.SGDClassifier": [[654, 2, 1, "", "decision_function"], [654, 2, 1, "", "densify"], [654, 2, 1, "", "fit"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "partial_fit"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "predict_log_proba"], [654, 2, 1, "", "predict_proba"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[655, 2, 1, "", "decision_function"], [655, 2, 1, "", "densify"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "fit_predict"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "partial_fit"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score_samples"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[656, 2, 1, "", "densify"], [656, 2, 1, "", "fit"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "partial_fit"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_params"]], "sklearn.linear_model.TweedieRegressor": [[658, 3, 1, "", "family"], [658, 2, 1, "", "fit"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_params"]], "sklearn.manifold": [[666, 1, 1, "", "Isomap"], [667, 1, 1, "", "LocallyLinearEmbedding"], [668, 1, 1, "", "MDS"], [669, 1, 1, "", "SpectralEmbedding"], [670, 1, 1, "", "TSNE"], [671, 4, 1, "", "locally_linear_embedding"], [672, 4, 1, "", "smacof"], [673, 4, 1, "", "spectral_embedding"], [674, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "fit_transform"], [666, 2, 1, "", "get_feature_names_out"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "reconstruction_error"], [666, 2, 1, "", "set_output"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "fit_transform"], [667, 2, 1, "", "get_feature_names_out"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "set_output"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "fit_transform"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "fit_transform"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "fit_transform"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "set_params"]], "sklearn.metrics": [[675, 1, 1, "", "ConfusionMatrixDisplay"], [676, 1, 1, "", "DetCurveDisplay"], [677, 1, 1, "", "DistanceMetric"], [678, 1, 1, "", "PrecisionRecallDisplay"], [679, 1, 1, "", "PredictionErrorDisplay"], [680, 1, 1, "", "RocCurveDisplay"], [681, 4, 1, "", "accuracy_score"], [682, 4, 1, "", "adjusted_mutual_info_score"], [683, 4, 1, "", "adjusted_rand_score"], [684, 4, 1, "", "auc"], [685, 4, 1, "", "average_precision_score"], [686, 4, 1, "", "balanced_accuracy_score"], [687, 4, 1, "", "brier_score_loss"], [688, 4, 1, "", "calinski_harabasz_score"], [689, 4, 1, "", "check_scoring"], [690, 4, 1, "", "class_likelihood_ratios"], [691, 4, 1, "", "classification_report"], [390, 0, 0, "-", "cluster"], [694, 4, 1, "", "cohen_kappa_score"], [695, 4, 1, "", "completeness_score"], [696, 4, 1, "", "confusion_matrix"], [697, 4, 1, "", "consensus_score"], [698, 4, 1, "", "coverage_error"], [699, 4, 1, "", "d2_absolute_error_score"], [700, 4, 1, "", "d2_pinball_score"], [701, 4, 1, "", "d2_tweedie_score"], [702, 4, 1, "", "davies_bouldin_score"], [703, 4, 1, "", "dcg_score"], [704, 4, 1, "", "det_curve"], [705, 4, 1, "", "explained_variance_score"], [706, 4, 1, "", "f1_score"], [707, 4, 1, "", "fbeta_score"], [708, 4, 1, "", "fowlkes_mallows_score"], [709, 4, 1, "", "get_scorer"], [710, 4, 1, "", "get_scorer_names"], [711, 4, 1, "", "hamming_loss"], [712, 4, 1, "", "hinge_loss"], [713, 4, 1, "", "homogeneity_completeness_v_measure"], [714, 4, 1, "", "homogeneity_score"], [715, 4, 1, "", "jaccard_score"], [716, 4, 1, "", "label_ranking_average_precision_score"], [717, 4, 1, "", "label_ranking_loss"], [718, 4, 1, "", "log_loss"], [719, 4, 1, "", "make_scorer"], [720, 4, 1, "", "matthews_corrcoef"], [721, 4, 1, "", "max_error"], [722, 4, 1, "", "mean_absolute_error"], [723, 4, 1, "", "mean_absolute_percentage_error"], [724, 4, 1, "", "mean_gamma_deviance"], [725, 4, 1, "", "mean_pinball_loss"], [726, 4, 1, "", "mean_poisson_deviance"], [727, 4, 1, "", "mean_squared_error"], [728, 4, 1, "", "mean_squared_log_error"], [729, 4, 1, "", "mean_tweedie_deviance"], [730, 4, 1, "", "median_absolute_error"], [731, 4, 1, "", "multilabel_confusion_matrix"], [732, 4, 1, "", "mutual_info_score"], [733, 4, 1, "", "ndcg_score"], [734, 4, 1, "", "normalized_mutual_info_score"], [390, 0, 0, "-", "pairwise"], [755, 4, 1, "", "pairwise_distances"], [756, 4, 1, "", "pairwise_distances_argmin"], [757, 4, 1, "", "pairwise_distances_argmin_min"], [758, 4, 1, "", "pairwise_distances_chunked"], [759, 4, 1, "", "precision_recall_curve"], [760, 4, 1, "", "precision_recall_fscore_support"], [761, 4, 1, "", "precision_score"], [762, 4, 1, "", "r2_score"], [763, 4, 1, "", "rand_score"], [764, 4, 1, "", "recall_score"], [765, 4, 1, "", "roc_auc_score"], [766, 4, 1, "", "roc_curve"], [767, 4, 1, "", "silhouette_samples"], [768, 4, 1, "", "silhouette_score"], [769, 4, 1, "", "top_k_accuracy_score"], [770, 4, 1, "", "v_measure_score"], [771, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[675, 2, 1, "", "from_estimator"], [675, 2, 1, "", "from_predictions"], [675, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[676, 2, 1, "", "from_estimator"], [676, 2, 1, "", "from_predictions"], [676, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[677, 2, 1, "", "dist_to_rdist"], [677, 2, 1, "", "get_metric"], [677, 2, 1, "", "pairwise"], [677, 2, 1, "", "rdist_to_dist"]], "sklearn.metrics.PrecisionRecallDisplay": [[678, 2, 1, "", "from_estimator"], [678, 2, 1, "", "from_predictions"], [678, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[679, 2, 1, "", "from_estimator"], [679, 2, 1, "", "from_predictions"], [679, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[680, 2, 1, "", "from_estimator"], [680, 2, 1, "", "from_predictions"], [680, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[692, 4, 1, "", "contingency_matrix"], [693, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[735, 4, 1, "", "additive_chi2_kernel"], [736, 4, 1, "", "chi2_kernel"], [737, 4, 1, "", "cosine_distances"], [738, 4, 1, "", "cosine_similarity"], [739, 4, 1, "", "distance_metrics"], [740, 4, 1, "", "euclidean_distances"], [741, 4, 1, "", "haversine_distances"], [742, 4, 1, "", "kernel_metrics"], [743, 4, 1, "", "laplacian_kernel"], [744, 4, 1, "", "linear_kernel"], [745, 4, 1, "", "manhattan_distances"], [746, 4, 1, "", "nan_euclidean_distances"], [747, 4, 1, "", "paired_cosine_distances"], [748, 4, 1, "", "paired_distances"], [749, 4, 1, "", "paired_euclidean_distances"], [750, 4, 1, "", "paired_manhattan_distances"], [751, 4, 1, "", "pairwise_kernels"], [752, 4, 1, "", "polynomial_kernel"], [753, 4, 1, "", "rbf_kernel"], [754, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[772, 1, 1, "", "BayesianGaussianMixture"], [773, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[772, 2, 1, "", "fit"], [772, 2, 1, "", "fit_predict"], [772, 2, 1, "", "get_params"], [772, 2, 1, "", "predict"], [772, 2, 1, "", "predict_proba"], [772, 2, 1, "", "sample"], [772, 2, 1, "", "score"], [772, 2, 1, "", "score_samples"], [772, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[773, 2, 1, "", "aic"], [773, 2, 1, "", "bic"], [773, 2, 1, "", "fit"], [773, 2, 1, "", "fit_predict"], [773, 2, 1, "", "get_params"], [773, 2, 1, "", "predict"], [773, 2, 1, "", "predict_proba"], [773, 2, 1, "", "sample"], [773, 2, 1, "", "score"], [773, 2, 1, "", "score_samples"], [773, 2, 1, "", "set_params"]], "sklearn.model_selection": [[774, 1, 1, "", "GridSearchCV"], [775, 1, 1, "", "GroupKFold"], [776, 1, 1, "", "GroupShuffleSplit"], [777, 1, 1, "", "HalvingGridSearchCV"], [778, 1, 1, "", "HalvingRandomSearchCV"], [779, 1, 1, "", "KFold"], [780, 1, 1, "", "LearningCurveDisplay"], [781, 1, 1, "", "LeaveOneGroupOut"], [782, 1, 1, "", "LeaveOneOut"], [783, 1, 1, "", "LeavePGroupsOut"], [784, 1, 1, "", "LeavePOut"], [785, 1, 1, "", "ParameterGrid"], [786, 1, 1, "", "ParameterSampler"], [787, 1, 1, "", "PredefinedSplit"], [788, 1, 1, "", "RandomizedSearchCV"], [789, 1, 1, "", "RepeatedKFold"], [790, 1, 1, "", "RepeatedStratifiedKFold"], [791, 1, 1, "", "ShuffleSplit"], [792, 1, 1, "", "StratifiedGroupKFold"], [793, 1, 1, "", "StratifiedKFold"], [794, 1, 1, "", "StratifiedShuffleSplit"], [795, 1, 1, "", "TimeSeriesSplit"], [796, 4, 1, "", "check_cv"], [797, 4, 1, "", "cross_val_predict"], [798, 4, 1, "", "cross_val_score"], [799, 4, 1, "", "cross_validate"], [800, 4, 1, "", "learning_curve"], [801, 4, 1, "", "permutation_test_score"], [802, 4, 1, "", "train_test_split"], [803, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[774, 3, 1, "", "classes_"], [774, 2, 1, "", "decision_function"], [774, 2, 1, "", "fit"], [774, 2, 1, "", "get_params"], [774, 2, 1, "", "inverse_transform"], [774, 3, 1, "", "n_features_in_"], [774, 2, 1, "", "predict"], [774, 2, 1, "", "predict_log_proba"], [774, 2, 1, "", "predict_proba"], [774, 2, 1, "", "score"], [774, 2, 1, "", "score_samples"], [774, 2, 1, "", "set_params"], [774, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[775, 2, 1, "", "get_n_splits"], [775, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[776, 2, 1, "", "get_n_splits"], [776, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[777, 3, 1, "", "classes_"], [777, 2, 1, "", "decision_function"], [777, 2, 1, "", "fit"], [777, 2, 1, "", "get_params"], [777, 2, 1, "", "inverse_transform"], [777, 3, 1, "", "n_features_in_"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "predict_log_proba"], [777, 2, 1, "", "predict_proba"], [777, 2, 1, "", "score"], [777, 2, 1, "", "score_samples"], [777, 2, 1, "", "set_params"], [777, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[778, 3, 1, "", "classes_"], [778, 2, 1, "", "decision_function"], [778, 2, 1, "", "fit"], [778, 2, 1, "", "get_params"], [778, 2, 1, "", "inverse_transform"], [778, 3, 1, "", "n_features_in_"], [778, 2, 1, "", "predict"], [778, 2, 1, "", "predict_log_proba"], [778, 2, 1, "", "predict_proba"], [778, 2, 1, "", "score"], [778, 2, 1, "", "score_samples"], [778, 2, 1, "", "set_params"], [778, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[780, 2, 1, "", "from_estimator"], [780, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[781, 2, 1, "", "get_n_splits"], [781, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[783, 2, 1, "", "get_n_splits"], [783, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[787, 2, 1, "", "get_n_splits"], [787, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[788, 3, 1, "", "classes_"], [788, 2, 1, "", "decision_function"], [788, 2, 1, "", "fit"], [788, 2, 1, "", "get_params"], [788, 2, 1, "", "inverse_transform"], [788, 3, 1, "", "n_features_in_"], [788, 2, 1, "", "predict"], [788, 2, 1, "", "predict_log_proba"], [788, 2, 1, "", "predict_proba"], [788, 2, 1, "", "score"], [788, 2, 1, "", "score_samples"], [788, 2, 1, "", "set_params"], [788, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[789, 2, 1, "", "get_n_splits"], [789, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[790, 2, 1, "", "get_n_splits"], [790, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[791, 2, 1, "", "get_n_splits"], [791, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[792, 2, 1, "", "get_n_splits"], [792, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[793, 2, 1, "", "get_n_splits"], [793, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[794, 2, 1, "", "get_n_splits"], [794, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[795, 2, 1, "", "get_n_splits"], [795, 2, 1, "", "split"]], "sklearn.multiclass": [[804, 1, 1, "", "OneVsOneClassifier"], [805, 1, 1, "", "OneVsRestClassifier"], [806, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_params"], [804, 3, 1, "", "n_classes_"], [804, 2, 1, "", "partial_fit"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "score"], [804, 2, 1, "", "set_params"]], "sklearn.multiclass.OneVsRestClassifier": [[805, 2, 1, "", "decision_function"], [805, 2, 1, "", "fit"], [805, 2, 1, "", "get_params"], [805, 3, 1, "", "multilabel_"], [805, 3, 1, "", "n_classes_"], [805, 2, 1, "", "partial_fit"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "set_params"]], "sklearn.multiclass.OutputCodeClassifier": [[806, 2, 1, "", "fit"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "score"], [806, 2, 1, "", "set_params"]], "sklearn.multioutput": [[807, 1, 1, "", "ClassifierChain"], [808, 1, 1, "", "MultiOutputClassifier"], [809, 1, 1, "", "MultiOutputRegressor"], [810, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputClassifier": [[808, 2, 1, "", "fit"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "partial_fit"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"]], "sklearn.multioutput.MultiOutputRegressor": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "partial_fit"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"]], "sklearn.multioutput.RegressorChain": [[810, 2, 1, "", "fit"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "score"], [810, 2, 1, "", "set_params"]], "sklearn.naive_bayes": [[811, 1, 1, "", "BernoulliNB"], [812, 1, 1, "", "CategoricalNB"], [813, 1, 1, "", "ComplementNB"], [814, 1, 1, "", "GaussianNB"], [815, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "partial_fit"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_joint_log_proba"], [811, 2, 1, "", "predict_log_proba"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "set_params"]], "sklearn.naive_bayes.CategoricalNB": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "partial_fit"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_joint_log_proba"], [812, 2, 1, "", "predict_log_proba"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"]], "sklearn.naive_bayes.ComplementNB": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "partial_fit"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "predict_joint_log_proba"], [813, 2, 1, "", "predict_log_proba"], [813, 2, 1, "", "predict_proba"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"]], "sklearn.naive_bayes.GaussianNB": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "partial_fit"], [814, 2, 1, "", "predict"], [814, 2, 1, "", "predict_joint_log_proba"], [814, 2, 1, "", "predict_log_proba"], [814, 2, 1, "", "predict_proba"], [814, 2, 1, "", "score"], [814, 2, 1, "", "set_params"]], "sklearn.naive_bayes.MultinomialNB": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "partial_fit"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_joint_log_proba"], [815, 2, 1, "", "predict_log_proba"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"]], "sklearn.neighbors": [[816, 1, 1, "", "BallTree"], [817, 1, 1, "", "KDTree"], [818, 1, 1, "", "KNeighborsClassifier"], [819, 1, 1, "", "KNeighborsRegressor"], [820, 1, 1, "", "KNeighborsTransformer"], [821, 1, 1, "", "KernelDensity"], [822, 1, 1, "", "LocalOutlierFactor"], [823, 1, 1, "", "NearestCentroid"], [824, 1, 1, "", "NearestNeighbors"], [825, 1, 1, "", "NeighborhoodComponentsAnalysis"], [826, 1, 1, "", "RadiusNeighborsClassifier"], [827, 1, 1, "", "RadiusNeighborsRegressor"], [828, 1, 1, "", "RadiusNeighborsTransformer"], [829, 4, 1, "", "kneighbors_graph"], [830, 4, 1, "", "radius_neighbors_graph"], [831, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[816, 2, 1, "", "get_arrays"], [816, 2, 1, "", "get_n_calls"], [816, 2, 1, "", "get_tree_stats"], [816, 2, 1, "", "kernel_density"], [816, 2, 1, "", "query"], [816, 2, 1, "", "query_radius"], [816, 2, 1, "", "reset_n_calls"], [816, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[817, 2, 1, "", "get_arrays"], [817, 2, 1, "", "get_n_calls"], [817, 2, 1, "", "get_tree_stats"], [817, 2, 1, "", "kernel_density"], [817, 2, 1, "", "query"], [817, 2, 1, "", "query_radius"], [817, 2, 1, "", "reset_n_calls"], [817, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "kneighbors"], [818, 2, 1, "", "kneighbors_graph"], [818, 2, 1, "", "predict"], [818, 2, 1, "", "predict_proba"], [818, 2, 1, "", "score"], [818, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsRegressor": [[819, 2, 1, "", "fit"], [819, 2, 1, "", "get_params"], [819, 2, 1, "", "kneighbors"], [819, 2, 1, "", "kneighbors_graph"], [819, 2, 1, "", "predict"], [819, 2, 1, "", "score"], [819, 2, 1, "", "set_params"]], "sklearn.neighbors.KNeighborsTransformer": [[820, 2, 1, "", "fit"], [820, 2, 1, "", "fit_transform"], [820, 2, 1, "", "get_feature_names_out"], [820, 2, 1, "", "get_params"], [820, 2, 1, "", "kneighbors"], [820, 2, 1, "", "kneighbors_graph"], [820, 2, 1, "", "set_output"], [820, 2, 1, "", "set_params"], [820, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "sample"], [821, 2, 1, "", "score"], [821, 2, 1, "", "score_samples"], [821, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[822, 2, 1, "", "decision_function"], [822, 2, 1, "", "fit"], [822, 2, 1, "", "fit_predict"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "kneighbors"], [822, 2, 1, "", "kneighbors_graph"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "score_samples"], [822, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestNeighbors": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "kneighbors"], [824, 2, 1, "", "kneighbors_graph"], [824, 2, 1, "", "radius_neighbors"], [824, 2, 1, "", "radius_neighbors_graph"], [824, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[826, 2, 1, "", "fit"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "radius_neighbors"], [826, 2, 1, "", "radius_neighbors_graph"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[827, 2, 1, "", "fit"], [827, 2, 1, "", "get_params"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "radius_neighbors"], [827, 2, 1, "", "radius_neighbors_graph"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "radius_neighbors"], [828, 2, 1, "", "radius_neighbors_graph"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "transform"]], "sklearn.neural_network": [[832, 1, 1, "", "BernoulliRBM"], [833, 1, 1, "", "MLPClassifier"], [834, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "fit_transform"], [832, 2, 1, "", "get_feature_names_out"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "gibbs"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "score_samples"], [832, 2, 1, "", "set_output"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_log_proba"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"]], "sklearn.neural_network.MLPRegressor": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"]], "sklearn.pipeline": [[835, 1, 1, "", "FeatureUnion"], [836, 1, 1, "", "Pipeline"], [837, 4, 1, "", "make_pipeline"], [838, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_params"], [835, 3, 1, "", "n_features_in_"], [835, 2, 1, "", "set_output"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[836, 3, 1, "", "classes_"], [836, 2, 1, "", "decision_function"], [836, 3, 1, "", "feature_names_in_"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_predict"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_feature_names_out"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "inverse_transform"], [836, 3, 1, "", "n_features_in_"], [836, 3, 1, "", "named_steps"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "score_samples"], [836, 2, 1, "", "set_output"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.preprocessing": [[839, 1, 1, "", "Binarizer"], [840, 1, 1, "", "FunctionTransformer"], [841, 1, 1, "", "KBinsDiscretizer"], [842, 1, 1, "", "KernelCenterer"], [843, 1, 1, "", "LabelBinarizer"], [844, 1, 1, "", "LabelEncoder"], [845, 1, 1, "", "MaxAbsScaler"], [846, 1, 1, "", "MinMaxScaler"], [847, 1, 1, "", "MultiLabelBinarizer"], [848, 1, 1, "", "Normalizer"], [849, 1, 1, "", "OneHotEncoder"], [850, 1, 1, "", "OrdinalEncoder"], [851, 1, 1, "", "PolynomialFeatures"], [852, 1, 1, "", "PowerTransformer"], [853, 1, 1, "", "QuantileTransformer"], [854, 1, 1, "", "RobustScaler"], [855, 1, 1, "", "SplineTransformer"], [856, 1, 1, "", "StandardScaler"], [857, 4, 1, "", "add_dummy_feature"], [858, 4, 1, "", "binarize"], [859, 4, 1, "", "label_binarize"], [860, 4, 1, "", "maxabs_scale"], [861, 4, 1, "", "minmax_scale"], [862, 4, 1, "", "normalize"], [863, 4, 1, "", "power_transform"], [864, 4, 1, "", "quantile_transform"], [865, 4, 1, "", "robust_scale"], [866, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "inverse_transform"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "inverse_transform"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "inverse_transform"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "inverse_transform"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "inverse_transform"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "inverse_transform"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_params"], [849, 3, 1, "", "infrequent_categories_"], [849, 2, 1, "", "inverse_transform"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "inverse_transform"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_params"], [851, 3, 1, "", "powers_"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "fit_transform"], [852, 2, 1, "", "get_feature_names_out"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "inverse_transform"], [852, 2, 1, "", "set_output"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "fit_transform"], [853, 2, 1, "", "get_feature_names_out"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "inverse_transform"], [853, 2, 1, "", "set_output"], [853, 2, 1, "", "set_params"], [853, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "inverse_transform"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "inverse_transform"], [856, 2, 1, "", "partial_fit"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.random_projection": [[867, 1, 1, "", "GaussianRandomProjection"], [868, 1, 1, "", "SparseRandomProjection"], [869, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[870, 1, 1, "", "LabelPropagation"], [871, 1, 1, "", "LabelSpreading"], [872, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "predict_proba"], [870, 2, 1, "", "score"], [870, 2, 1, "", "set_params"]], "sklearn.semi_supervised.LabelSpreading": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "predict"], [871, 2, 1, "", "predict_proba"], [871, 2, 1, "", "score"], [871, 2, 1, "", "set_params"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[872, 2, 1, "", "decision_function"], [872, 2, 1, "", "fit"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "predict"], [872, 2, 1, "", "predict_log_proba"], [872, 2, 1, "", "predict_proba"], [872, 2, 1, "", "score"], [872, 2, 1, "", "set_params"]], "sklearn.svm": [[875, 1, 1, "", "LinearSVC"], [876, 1, 1, "", "LinearSVR"], [877, 1, 1, "", "NuSVC"], [878, 1, 1, "", "NuSVR"], [879, 1, 1, "", "OneClassSVM"], [880, 1, 1, "", "SVC"], [881, 1, 1, "", "SVR"], [882, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[875, 2, 1, "", "decision_function"], [875, 2, 1, "", "densify"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "predict"], [876, 2, 1, "", "score"], [876, 2, 1, "", "set_params"]], "sklearn.svm.NuSVC": [[877, 3, 1, "", "coef_"], [877, 2, 1, "", "decision_function"], [877, 2, 1, "", "fit"], [877, 2, 1, "", "get_params"], [877, 3, 1, "", "n_support_"], [877, 2, 1, "", "predict"], [877, 2, 1, "", "predict_log_proba"], [877, 2, 1, "", "predict_proba"], [877, 3, 1, "", "probA_"], [877, 3, 1, "", "probB_"], [877, 2, 1, "", "score"], [877, 2, 1, "", "set_params"]], "sklearn.svm.NuSVR": [[878, 3, 1, "", "coef_"], [878, 2, 1, "", "fit"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "n_support_"], [878, 2, 1, "", "predict"], [878, 2, 1, "", "score"], [878, 2, 1, "", "set_params"]], "sklearn.svm.OneClassSVM": [[879, 3, 1, "", "coef_"], [879, 2, 1, "", "decision_function"], [879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_predict"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "n_support_"], [879, 2, 1, "", "predict"], [879, 2, 1, "", "score_samples"], [879, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[880, 3, 1, "", "coef_"], [880, 2, 1, "", "decision_function"], [880, 2, 1, "", "fit"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "n_support_"], [880, 2, 1, "", "predict"], [880, 2, 1, "", "predict_log_proba"], [880, 2, 1, "", "predict_proba"], [880, 3, 1, "", "probA_"], [880, 3, 1, "", "probB_"], [880, 2, 1, "", "score"], [880, 2, 1, "", "set_params"]], "sklearn.svm.SVR": [[881, 3, 1, "", "coef_"], [881, 2, 1, "", "fit"], [881, 2, 1, "", "get_params"], [881, 3, 1, "", "n_support_"], [881, 2, 1, "", "predict"], [881, 2, 1, "", "score"], [881, 2, 1, "", "set_params"]], "sklearn.tree": [[883, 1, 1, "", "DecisionTreeClassifier"], [884, 1, 1, "", "DecisionTreeRegressor"], [885, 1, 1, "", "ExtraTreeClassifier"], [886, 1, 1, "", "ExtraTreeRegressor"], [887, 4, 1, "", "export_graphviz"], [888, 4, 1, "", "export_text"], [889, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[883, 2, 1, "", "apply"], [883, 2, 1, "", "cost_complexity_pruning_path"], [883, 2, 1, "", "decision_path"], [883, 3, 1, "", "feature_importances_"], [883, 2, 1, "", "fit"], [883, 2, 1, "", "get_depth"], [883, 2, 1, "", "get_n_leaves"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "predict"], [883, 2, 1, "", "predict_log_proba"], [883, 2, 1, "", "predict_proba"], [883, 2, 1, "", "score"], [883, 2, 1, "", "set_params"]], "sklearn.tree.DecisionTreeRegressor": [[884, 2, 1, "", "apply"], [884, 2, 1, "", "cost_complexity_pruning_path"], [884, 2, 1, "", "decision_path"], [884, 3, 1, "", "feature_importances_"], [884, 2, 1, "", "fit"], [884, 2, 1, "", "get_depth"], [884, 2, 1, "", "get_n_leaves"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "predict"], [884, 2, 1, "", "score"], [884, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeClassifier": [[885, 2, 1, "", "apply"], [885, 2, 1, "", "cost_complexity_pruning_path"], [885, 2, 1, "", "decision_path"], [885, 3, 1, "", "feature_importances_"], [885, 2, 1, "", "fit"], [885, 2, 1, "", "get_depth"], [885, 2, 1, "", "get_n_leaves"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "predict"], [885, 2, 1, "", "predict_log_proba"], [885, 2, 1, "", "predict_proba"], [885, 2, 1, "", "score"], [885, 2, 1, "", "set_params"]], "sklearn.tree.ExtraTreeRegressor": [[886, 2, 1, "", "apply"], [886, 2, 1, "", "cost_complexity_pruning_path"], [886, 2, 1, "", "decision_path"], [886, 3, 1, "", "feature_importances_"], [886, 2, 1, "", "fit"], [886, 2, 1, "", "get_depth"], [886, 2, 1, "", "get_n_leaves"], [886, 2, 1, "", "get_params"], [886, 2, 1, "", "predict"], [886, 2, 1, "", "score"], [886, 2, 1, "", "set_params"]], "sklearn.utils": [[890, 1, 1, "", "Bunch"], [891, 4, 1, "", "_safe_indexing"], [893, 4, 1, "", "as_float_array"], [894, 4, 1, "", "assert_all_finite"], [895, 4, 1, "", "check_X_y"], [896, 4, 1, "", "check_array"], [897, 4, 1, "", "check_consistent_length"], [898, 4, 1, "", "check_random_state"], [899, 4, 1, "", "check_scalar"], [902, 4, 1, "", "deprecated"], [908, 4, 1, "", "estimator_html_repr"], [915, 4, 1, "", "gen_batches"], [916, 4, 1, "", "gen_even_slices"], [918, 4, 1, "", "indexable"], [924, 4, 1, "", "murmurhash3_32"], [925, 4, 1, "", "parallel_backend"], [927, 4, 1, "", "register_parallel_backend"], [928, 4, 1, "", "resample"], [929, 4, 1, "", "safe_mask"], [930, 4, 1, "", "safe_sqr"], [931, 4, 1, "", "shuffle"]], "sklearn.utils.Bunch": [[890, 2, 1, "", "clear"], [890, 2, 1, "", "copy"], [890, 2, 1, "", "fromkeys"], [890, 2, 1, "", "get"], [890, 2, 1, "", "items"], [890, 2, 1, "", "keys"], [890, 2, 1, "", "pop"], [890, 2, 1, "", "popitem"], [890, 2, 1, "", "setdefault"], [890, 2, 1, "", "update"], [890, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[892, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[900, 4, 1, "", "compute_class_weight"], [901, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[903, 4, 1, "", "all_displays"], [904, 4, 1, "", "all_estimators"], [905, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[906, 4, 1, "", "check_estimator"], [907, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[909, 4, 1, "", "density"], [910, 4, 1, "", "fast_logdet"], [911, 4, 1, "", "randomized_range_finder"], [912, 4, 1, "", "randomized_svd"], [913, 4, 1, "", "safe_sparse_dot"], [914, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[917, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metaestimators": [[919, 4, 1, "", "available_if"], [920, 4, 1, "", "if_delegate_has_method"]], "sklearn.utils.multiclass": [[921, 4, 1, "", "is_multilabel"], [922, 4, 1, "", "type_of_target"], [923, 4, 1, "", "unique_labels"]], "sklearn.utils.random": [[926, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[932, 4, 1, "", "incr_mean_variance_axis"], [933, 4, 1, "", "inplace_column_scale"], [934, 4, 1, "", "inplace_csr_column_scale"], [935, 4, 1, "", "inplace_row_scale"], [936, 4, 1, "", "inplace_swap_column"], [937, 4, 1, "", "inplace_swap_row"], [938, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[939, 4, 1, "", "inplace_csr_row_normalize_l1"], [940, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[941, 4, 1, "", "check_is_fitted"], [942, 4, 1, "", "check_memory"], [943, 4, 1, "", "check_symmetric"], [944, 4, 1, "", "column_or_1d"], [945, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 377], "u": 0, "histori": [0, 996], "govern": [0, 380], "author": [0, 998], "contributor": [0, 366, 367, 380, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "experi": [0, 37, 366, 380], "team": [0, 366, 380], "commun": [0, 367, 380], "emeritu": 0, "core": [0, 8, 356, 366, 370, 372, 377, 380, 399, 959], "develop": [0, 365, 368, 369, 370, 372, 373, 374, 375, 380, 946], "cite": 0, "scikit": [0, 251, 306, 307, 308, 309, 310, 311, 353, 354, 365, 368, 370, 371, 377, 380, 382, 975, 977, 978, 981, 983, 984, 989, 992], "learn": [0, 5, 12, 50, 95, 98, 148, 164, 166, 167, 172, 216, 217, 218, 219, 231, 251, 258, 286, 293, 306, 307, 308, 309, 310, 311, 314, 315, 316, 353, 354, 356, 363, 365, 367, 368, 370, 371, 377, 380, 382, 390, 396, 398, 952, 954, 962, 970, 975, 977, 978, 979, 981, 983, 984, 986, 989, 990, 991, 992, 993], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 85, 100, 104, 229, 367, 368, 377, 390, 969, 974, 977], "infrastructur": 0, "support": [0, 25, 119, 164, 190, 306, 307, 308, 309, 311, 321, 324, 333, 377, 382, 387, 389, 390, 398, 972, 980, 990, 1004], "exampl": [3, 6, 9, 53, 58, 74, 87, 102, 125, 156, 164, 192, 193, 331, 335, 356, 361, 362, 371, 377, 381, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 405, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 441, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 482, 484, 488, 489, 490, 491, 492, 493, 497, 498, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 559, 560, 562, 565, 566, 567, 568, 569, 571, 572, 575, 577, 578, 580, 582, 583, 584, 586, 588, 589, 591, 592, 593, 595, 596, 597, 600, 601, 603, 605, 606, 608, 609, 610, 611, 612, 613, 617, 618, 619, 621, 622, 623, 624, 626, 627, 630, 631, 633, 634, 635, 636, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 666, 667, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 695, 696, 697, 704, 706, 711, 714, 715, 718, 719, 722, 725, 726, 727, 729, 730, 732, 734, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 807, 809, 811, 813, 814, 815, 818, 819, 820, 821, 822, 823, 825, 829, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 861, 864, 868, 869, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 889, 890, 898, 907, 909, 916, 919, 931, 941, 946, 949, 951, 952, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 983, 989, 990, 991, 995, 998], "base": [3, 4, 84, 116, 117, 146, 164, 231, 306, 307, 309, 311, 367, 390, 391, 395, 398, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 953, 965, 1007, 1008, 1010, 1011, 1012, 1013], "real": [3, 9, 74, 109, 164, 362], "world": [3, 74, 164, 362], "dataset": [3, 4, 5, 8, 24, 25, 27, 32, 34, 44, 57, 61, 69, 84, 87, 88, 89, 90, 91, 95, 104, 118, 119, 129, 135, 136, 149, 151, 153, 154, 156, 158, 164, 166, 167, 175, 178, 185, 196, 198, 205, 214, 217, 218, 225, 230, 235, 254, 262, 263, 318, 319, 323, 339, 345, 359, 360, 361, 362, 363, 364, 371, 377, 390, 401, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 983, 989, 990, 992, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "time": [4, 15, 22, 28, 35, 67, 75, 82, 86, 92, 107, 120, 133, 139, 147, 159, 163, 170, 173, 190, 215, 223, 230, 231, 239, 248, 272, 275, 290, 296, 304, 312, 320, 337, 339, 342, 349, 395], "relat": [4, 8, 361, 367, 965, 977, 1005], "featur": [4, 51, 54, 73, 100, 115, 116, 117, 119, 123, 126, 127, 140, 142, 144, 145, 146, 164, 168, 169, 172, 175, 190, 193, 214, 230, 235, 257, 295, 299, 300, 303, 306, 308, 309, 329, 339, 340, 354, 356, 367, 370, 390, 392, 398, 399, 400, 947, 965, 967, 974, 991, 992, 1001, 1002, 1003, 1004, 1005], "engin": [4, 168, 977, 981], "data": [4, 7, 9, 12, 17, 24, 26, 38, 47, 49, 50, 56, 57, 62, 63, 65, 66, 69, 74, 77, 79, 81, 84, 85, 96, 97, 100, 101, 102, 103, 109, 111, 116, 117, 123, 125, 129, 142, 145, 146, 154, 155, 157, 162, 168, 169, 172, 176, 180, 182, 189, 190, 226, 231, 234, 237, 246, 251, 253, 257, 262, 263, 265, 266, 269, 288, 295, 298, 302, 314, 326, 329, 333, 340, 341, 350, 354, 356, 362, 371, 377, 379, 391, 392, 394, 395, 400, 401, 967, 971, 981, 983, 986, 989, 991, 992], "explor": 4, "bike": [4, 167], "share": [4, 167], "demand": 4, "cross": [4, 83, 84, 135, 136, 145, 164, 185, 251, 252, 254, 255, 259, 261, 266, 329, 350, 367, 390, 394, 395, 946, 953, 987], "valid": [4, 135, 136, 145, 185, 229, 251, 252, 254, 255, 259, 261, 266, 271, 329, 350, 354, 368, 375, 390, 395, 941, 942, 943, 944, 945, 946, 952, 953, 960, 987], "gradient": [4, 119, 120, 121, 122, 123, 124, 167, 196, 204, 210, 306, 307, 309, 311, 398, 953, 971], "boost": [4, 119, 120, 121, 122, 123, 124, 167, 196, 306, 307, 309, 311, 398], "naiv": [4, 24, 25, 390, 959], "linear": [4, 25, 33, 34, 122, 149, 164, 166, 174, 175, 192, 196, 199, 202, 217, 218, 230, 307, 325, 332, 333, 354, 375, 377, 390, 951, 953, 954, 955, 967, 990], "regress": [4, 72, 74, 84, 85, 111, 122, 123, 132, 149, 154, 155, 156, 157, 175, 176, 179, 185, 187, 188, 189, 192, 194, 196, 198, 211, 213, 214, 228, 231, 288, 333, 346, 347, 363, 390, 392, 398, 401, 948, 950, 953, 957, 958, 960, 961, 971, 972, 973, 990], "step": [4, 236, 378, 392], "categori": [4, 310, 967], "trigonometr": 4, "period": [4, 197], "spline": [4, 197, 309, 967], "qualit": 4, "analysi": [4, 33, 34, 59, 95, 101, 103, 106, 122, 241, 258, 259, 266, 284, 285, 286, 339, 390, 394, 396, 951, 960, 974, 991, 992], "impact": [4, 60, 1013], "model": [4, 7, 11, 56, 74, 84, 96, 103, 109, 116, 117, 119, 123, 125, 145, 146, 149, 154, 164, 166, 167, 168, 172, 174, 175, 184, 185, 190, 196, 199, 214, 226, 231, 235, 240, 242, 246, 247, 249, 255, 256, 258, 263, 288, 295, 307, 309, 333, 339, 354, 368, 377, 378, 385, 386, 390, 395, 946, 952, 953, 956, 957, 959, 961, 962, 983, 987, 990, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "predict": [4, 10, 24, 85, 111, 122, 132, 150, 176, 196, 231, 234, 252, 263, 314, 354, 377, 378, 394, 395, 401, 957, 968, 983, 990], "pairwis": [4, 256, 390, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 955], "interact": [4, 167, 311, 398, 990], "polynomi": [4, 172, 175, 176, 197, 949, 953, 955, 967, 990], "non": [4, 14, 95, 122, 191, 196, 217, 261, 325, 332, 333, 396, 953, 967], "kernel": [4, 5, 100, 149, 154, 155, 157, 158, 164, 171, 172, 230, 231, 280, 281, 289, 308, 322, 325, 330, 333, 390, 396, 397, 401, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 949, 950, 955, 967, 972, 990], "conclud": [4, 109, 221], "remark": [4, 56, 109, 221, 229], "imag": [5, 47, 50, 53, 65, 98, 361, 390, 399, 561, 562, 563, 564, 565], "denois": [5, 98], "us": [5, 6, 12, 17, 48, 95, 96, 98, 126, 127, 129, 183, 199, 210, 212, 256, 260, 265, 299, 333, 339, 340, 350, 356, 371, 372, 374, 377, 395, 396, 398, 399, 400, 405, 413, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 439, 441, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 482, 484, 488, 489, 490, 491, 492, 493, 497, 498, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 559, 560, 562, 565, 566, 567, 568, 569, 571, 572, 575, 577, 578, 580, 582, 583, 584, 586, 588, 589, 591, 592, 593, 595, 596, 597, 600, 601, 603, 605, 606, 608, 609, 610, 611, 612, 613, 617, 618, 619, 621, 622, 623, 624, 626, 627, 630, 631, 633, 634, 635, 636, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 666, 667, 668, 669, 670, 671, 675, 678, 679, 680, 681, 682, 683, 684, 685, 687, 690, 691, 695, 696, 697, 704, 706, 711, 714, 715, 718, 719, 722, 725, 726, 727, 729, 730, 732, 734, 755, 756, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 807, 809, 811, 813, 814, 815, 818, 819, 820, 821, 822, 823, 825, 829, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 861, 864, 868, 869, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 889, 890, 898, 907, 909, 916, 919, 931, 941, 951, 953, 954, 957, 961, 971, 972, 973, 981, 990, 992, 1008], "pca": [5, 57, 72, 95, 96, 99, 100, 101, 102, 103, 104, 396, 519, 974, 991], "refer": [5, 11, 25, 27, 79, 80, 98, 113, 168, 172, 184, 256, 261, 262, 289, 361, 362, 364, 388, 389, 390, 391, 393, 394, 395, 396, 398, 399, 400, 401, 946, 947, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973], "load": [5, 7, 17, 50, 57, 117, 119, 123, 135, 146, 168, 189, 214, 218, 226, 230, 237, 257, 265, 266, 326, 329, 339, 340, 341, 360, 361, 371, 377, 399, 983, 991, 992], "via": [5, 53, 184, 185, 214, 398, 949], "openml": [5, 306, 361], "basi": [5, 158, 401, 949, 953, 990], "reconstruct": [5, 13, 98], "test": [5, 77, 141, 259, 262, 269, 339, 344, 365, 367, 368, 374, 375, 395, 983, 990, 992], "face": [6, 50, 95, 233, 362, 981, 988], "recognit": [6, 362, 364, 988], "eigenfac": [6, 95, 988], "svm": [6, 138, 142, 143, 172, 210, 230, 309, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 390, 875, 876, 877, 878, 879, 880, 881, 882, 953, 963, 971, 990, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "complex": [7, 227, 236, 255, 258, 316, 344, 354, 391, 953, 954, 960, 961, 971, 972, 973], "influenc": [7, 10, 354], "benchmark": [7, 10, 57, 339], "choos": [7, 946, 983, 985, 987], "paramet": [7, 77, 122, 254, 308, 326, 334, 367, 368, 378, 379, 390, 392, 398, 946, 953, 957, 972, 983, 987, 992], "run": [7, 57, 260], "code": [7, 95, 105, 367, 368, 371, 372, 374, 396, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "plot": [7, 8, 10, 24, 30, 34, 38, 41, 47, 49, 50, 56, 62, 63, 65, 66, 77, 81, 84, 90, 91, 96, 97, 101, 109, 111, 118, 123, 125, 129, 130, 131, 132, 135, 145, 162, 167, 175, 176, 180, 188, 189, 190, 200, 201, 205, 218, 226, 230, 234, 235, 237, 246, 252, 253, 258, 260, 263, 265, 269, 271, 295, 306, 308, 309, 314, 323, 324, 329, 339, 345, 373, 390, 952, 964, 995], "result": [7, 8, 38, 47, 49, 50, 56, 57, 62, 63, 66, 77, 79, 81, 96, 97, 109, 111, 129, 132, 162, 172, 201, 231, 234, 260, 269, 333, 340, 350, 946], "conclus": [7, 149, 185], "out": [8, 121, 356, 374, 395, 399, 946, 953, 959], "classif": [8, 26, 29, 30, 32, 33, 69, 90, 137, 150, 151, 152, 153, 157, 164, 212, 232, 259, 262, 263, 266, 279, 287, 295, 306, 313, 318, 339, 363, 390, 398, 401, 953, 957, 958, 960, 961, 971, 972, 973, 990, 992], "text": [8, 164, 227, 257, 318, 338, 339, 340, 341, 362, 390, 399, 566, 567, 568, 569, 992], "document": [8, 19, 164, 308, 309, 338, 339, 340, 367, 977, 978, 980, 998, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "reuter": 8, "routin": [8, 355, 375], "main": [8, 196], "outlier": [9, 178, 213, 225, 234, 282, 283, 298, 390, 953, 963, 967], "detect": [9, 225, 234, 253, 282, 283, 957, 963, 972], "set": [9, 74, 77, 102, 129, 162, 263, 326, 344, 377, 395, 953, 983, 989, 990, 992], "first": [9, 37, 367], "second": [9, 37], "latenc": [10, 354], "helper": [10, 158, 218, 375], "function": [10, 34, 94, 158, 186, 200, 201, 206, 218, 234, 251, 269, 308, 329, 341, 375, 390, 395, 398, 401, 949, 953, 957, 972, 990], "bulk": [10, 354], "atom": [10, 354], "speed": [10, 372], "variou": [10, 52, 203, 222], "regressor": [10, 111, 122, 175, 306, 309, 390, 398], "n_featur": 10, "throughput": [10, 354], "speci": [11, 289], "distribut": [11, 214, 217, 289, 302, 382, 954, 967], "visual": [12, 57, 106, 226, 231, 237, 251, 294, 307, 326, 390, 391, 392, 957, 995], "stock": [12, 988], "market": [12, 988], "structur": [12, 39, 47, 66, 157, 316, 348, 988], "retriev": [12, 306], "from": [12, 98, 146, 168, 306, 355, 361, 365, 377, 390, 399, 953, 957, 983, 990, 991, 992, 1008], "internet": 12, "graph": [12, 306, 375, 377, 391, 399, 917], "cluster": [12, 19, 21, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 52, 55, 57, 59, 62, 63, 64, 65, 66, 95, 164, 310, 340, 363, 388, 390, 391, 396, 402, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 692, 693, 957, 991, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "affin": [12, 38, 391, 955], "propag": [12, 38, 314, 315, 316, 391, 970], "embed": [12, 52, 217, 218, 229, 286, 398, 954], "2d": [12, 52, 97, 104, 167], "space": [12, 100, 392, 946, 954], "compress": [13, 53, 354, 400], "sens": [13, 400], "tomographi": 13, "l1": [13, 187, 189, 212, 334, 400], "prior": [13, 158, 241], "lasso": [13, 180, 181, 182, 183, 184, 185, 190, 307, 630, 953], "topic": 14, "extract": [14, 73, 98, 214, 257, 340, 354, 356, 390, 399, 992], "neg": [14, 95, 191, 396, 953], "matrix": [14, 17, 157, 177, 250, 390, 391, 396, 957, 972], "factor": [14, 95, 103, 106, 282, 283, 396, 963], "latent": [14, 84, 396], "dirichlet": [14, 396, 956], "alloc": [14, 396], "comput": [15, 17, 22, 28, 35, 38, 47, 49, 62, 63, 66, 67, 75, 77, 82, 86, 92, 107, 133, 139, 147, 159, 163, 170, 173, 189, 201, 215, 223, 239, 248, 269, 272, 275, 290, 296, 304, 312, 320, 337, 342, 349, 353, 354, 391, 392, 395, 964], "libsvm": [16, 361], "gui": 16, "wikipedia": 17, "princip": [17, 85, 101, 396, 974, 991], "eigenvector": 17, "download": [17, 129, 162, 361], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 382, 399, 992], "adjac": 17, "singular": [17, 396], "vector": [17, 25, 53, 164, 321, 324, 333, 339, 341, 362, 390, 399, 972, 990, 991], "random": [17, 95, 114, 127, 128, 168, 169, 229, 237, 262, 264, 350, 368, 375, 390, 395, 396, 398, 926, 946, 953, 969, 974], "svd": [17, 95, 396], "central": 17, "score": [17, 84, 120, 135, 145, 162, 175, 246, 255, 262, 263, 329, 391, 395, 952, 957, 972, 987], "biclust": [18, 19, 20, 164, 363, 388, 390], "spectral": [19, 20, 21, 65, 217, 388, 391, 954], "co": [19, 21, 388], "algorithm": [19, 20, 21, 38, 44, 49, 62, 63, 64, 217, 225, 372, 377, 951, 953, 956, 958, 960, 961, 965, 973, 990], "A": [20, 21, 47, 57, 62, 196, 309, 366, 372, 385, 395, 986, 989], "demo": [20, 21, 38, 47, 49, 57, 62, 64], "calibr": [23, 24, 25, 26, 27, 122, 164, 196, 389, 390, 417, 418, 419, 1007, 1008, 1010, 1011, 1012, 1013], "probabl": [24, 25, 26, 30, 131, 152, 389, 390, 398, 972], "classifi": [24, 25, 27, 31, 132, 179, 236, 253, 274, 306, 319, 323, 326, 339, 348, 389, 390, 398, 951, 960, 990, 992], "gener": [24, 34, 38, 47, 49, 56, 62, 63, 65, 66, 77, 79, 81, 90, 91, 96, 97, 98, 116, 125, 142, 145, 149, 155, 156, 158, 164, 174, 175, 176, 180, 190, 196, 198, 231, 246, 253, 269, 288, 295, 307, 314, 333, 350, 363, 367, 379, 390, 396, 398, 953, 967, 978, 987], "synthet": [24, 74, 175, 253, 371], "gaussian": [24, 25, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 240, 241, 242, 245, 246, 247, 298, 390, 401, 956, 959, 967, 969], "bay": [24, 25, 390, 959], "curv": [25, 27, 176, 231, 237, 247, 253, 258, 263, 265, 271, 389, 952], "summari": [25, 185, 340, 341, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005], "3": [26, 179, 390, 992, 1006, 1007, 1012], "class": [26, 37, 110, 112, 131, 179, 205, 210, 259, 263, 265, 309, 325, 328, 379, 390, 395, 398, 399, 956, 957, 960, 963, 971, 972, 998, 999], "fit": [26, 56, 96, 103, 116, 117, 120, 122, 123, 154, 175, 176, 177, 190, 193, 198, 202, 263, 288, 333, 350, 368, 378, 398, 959, 963, 983], "compar": [26, 42, 44, 61, 77, 84, 120, 128, 142, 172, 175, 182, 198, 203, 225, 231, 256, 264, 284, 293, 298, 377], "comparison": [27, 31, 43, 63, 79, 104, 119, 141, 149, 217, 218, 231, 256, 267, 341, 391, 401, 953], "recogn": 32, "hand": 32, "written": 32, "digit": [32, 52, 57, 88, 136, 137, 218, 295, 314, 315, 364, 989], "normal": [33, 172, 196, 298, 302, 390, 848, 862, 957, 967], "ledoit": [33, 78, 393], "wolf": [33, 78, 393], "oa": [33, 77, 78, 404, 454], "discrimin": [33, 34, 390, 951], "quadrat": [34, 401, 951], "covari": [34, 76, 77, 79, 80, 81, 164, 243, 390, 393, 404, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 951, 1006, 1010, 1011, 1012], "ellipsoid": [34, 242], "colormap": 34, "adjust": 37, "chanc": 37, "perform": [37, 43, 259, 308, 310, 314, 340, 354, 367, 372, 391, 395, 399, 992], "evalu": [37, 57, 60, 80, 196, 234, 257, 260, 295, 340, 378, 386, 388, 391, 395, 398, 946, 952, 957, 992], "defin": [37, 47, 57, 66, 217, 234, 251, 253, 254, 341, 957], "list": [37, 980], "metric": [37, 40, 122, 260, 390, 391, 395, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 946, 954, 955, 957, 960, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "fix": [37, 998, 1001, 1002, 1003, 1004, 1005, 1011], "ground": [37, 175], "truth": [37, 175], "label": [37, 263, 314, 315, 316, 362, 363, 391, 395, 398, 957, 968, 970], "grow": 37, "number": [37, 59, 119, 145, 268, 354, 368, 946, 947, 956], "vari": [37, 292, 317, 391], "sampl": [38, 62, 77, 96, 97, 142, 177, 209, 231, 257, 269, 288, 307, 333, 336, 361, 375, 379, 390, 391, 398, 953], "agglom": [39, 40, 52, 991], "without": [39, 120, 284, 339], "differ": [40, 44, 61, 77, 158, 167, 298, 301, 323, 368, 377, 391, 953, 990], "hierarch": [41, 47, 61, 66, 391, 991], "dendrogram": 41, "birch": [42, 391, 422], "minibatchkmean": [42, 63, 95, 428], "bisect": [43, 391], "k": [43, 45, 48, 56, 57, 58, 60, 63, 66, 84, 340, 391, 395, 957, 960, 967, 990, 991], "mean": [43, 45, 48, 56, 57, 58, 60, 62, 63, 116, 117, 162, 168, 340, 391, 957, 967, 991], "regular": [43, 77, 124, 166, 189, 200, 201, 292, 334, 953, 961], "toi": [44, 61, 225, 364], "segment": [46, 65], "pictur": 46, "greek": 46, "coin": [46, 47], "region": [46, 256], "ward": [47, 66, 391, 991], "an": [47, 58, 162, 177, 185, 234, 286, 306, 310, 377, 399, 946, 963, 983, 989, 990], "color": 48, "quantiz": [48, 53, 991], "dbscan": [49, 391, 402, 424], "onlin": [50, 203, 309, 310, 971], "dictionari": [50, 95, 98, 105, 396], "part": [50, 400], "agglomer": [51, 54, 974, 991], "origin": [53, 100, 262, 286, 298], "encod": [53, 119, 967, 968], "strategi": [53, 254, 293, 301, 356, 390, 391, 957], "memori": [53, 354, 372, 374, 391], "footprint": 53, "v": [54, 66, 77, 78, 80, 85, 100, 145, 168, 178, 188, 214, 259, 265, 269, 270, 344, 391, 947, 967, 983], "univari": [54, 84, 142, 329, 400, 947], "select": [54, 59, 71, 103, 135, 140, 142, 145, 146, 164, 184, 185, 190, 246, 249, 329, 377, 386, 390, 395, 400, 946, 953, 956, 987, 1004], "induct": 55, "demonstr": [56, 260, 301, 314], "assumpt": 56, "possibl": [56, 371], "solut": 56, "final": [56, 149], "handwritten": [57, 218, 364], "our": [57, 251, 254, 367], "reduc": [57, 354], "initi": [58, 60, 244, 956], "silhouett": [59, 391], "kmean": [59, 63, 307, 426], "empir": [60, 80, 229, 393], "linkag": [61, 391], "method": [61, 73, 84, 108, 149, 164, 217, 219, 244, 273, 379, 390, 391, 398, 949, 956, 963, 964, 991], "shift": [62, 391], "meanshift": [62, 427], "establish": [63, 172], "pariti": 63, "between": [63, 267], "optic": [64, 364, 391, 429], "four": 65, "circl": 65, "two": [65, 112, 182, 235, 256], "unstructur": 66, "we": 66, "ar": [66, 309, 377], "nearest": [66, 164, 276, 277, 278, 279, 284, 287, 288, 306, 390, 947, 960, 990], "neighbor": [66, 164, 217, 276, 277, 278, 279, 284, 288, 306, 390, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 947, 954, 960, 990, 1006, 1007, 1008, 1010, 1011, 1012, 1013], "10": [66, 998], "pipelin": [68, 69, 71, 72, 129, 143, 164, 166, 227, 236, 257, 329, 368, 377, 378, 390, 392, 400, 835, 836, 837, 838, 974, 988, 992, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "composit": [68, 164, 390, 392, 946], "estim": [68, 76, 77, 78, 79, 80, 81, 113, 119, 121, 128, 155, 162, 164, 175, 199, 202, 227, 233, 234, 245, 264, 280, 281, 289, 306, 307, 308, 311, 350, 368, 377, 378, 379, 387, 390, 392, 393, 395, 397, 398, 401, 946, 947, 951, 953, 956, 957, 972, 977, 985, 987, 989, 999, 1006, 1007, 1008], "column": [69, 70, 236], "transform": [69, 70, 71, 74, 84, 115, 127, 236, 308, 309, 310, 359, 377, 378, 392, 394, 395, 960, 967, 968, 969, 991], "heterogen": [69, 392], "sourc": [69, 96, 365], "20": [69, 339, 362, 992, 1006], "newsgroup": [69, 339, 362, 992], "creat": [69, 101, 103, 226, 263, 329, 377], "mix": 70, "type": [70, 241, 368, 379, 391, 983], "dimension": [71, 217, 220, 236, 285, 340, 951, 954, 960, 974, 990], "reduct": [71, 217, 221, 236, 285, 340, 951, 960, 974], "gridsearchcv": [71, 135, 260, 398, 774], "illustr": [71, 153, 158, 286, 401], "cach": [71, 278, 392], "within": 71, "chain": [72, 236, 274, 378, 392], "logist": [72, 179, 186, 187, 188, 189, 211, 212, 953, 990], "concaten": 73, "multipl": [73, 236, 260, 350, 373, 395, 946, 947, 957, 1006, 1007], "effect": [74, 222, 298, 317, 344, 960], "target": [74, 156, 214, 377, 379, 392, 394, 958, 968], "shrinkag": [77, 393, 398, 951, 990], "ledoitwolf": [77, 452], "max": [77, 957], "likelihood": [77, 175, 176, 259, 957, 962], "approach": [77, 185, 256], "robust": [79, 80, 175, 199, 202, 350, 390, 393, 946, 953], "mahalanobi": [79, 960], "distanc": [79, 390, 960], "relev": [79, 953], "minimum": [80, 393], "determin": [80, 393, 953, 957], "spars": [81, 95, 105, 166, 180, 182, 211, 306, 339, 340, 375, 393, 396, 400, 967, 969, 971], "invers": [81, 393, 969], "decomposit": [83, 84, 93, 95, 113, 164, 363, 390, 394, 396, 403, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 991, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "variabl": [84, 166, 355, 377, 390, 990], "canon": [84, 394], "symmetr": 84, "pl": 84, "scatter": 84, "multivari": [84, 947], "respons": [84, 380], "pls2": 84, "pls1": 84, "cca": [84, 460], "mode": [84, 354, 365], "b": 84, "deflat": 84, "compon": [85, 95, 101, 284, 285, 286, 396, 956, 960, 974, 991], "partial": [85, 167, 235, 964], "least": [85, 122, 185, 191, 194, 953], "squar": [85, 122, 158, 191, 194, 401, 949, 953, 955, 957], "The": [85, 88, 89, 166, 196, 222, 229, 254, 263, 362, 370, 395, 399, 956, 957, 969, 990, 991], "one": [85, 119, 235, 953, 957], "power": [85, 196], "iri": [89, 102, 104, 118, 151, 205, 319, 323, 345, 364, 401, 989], "randomli": [90, 91], "multilabel": [91, 232, 363, 375, 390, 957, 958, 983], "beta": [94, 396], "diverg": [94, 396], "loss": [94, 196, 206, 307, 310, 398, 957], "prepar": [95, 109, 111, 172, 217, 265, 266, 326, 370], "nmf": [95, 310, 396, 518], "independ": [95, 396, 991], "fastica": [95, 96, 97, 403, 511], "minibatchsparsepca": [95, 396, 517], "center": [95, 967], "fa": [95, 103], "posit": [95, 309], "blind": 96, "separ": [96, 208, 327, 328], "ica": [96, 396, 991], "point": [97, 286], "cloud": 97, "distort": 98, "displai": [98, 201, 226, 227, 236, 311, 374, 995], "patch": [98, 399], "noisi": [98, 156], "them": [98, 366], "increment": [99, 356, 396], "kernelpca": [100, 513], "figur": 101, "probabilist": [103, 150, 396, 401], "lda": [104, 396, 951], "precomput": [105, 177, 306, 396], "rotat": 106, "pattern": 106, "ensembl": [108, 115, 118, 164, 310, 390, 398, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "discret": [109, 125, 157, 299, 300, 967], "versu": [109, 113, 210, 261, 319, 354], "adaboost": [109, 110, 111, 112, 398], "baselin": [109, 172, 196], "samm": 109, "r": 109, "multi": [110, 128, 190, 205, 220, 233, 260, 263, 292, 347, 372, 390, 953, 954, 957, 961, 972, 973], "decis": [110, 111, 118, 125, 130, 164, 230, 319, 343, 344, 345, 346, 347, 348, 377, 380, 390, 973], "tree": [110, 111, 115, 116, 117, 118, 127, 164, 168, 196, 306, 311, 343, 344, 345, 346, 347, 348, 377, 390, 398, 400, 883, 884, 885, 886, 887, 888, 889, 960, 965, 973, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "train": [111, 123, 125, 132, 145, 226, 231, 235, 237, 246, 269, 295, 308, 317, 326, 339, 344, 345, 348, 362, 395, 960, 970, 983, 990, 992], "decisiontre": 111, "singl": [113, 129, 214, 226, 363, 391, 947], "bag": [113, 121, 339, 398, 399, 946, 992], "bia": 113, "varianc": [113, 194, 400, 957, 967], "oob": 114, "error": [114, 122, 135, 175, 253, 269, 374, 382, 953, 957], "forest": [114, 116, 117, 128, 168, 169, 237, 362, 398, 963], "import": [116, 117, 123, 146, 168, 169, 230, 303, 306, 398, 965], "decreas": [116, 117, 168], "impur": [116, 117, 168, 344, 965], "permut": [116, 168, 169, 262, 306, 395, 965], "pixel": 117, "parallel": [117, 355, 365, 372, 391, 398, 946], "mdi": [117, 168], "surfac": [118, 230, 345], "categor": [119, 308, 377, 398, 959, 967], "am": 119, "hous": [119, 362], "drop": 119, "hot": 119, "ordin": 119, "nativ": [119, 306, 308], "limit": [119, 149, 354, 382, 385, 399], "split": [119, 308, 350, 395], "earli": [120, 204], "stop": [120, 204, 399, 971], "interv": 122, "quantil": [122, 198, 309, 310, 953], "confid": 122, "tune": [122, 254, 257, 308, 946, 992], "hyper": [122, 254, 308, 390, 946], "preprocess": [123, 129, 164, 166, 167, 234, 236, 297, 341, 350, 377, 390, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 967, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "devianc": [123, 957], "isolationforest": [125, 541], "boundari": [125, 130, 319], "path": [125, 183, 189, 201, 348, 382], "length": [125, 382], "monoton": [126, 398], "constraint": [126, 311, 391, 398], "name": [126, 309, 377], "specifi": [126, 377, 946], "hash": [127, 375, 399], "total": [127, 344, 398], "output": [128, 233, 298, 311, 347, 973, 990], "meta": [128, 308, 398], "combin": [129, 226], "predictor": 129, "stack": [129, 306, 398], "make": [129, 132, 162, 367, 370, 380], "measur": [129, 259, 391, 957], "votingclassifi": [130, 131, 398, 547], "calcul": 131, "individu": [132, 167, 308, 964], "vote": [132, 398], "tutori": [134, 164, 976, 984, 986, 992], "exercis": [134, 135, 136, 137, 138, 164, 987, 990, 992], "diabet": [135, 235, 364, 990], "appli": 135, "line": [135, 152], "show": [135, 265], "std": [135, 175], "bonu": 135, "how": [135, 350, 367, 372, 377], "much": 135, "can": [135, 377], "you": [135, 377], "trust": 135, "alpha": [135, 344], "f": [141, 957], "mutual": [141, 391], "inform": [141, 162, 184, 185, 370, 391, 946, 953], "anova": [143, 329], "recurs": [144, 145, 400], "elimin": [144, 145, 400, 946], "sequenti": [146, 400], "coeffici": [146, 166, 175, 200, 201, 391, 957], "discuss": [146, 366], "process": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 166, 350, 380, 390, 401, 956, 986], "machin": [148, 164, 166, 167, 295, 321, 374, 390, 962, 972, 983, 990], "ridg": [149, 176, 178, 194, 200, 201, 231, 390, 401, 650, 950, 953], "simpl": [149, 281, 372, 989], "gpc": [150, 151, 152, 153, 401], "iso": [152, 263], "xor": [153, 401], "gpr": [154, 155, 401], "mauna": [154, 401], "loa": [154, 401], "co2": [154, 401], "build": [154, 162, 365, 367, 374, 992], "design": 154, "proper": 154, "extrapol": 154, "interpret": [154, 166, 234, 396, 398], "hyperparamet": [154, 155, 257, 264, 595], "nois": [155, 156, 176, 401], "level": [155, 355, 391, 398, 401], "optimis": 155, "basic": [156, 214, 378, 393, 401], "introductori": 156, "free": 156, "sequenc": [157, 377], "similar": [157, 955, 957], "under": [157, 377], "posterior": 158, "cookbook": 158, "radial": [158, 401, 949, 990], "ration": [158, 401], "quadradt": 158, "exp": [158, 401], "sine": [158, 247, 401], "dot": [158, 401], "product": [158, 214, 374, 377, 401, 599], "mat\u00e9rn": [158, 401], "miss": [160, 161, 162, 164, 306, 398, 947, 967], "valu": [160, 161, 162, 164, 222, 306, 367, 396, 398, 947, 957, 965, 967], "imput": [160, 161, 162, 164, 306, 390, 605, 606, 607, 608, 947, 967, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "variant": 161, "iterativeimput": [161, 605, 947], "befor": [162, 370], "replac": 162, "0": [162, 306, 307, 308, 309, 973, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "knn": [162, 306], "iter": [162, 268, 395, 946], "releas": [164, 305, 306, 307, 308, 309, 310, 311, 370, 382, 996, 1004], "highlight": [164, 305, 306, 307, 308, 309, 310, 311, 998, 1001, 1002, 1005, 1006], "mixtur": [164, 240, 241, 242, 245, 246, 247, 390, 772, 773, 956, 1006, 1007, 1011, 1012], "inspect": [164, 165, 381, 390, 609, 610, 611, 612, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "approxim": [164, 171, 172, 230, 276, 308, 390, 393, 949], "manifold": [164, 216, 217, 218, 219, 363, 390, 666, 667, 668, 669, 670, 671, 672, 673, 674, 954, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "miscellan": [164, 224, 390, 1006, 1007, 1008, 1009, 1010, 1011], "multioutput": [164, 273, 390, 807, 808, 809, 810, 958, 1006, 1007, 1008, 1009, 1010, 1013], "neural": [164, 167, 291, 390, 961, 962], "network": [164, 167, 291, 390, 961, 962], "semi": [164, 313, 314, 318, 319, 390, 970], "supervis": [164, 313, 314, 318, 319, 390, 961, 970, 979, 990], "work": [164, 338, 354, 366, 377, 992], "common": [166, 350, 379, 399, 957], "pitfal": [166, 350], "wage": 166, "scale": [166, 217, 220, 303, 334, 356, 399, 866, 954, 963, 967, 974], "matter": 166, "check": [166, 258, 306, 374, 1006, 1007, 1008], "problem": [166, 396, 972, 973, 983, 988, 990, 991], "correl": [166, 169, 394, 957, 965], "numer": [166, 355, 368], "lesson": 166, "depend": [167, 235, 365, 964, 998, 1011, 1012], "condit": [167, 308, 964], "expect": [167, 308, 956, 964], "preprocessor": 167, "1": [167, 193, 309, 310, 311, 377, 390, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "wai": [167, 367, 377], "accuraci": [168, 230, 339, 344, 957], "": [168, 369, 377, 398, 957], "multicollinear": 169, "breast": [169, 364], "cancer": [169, 364], "handl": [169, 947], "scalabl": [172, 258, 307], "partit": 172, "bayesian": [175, 176, 241, 256, 390, 953, 956], "recov": 175, "weight": [175, 177, 209, 294, 307, 336, 398, 399], "true": [175, 176], "margin": [175, 176, 208, 327, 331], "log": [175, 176, 957], "expans": 175, "sinusoid": 176, "cubic": 176, "l": 176, "elast": [177, 180, 181, 953], "net": [177, 180, 181, 953], "gram": [177, 972], "huberregressor": [178, 627], "strong": 178, "signal": [180, 396, 991], "elasticnet": [180, 307, 624], "dens": 182, "implement": [182, 377, 391, 399, 957, 960, 971, 972], "lar": [183, 628, 953], "criteria": [184, 377, 953, 973], "aic": 185, "bic": [185, 246], "criterion": [185, 308, 946, 971], "coordin": 185, "descent": [185, 204, 210, 953, 971], "angl": [185, 953], "penalti": [187, 207, 334], "sparsiti": [187, 193, 399, 990], "multinomi": [188, 212, 953, 959], "One": [188, 210, 265, 309, 325, 395, 963, 971], "rest": [188, 265], "joint": 190, "task": [190, 390, 953, 977], "seri": [190, 395], "onli": [193, 213, 1009, 1011], "2": [193, 311, 992, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ordinari": [194, 953], "orthogon": [195, 953], "match": [195, 953], "pursuit": [195, 953], "poisson": [196, 214, 307, 308, 957], "french": 196, "motor": 196, "third": [196, 382], "parti": [196, 382], "liabil": 196, "claim": [196, 214], "constant": [196, 947], "rank": [196, 390, 957], "takeawai": 196, "interpol": 197, "quantileregressor": [198, 648], "linearregress": [198, 635], "ransac": [199, 953], "l2": [200, 334], "solver": [203, 396, 953], "stochast": [204, 210, 217, 293, 953, 954, 962, 971], "sgd": [205, 206, 207, 208, 209, 953, 971], "convex": 206, "maximum": [208, 327, 962], "hyperplan": [208, 327, 328], "multiclass": [211, 265, 306, 375, 389, 390, 804, 805, 806, 921, 922, 923, 957, 958, 983, 990, 1007, 1010, 1011, 1012], "20newgroup": 211, "mnist": [212, 294], "theil": [213, 953], "sen": [213, 953], "y": [213, 377, 394, 968, 970], "direct": 213, "x": 213, "tweedi": [214, 957], "insur": 214, "definit": [214, 295, 964, 1008], "frequenc": [214, 992], "sever": [214, 219], "gamma": [214, 957], "pure": 214, "premium": 214, "tweedieregressor": [214, 658], "local": [217, 218, 282, 283, 954, 963], "isomap": [217, 218, 666, 954], "multidimension": 217, "t": [217, 222, 954], "techniqu": 218, "sphere": 219, "swiss": 221, "roll": [221, 368], "And": [221, 380], "hole": 221, "sne": [222, 954], "perplex": 222, "shape": [222, 983], "anomali": 225, "object": [226, 251, 368, 377, 946, 957, 989, 995], "confusionmatrixdisplai": [226, 675], "roccurvedisplai": [226, 680], "precisionrecalldisplai": [226, 678], "compact": 227, "represent": [227, 307, 354, 399, 991], "rich": [227, 307], "html": 227, "isoton": [228, 389, 390, 613, 614, 615, 948, 1006, 1007, 1008, 1010, 1012], "johnson": [229, 969], "lindenstrauss": [229, 969], "bound": 229, "theoret": [229, 953], "explicit": 230, "map": [230, 302, 967], "rbf": [230, 325, 326, 401, 600, 955, 972, 990], "python": [230, 355, 372, 385, 972, 976, 977, 1004], "packag": [230, 977, 1010], "svr": [231, 333, 881, 972], "construct": [231, 392], "look": [231, 333], "complet": [233, 391], "advanc": 235, "With": [235, 992], "togeth": [235, 265, 988, 991], "grid": [236, 254, 256, 264, 267, 946, 987, 992], "search": [236, 254, 256, 264, 267, 378, 946, 987, 992], "over": 236, "roc": [237, 253, 265, 266, 306, 957], "api": [237, 238, 306, 309, 311, 355, 368, 373, 379, 387, 390, 401, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008], "svc": [237, 334, 880, 972], "introduc": 238, "set_output": [238, 311, 368], "concentr": 241, "variat": [241, 956], "gmm": [243, 244], "densiti": [245, 280, 281, 289, 397, 909, 972], "best": [246, 377], "confus": [250, 391, 957], "behavior": 251, "indic": 251, "mani": [251, 311, 355, 377], "cv": [251, 350], "tradeoff": [253, 957], "det": [253, 957], "custom": [254, 322, 399, 967, 972], "refit": [254, 983], "balanc": [255, 957], "statist": [256, 977, 986, 989], "frequentist": 256, "practic": [256, 350, 371, 953, 954, 961, 971, 972, 973], "equival": 256, "all": [256, 265, 310, 382, 988, 1013], "take": 256, "home": 256, "messag": 256, "ratio": [259, 957], "pre": [259, 350, 378], "post": [259, 344], "invari": 259, "respect": 259, "preval": 259, "cross_val_scor": [260, 798], "nest": [261, 392, 987], "see": [261, 392], "also": [261, 392], "signific": 262, "precis": [263, 957], "recal": [263, 957], "In": 263, "binari": [263, 953, 957], "averag": [263, 265, 391, 398, 957], "micro": [263, 265], "each": [263, 268, 339, 946], "f1": 263, "receiv": [265, 266, 957], "oper": [265, 266, 366, 375, 401, 957], "characterist": [265, 266, 957], "specif": [265, 365, 368, 385, 946, 977, 978], "ovr": 265, "macro": 265, "ovo": 265, "success": [267, 268, 308, 946], "halv": [267, 268, 308, 946], "candid": [268, 946], "amount": [268, 946], "resourc": [268, 355, 367, 946, 976, 980], "underfit": 270, "overfit": 270, "tsne": [276, 670], "1d": 281, "novelti": [282, 963, 972], "lof": [282, 283], "neighborhood": [284, 285, 286, 960], "centroid": [287, 960], "layer": [292, 961], "perceptron": [292, 646, 953, 961], "mlpclassifi": [293, 833], "mlp": 294, "restrict": [295, 962], "boltzmann": [295, 962], "scaler": 298, "standardscal": [298, 856], "minmaxscal": [298, 846], "maxabsscal": [298, 845], "robustscal": [298, 854], "powertransform": [298, 852], "quantiletransform": [298, 853], "uniform": [298, 967], "kbinsdiscret": [299, 301, 841], "continu": [299, 367], "22": [306, 1008], "new": [306, 308, 309, 311, 367, 377, 976, 998, 999, 1001, 1002, 1003, 1004, 1005], "prune": [306, 344, 973], "datafram": [306, 377], "compat": [306, 367, 368, 387], "auc": [306, 684], "now": [306, 309, 1008], "23": [307, 1009], "stabil": 307, "improv": [307, 308, 309, 310, 311, 366, 367, 1001, 1002], "histogram": [307, 309, 311, 397, 398], "24": [308, 1010], "histgradientboost": 308, "self": [308, 317, 970], "sequentialfeatureselector": [308, 580], "polynomialcountsketch": [308, 618], "decisiontreeregressor": [308, 884], "keyword": [309, 1009, 1011], "argument": [309, 368, 1009, 1011], "more": [309, 362, 377, 385, 961], "flexibl": [309, 947], "stabl": 309, "histgradientboostingregressor": [310, 540], "get_feature_names_out": 310, "avail": [310, 946, 995], "group": [310, 395, 981, 991], "infrequ": [310, 967], "onehotencod": [310, 849], "minibatchnmf": [310, 516], "version": [310, 361, 365, 370, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "bisectingkmean": [310, 423], "divid": 310, "panda": [311, 371, 377], "enhanc": [311, 380, 977, 1001, 1002, 1003, 1004, 1005], "faster": [311, 398], "parser": [311, 361], "fetch_openml": [311, 474], "experiment": [311, 370, 387, 390, 556, 557, 558], "arrai": [311, 375, 387, 983], "lineardiscriminantanalysi": [311, 527], "effici": [311, 375], "most": 314, "uncertain": 314, "activ": 315, "threshold": 317, "linearsvc": [324, 875, 972], "unbalanc": [328, 972], "some": 329, "plai": 329, "percentil": 329, "case": [334, 953, 957], "tie": 335, "break": 335, "word": [339, 399, 992], "metadata": 339, "strip": 339, "quantifi": [340, 957], "qualiti": [340, 957], "tfidfvector": [340, 341, 569], "lsa": 340, "top": [340, 957], "term": [340, 379, 399], "per": 340, "hashingvector": [340, 399, 567], "featurehash": [341, 560], "dictvector": [341, 559], "special": 341, "purpos": [341, 978], "cost": [344, 973], "leav": [344, 395, 953], "understand": 348, "recommend": [350, 362, 977], "inconsist": 350, "leakag": 350, "dure": 350, "avoid": [350, 392], "control": [350, 398, 961], "none": 350, "randomst": 350, "instanc": [350, 356], "repeat": [350, 392, 395], "call": [350, 366], "splitter": [350, 390], "subtleti": 350, "get": [350, 377, 378], "reproduc": [350, 371], "across": 350, "execut": [350, 377], "configur": [354, 355], "overhead": 354, "input": [354, 368, 387, 391, 967], "tip": [354, 372, 374, 946, 954, 961, 971, 972, 973], "trick": [354, 372, 374, 399], "algebra": [354, 375], "librari": [354, 355], "reshap": [354, 989], "link": [354, 361, 957], "manag": [355, 382], "higher": 355, "joblib": [355, 372], "lower": 355, "openmp": [355, 372], "numpi": [355, 371], "scipi": 355, "oversubscript": 355, "spawn": 355, "too": 355, "thread": 355, "switch": 355, "environ": 355, "sklearn_assume_finit": 355, "sklearn_working_memori": 355, "sklearn_se": 355, "sklearn_tests_global_random_se": 355, "sklearn_skip_network_test": 355, "sklearn_run_float32_test": 355, "sklearn_enable_debug_cython_direct": 355, "sklearn_build_enable_debug_symbol": 355, "sklearn_pairwise_dist_chunk_s": 355, "computation": 356, "bigger": 356, "stream": 356, "note": [356, 392, 395, 953], "tabl": [357, 377], "Of": 357, "content": [357, 377, 983], "util": [360, 371, 375, 390, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 992, 995, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "other": [361, 377, 977, 998], "svmlight": 361, "format": [361, 371, 377, 385, 958], "org": [361, 370, 981], "repositori": 361, "arff": 361, "extern": [361, 976, 983, 998, 1007], "olivetti": 362, "usag": [362, 372, 377, 387, 389, 392, 398, 399, 953], "convert": 362, "filter": 362, "realist": 362, "consider": [362, 953], "wild": 362, "covertyp": 362, "rcv1": 362, "kddcup": 362, "99": 362, "california": 362, "plant": 364, "linnerrud": 364, "wine": 364, "wisconsin": 364, "diagnost": 364, "instal": [365, 382], "nightli": 365, "runtim": 365, "tag": [365, 367, 368], "edit": 365, "platform": [365, 374, 382], "instruct": 365, "window": [365, 382], "maco": 365, "compil": [365, 372], "conda": [365, 382], "forg": 365, "homebrew": 365, "linux": [365, 377, 382], "system": 365, "freebsd": 365, "bug": [366, 367, 980, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "triag": 366, "issu": [366, 367], "curat": 366, "fruit": 366, "pr": [366, 370], "help": [366, 367, 377], "review": [366, 367, 374, 992], "member": 366, "close": 366, "tough": 366, "typic": 366, "workflow": [366, 367], "contribut": [367, 377], "submit": 367, "report": [367, 371, 957], "request": [367, 370, 374, 377], "good": [367, 371], "video": [367, 976], "git": 367, "pull": [367, 370, 374, 377], "checklist": [367, 370], "integr": 367, "ci": 367, "stall": 367, "unclaim": 367, "easi": 367, "want": 367, "guidelin": [367, 368], "write": 367, "referenc": 367, "github": 367, "action": 367, "coverag": [367, 374, 957], "matplotlib": 367, "monitor": 367, "tracker": [367, 980], "maintain": [367, 370, 385], "backward": 367, "deprec": [367, 390, 902, 1008], "chang": [367, 981, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "default": 367, "read": 367, "exist": 367, "instanti": 368, "attribut": [368, 379, 946], "option": 368, "univers": 368, "your": [368, 371, 957], "own": [368, 377, 957], "templat": 368, "baseestim": [368, 405], "mixin": 368, "get_param": 368, "set_param": 368, "init": 368, "clone": [368, 414], "assert": 368, "guid": [369, 994], "major": [370, 398, 1006, 1007], "minor": 370, "merg": 370, "web": 370, "site": 370, "travi": 370, "cron": 370, "job": [370, 377], "craft": 371, "minim": [371, 973, 1011, 1012], "provid": 371, "fail": 371, "comment": 371, "boil": 371, "down": 371, "script": 371, "someth": 371, "small": 371, "do": [371, 377], "NOT": 371, "unless": 371, "i": [371, 377, 395, 981], "extrem": [371, 398], "necessari": 371, "markdown": 371, "make_regress": [371, 502], "make_classif": [371, 493], "make_blob": [371, 490], "optim": [372, 390, 946, 954], "cython": [372, 374], "c": 372, "profil": 372, "extens": 372, "yep": 372, "gperftool": 372, "gprof": 372, "valgrind": [372, 374], "callgrind": 372, "kcachegrind": 372, "warm": 372, "restart": 372, "overview": [373, 391, 963], "ax": 373, "saniti": 374, "preserv": 374, "fold": [374, 395], "unfold": 374, "outdat": 374, "diff": 374, "remot": 374, "track": 374, "branch": 374, "pytest": 374, "alias": 374, "flag": 374, "standard": [374, 967], "repli": 374, "debug": 374, "arm64": 374, "x86_64": 374, "tool": [375, 377], "matric": [375, 967], "warn": [375, 390], "except": [375, 390, 549, 550, 551, 552, 553, 554, 555, 1010], "dispatch": 376, "frequent": 377, "ask": 377, "question": [377, 980], "what": 377, "lot": 377, "peopl": [377, 998, 999, 1000, 1001], "wrong": 377, "pronounc": 377, "why": [377, 398], "pypi": 377, "deep": 377, "reinforc": 377, "Will": 377, "add": 377, "graphic": [377, 962], "did": 377, "remov": [377, 390, 400, 967, 998], "hmm": 377, "gpu": 377, "need": 377, "doe": 377, "directli": 377, "plan": 377, "so": 377, "my": 377, "ani": 377, "attent": 377, "inclus": 377, "includ": 377, "should": 377, "save": 377, "export": 377, "deploi": 377, "bunch": [377, 890], "usabl": 377, "deal": 377, "string": 377, "sometim": 377, "crash": 377, "freez": 377, "n_job": 377, "osx": [377, 382], "than": 377, "random_st": 377, "entir": 377, "start": 378, "processor": 378, "automat": [378, 953], "next": 378, "glossari": 379, "element": 379, "concept": [379, 953], "properti": 379, "role": 380, "technic": 380, "committe": 380, "propos": 380, "slep": 380, "latest": 382, "appl": 382, "silicon": 382, "m1": 382, "hardwar": 382, "alpin": 382, "arch": 382, "debian": 382, "ubuntu": 382, "fedora": 382, "netbsd": 382, "macport": 382, "mac": 382, "anaconda": 382, "enthought": 382, "deploy": 382, "intel": 382, "channel": 382, "winpython": 382, "troubleshoot": 382, "caus": 382, "persist": 385, "serial": 385, "secur": 385, "skop": 385, "interoper": [385, 977], "mathemat": [388, 391, 398, 949, 951, 953, 960, 961, 964, 971, 972, 973], "formul": [388, 391, 398, 951, 953, 960, 961, 971, 972, 973], "sigmoid": [389, 955], "sklearn": [390, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "compos": [390, 443, 444, 445, 446, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "cross_decomposit": [390, 460, 461, 462, 463, 1008, 1010, 1012], "loader": 390, "discriminant_analysi": [390, 527, 528, 1006, 1007, 1010, 1012, 1013], "dummi": [390, 529, 530, 957, 1006, 1007, 1008, 1011, 1012], "feature_extract": [390, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "feature_select": [390, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "gaussian_process": [390, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "kernel_approxim": [390, 616, 617, 618, 619, 620, 1008, 1010, 1011, 1012, 1013], "kernel_ridg": [390, 621], "linear_model": [390, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "classic": [390, 956], "glm": 390, "interfac": 390, "model_select": [390, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "naive_bay": [390, 811, 812, 813, 814, 815, 1006, 1008, 1009, 1010, 1011, 1013], "neural_network": [390, 832, 833, 834, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "random_project": [390, 867, 868, 869, 1012], "semi_supervis": [390, 870, 871, 872, 1008, 1009, 1010], "recent": 390, "To": 390, "low": [391, 398, 400], "mini": [391, 396], "batch": [391, 396], "assign": 391, "featureagglomer": [391, 425], "hierarchi": 391, "ad": 391, "connect": [391, 399, 991], "consumpt": 391, "larg": [391, 399], "size": [391, 398], "rand": 391, "index": [391, 918], "advantag": 391, "drawback": 391, "homogen": 391, "fowlk": 391, "mallow": 391, "calinski": 391, "harabasz": 391, "davi": 391, "bouldin": 391, "conting": 391, "pair": 391, "access": 392, "featureunion": [392, 835], "columntransform": [392, 443], "shrunk": 393, "oracl": 393, "plscanon": [394, 461], "plssvd": [394, 463], "plsregress": [394, 462], "held": 395, "cross_valid": [395, 799], "obtain": 395, "d": [395, 960], "loo": 395, "p": [395, 981], "lpo": 395, "shuffl": [395, 931], "stratif": 395, "stratifi": 395, "stratifiedgroupkfold": [395, 792], "predefin": [395, 957], "decompos": 396, "exact": 396, "sparsepca": [396, 521], "kpca": 396, "choic": [396, 956, 960], "truncat": 396, "semant": 396, "nnmf": 396, "frobeniu": 396, "norm": 396, "addit": [398, 949], "weak": 398, "learner": 398, "rate": 398, "subsampl": 398, "hard": 398, "soft": 398, "dict": 399, "detail": [399, 949, 953, 971, 972], "tf": 399, "idf": 399, "decod": 399, "applic": [399, 991], "corpu": 399, "selectfrommodel": [400, 575], "recoveri": 400, "biclustermixin": 406, "classnameprefixfeaturesoutmixin": 407, "classifiermixin": 408, "clustermixin": 409, "densitymixin": 410, "onetoonefeaturemixin": 411, "regressormixin": 412, "transformermixin": 413, "is_classifi": 415, "is_regressor": 416, "calibratedclassifiercv": 417, "calibrationdisplai": 418, "calibration_curv": 419, "affinitypropag": 420, "agglomerativeclust": 421, "spectralbiclust": 430, "spectralclust": 431, "spectralcoclust": 432, "affinity_propag": 433, "cluster_optics_dbscan": 434, "cluster_optics_xi": 435, "compute_optics_graph": 436, "estimate_bandwidth": 437, "k_mean": 438, "kmeans_plusplu": 439, "mean_shift": 440, "spectral_clust": 441, "ward_tre": 442, "transformedtargetregressor": 444, "make_column_selector": 445, "make_column_transform": 446, "config_context": 447, "ellipticenvelop": 448, "empiricalcovari": 449, "graphicallasso": 450, "graphicallassocv": 451, "mincovdet": 453, "shrunkcovari": 455, "empirical_covari": 456, "graphical_lasso": 457, "ledoit_wolf": 458, "shrunk_covari": 459, "clear_data_hom": 464, "dump_svmlight_fil": 465, "fetch_20newsgroup": 466, "fetch_20newsgroups_vector": 467, "fetch_california_h": 468, "fetch_covtyp": 469, "fetch_kddcup99": 470, "fetch_lfw_pair": 471, "fetch_lfw_peopl": 472, "fetch_olivetti_fac": 473, "fetch_rcv1": 475, "fetch_species_distribut": 476, "get_data_hom": 477, "load_breast_canc": 478, "load_diabet": 479, "load_digit": 480, "load_fil": 481, "load_iri": 482, "load_linnerud": 483, "load_sample_imag": [484, 485], "load_svmlight_fil": [486, 487], "load_win": 488, "make_biclust": 489, "make_checkerboard": 491, "make_circl": 492, "make_friedman1": 494, "make_friedman2": 495, "make_friedman3": 496, "make_gaussian_quantil": 497, "make_hastie_10_2": 498, "make_low_rank_matrix": 499, "make_moon": 500, "make_multilabel_classif": 501, "make_s_curv": 503, "make_sparse_coded_sign": 504, "make_sparse_spd_matrix": 505, "make_sparse_uncorrel": 506, "make_spd_matrix": 507, "make_swiss_rol": 508, "dictionarylearn": 509, "factoranalysi": 510, "incrementalpca": 512, "latentdirichletalloc": 514, "minibatchdictionarylearn": 515, "sparsecod": 520, "truncatedsvd": 522, "dict_learn": 523, "dict_learning_onlin": 524, "non_negative_factor": 525, "sparse_encod": 526, "quadraticdiscriminantanalysi": 528, "dummyclassifi": 529, "dummyregressor": 530, "adaboostclassifi": 531, "adaboostregressor": 532, "baggingclassifi": 533, "baggingregressor": 534, "extratreesclassifi": 535, "extratreesregressor": 536, "gradientboostingclassifi": 537, "gradientboostingregressor": 538, "histgradientboostingclassifi": 539, "randomforestclassifi": 542, "randomforestregressor": 543, "randomtreesembed": 544, "stackingclassifi": 545, "stackingregressor": 546, "votingregressor": 548, "convergencewarn": 549, "dataconversionwarn": 550, "datadimensionalitywarn": 551, "efficiencywarn": 552, "fitfailedwarn": 553, "notfittederror": 554, "undefinedmetricwarn": 555, "enable_halving_search_cv": 556, "enable_hist_gradient_boost": 557, "enable_iterative_imput": 558, "patchextractor": 561, "extract_patches_2d": 562, "grid_to_graph": 563, "img_to_graph": 564, "reconstruct_from_patches_2d": 565, "countvector": 566, "tfidftransform": 568, "genericunivariateselect": 570, "rfe": 571, "rfecv": 572, "selectfdr": 573, "selectfpr": 574, "selectfw": 576, "selectkbest": 577, "selectpercentil": 578, "selectormixin": 579, "variancethreshold": 581, "chi2": 582, "f_classif": 583, "f_regress": 584, "mutual_info_classif": 585, "mutual_info_regress": 586, "r_regress": 587, "gaussianprocessclassifi": 588, "gaussianprocessregressor": 589, "compoundkernel": 590, "constantkernel": 591, "dotproduct": 592, "expsinesquar": 593, "exponenti": 594, "matern": 597, "pairwisekernel": 598, "rationalquadrat": 601, "sum": 602, "whitekernel": 603, "get_config": 604, "knnimput": 606, "missingind": 607, "simpleimput": 608, "decisionboundarydisplai": 609, "partialdependencedisplai": 610, "partial_depend": 611, "permutation_import": 612, "isotonicregress": 613, "check_increas": 614, "isotonic_regress": 615, "additivechi2sampl": 616, "nystroem": [617, 949], "rbfsampler": 619, "skewedchi2sampl": 620, "kernelridg": 621, "ardregress": 622, "bayesianridg": 623, "elasticnetcv": 625, "gammaregressor": 626, "larscv": 629, "lassocv": 631, "lassolar": 632, "lassolarscv": 633, "lassolars": 634, "logisticregress": 636, "logisticregressioncv": 637, "multitaskelasticnet": 638, "multitaskelasticnetcv": 639, "multitasklasso": 640, "multitasklassocv": 641, "orthogonalmatchingpursuit": 642, "orthogonalmatchingpursuitcv": 643, "passiveaggressiveclassifi": 644, "passiveaggressiveregressor": 645, "poissonregressor": 647, "ransacregressor": 649, "ridgecv": 651, "ridgeclassifi": 652, "ridgeclassifiercv": 653, "sgdclassifi": 654, "sgdoneclasssvm": 655, "sgdregressor": 656, "theilsenregressor": 657, "enet_path": 659, "lars_path": 660, "lars_path_gram": 661, "lasso_path": 662, "orthogonal_mp": 663, "orthogonal_mp_gram": 664, "ridge_regress": 665, "locallylinearembed": 667, "md": [668, 954], "spectralembed": 669, "locally_linear_embed": 671, "smacof": 672, "spectral_embed": 673, "trustworthi": 674, "detcurvedisplai": 676, "distancemetr": 677, "predictionerrordisplai": 679, "accuracy_scor": 681, "adjusted_mutual_info_scor": 682, "adjusted_rand_scor": 683, "average_precision_scor": 685, "balanced_accuracy_scor": 686, "brier_score_loss": 687, "calinski_harabasz_scor": 688, "check_scor": 689, "class_likelihood_ratio": 690, "classification_report": 691, "contingency_matrix": 692, "pair_confusion_matrix": 693, "cohen_kappa_scor": 694, "completeness_scor": 695, "confusion_matrix": 696, "consensus_scor": 697, "coverage_error": 698, "d2_absolute_error_scor": 699, "d2_pinball_scor": 700, "d2_tweedie_scor": 701, "davies_bouldin_scor": 702, "dcg_score": 703, "det_curv": 704, "explained_variance_scor": 705, "f1_score": 706, "fbeta_scor": 707, "fowlkes_mallows_scor": 708, "get_scor": 709, "get_scorer_nam": 710, "hamming_loss": 711, "hinge_loss": 712, "homogeneity_completeness_v_measur": 713, "homogeneity_scor": 714, "jaccard_scor": 715, "label_ranking_average_precision_scor": 716, "label_ranking_loss": 717, "log_loss": 718, "make_scor": 719, "matthews_corrcoef": 720, "max_error": 721, "mean_absolute_error": 722, "mean_absolute_percentage_error": 723, "mean_gamma_devi": 724, "mean_pinball_loss": 725, "mean_poisson_devi": 726, "mean_squared_error": 727, "mean_squared_log_error": 728, "mean_tweedie_devi": 729, "median_absolute_error": 730, "multilabel_confusion_matrix": 731, "mutual_info_scor": 732, "ndcg_score": 733, "normalized_mutual_info_scor": 734, "additive_chi2_kernel": 735, "chi2_kernel": 736, "cosine_dist": 737, "cosine_similar": 738, "distance_metr": 739, "euclidean_dist": 740, "haversine_dist": 741, "kernel_metr": 742, "laplacian_kernel": 743, "linear_kernel": 744, "manhattan_dist": 745, "nan_euclidean_dist": 746, "paired_cosine_dist": 747, "paired_dist": 748, "paired_euclidean_dist": 749, "paired_manhattan_dist": 750, "pairwise_kernel": 751, "polynomial_kernel": 752, "rbf_kernel": 753, "sigmoid_kernel": 754, "pairwise_dist": 755, "pairwise_distances_argmin": 756, "pairwise_distances_argmin_min": 757, "pairwise_distances_chunk": 758, "precision_recall_curv": 759, "precision_recall_fscore_support": 760, "precision_scor": 761, "r2_score": 762, "rand_scor": 763, "recall_scor": 764, "roc_auc_scor": 765, "roc_curv": 766, "silhouette_sampl": 767, "silhouette_scor": 768, "top_k_accuracy_scor": 769, "v_measure_scor": 770, "zero_one_loss": 771, "bayesiangaussianmixtur": [772, 956], "gaussianmixtur": [773, 956], "groupkfold": 775, "groupshufflesplit": 776, "halvinggridsearchcv": 777, "halvingrandomsearchcv": 778, "kfold": 779, "learningcurvedisplai": 780, "leaveonegroupout": 781, "leaveoneout": 782, "leavepgroupsout": 783, "leavepout": 784, "parametergrid": 785, "parametersampl": 786, "predefinedsplit": 787, "randomizedsearchcv": 788, "repeatedkfold": 789, "repeatedstratifiedkfold": 790, "shufflesplit": 791, "stratifiedkfold": 793, "stratifiedshufflesplit": 794, "timeseriessplit": 795, "check_cv": 796, "cross_val_predict": 797, "learning_curv": 800, "permutation_test_scor": 801, "train_test_split": 802, "validation_curv": 803, "onevsoneclassifi": [804, 958], "onevsrestclassifi": [805, 958], "outputcodeclassifi": [806, 958], "classifierchain": [807, 958], "multioutputclassifi": [808, 958], "multioutputregressor": [809, 958], "regressorchain": [810, 958], "bernoullinb": 811, "categoricalnb": 812, "complementnb": 813, "gaussiannb": 814, "multinomialnb": 815, "balltre": [816, 960], "kdtree": [817, 960], "kneighborsclassifi": 818, "kneighborsregressor": 819, "kneighborstransform": 820, "kerneldens": 821, "localoutlierfactor": 822, "nearestcentroid": 823, "nearestneighbor": 824, "neighborhoodcomponentsanalysi": 825, "radiusneighborsclassifi": 826, "radiusneighborsregressor": 827, "radiusneighborstransform": 828, "kneighbors_graph": 829, "radius_neighbors_graph": 830, "sort_graph_by_row_valu": 831, "bernoullirbm": 832, "mlpregressor": 834, "make_pipelin": 837, "make_union": 838, "binar": [839, 858, 967, 968], "functiontransform": 840, "kernelcenter": 842, "labelbinar": [843, 968], "labelencod": 844, "multilabelbinar": [847, 968], "ordinalencod": 850, "polynomialfeatur": 851, "splinetransform": 855, "add_dummy_featur": 857, "label_binar": 859, "maxabs_scal": 860, "minmax_scal": 861, "power_transform": 863, "quantile_transform": 864, "robust_scal": 865, "gaussianrandomproject": 867, "sparserandomproject": 868, "johnson_lindenstrauss_min_dim": 869, "labelpropag": 870, "labelspread": 871, "selftrainingclassifi": 872, "set_config": 873, "show_vers": 874, "linearsvr": [876, 972], "nusvc": [877, 972], "nusvr": 878, "oneclasssvm": 879, "l1_min_c": 882, "decisiontreeclassifi": 883, "extratreeclassifi": 885, "extratreeregressor": 886, "export_graphviz": 887, "export_text": 888, "plot_tre": 889, "_safe_index": 891, "arrayfunc": 892, "min_po": 892, "as_float_arrai": 893, "assert_all_finit": 894, "check_x_i": 895, "check_arrai": 896, "check_consistent_length": 897, "check_random_st": 898, "check_scalar": 899, "class_weight": [900, 901], "compute_class_weight": 900, "compute_sample_weight": 901, "discoveri": [903, 904, 905], "all_displai": 903, "all_estim": 904, "all_funct": 905, "estimator_check": [906, 907], "check_estim": 906, "parametrize_with_check": 907, "estimator_html_repr": 908, "extmath": [909, 910, 911, 912, 913, 914], "fast_logdet": 910, "randomized_range_find": 911, "randomized_svd": 912, "safe_sparse_dot": 913, "weighted_mod": 914, "gen_batch": 915, "gen_even_slic": 916, "single_source_shortest_path_length": 917, "metaestim": [919, 920], "available_if": 919, "if_delegate_has_method": 920, "is_multilabel": 921, "type_of_target": 922, "unique_label": 923, "murmurhash3_32": 924, "parallel_backend": 925, "sample_without_replac": 926, "register_parallel_backend": 927, "resampl": 928, "safe_mask": 929, "safe_sqr": 930, "sparsefunc": [932, 933, 934, 935, 936, 937, 938, 1007], "incr_mean_variance_axi": 932, "inplace_column_scal": 933, "inplace_csr_column_scal": 934, "inplace_row_scal": 935, "inplace_swap_column": 936, "inplace_swap_row": 937, "mean_variance_axi": 938, "sparsefuncs_fast": [939, 940], "inplace_csr_row_normalize_l1": 939, "inplace_csr_row_normalize_l2": 940, "check_is_fit": 941, "check_memori": 942, "check_symmetr": 943, "column_or_1d": 944, "has_fit_paramet": 945, "exhaust": 946, "min_resourc": 946, "aggress": [946, 953], "analyz": 946, "cv_results_": 946, "failur": 946, "altern": 946, "brute": [946, 960], "forc": [946, 960], "keep": 947, "mark": 947, "nan": 947, "chi": [949, 955], "skew": 949, "tensor": 949, "sketch": 949, "qda": 951, "omp": 953, "ard": 953, "liblinear": 953, "passiv": 953, "scenario": 953, "trade": 953, "off": 953, "which": 953, "consensu": 953, "median": [953, 957], "huber": 953, "extend": 953, "introduct": [954, 983], "modifi": 954, "hessian": 954, "eigenmap": 954, "tangent": 954, "align": 954, "nonmetr": 954, "barn": 954, "hut": 954, "cosin": 955, "laplacian": 955, "pro": 956, "con": 956, "maxim": 956, "infer": 956, "rule": 957, "cohen": 957, "kappa": 957, "ham": 957, "jaccard": 957, "hing": 957, "matthew": 957, "zero": 957, "brier": 957, "discount": 957, "cumul": 957, "gain": 957, "r\u00b2": 957, "absolut": 957, "logarithm": 957, "percentag": 957, "explain": 957, "pinbal": 957, "d\u00b2": 957, "complement": 959, "bernoulli": [959, 962], "unsupervis": [960, 962, 974, 991, 993], "find": 960, "ball": 960, "leaf_siz": 960, "shrunken": 960, "warm_start": 961, "parametr": 962, "up": 963, "ellipt": 963, "envelop": 963, "isol": 963, "ic": 964, "outlin": 965, "mislead": 965, "strongli": 965, "rang": 967, "whiten": 967, "bin": 967, "lemma": 969, "unlabel": 970, "entri": 970, "id3": 973, "c4": 973, "5": [973, 998], "c5": 973, "cart": 973, "welcom": 975, "talk": 976, "scientif": [976, 986], "framework": 977, "domain": 977, "translat": 977, "roadmap": 978, "thi": 978, "statement": 978, "2018": 978, "architectur": 978, "goal": 978, "subpackag": 978, "mail": 980, "user": [980, 994], "gitter": 980, "who": 981, "j": 981, "morgan": 981, "spotifi": 981, "inria": 981, "betawork": 981, "hug": 981, "evernot": 981, "t\u00e9l\u00e9com": 981, "paristech": 981, "book": 981, "com": 981, "aweb": 981, "yhat": 981, "rangespan": 981, "birchbox": 981, "bestofmedia": 981, "phimeca": 981, "howaboutw": 981, "peerindex": 981, "datarobot": 981, "okcupid": 981, "love": 981, "publica": 981, "machinali": 981, "solido": 981, "infonea": 981, "dataiku": 981, "otto": 981, "zopa": 981, "mar": 981, "bnp": 981, "pariba": 981, "cardif": 981, "section": 983, "convent": 983, "cast": 983, "updat": [983, 1008], "right": 985, "put": 988, "open": 988, "ship": 989, "would": 989, "high": 990, "observ": [990, 991], "solv": [990, 991], "vocabulari": 990, "curs": 990, "iris": 990, "same": 990, "seek": 991, "constrain": 991, "inverse_transform": 991, "setup": 992, "token": 992, "occurr": 992, "languag": 992, "identif": 992, "sentiment": 992, "movi": 992, "cli": 992, "where": 992, "here": 992, "12": 998, "changelog": [998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "11": 998, "9": 998, "8": 998, "7": 998, "6": [998, 1004], "modul": [998, 1006, 1007, 1013], "misc": 998, "4": [998, 1006], "earlier": 998, "13": 999, "14": 1000, "15": 1001, "16": 1002, "17": 1003, "18": 1004, "last": 1004, "19": 1005, "known": [1006, 1007], "21": 1007, "legend": [1007, 1008, 1009, 1010, 1011, 1012, 1013], "post1": 1008, "websit": 1008, "clear": 1008, "public": 1008, "futurewarn": 1008, "enforc": [1009, 1011]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Compare cross decomposition methods": [[84, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[84, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[84, "canonical-symmetric-pls"]], "Transform data": [[84, "transform-data"]], "Scatter plot of scores": [[84, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[84, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[84, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[84, "cca-pls-mode-b-with-symmetric-deflation"]], "Early stopping of Gradient Boosting": [[120, "early-stopping-of-gradient-boosting"]], "Compare scores with and without early stopping": [[120, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[120, "compare-fit-times-with-and-without-early-stopping"]], "Plot randomly generated multilabel dataset": [[91, "plot-randomly-generated-multilabel-dataset"]], "Decision Tree Regression with AdaBoost": [[111, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[111, "preparing-the-data"], [172, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[111, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Plotting the results": [[111, "plotting-the-results"], [109, "plotting-the-results"], [63, "plotting-the-results"]], "Cross-validation on Digits Dataset Exercise": [[136, "cross-validation-on-digits-dataset-exercise"]], "Computation times": [[82, "computation-times"], [107, "computation-times"], [92, "computation-times"], [133, "computation-times"], [86, "computation-times"], [139, "computation-times"], [75, "computation-times"], [35, "computation-times"], [15, "computation-times"], [22, "computation-times"], [67, "computation-times"], [28, "computation-times"], [320, "computation-times"], [290, "computation-times"], [349, "computation-times"], [312, "computation-times"], [342, "computation-times"], [296, "computation-times"], [304, "computation-times"], [337, "computation-times"], [275, "computation-times"], [215, "computation-times"], [272, "computation-times"], [248, "computation-times"], [223, "computation-times"], [239, "computation-times"], [170, "computation-times"], [159, "computation-times"], [147, "computation-times"], [163, "computation-times"], [173, "computation-times"]], "Comparison of F-test and mutual information": [[141, "comparison-of-f-test-and-mutual-information"]], "Cross decomposition": [[83, "cross-decomposition"], [164, "cross-decomposition"], [394, "cross-decomposition"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[71, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[71, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[71, "caching-transformers-within-a-pipeline"]], "The Digit Dataset": [[88, "the-digit-dataset"]], "Discrete versus Real AdaBoost": [[109, "discrete-versus-real-adaboost"]], "Preparing the data and baseline models": [[109, "preparing-the-data-and-baseline-models"]], "Adaboost with discrete SAMME and real SAMME.R": [[109, "adaboost-with-discrete-samme-and-real-samme-r"]], "Concluding remarks": [[109, "concluding-remarks"], [4, "concluding-remarks"], [221, "concluding-remarks"]], "Gradient Boosting regularization": [[124, "gradient-boosting-regularization"]], "Blind source separation using FastICA": [[96, "blind-source-separation-using-fastica"]], "Generate sample data": [[96, "generate-sample-data"], [77, "generate-sample-data"], [97, "generate-sample-data"], [62, "generate-sample-data"], [38, "generate-sample-data"], [333, "generate-sample-data"], [288, "generate-sample-data"], [231, "generate-sample-data"], [269, "generate-sample-data"], [142, "generate-sample-data"]], "Fit ICA and PCA models": [[96, "fit-ica-and-pca-models"]], "Plot results": [[96, "plot-results"], [77, "plot-results"], [97, "plot-results"], [49, "plot-results"], [8, "plot-results"]], "Feature Selection": [[140, "feature-selection"], [164, "feature-selection"]], "Multi-class AdaBoosted Decision Trees": [[110, "multi-class-adaboosted-decision-trees"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[77, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[77, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[77, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Tutorial exercises": [[134, "tutorial-exercises"], [164, "tutorial-exercises"]], "SVM Exercise": [[138, "svm-exercise"]], "Dataset examples": [[87, "dataset-examples"], [164, "dataset-examples"]], "Covariance estimation": [[76, "covariance-estimation"], [164, "covariance-estimation"], [393, "covariance-estimation"]], "Faces dataset decompositions": [[95, "faces-dataset-decompositions"]], "Dataset preparation": [[95, "dataset-preparation"], [217, "dataset-preparation"]], "Decomposition": [[95, "decomposition"], [93, "decomposition"], [164, "decomposition"]], "Eigenfaces - PCA using randomized SVD": [[95, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[95, "non-negative-components-nmf"]], "Independent components - FastICA": [[95, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[95, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[95, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[95, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[95, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[95, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[95, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[95, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[95, "dictionary-learning-positive-dictionary-code"]], "OOB Errors for Random Forests": [[114, "oob-errors-for-random-forests"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [396, "sparse-coding-with-a-precomputed-dictionary"]], "IsolationForest example": [[125, "isolationforest-example"]], "Data generation": [[125, "data-generation"], [49, "data-generation"], [56, "data-generation"], [314, "data-generation"], [246, "data-generation"], [155, "data-generation"], [145, "data-generation"]], "Training of the model": [[125, "training-of-the-model"]], "Plot discrete decision boundary": [[125, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[125, "plot-path-length-decision-boundary"]], "Gradient Boosting regression": [[123, "gradient-boosting-regression"]], "Load the data": [[123, "load-the-data"], [50, "load-the-data"], [7, "load-the-data"]], "Data preprocessing": [[123, "data-preprocessing"]], "Fit regression model": [[123, "fit-regression-model"], [333, "fit-regression-model"], [288, "fit-regression-model"]], "Plot training deviance": [[123, "plot-training-deviance"]], "Plot feature importance": [[123, "plot-feature-importance"]], "Pipelining: chaining a PCA and a logistic regression": [[72, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Single estimator versus bagging: bias-variance decomposition": [[113, "single-estimator-versus-bagging-bias-variance-decomposition"]], "References": [[113, "references"], [80, "references"], [11, "references"], [25, "references"], [5, null], [27, "references"], [970, null], [970, null], [947, "references"], [947, null], [967, null], [964, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [289, "references"], [256, null], [172, "references"], [184, null], [364, null], [364, null], [364, null], [364, null], [364, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [401, "references"], [399, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [362, null], [362, null], [362, null]], "Incremental PCA": [[99, "incremental-pca"], [396, "incremental-pca"]], "Feature importances with a forest of trees": [[116, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[116, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[116, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[116, "feature-importance-based-on-feature-permutation"]], "Sparse inverse covariance estimation": [[81, "sparse-inverse-covariance-estimation"]], "Generate the data": [[81, "generate-the-data"], [65, "generate-the-data"], [63, "generate-the-data"]], "Estimate the covariance": [[81, "estimate-the-covariance"]], "Plot the results": [[81, "plot-the-results"], [132, "plot-the-results"], [50, "plot-the-results"], [162, "plot-the-results"]], "Principal Component Regression vs Partial Least Squares Regression": [[85, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[85, "the-data"]], "Projection on one component and predictive power": [[85, "projection-on-one-component-and-predictive-power"]], "Gradient Boosting Out-of-Bag estimates": [[121, "gradient-boosting-out-of-bag-estimates"]], "Combine predictors using stacking": [[129, "combine-predictors-using-stacking"]], "Download the dataset": [[129, "download-the-dataset"]], "Make pipeline to preprocess the data": [[129, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[129, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[129, "measure-and-plot-the-results"]], "FastICA on 2D point clouds": [[97, "fastica-on-2d-point-clouds"]], "Monotonic Constraints": [[126, "monotonic-constraints"], [398, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[126, "using-feature-names-to-specify-monotonic-constraints"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Create the data": [[103, "create-the-data"], [101, "create-the-data"]], "Fit the models": [[103, "fit-the-models"]], "Concatenating multiple feature extraction methods": [[73, "concatenating-multiple-feature-extraction-methods"]], "Feature transformations with ensembles of trees": [[115, "feature-transformations-with-ensembles-of-trees"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Beta-divergence loss functions": [[94, "beta-divergence-loss-functions"]], "The Iris Dataset": [[89, "the-iris-dataset"]], "Robust covariance estimation and Mahalanobis distances relevance": [[79, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[79, null], [955, null], [955, null], [971, null], [971, null], [963, null], [963, null], [963, null], [963, null], [965, null], [959, null], [959, null], [959, null], [951, null], [960, null], [960, null], [960, null], [949, null], [957, null], [957, null], [957, null], [957, null], [957, null], [957, null], [957, null], [957, null], [962, null], [958, null], [958, null], [958, null], [969, null], [969, null], [969, null], [972, null], [967, null], [967, null], [973, null], [973, null], [950, null], [946, null], [946, null], [961, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [262, null], [261, null], [168, null], [361, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [393, null], [393, null], [393, null], [393, null], [388, null], [388, null], [388, null], [389, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [400, null], [399, null], [395, null], [395, null], [362, null]], "Generate data": [[79, "generate-data"], [47, "generate-data"], [66, "generate-data"], [295, "generate-data"], [190, "generate-data"]], "Comparison of results": [[79, "comparison-of-results"]], "Effect of transforming the targets in regression model": [[74, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[74, "synthetic-example"]], "Real-world data set": [[74, "real-world-data-set"]], "Two-class AdaBoost": [[112, "two-class-adaboost"]], "Categorical Feature Support in Gradient Boosting": [[119, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[119, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[119, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[119, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[119, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[119, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[119, "model-comparison"]], "Limiting the number of splits": [[119, "limiting-the-number-of-splits"]], "Comparing random forests and the multi-output meta estimator": [[128, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Cross-validation on diabetes Dataset Exercise": [[135, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[135, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[135, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[135, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Plot class probabilities calculated by the VotingClassifier": [[131, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Ensemble methods": [[108, "ensemble-methods"], [164, "ensemble-methods"], [398, "ensemble-methods"]], "Kernel PCA": [[100, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[100, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[100, "projecting-into-the-original-feature-space"]], "Pixel importances with a parallel forest of trees": [[117, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[117, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[117, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[118, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Hashing feature transformation using Totally Random Trees": [[127, "hashing-feature-transformation-using-totally-random-trees"]], "Plot the decision boundaries of a VotingClassifier": [[130, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Principal components analysis (PCA)": [[101, "principal-components-analysis-pca"]], "Plot the figures": [[101, "plot-the-figures"]], "Plot individual and voting regression predictions": [[132, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[132, "training-classifiers"]], "Making predictions": [[132, "making-predictions"]], "Robust vs Empirical covariance estimate": [[80, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[80, "minimum-covariance-determinant-estimator"]], "Evaluation": [[80, "evaluation"], [295, "evaluation"]], "Digits Classification Exercise": [[137, "digits-classification-exercise"]], "Prediction Intervals for Gradient Boosting Regression": [[122, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[122, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[122, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[122, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[122, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Ledoit-Wolf vs OAS estimation": [[78, "ledoit-wolf-vs-oas-estimation"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Image denoising using dictionary learning": [[98, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[98, "generate-distorted-image"]], "Display the distorted image": [[98, "display-the-distorted-image"]], "Extract reference patches": [[98, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[98, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[98, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Plot randomly generated classification dataset": [[90, "plot-randomly-generated-classification-dataset"]], "Column Transformer with Mixed Types": [[70, "column-transformer-with-mixed-types"]], "Plot classification probability": [[30, "plot-classification-probability"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[59, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Classifier comparison": [[31, "classifier-comparison"]], "Plot Hierarchical Clustering Dendrogram": [[41, "plot-hierarchical-clustering-dendrogram"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[52, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Empirical evaluation of the impact of k-means initialization": [[60, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Inductive Clustering": [[55, "inductive-clustering"]], "Pipelines and composite estimators": [[68, "pipelines-and-composite-estimators"], [164, "pipelines-and-composite-estimators"], [392, "pipelines-and-composite-estimators"]], "Prediction Latency": [[10, "prediction-latency"], [354, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Calibration": [[23, "calibration"], [164, "calibration"]], "A demo of the mean-shift clustering algorithm": [[62, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[62, "compute-clustering-with-meanshift"]], "Plot result": [[62, "plot-result"], [66, "plot-result"], [66, "id2"], [38, "plot-result"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[33, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Probability calibration of classifiers": [[24, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[24, "generate-synthetic-dataset"], [175, "generate-synthetic-dataset"], [175, "id1"]], "Gaussian Naive-Bayes": [[24, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[24, "plot-data-and-the-predicted-probabilities"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[14, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[43, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Column Transformer with Heterogeneous Data Sources": [[69, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[69, "newsgroups-dataset"]], "Creating transformers": [[69, "creating-transformers"]], "Classification pipeline": [[69, "classification-pipeline"]], "Online learning of a dictionary of parts of faces": [[50, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[50, "learn-the-dictionary-of-images"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "Probability Calibration curves": [[25, "probability-calibration-curves"]], "Dataset": [[25, "dataset"], [27, "dataset"], [262, "dataset"], [185, "dataset"]], "Calibration curves": [[25, "calibration-curves"], [27, "calibration-curves"], [389, "calibration-curves"]], "Gaussian Naive Bayes": [[25, "gaussian-naive-bayes"], [959, "gaussian-naive-bayes"]], "Linear support vector classifier": [[25, "linear-support-vector-classifier"]], "Summary": [[25, "summary"], [341, "summary"]], "Vector Quantization Example": [[53, "vector-quantization-example"]], "Original image": [[53, "original-image"]], "Compression via vector quantization": [[53, "compression-via-vector-quantization"]], "Encoding strategy": [[53, "encoding-strategy"]], "Memory footprint": [[53, "memory-footprint"]], "Clustering": [[36, "clustering"], [164, "clustering"], [391, "clustering"]], "Segmenting the picture of greek coins in regions": [[46, "segmenting-the-picture-of-greek-coins-in-regions"]], "Demo of DBSCAN clustering algorithm": [[49, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[49, "compute-dbscan"]], "Classification": [[29, "classification"], [32, "classification"], [971, "classification"], [960, "id4"], [972, "classification"], [973, "classification"], [990, "classification"], [961, "classification"], [953, "classification"], [164, "classification"], [157, "classification"], [398, "classification"], [398, "id18"]], "Comparing different clustering algorithms on toy datasets": [[44, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[45, "k-means-clustering"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Demonstration of k-means assumptions": [[56, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[56, "fit-models-and-plot-results"]], "Possible solutions": [[56, "possible-solutions"]], "Final remarks": [[56, "final-remarks"]], "Comparing different hierarchical linkage methods on toy datasets": [[61, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "An example of K-Means++ initialization": [[58, "an-example-of-k-means-initialization"]], "Spectral clustering for image segmentation": [[65, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[65, "plotting-four-circles"]], "Plotting two circles": [[65, "plotting-two-circles"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [326, "visualization"], [390, "visualization"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [185, "conclusion"]], "Biclustering": [[18, "biclustering"], [164, "biclustering"], [388, "biclustering"], [363, "biclustering"]], "Compare BIRCH and MiniBatchKMeans": [[42, "compare-birch-and-minibatchkmeans"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[63, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Compute clustering with KMeans": [[63, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[63, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[63, "establishing-parity-between-clusters"]], "Probability Calibration for 3-class classification": [[26, "probability-calibration-for-3-class-classification"]], "Data": [[26, "data"]], "Fitting and calibration": [[26, "fitting-and-calibration"]], "Compare probabilities": [[26, "compare-probabilities"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [164, "examples-based-on-real-world-datasets"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Recognizing hand-written digits": [[32, "recognizing-hand-written-digits"]], "Digits dataset": [[32, "digits-dataset"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[34, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Colormap": [[34, "colormap"]], "Datasets generation functions": [[34, "datasets-generation-functions"]], "Plot functions": [[34, "plot-functions"]], "Plot": [[34, "plot"], [180, "plot"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Agglomerative clustering with different metrics": [[40, "agglomerative-clustering-with-different-metrics"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[13, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Color Quantization using K-Means": [[48, "color-quantization-using-k-means"]], "About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [998, "authors"], [998, "id20"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [380, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Agglomerative clustering with and without structure": [[39, "agglomerative-clustering-with-and-without-structure"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[47, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Define structure of the data": [[47, "define-structure-of-the-data"]], "Compute clustering": [[47, "compute-clustering"], [66, "compute-clustering"], [66, "id1"]], "Plot the results on an image": [[47, "plot-the-results-on-an-image"]], "Feature agglomeration": [[51, "feature-agglomeration"], [991, "feature-agglomeration"], [974, "feature-agglomeration"]], "Demo of OPTICS clustering algorithm": [[64, "demo-of-optics-clustering-algorithm"]], "Hierarchical clustering: structured vs unstructured ward": [[66, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[66, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Comparison of Calibration of Classifiers": [[27, "comparison-of-calibration-of-classifiers"]], "Feature agglomeration vs. univariate selection": [[54, "feature-agglomeration-vs-univariate-selection"]], "A demo of K-Means clustering on the handwritten digits data": [[57, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[57, "load-the-dataset"]], "Define our evaluation benchmark": [[57, "define-our-evaluation-benchmark"]], "Run the benchmark": [[57, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[57, "visualize-the-results-on-pca-reduced-data"]], "Demo of affinity propagation clustering algorithm": [[38, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[38, "compute-affinity-propagation"]], "Adjustment for chance in clustering performance evaluation": [[37, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[37, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[37, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[37, "second-experiment-varying-number-of-classes-and-clusters"]], "sklearn.utils.shuffle": [[931, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[931, "examples-using-sklearn-utils-shuffle"]], "scikit-learn Tutorials": [[984, "scikit-learn-tutorials"]], "Pairwise metrics, Affinities and Kernels": [[955, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[955, "cosine-similarity"]], "Linear kernel": [[955, "linear-kernel"], [990, "linear-kernel"]], "Polynomial kernel": [[955, "polynomial-kernel"], [990, "polynomial-kernel"]], "Sigmoid kernel": [[955, "sigmoid-kernel"]], "RBF kernel": [[955, "rbf-kernel"]], "Laplacian kernel": [[955, "laplacian-kernel"]], "Chi-squared kernel": [[955, "chi-squared-kernel"]], "Roadmap": [[978, "id1"]], "Purpose of this document": [[978, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[978, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[978, "architectural-general-goals"]], "Subpackage-specific goals": [[978, "subpackage-specific-goals"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[935, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "Stochastic Gradient Descent": [[971, "stochastic-gradient-descent"]], "Examples:": [[971, null], [971, null], [956, null], [956, null], [956, null], [956, null], [963, null], [963, null], [963, null], [963, null], [963, null], [963, null], [965, null], [951, null], [951, null], [951, null], [960, null], [960, null], [960, null], [960, null], [960, null], [949, null], [949, null], [952, null], [957, null], [957, null], [957, null], [957, null], [957, null], [962, null], [958, null], [972, null], [972, null], [972, null], [972, null], [972, null], [972, null], [967, null], [967, null], [973, null], [973, null], [973, null], [973, null], [964, null], [946, null], [946, null], [946, null], [961, null], [961, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [954, null], [995, null], [361, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [396, null], [393, null], [393, null], [393, null], [393, null], [393, null], [393, null], [388, null], [388, null], [392, null], [392, null], [392, null], [392, null], [392, null], [397, null], [389, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [391, null], [400, null], [400, null], [400, null], [400, null], [381, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [398, null], [394, null]], "Regression": [[971, "regression"], [972, "regression"], [973, "regression"], [961, "regression"], [953, "regression"], [157, "regression"], [398, "regression"], [398, "id17"]], "Online One-Class SVM": [[971, "online-one-class-svm"], [309, "online-one-class-svm"]], "Stochastic Gradient Descent for sparse data": [[971, "stochastic-gradient-descent-for-sparse-data"]], "Complexity": [[971, "complexity"], [960, "complexity"], [972, "complexity"], [973, "complexity"], [961, "complexity"], [954, "complexity"], [954, "id3"], [954, "id4"], [954, "id5"], [954, "id7"], [954, "id8"]], "Stopping criterion": [[971, "stopping-criterion"]], "Tips on Practical Use": [[971, "tips-on-practical-use"], [972, "tips-on-practical-use"], [961, "tips-on-practical-use"]], "Mathematical formulation": [[971, "mathematical-formulation"], [960, "mathematical-formulation"], [972, "mathematical-formulation"], [973, "mathematical-formulation"], [961, "mathematical-formulation"], [953, "mathematical-formulation"], [388, "mathematical-formulation"], [388, "id3"], [391, "mathematical-formulation"], [391, "id12"], [391, "id19"], [391, "id29"], [391, "id33"], [398, "mathematical-formulation"]], "SGD": [[971, "id5"]], "Implementation details": [[971, "implementation-details"], [972, "implementation-details"], [399, "implementation-details"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[933, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "Gaussian mixture models": [[956, "gaussian-mixture-models"]], "Gaussian Mixture": [[956, "gaussian-mixture"]], "Pros and cons of class GaussianMixture": [[956, "pros-and-cons-of-class-gaussianmixture"]], "Pros": [[956, "pros"], [956, "id2"]], "Cons": [[956, "cons"], [956, "id3"]], "Selecting the number of components in a classical Gaussian Mixture Model": [[956, "selecting-the-number-of-components-in-a-classical-gaussian-mixture-model"]], "Estimation algorithm Expectation-maximization": [[956, "estimation-algorithm-expectation-maximization"]], "Choice of the Initialization Method": [[956, "choice-of-the-initialization-method"]], "Variational Bayesian Gaussian Mixture": [[956, "variational-bayesian-gaussian-mixture"]], "Estimation algorithm: variational inference": [[956, "estimation-algorithm-variational-inference"]], "Pros and cons of variational inference with BayesianGaussianMixture": [[956, "pros-and-cons-of-variational-inference-with-bayesiangaussianmixture"]], "The Dirichlet Process": [[956, "the-dirichlet-process"]], "sklearn.utils.safe_sqr": [[930, "sklearn-utils-safe-sqr"]], "Novelty and Outlier Detection": [[963, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[963, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[963, "novelty-detection"]], "Scaling up the One-Class SVM": [[963, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[963, "id1"]], "Fitting an elliptic envelope": [[963, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[963, "isolation-forest"]], "Local Outlier Factor": [[963, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[963, "novelty-detection-with-local-outlier-factor"]], "Semi-supervised learning": [[970, "semi-supervised-learning"], [314, "semi-supervised-learning"]], "Unlabeled entries in y": [[970, null]], "Self Training": [[970, "self-training"]], "Examples": [[970, null], [970, null], [974, null], [974, null], [974, null], [998, "examples"], [164, "examples"], [356, "examples"], [400, null], [400, null], [395, null], [395, null], [362, null], [362, "examples"]], "Label Propagation": [[970, "label-propagation"]], "Unsupervised learning: seeking representations of the data": [[991, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[991, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[991, null]], "K-means clustering": [[991, "k-means-clustering"]], "Application example: vector quantization": [[991, null]], "Hierarchical agglomerative clustering: Ward": [[991, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[991, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[991, null]], "Decompositions: from a signal to components and loadings": [[991, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[991, null]], "Principal component analysis: PCA": [[991, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[991, "independent-component-analysis-ica"]], "Permutation feature importance": [[965, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[965, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[965, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[965, "misleading-values-on-strongly-correlated-features"]], "Model selection: choosing estimators and their parameters": [[987, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[987, "score-and-cross-validated-scores"]], "Cross-validation generators": [[987, "cross-validation-generators"]], "Exercise": [[987, null], [987, null], [990, null], [990, null]], "Grid-search and cross-validated estimators": [[987, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[987, "grid-search"]], "Nested cross-validation": [[987, null]], "Cross-validated estimators": [[987, "cross-validated-estimators"]], "Naive Bayes": [[959, "naive-bayes"]], "Multinomial Naive Bayes": [[959, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[959, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[959, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[959, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[959, "out-of-core-naive-bayes-model-fitting"]], "sklearn.utils.parallel_backend": [[925, "sklearn-utils-parallel-backend"]], "Linear and Quadratic Discriminant Analysis": [[951, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[951, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[951, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[951, "qda"]], "LDA": [[951, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[951, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[951, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[951, "estimation-algorithms"]], "Nearest Neighbors": [[960, "nearest-neighbors"], [277, "nearest-neighbors"], [164, "nearest-neighbors"]], "Unsupervised Nearest Neighbors": [[960, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[960, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[960, "kdtree-and-balltree-classes"]], "Nearest Neighbors Classification": [[960, "nearest-neighbors-classification"], [279, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[960, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[960, "nearest-neighbor-algorithms"]], "Brute Force": [[960, "brute-force"]], "K-D Tree": [[960, "k-d-tree"]], "Ball Tree": [[960, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[960, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[960, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[960, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[960, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[960, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[960, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[960, "neighborhood-components-analysis"]], "Dimensionality reduction": [[960, "dimensionality-reduction"]], "Mahalanobis distance": [[960, "mahalanobis-distance"]], "Implementation": [[960, "implementation"], [391, null]], "Training": [[960, "training"], [295, "training"]], "Transform": [[960, "transform"]], "Who is using scikit-learn?": [[981, "who-is-using-scikit-learn"]], "J.P.Morgan": [[981, "id1"]], "Spotify": [[981, "id2"]], "Inria": [[981, "id3"]], "betaworks": [[981, "id4"]], "Hugging Face": [[981, "id5"]], "Evernote": [[981, "id6"]], "T\u00e9l\u00e9com ParisTech": [[981, "id7"]], "Booking.com": [[981, "id8"]], "AWeber": [[981, "id9"]], "Yhat": [[981, "id10"]], "Rangespan": [[981, "id11"]], "Birchbox": [[981, "id12"]], "Bestofmedia Group": [[981, "id13"]], "Change.org": [[981, "id14"]], "PHIMECA Engineering": [[981, "id15"]], "HowAboutWe": [[981, "id16"]], "PeerIndex": [[981, "id17"]], "DataRobot": [[981, "id18"]], "OkCupid": [[981, "id19"]], "Lovely": [[981, "id20"]], "Data Publica": [[981, "id21"]], "Machinalis": [[981, "id22"]], "solido": [[981, "id23"]], "INFONEA": [[981, "id24"]], "Dataiku": [[981, "id25"]], "Otto Group": [[981, "id26"]], "Zopa": [[981, "id27"]], "MARS": [[981, "id28"]], "BNP Paribas Cardif": [[981, "id29"]], "sklearn.utils.validation.has_fit_parameter": [[945, "sklearn-utils-validation-has-fit-parameter"]], "sklearn.utils.validation.check_memory": [[942, "sklearn-utils-validation-check-memory"]], "Kernel Approximation": [[949, "kernel-approximation"], [164, "kernel-approximation"], [171, "kernel-approximation"]], "Nystroem Method for Kernel Approximation": [[949, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[949, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[949, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[949, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[949, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[949, "mathematical-details"]], "Validation curves: plotting scores to evaluate models": [[952, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[952, "validation-curve"]], "Learning curve": [[952, "learning-curve"]], "Metrics and scoring: quantifying the quality of predictions": [[957, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[957, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[957, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[957, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[957, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[957, "using-multiple-metric-evaluation"]], "Classification metrics": [[957, "classification-metrics"], [390, "classification-metrics"]], "From binary to multiclass and multilabel": [[957, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[957, "accuracy-score"]], "Example:": [[957, null], [957, null], [957, null], [957, null], [957, null], [957, null], [957, null], [957, null], [969, null], [990, null]], "Top-k accuracy score": [[957, "top-k-accuracy-score"]], "Balanced accuracy score": [[957, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[957, "cohen-s-kappa"]], "Confusion matrix": [[957, "confusion-matrix"], [250, "confusion-matrix"]], "Classification report": [[957, "classification-report"]], "Hamming loss": [[957, "hamming-loss"]], "Precision, recall and F-measures": [[957, "precision-recall-and-f-measures"]], "Binary classification": [[957, "binary-classification"]], "Multiclass and multilabel classification": [[957, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[957, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[957, "hinge-loss"]], "Log loss": [[957, "log-loss"]], "Matthews correlation coefficient": [[957, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[957, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[957, "receiver-operating-characteristic-roc"]], "Binary case": [[957, "binary-case"]], "Multi-class case": [[957, "multi-class-case"]], "Multi-label case": [[957, "multi-label-case"]], "Detection error tradeoff (DET)": [[957, "detection-error-tradeoff-det"]], "Zero one loss": [[957, "zero-one-loss"]], "Brier score loss": [[957, "brier-score-loss"]], "Class likelihood ratios": [[957, "class-likelihood-ratios"]], "Multilabel ranking metrics": [[957, "multilabel-ranking-metrics"], [390, "multilabel-ranking-metrics"]], "Coverage error": [[957, "coverage-error"]], "Label ranking average precision": [[957, "label-ranking-average-precision"]], "Ranking loss": [[957, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[957, "normalized-discounted-cumulative-gain"]], "Regression metrics": [[957, "regression-metrics"], [390, "regression-metrics"]], "R\u00b2 score, the coefficient of determination": [[957, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[957, "mean-absolute-error"]], "Mean squared error": [[957, "mean-squared-error"]], "Mean squared logarithmic error": [[957, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[957, "mean-absolute-percentage-error"]], "Median absolute error": [[957, "median-absolute-error"]], "Max error": [[957, "max-error"]], "Explained variance score": [[957, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[957, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[957, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[957, "pinball-loss"]], "D\u00b2 score": [[957, "d2-score"]], "D\u00b2 Tweedie score": [[957, "d2-tweedie-score"]], "D\u00b2 pinball score": [[957, "d2-pinball-score"]], "D\u00b2 absolute error score": [[957, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[957, "visual-evaluation-of-regression-models"]], "Clustering metrics": [[957, "clustering-metrics"], [390, "clustering-metrics"]], "Dummy estimators": [[957, "dummy-estimators"]], "Transforming the prediction target (y)": [[968, "transforming-the-prediction-target-y"]], "Label binarization": [[968, "label-binarization"]], "LabelBinarizer": [[968, "labelbinarizer"]], "MultiLabelBinarizer": [[968, "multilabelbinarizer"]], "Label encoding": [[968, "label-encoding"]], "Choosing the right estimator": [[985, "choosing-the-right-estimator"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[989, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[989, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[989, null]], "An example of reshaping data would be the digits dataset": [[989, null]], "Estimators objects": [[989, "estimators-objects"]], "sklearn.utils.validation.check_is_fitted": [[941, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[941, "examples-using-sklearn-utils-validation-check-is-fitted"]], "Imputation of missing values": [[947, "imputation-of-missing-values"], [967, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[947, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[947, "univariate-feature-imputation"]], "Multivariate feature imputation": [[947, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[947, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[947, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[947, "nearest-neighbors-imputation"]], "Keeping the number of features constants": [[947, "keeping-the-number-of-features-constants"]], "Marking imputed values": [[947, "marking-imputed-values"]], "Estimators that handle NaN values": [[947, "estimators-that-handle-nan-values"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[932, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "Neural network models (unsupervised)": [[962, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[962, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[962, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[962, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[962, "stochastic-maximum-likelihood-learning"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[937, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "Welcome to scikit-learn": [[975, "welcome-to-scikit-learn"]], "An introduction to machine learning with scikit-learn": [[983, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[983, null]], "Machine learning: the problem setting": [[983, "machine-learning-the-problem-setting"]], "Training set and testing set": [[983, null], [990, null]], "Loading an example dataset": [[983, "loading-an-example-dataset"]], "Shape of the data arrays": [[983, null]], "Loading from external datasets": [[983, null], [361, "loading-from-external-datasets"]], "Learning and predicting": [[983, "learning-and-predicting"]], "Choosing the parameters of the model": [[983, null]], "Conventions": [[983, "conventions"]], "Type casting": [[983, "type-casting"]], "Refitting and updating parameters": [[983, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[983, "multiclass-vs-multilabel-fitting"]], "Multiclass and multioutput algorithms": [[958, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[958, "multiclass-classification"], [990, null]], "Target format": [[958, "target-format"], [958, "id5"], [958, "id8"], [958, "id10"]], "OneVsRestClassifier": [[958, "onevsrestclassifier"]], "OneVsOneClassifier": [[958, "onevsoneclassifier"]], "OutputCodeClassifier": [[958, "outputcodeclassifier"]], "Multilabel classification": [[958, "multilabel-classification"], [232, "multilabel-classification"]], "MultiOutputClassifier": [[958, "multioutputclassifier"]], "ClassifierChain": [[958, "classifierchain"]], "Multiclass-multioutput classification": [[958, "multiclass-multioutput-classification"]], "Multioutput regression": [[958, "multioutput-regression"]], "MultiOutputRegressor": [[958, "multioutputregressor"]], "RegressorChain": [[958, "regressorchain"]], "Random Projection": [[969, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[969, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[969, "gaussian-random-projection"]], "Sparse random projection": [[969, "sparse-random-projection"]], "Inverse Transform": [[969, "inverse-transform"]], "Support": [[980, "support"]], "Mailing List": [[980, "mailing-list"]], "User questions": [[980, "user-questions"]], "Bug tracker": [[980, "bug-tracker"]], "Gitter": [[980, "gitter"]], "Documentation resources": [[980, "documentation-resources"]], "Putting it all together": [[988, "putting-it-all-together"]], "Pipelining": [[988, "pipelining"], [974, null]], "Face recognition with eigenfaces": [[988, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[988, "open-problem-stock-market-structure"]], "sklearn.utils.validation.column_or_1d": [[944, "sklearn-utils-validation-column-or-1d"]], "Support Vector Machines": [[972, "support-vector-machines"], [321, "support-vector-machines"], [164, "support-vector-machines"]], "Multi-class classification": [[972, "multi-class-classification"]], "Scores and probabilities": [[972, "scores-and-probabilities"]], "Unbalanced problems": [[972, "unbalanced-problems"]], "Density estimation, novelty detection": [[972, "density-estimation-novelty-detection"]], "Kernel functions": [[972, "kernel-functions"]], "Parameters of the RBF Kernel": [[972, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[972, "custom-kernels"]], "Using Python functions as kernels": [[972, "using-python-functions-as-kernels"]], "Using the Gram matrix": [[972, "using-the-gram-matrix"]], "SVC": [[972, "svc"]], "LinearSVC": [[972, "linearsvc"]], "NuSVC": [[972, "nusvc"]], "SVR": [[972, "svr"]], "LinearSVR": [[972, "linearsvr"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[940, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[936, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.register_parallel_backend": [[927, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.validation.check_symmetric": [[943, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.murmurhash3_32": [[924, "sklearn-utils-murmurhash3-32"]], "Isotonic regression": [[948, "isotonic-regression"]], "Preprocessing data": [[967, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[967, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[967, "scaling-features-to-a-range"]], "Scaling sparse data": [[967, "scaling-sparse-data"]], "Scaling data with outliers": [[967, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[967, null]], "Centering kernel matrices": [[967, "centering-kernel-matrices"]], "Non-linear transformation": [[967, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[967, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[967, "mapping-to-a-gaussian-distribution"]], "Normalization": [[967, "normalization"]], "Sparse input": [[967, null], [967, null]], "Encoding categorical features": [[967, "encoding-categorical-features"]], "Infrequent categories": [[967, "infrequent-categories"]], "Discretization": [[967, "discretization"]], "K-bins discretization": [[967, "k-bins-discretization"]], "Feature binarization": [[967, "feature-binarization"]], "Generating polynomial features": [[967, "generating-polynomial-features"]], "Polynomial features": [[967, "polynomial-features"]], "Spline transformer": [[967, "spline-transformer"]], "Custom transformers": [[967, "custom-transformers"]], "Decision Trees": [[973, "decision-trees"], [343, "decision-trees"], [164, "decision-trees"]], "Multi-output problems": [[973, "multi-output-problems"]], "Tips on practical use": [[973, "tips-on-practical-use"], [954, "tips-on-practical-use"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[973, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[973, "classification-criteria"]], "Regression criteria": [[973, "regression-criteria"]], "Minimal Cost-Complexity Pruning": [[973, "minimal-cost-complexity-pruning"]], "External Resources, Videos and Talks": [[976, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[976, "new-to-scientific-python"]], "External Tutorials": [[976, "external-tutorials"]], "Videos": [[976, "videos"]], "sklearn.utils.multiclass.unique_labels": [[923, "sklearn-utils-multiclass-unique-labels"]], "Kernel ridge regression": [[950, "kernel-ridge-regression"]], "Partial Dependence and Individual Conditional Expectation plots": [[964, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[964, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[964, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[964, "mathematical-definition"]], "Computation methods": [[964, "computation-methods"]], "Unsupervised dimensionality reduction": [[974, "unsupervised-dimensionality-reduction"]], "PCA: principal component analysis": [[974, "pca-principal-component-analysis"]], "Random projections": [[974, "random-projections"]], "Feature scaling": [[974, null]], "Supervised learning": [[979, "supervised-learning"]], "sklearn.utils.safe_mask": [[929, "sklearn-utils-safe-mask"]], "Related Projects": [[977, "related-projects"]], "Interoperability and framework enhancements": [[977, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[977, "other-estimators-and-tasks"]], "Statistical learning with Python": [[977, "statistical-learning-with-python"]], "Recommendation Engine packages": [[977, "recommendation-engine-packages"]], "Domain specific packages": [[977, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[977, "translations-of-scikit-learn-documentation"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[990, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[990, null]], "Vocabulary: classification and regression": [[990, null]], "Nearest neighbor and the curse of dimensionality": [[990, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[990, null]], "k-Nearest neighbors classifier": [[990, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[990, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[990, "linear-model-from-regression-to-sparsity"]], "Diabetes dataset": [[990, null], [364, "diabetes-dataset"]], "Linear regression": [[990, "linear-regression"]], "Shrinkage": [[990, "shrinkage"]], "Sparsity": [[990, "sparsity"], [399, "sparsity"]], "Different algorithms for the same problem": [[990, null]], "Shrinkage and sparsity with logistic regression": [[990, null]], "Support vector machines (SVMs)": [[990, "support-vector-machines-svms"]], "Linear SVMs": [[990, "linear-svms"]], "Using kernels": [[990, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[990, "rbf-kernel-radial-basis-function"]], "Interactive example": [[990, null]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[934, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.resample": [[928, "sklearn-utils-resample"]], "Tuning the hyper-parameters of an estimator": [[946, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[946, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[946, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[946, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[946, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[946, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[946, "choosing-a-resource"]], "Exhausting the available resources": [[946, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[946, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[946, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[946, "tips-for-parameter-search"]], "Specifying an objective metric": [[946, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[946, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[946, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[946, "model-selection-development-and-evaluation"]], "Parallelism": [[946, "parallelism"], [355, "parallelism"]], "Robustness to failure": [[946, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[946, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[946, "model-specific-cross-validation"]], "Information Criterion": [[946, "information-criterion"]], "Out of Bag Estimates": [[946, "out-of-bag-estimates"]], "Neural network models (supervised)": [[961, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[961, "multi-layer-perceptron"]], "Regularization": [[961, "regularization"]], "Algorithms": [[961, "algorithms"]], "More control with warm_start": [[961, "more-control-with-warm-start"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[938, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "Working With Text Data": [[992, "working-with-text-data"]], "Tutorial setup": [[992, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[992, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[992, "extracting-features-from-text-files"]], "Bags of words": [[992, "bags-of-words"]], "Tokenizing text with scikit-learn": [[992, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[992, "from-occurrences-to-frequencies"]], "Training a classifier": [[992, "training-a-classifier"]], "Building a pipeline": [[992, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[992, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[992, "parameter-tuning-using-grid-search"]], "Exercises": [[992, "exercises"]], "Exercise 1: Language identification": [[992, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[992, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[992, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[992, "where-to-from-here"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[939, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "Unsupervised learning": [[993, "unsupervised-learning"]], "Linear Models": [[953, "linear-models"]], "Ordinary Least Squares": [[953, "ordinary-least-squares"]], "Non-Negative Least Squares": [[953, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[953, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[953, "ridge-regression-and-classification"]], "Ridge Complexity": [[953, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[953, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Lasso": [[953, "lasso"], [180, "lasso"]], "Setting regularization parameter": [[953, "setting-regularization-parameter"]], "Using cross-validation": [[953, "using-cross-validation"]], "Information-criteria based model selection": [[953, "information-criteria-based-model-selection"]], "Comparison with the regularization parameter of SVM": [[953, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[953, "multi-task-lasso"]], "Elastic-Net": [[953, "elastic-net"]], "Multi-task Elastic-Net": [[953, "multi-task-elastic-net"]], "Least Angle Regression": [[953, "least-angle-regression"]], "LARS Lasso": [[953, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[953, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[953, "bayesian-regression"]], "Bayesian Ridge Regression": [[953, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[953, "automatic-relevance-determination-ard"]], "Logistic regression": [[953, "logistic-regression"]], "Binary Case": [[953, "binary-case"]], "Multinomial Case": [[953, "multinomial-case"]], "Solvers": [[953, "solvers"]], "Differences from liblinear:": [[953, "liblinear-differences"]], "Generalized Linear Models": [[953, "generalized-linear-models"], [174, "generalized-linear-models"], [164, "generalized-linear-models"]], "Usage": [[953, "usage"], [392, "usage"], [392, "id1"], [389, "usage"], [398, "usage"], [398, "id26"], [398, "id31"], [398, "id32"], [398, "id34"], [362, "usage"], [362, "id2"]], "Practical considerations": [[953, "practical-considerations"]], "Stochastic Gradient Descent - SGD": [[953, "stochastic-gradient-descent-sgd"]], "Perceptron": [[953, "perceptron"]], "Passive Aggressive Algorithms": [[953, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[953, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[953, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator?": [[953, null]], "RANSAC: RANdom SAmple Consensus": [[953, "ransac-random-sample-consensus"]], "Details of the algorithm": [[953, "details-of-the-algorithm"]], "Theil-Sen estimator: generalized-median-based estimator": [[953, "theil-sen-estimator-generalized-median-based-estimator"]], "Theoretical considerations": [[953, "theoretical-considerations"]], "Huber Regression": [[953, "huber-regression"]], "Notes": [[953, "notes"], [356, "notes"], [392, "notes"]], "Quantile Regression": [[953, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[953, "polynomial-regression-extending-linear-models-with-basis-functions"]], "A tutorial on statistical-learning for scientific data processing": [[986, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[986, null]], "Manifold learning": [[954, "manifold-learning"], [216, "manifold-learning"], [164, "manifold-learning"]], "Introduction": [[954, "introduction"]], "Isomap": [[954, "isomap"]], "Locally Linear Embedding": [[954, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[954, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[954, "hessian-eigenmapping"]], "Spectral Embedding": [[954, "spectral-embedding"]], "Local Tangent Space Alignment": [[954, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[954, "multi-dimensional-scaling-mds"]], "Metric MDS": [[954, "metric-mds"]], "Nonmetric MDS": [[954, "nonmetric-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[954, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Optimizing t-SNE": [[954, "optimizing-t-sne"]], "Barnes-Hut t-SNE": [[954, "barnes-hut-t-sne"]], "sklearn.utils.random.sample_without_replacement": [[926, "sklearn-utils-random-sample-without-replacement"]], "Version 0.14": [[1000, "version-0-14"]], "Changelog": [[1000, "changelog"], [1004, "changelog"], [1004, "id1"], [1004, "id2"], [999, "changelog"], [999, "id1"], [1008, "changelog"], [1008, "id1"], [1008, "id4"], [1013, "changelog"], [1003, "changelog"], [1003, "id1"], [1012, "changelog"], [1012, "id1"], [1012, "id7"], [1011, "changelog"], [1011, "id1"], [1011, "id7"], [1009, "changelog"], [1009, "id1"], [1009, "id4"], [1001, "changelog"], [998, "changelog"], [998, "id1"], [998, "id3"], [998, "id6"], [998, "id9"], [998, "id12"], [998, "id14"], [998, "id16"], [998, "id18"], [998, "id19"], [1010, "changelog"], [1010, "id1"], [1010, "id4"], [1005, "changelog"], [1005, "id1"], [1006, "changelog"], [1006, "id1"], [1006, "id5"], [1006, "id10"], [1006, "id23"], [1002, "changelog"], [1002, "id1"], [1007, "changelog"], [1007, "id1"], [1007, "id2"], [1007, "id7"]], "API changes summary": [[1000, "api-changes-summary"], [1004, "api-changes-summary"], [1004, "id5"], [999, "api-changes-summary"], [1003, "api-changes-summary"], [1001, "api-changes-summary"], [998, "api-changes-summary"], [998, "id4"], [998, "id7"], [998, "id10"], [1005, "api-changes-summary"], [1002, "api-changes-summary"]], "People": [[1000, "people"], [999, "people"], [999, "id2"], [1001, "people"], [998, "people"], [998, "id2"], [998, "id5"], [998, "id8"], [998, "id11"], [998, "id13"], [998, "id15"], [998, "id17"]], "Version 0.18.2": [[1004, "version-0-18-2"]], "Last release with Python 2.6 support": [[1004, null], [1004, null]], "Code Contributors": [[1004, "code-contributors"], [1004, "id6"], [1003, "code-contributors"], [1002, "code-contributors"]], "Version 0.18.1": [[1004, "version-0-18-1"]], "Enhancements": [[1004, "enhancements"], [1004, "id3"], [1003, "enhancements"], [1001, "enhancements"], [1005, "enhancements"], [1005, "id2"], [1002, "enhancements"]], "Bug fixes": [[1004, "bug-fixes"], [1004, "id4"], [1003, "bug-fixes"], [1003, "id2"], [1001, "bug-fixes"], [1001, "id1"], [1001, "id2"], [1005, "bug-fixes"], [1005, "id3"], [1002, "bug-fixes"], [1002, "id2"]], "Version 0.18": [[1004, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1004, "model-selection-enhancements-and-api-changes"]], "New features": [[1004, "new-features"], [1003, "new-features"], [1001, "new-features"], [1005, "new-features"], [1002, "new-features"]], "Version 0.13.1": [[999, "version-0-13-1"]], "Version 0.13": [[999, "version-0-13"]], "New Estimator Classes": [[999, "new-estimator-classes"]], "Version 0.22.2.post1": [[1008, "version-0-22-2-post1"]], "sklearn.impute": [[1008, "sklearn-impute"], [1008, "id6"], [1013, "sklearn-impute"], [1012, "sklearn-impute"], [1012, "id12"], [1011, "sklearn-impute"], [1009, "sklearn-impute"], [1010, "sklearn-impute"], [1006, "sklearn-impute"], [1006, "id31"], [1007, "sklearn-impute"], [1007, "id13"]], "sklearn.metrics": [[1008, "sklearn-metrics"], [1008, "id2"], [1008, "id8"], [1013, "sklearn-metrics"], [1012, "sklearn-metrics"], [1012, "id3"], [1012, "id15"], [1011, "sklearn-metrics"], [1011, "id17"], [1009, "sklearn-metrics"], [1009, "id10"], [1010, "sklearn-metrics"], [1010, "id2"], [1010, "id11"], [1006, "sklearn-metrics"], [1006, "id17"], [1006, "id33"], [1007, "sklearn-metrics"], [1007, "id4"], [1007, "id16"]], "sklearn.neighbors": [[1008, "sklearn-neighbors"], [1008, "id11"], [1013, "sklearn-neighbors"], [1012, "sklearn-neighbors"], [1011, "sklearn-neighbors"], [1011, "id5"], [1011, "id18"], [1010, "sklearn-neighbors"], [1006, "sklearn-neighbors"], [1006, "id7"], [1006, "id18"], [1006, "id36"], [1007, "sklearn-neighbors"], [1007, "id5"], [1007, "id17"]], "Version 0.22.1": [[1008, "version-0-22-1"]], "sklearn.cluster": [[1008, "sklearn-cluster"], [1008, "id5"], [1013, "sklearn-cluster"], [1012, "sklearn-cluster"], [1012, "id8"], [1011, "sklearn-cluster"], [1011, "id2"], [1011, "id9"], [1009, "sklearn-cluster"], [1009, "id2"], [1009, "id5"], [1010, "sklearn-cluster"], [1006, "sklearn-cluster"], [1006, "id2"], [1006, "id11"], [1006, "id24"], [1007, "sklearn-cluster"], [1007, "id8"]], "sklearn.inspection": [[1008, "sklearn-inspection"], [1008, "id7"], [1013, "sklearn-inspection"], [1012, "sklearn-inspection"], [1011, "sklearn-inspection"], [1009, "sklearn-inspection"], [1009, "id11"], [1010, "sklearn-inspection"], [1007, "sklearn-inspection"], [1007, "id3"], [1007, "id14"]], "sklearn.model_selection": [[1008, "sklearn-model-selection"], [1008, "id9"], [1008, "id13"], [1013, "sklearn-model-selection"], [1012, "sklearn-model-selection"], [1011, "sklearn-model-selection"], [1009, "sklearn-model-selection"], [1010, "sklearn-model-selection"], [1010, "id12"], [1006, "sklearn-model-selection"], [1006, "id35"], [1007, "sklearn-model-selection"]], "sklearn.naive_bayes": [[1008, "sklearn-naive-bayes"], [1008, "id10"], [1013, "sklearn-naive-bayes"], [1011, "sklearn-naive-bayes"], [1009, "sklearn-naive-bayes"], [1010, "sklearn-naive-bayes"], [1006, "sklearn-naive-bayes"]], "sklearn.preprocessing": [[1008, "sklearn-preprocessing"], [1008, "id12"], [1013, "sklearn-preprocessing"], [1012, "sklearn-preprocessing"], [1012, "id4"], [1012, "id16"], [1011, "sklearn-preprocessing"], [1011, "id20"], [1009, "sklearn-preprocessing"], [1010, "sklearn-preprocessing"], [1010, "id14"], [1006, "sklearn-preprocessing"], [1006, "id19"], [1006, "id37"], [1007, "sklearn-preprocessing"], [1007, "id18"]], "sklearn.semi_supervised": [[1008, "sklearn-semi-supervised"], [1009, "sklearn-semi-supervised"], [1010, "sklearn-semi-supervised"], [1010, "id3"], [1010, "id15"]], "sklearn.utils": [[1008, "sklearn-utils"], [1008, "id14"], [1013, "sklearn-utils"], [1012, "sklearn-utils"], [1012, "id18"], [1011, "sklearn-utils"], [1011, "id6"], [1011, "id23"], [1009, "sklearn-utils"], [1009, "id12"], [1010, "sklearn-utils"], [1010, "id17"], [1006, "sklearn-utils"], [1006, "id20"], [1006, "id39"], [1007, "sklearn-utils"]], "Version 0.22.0": [[1008, "version-0-22-0"]], "Legend for changelogs": [[1008, "legend-for-changelogs"], [1013, "legend-for-changelogs"], [1012, "legend-for-changelogs"], [1011, "legend-for-changelogs"], [1009, "legend-for-changelogs"], [1010, "legend-for-changelogs"], [1007, "legend-for-changelogs"]], "Website update": [[1008, "website-update"]], "Clear definition of the public API": [[1008, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1008, "deprecations-using-futurewarning-from-now-on"]], "Changed models": [[1008, "changed-models"], [1013, "changed-models"], [1012, "changed-models"], [1012, "id6"], [1011, "changed-models"], [1009, "changed-models"], [1009, "id3"], [1010, "changed-models"], [1005, "changed-models"], [1006, "changed-models"], [1006, "id9"], [1006, "id22"], [1007, "changed-models"], [1007, "id6"]], "sklearn.base": [[1008, "sklearn-base"], [1013, "sklearn-base"], [1012, "sklearn-base"], [1011, "sklearn-base"], [1010, "sklearn-base"], [1007, "sklearn-base"]], "sklearn.calibration": [[1008, "sklearn-calibration"], [1013, "sklearn-calibration"], [1012, "sklearn-calibration"], [1011, "sklearn-calibration"], [1011, "id8"], [1010, "sklearn-calibration"], [1007, "sklearn-calibration"]], "sklearn.compose": [[1008, "sklearn-compose"], [1012, "sklearn-compose"], [1011, "sklearn-compose"], [1009, "sklearn-compose"], [1010, "sklearn-compose"], [1010, "id5"], [1006, "sklearn-compose"], [1006, "id3"], [1006, "id6"], [1006, "id12"], [1006, "id25"], [1007, "sklearn-compose"], [1007, "id9"]], "sklearn.cross_decomposition": [[1008, "sklearn-cross-decomposition"], [1012, "sklearn-cross-decomposition"], [1010, "sklearn-cross-decomposition"], [1010, "id6"]], "sklearn.datasets": [[1008, "sklearn-datasets"], [1013, "sklearn-datasets"], [1012, "sklearn-datasets"], [1012, "id9"], [1011, "sklearn-datasets"], [1011, "id10"], [1009, "sklearn-datasets"], [1010, "sklearn-datasets"], [1006, "sklearn-datasets"], [1006, "id13"], [1006, "id27"], [1007, "sklearn-datasets"], [1007, "id10"]], "sklearn.decomposition": [[1008, "sklearn-decomposition"], [1013, "sklearn-decomposition"], [1012, "sklearn-decomposition"], [1012, "id10"], [1011, "sklearn-decomposition"], [1011, "id11"], [1009, "sklearn-decomposition"], [1009, "id6"], [1010, "sklearn-decomposition"], [1010, "id7"], [1006, "sklearn-decomposition"], [1006, "id4"], [1006, "id14"], [1006, "id28"], [1007, "sklearn-decomposition"], [1007, "id11"]], "sklearn.dummy": [[1008, "sklearn-dummy"], [1012, "sklearn-dummy"], [1011, "sklearn-dummy"], [1006, "sklearn-dummy"], [1007, "sklearn-dummy"]], "sklearn.ensemble": [[1008, "sklearn-ensemble"], [1013, "sklearn-ensemble"], [1012, "sklearn-ensemble"], [1011, "sklearn-ensemble"], [1011, "id3"], [1011, "id12"], [1009, "sklearn-ensemble"], [1009, "id7"], [1010, "sklearn-ensemble"], [1010, "id8"], [1006, "sklearn-ensemble"], [1006, "id29"], [1007, "sklearn-ensemble"], [1007, "id12"]], "sklearn.feature_extraction": [[1008, "sklearn-feature-extraction"], [1012, "sklearn-feature-extraction"], [1011, "sklearn-feature-extraction"], [1011, "id13"], [1009, "sklearn-feature-extraction"], [1009, "id8"], [1010, "sklearn-feature-extraction"], [1006, "sklearn-feature-extraction"], [1006, "id15"], [1006, "id30"], [1007, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[1008, "sklearn-feature-selection"], [1013, "sklearn-feature-selection"], [1012, "sklearn-feature-selection"], [1012, "id2"], [1012, "id11"], [1011, "sklearn-feature-selection"], [1011, "id14"], [1009, "sklearn-feature-selection"], [1010, "sklearn-feature-selection"], [1006, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1008, "sklearn-gaussian-process"], [1013, "sklearn-gaussian-process"], [1012, "sklearn-gaussian-process"], [1011, "sklearn-gaussian-process"], [1009, "sklearn-gaussian-process"], [1010, "sklearn-gaussian-process"], [1010, "id9"], [1006, "sklearn-gaussian-process"]], "sklearn.kernel_approximation": [[1008, "sklearn-kernel-approximation"], [1013, "sklearn-kernel-approximation"], [1012, "sklearn-kernel-approximation"], [1011, "sklearn-kernel-approximation"], [1010, "sklearn-kernel-approximation"]], "sklearn.linear_model": [[1008, "sklearn-linear-model"], [1013, "sklearn-linear-model"], [1012, "sklearn-linear-model"], [1012, "id13"], [1011, "sklearn-linear-model"], [1011, "id4"], [1011, "id15"], [1009, "sklearn-linear-model"], [1009, "id9"], [1010, "sklearn-linear-model"], [1010, "id10"], [1006, "sklearn-linear-model"], [1006, "id16"], [1006, "id32"], [1007, "sklearn-linear-model"], [1007, "id15"]], "sklearn.manifold": [[1008, "sklearn-manifold"], [1013, "sklearn-manifold"], [1012, "sklearn-manifold"], [1012, "id14"], [1011, "sklearn-manifold"], [1011, "id16"], [1009, "sklearn-manifold"], [1010, "sklearn-manifold"], [1006, "sklearn-manifold"], [1007, "sklearn-manifold"]], "sklearn.multioutput": [[1008, "sklearn-multioutput"], [1013, "sklearn-multioutput"], [1009, "sklearn-multioutput"], [1010, "sklearn-multioutput"], [1010, "id13"], [1006, "sklearn-multioutput"], [1007, "sklearn-multioutput"]], "sklearn.neural_network": [[1008, "sklearn-neural-network"], [1013, "sklearn-neural-network"], [1012, "sklearn-neural-network"], [1011, "sklearn-neural-network"], [1009, "sklearn-neural-network"], [1010, "sklearn-neural-network"], [1006, "sklearn-neural-network"], [1007, "sklearn-neural-network"]], "sklearn.pipeline": [[1008, "sklearn-pipeline"], [1013, "sklearn-pipeline"], [1012, "sklearn-pipeline"], [1011, "sklearn-pipeline"], [1011, "id19"], [1009, "sklearn-pipeline"], [1010, "sklearn-pipeline"], [1006, "sklearn-pipeline"], [1007, "sklearn-pipeline"]], "sklearn.svm": [[1008, "sklearn-svm"], [1013, "sklearn-svm"], [1012, "sklearn-svm"], [1011, "sklearn-svm"], [1011, "id21"], [1009, "sklearn-svm"], [1010, "sklearn-svm"], [1006, "sklearn-svm"], [1006, "id38"], [1007, "sklearn-svm"]], "sklearn.tree": [[1008, "sklearn-tree"], [1013, "sklearn-tree"], [1012, "sklearn-tree"], [1012, "id5"], [1012, "id17"], [1011, "sklearn-tree"], [1011, "id22"], [1009, "sklearn-tree"], [1010, "sklearn-tree"], [1010, "id16"], [1006, "sklearn-tree"], [1007, "sklearn-tree"], [1007, "id19"]], "sklearn.isotonic": [[1008, "sklearn-isotonic"], [1012, "sklearn-isotonic"], [1010, "sklearn-isotonic"], [1006, "sklearn-isotonic"], [1007, "sklearn-isotonic"]], "Miscellaneous": [[1008, "miscellaneous"], [1011, "miscellaneous"], [1009, "miscellaneous"], [1009, "id13"], [1010, "miscellaneous"], [1006, "miscellaneous"], [1006, "id40"], [1007, "miscellaneous"], [224, "miscellaneous"], [164, "miscellaneous"], [390, "miscellaneous"]], "Changes to estimator checks": [[1008, "changes-to-estimator-checks"], [1006, "changes-to-estimator-checks"], [1007, "changes-to-estimator-checks"]], "Code and Documentation Contributors": [[1008, "code-and-documentation-contributors"], [1013, "code-and-documentation-contributors"], [1012, "code-and-documentation-contributors"], [1011, "code-and-documentation-contributors"], [1009, "code-and-documentation-contributors"], [1010, "code-and-documentation-contributors"], [1005, "code-and-documentation-contributors"], [1005, "id9"], [1006, "code-and-documentation-contributors"], [1006, "id8"], [1006, "id21"], [1006, "id41"], [1007, "code-and-documentation-contributors"]], "Version 1.2.0": [[1013, "version-1-2-0"]], "Changes impacting all modules": [[1013, "changes-impacting-all-modules"]], "sklearn.discriminant_analysis": [[1013, "sklearn-discriminant-analysis"], [1012, "sklearn-discriminant-analysis"], [1010, "sklearn-discriminant-analysis"], [1006, "sklearn-discriminant-analysis"], [1007, "sklearn-discriminant-analysis"]], "Version 0.17.1": [[1003, "version-0-17-1"]], "Version 0.17": [[1003, "version-0-17"]], "Version 1.1.3": [[1012, "version-1-1-3"]], "Version 1.1.2": [[1012, "version-1-1-2"]], "Version 1.1.1": [[1012, "version-1-1-1"]], "Version 1.1.0": [[1012, "version-1-1-0"]], "Minimal dependencies": [[1012, "minimal-dependencies"], [1011, "minimal-dependencies"]], "sklearn.covariance": [[1012, "sklearn-covariance"], [1011, "sklearn-covariance"], [1010, "sklearn-covariance"], [1006, "sklearn-covariance"], [1006, "id26"]], "sklearn.mixture": [[1012, "sklearn-mixture"], [1011, "sklearn-mixture"], [1006, "sklearn-mixture"], [1006, "id34"], [1007, "sklearn-mixture"]], "sklearn.multiclass": [[1012, "sklearn-multiclass"], [1011, "sklearn-multiclass"], [1010, "sklearn-multiclass"], [1007, "sklearn-multiclass"]], "sklearn.random_projection": [[1012, "sklearn-random-projection"]], "Visualizations": [[995, "visualizations"]], "Available Plotting Utilities": [[995, "available-plotting-utilities"]], "Display Objects": [[995, "display-objects"]], "Version 1.0.2": [[1011, "version-1-0-2"]], "Version 1.0.1": [[1011, "version-1-0-1"]], "Fixed models": [[1011, "fixed-models"]], "Version 1.0.0": [[1011, "version-1-0-0"]], "Enforcing keyword-only arguments": [[1011, "enforcing-keyword-only-arguments"], [1009, "enforcing-keyword-only-arguments"]], "Version 0.23.2": [[1009, "version-0-23-2"]], "Version 0.23.1": [[1009, "version-0-23-1"]], "Version 0.23.0": [[1009, "version-0-23-0"]], "Version 0.15.2": [[1001, "version-0-15-2"]], "Version 0.15.1": [[1001, "version-0-15-1"]], "Version 0.15": [[1001, "version-0-15"]], "Highlights": [[1001, "highlights"], [998, "highlights"], [1005, "highlights"], [1006, "highlights"], [1002, "highlights"]], "Documentation improvements": [[1001, "documentation-improvements"], [1002, "documentation-improvements"]], "Release History": [[996, "release-history"]], "Version 0.12.1": [[998, "version-0-12-1"]], "Version 0.12": [[998, "version-0-12"]], "Version 0.11": [[998, "version-0-11"]], "Other changes": [[998, "other-changes"]], "Version 0.10": [[998, "version-0-10"]], "Version 0.9": [[998, "version-0-9"]], "Version 0.8": [[998, "version-0-8"]], "Version 0.7": [[998, "version-0-7"]], "Version 0.6": [[998, "version-0-6"]], "Version 0.5": [[998, "version-0-5"]], "New classes": [[998, "new-classes"]], "Documentation": [[998, "documentation"], [367, "documentation"]], "Fixes": [[998, "fixes"]], "External dependencies": [[998, "external-dependencies"]], "Removed modules": [[998, "removed-modules"]], "Misc": [[998, "misc"]], "Version 0.4": [[998, "version-0-4"]], "Earlier versions": [[998, "earlier-versions"]], "User Guide": [[994, "user-guide"]], "Version 0.24.2": [[1010, "version-0-24-2"]], "feature_extraction": [[1010, "feature-extraction"]], "Version 0.24.1": [[1010, "version-0-24-1"]], "Packaging": [[1010, "packaging"]], "Version 0.24.0": [[1010, "version-0-24-0"]], "sklearn.exceptions": [[1010, "sklearn-exceptions"]], "Version 0.19.2": [[1005, "version-0-19-2"]], "Related changes": [[1005, "related-changes"]], "Version 0.19.1": [[1005, "version-0-19-1"]], "API changes": [[1005, "api-changes"]], "Version 0.19": [[1005, "version-0-19"]], "Version 0.20.4": [[1006, "version-0-20-4"]], "Version 0.20.3": [[1006, "version-0-20-3"]], "Version 0.20.2": [[1006, "version-0-20-2"]], "Version 0.20.1": [[1006, "version-0-20-1"]], "Version 0.20.0": [[1006, "version-0-20-0"]], "Known Major Bugs": [[1006, "known-major-bugs"], [1007, "known-major-bugs"]], "Multiple modules": [[1006, "multiple-modules"], [1007, "multiple-modules"]], "Version 0.16.1": [[1002, "version-0-16-1"]], "Version 0.16": [[1002, "version-0-16"]], "Version 0.21.3": [[1007, "version-0-21-3"]], "Version 0.21.2": [[1007, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1007, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1007, "version-0-21-1"]], "Version 0.21.0": [[1007, "version-0-21-0"]], "sklearn.externals": [[1007, "sklearn-externals"]], "sklearn.tree.ExtraTreeRegressor": [[886, "sklearn-tree-extratreeregressor"]], "sklearn.utils.check_scalar": [[899, "sklearn-utils-check-scalar"]], "sklearn.tree.export_text": [[888, "sklearn-tree-export-text"]], "sklearn.preprocessing.StandardScaler": [[856, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[856, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.svm.NuSVR": [[878, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[878, "examples-using-sklearn-svm-nusvr"]], "sklearn.preprocessing.SplineTransformer": [[855, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[855, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.show_versions": [[874, "sklearn-show-versions"]], "sklearn.tree.export_graphviz": [[887, "sklearn-tree-export-graphviz"]], "sklearn.utils.discovery.all_functions": [[905, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.check_array": [[896, "sklearn-utils-check-array"]], "sklearn.utils.extmath.density": [[909, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[909, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.weighted_mode": [[914, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.graph.single_source_shortest_path_length": [[917, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.check_random_state": [[898, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[898, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.discovery.all_displays": [[903, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.metaestimators.available_if": [[919, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[919, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.random_projection.GaussianRandomProjection": [[867, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.tree.DecisionTreeClassifier": [[883, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[883, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.preprocessing.QuantileTransformer": [[853, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[853, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.tree.ExtraTreeClassifier": [[885, "sklearn-tree-extratreeclassifier"]], "sklearn.utils.extmath.randomized_range_finder": [[911, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.preprocessing.RobustScaler": [[854, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[854, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.power_transform": [[863, "sklearn-preprocessing-power-transform"]], "sklearn.svm.OneClassSVM": [[879, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[879, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.tree.plot_tree": [[889, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[889, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.deprecated": [[902, "sklearn-utils-deprecated"]], "sklearn.utils.extmath.fast_logdet": [[910, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.safe_sparse_dot": [[913, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.gen_even_slices": [[916, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[916, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.class_weight.compute_sample_weight": [[901, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.preprocessing.minmax_scale": [[861, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[861, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.utils.assert_all_finite": [[894, "sklearn-utils-assert-all-finite"]], "sklearn.set_config": [[873, "sklearn-set-config"]], "Examples using sklearn.set_config": [[873, "examples-using-sklearn-set-config"]], "sklearn.utils.estimator_html_repr": [[908, "sklearn-utils-estimator-html-repr"]], "sklearn.preprocessing.add_dummy_feature": [[857, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.utils.indexable": [[918, "sklearn-utils-indexable"]], "sklearn.utils.estimator_checks.check_estimator": [[906, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.preprocessing.scale": [[866, "sklearn-preprocessing-scale"]], "sklearn.preprocessing.PowerTransformer": [[852, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[852, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.svm.LinearSVC": [[875, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[875, "examples-using-sklearn-svm-linearsvc"]], "sklearn.utils.metaestimators.if_delegate_has_method": [[920, "sklearn-utils-metaestimators-if-delegate-has-method"]], "sklearn.utils.check_consistent_length": [[897, "sklearn-utils-check-consistent-length"]], "sklearn.svm.NuSVC": [[877, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[877, "examples-using-sklearn-svm-nusvc"]], "sklearn.utils.arrayfuncs.min_pos": [[892, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.multiclass.is_multilabel": [[921, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.random_projection.SparseRandomProjection": [[868, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[868, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.utils._safe_indexing": [[891, "sklearn-utils-safe-indexing"]], "sklearn.tree.DecisionTreeRegressor": [[884, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[884, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.svm.l1_min_c": [[882, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[882, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[869, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[869, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.preprocessing.label_binarize": [[859, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[859, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.semi_supervised.LabelPropagation": [[870, "sklearn-semi-supervised-labelpropagation"]], "sklearn.preprocessing.robust_scale": [[865, "sklearn-preprocessing-robust-scale"]], "sklearn.semi_supervised.LabelSpreading": [[871, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[871, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[907, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[907, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[872, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[872, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.preprocessing.maxabs_scale": [[860, "sklearn-preprocessing-maxabs-scale"]], "sklearn.utils.extmath.randomized_svd": [[912, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.multiclass.type_of_target": [[922, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.class_weight.compute_class_weight": [[900, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.Bunch": [[890, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[890, "examples-using-sklearn-utils-bunch"]], "sklearn.svm.SVR": [[881, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[881, "examples-using-sklearn-svm-svr"]], "sklearn.svm.SVC": [[880, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[880, "examples-using-sklearn-svm-svc"]], "sklearn.preprocessing.quantile_transform": [[864, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[864, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.svm.LinearSVR": [[876, "sklearn-svm-linearsvr"]], "sklearn.utils.as_float_array": [[893, "sklearn-utils-as-float-array"]], "sklearn.utils.check_X_y": [[895, "sklearn-utils-check-x-y"]], "sklearn.utils.discovery.all_estimators": [[904, "sklearn-utils-discovery-all-estimators"]], "sklearn.preprocessing.binarize": [[858, "sklearn-preprocessing-binarize"]], "sklearn.utils.gen_batches": [[915, "sklearn-utils-gen-batches"]], "sklearn.preprocessing.normalize": [[862, "sklearn-preprocessing-normalize"]], "sklearn.naive_bayes.MultinomialNB": [[815, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[815, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neural_network.MLPRegressor": [[834, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[834, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[835, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[835, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[827, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.model_selection.LeavePOut": [[784, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.StratifiedShuffleSplit": [[794, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[794, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.preprocessing.OneHotEncoder": [[849, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[849, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.model_selection.ParameterSampler": [[786, "sklearn-model-selection-parametersampler"]], "sklearn.neighbors.radius_neighbors_graph": [[830, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.model_selection.ShuffleSplit": [[791, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[791, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[790, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[790, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.preprocessing.Binarizer": [[839, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.MinMaxScaler": [[846, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[846, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.model_selection.ParameterGrid": [[785, "sklearn-model-selection-parametergrid"]], "sklearn.neighbors.kneighbors_graph": [[829, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[829, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.model_selection.LeavePGroupsOut": [[783, "sklearn-model-selection-leavepgroupsout"]], "sklearn.preprocessing.KBinsDiscretizer": [[841, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[841, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.model_selection.check_cv": [[796, "sklearn-model-selection-check-cv"]], "sklearn.neighbors.KNeighborsClassifier": [[818, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[818, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.LocalOutlierFactor": [[822, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[822, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.preprocessing.MultiLabelBinarizer": [[847, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.multioutput.ClassifierChain": [[807, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[807, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.neural_network.MLPClassifier": [[833, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[833, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.model_selection.train_test_split": [[802, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[802, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[826, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.KernelDensity": [[821, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[821, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.naive_bayes.ComplementNB": [[813, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[813, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.preprocessing.MaxAbsScaler": [[845, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[845, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.Normalizer": [[848, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[848, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.model_selection.cross_validate": [[799, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[799, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.StratifiedGroupKFold": [[792, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[792, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.preprocessing.KernelCenterer": [[842, "sklearn-preprocessing-kernelcenterer"]], "sklearn.pipeline.make_union": [[838, "sklearn-pipeline-make-union"]], "sklearn.model_selection.cross_val_predict": [[797, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[797, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.RepeatedKFold": [[789, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[789, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.multioutput.MultiOutputRegressor": [[809, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[809, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.preprocessing.FunctionTransformer": [[840, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[840, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.PolynomialFeatures": [[851, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[851, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.model_selection.TimeSeriesSplit": [[795, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[795, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.preprocessing.LabelEncoder": [[844, "sklearn-preprocessing-labelencoder"]], "sklearn.multiclass.OneVsRestClassifier": [[805, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[805, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.preprocessing.OrdinalEncoder": [[850, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[850, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.neighbors.KDTree": [[817, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[828, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.model_selection.learning_curve": [[800, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[800, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.naive_bayes.BernoulliNB": [[811, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[811, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.preprocessing.LabelBinarizer": [[843, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[843, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.neighbors.sort_graph_by_row_values": [[831, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.model_selection.validation_curve": [[803, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[803, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.naive_bayes.GaussianNB": [[814, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[814, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.multioutput.MultiOutputClassifier": [[808, "sklearn-multioutput-multioutputclassifier"]], "sklearn.model_selection.StratifiedKFold": [[793, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[793, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.permutation_test_score": [[801, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[801, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.multiclass.OutputCodeClassifier": [[806, "sklearn-multiclass-outputcodeclassifier"]], "sklearn.neural_network.BernoulliRBM": [[832, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[832, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neighbors.NearestCentroid": [[823, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[823, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[825, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[825, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.NearestNeighbors": [[824, "sklearn-neighbors-nearestneighbors"]], "sklearn.model_selection.cross_val_score": [[798, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[798, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.neighbors.KNeighborsRegressor": [[819, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[819, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.model_selection.LeaveOneOut": [[782, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeaveOneGroupOut": [[781, "sklearn-model-selection-leaveonegroupout"]], "sklearn.multiclass.OneVsOneClassifier": [[804, "sklearn-multiclass-onevsoneclassifier"]], "sklearn.model_selection.RandomizedSearchCV": [[788, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[788, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.neighbors.BallTree": [[816, "sklearn-neighbors-balltree"]], "sklearn.pipeline.Pipeline": [[836, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[836, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[837, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[837, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.neighbors.KNeighborsTransformer": [[820, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[820, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.multioutput.RegressorChain": [[810, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.CategoricalNB": [[812, "sklearn-naive-bayes-categoricalnb"]], "sklearn.model_selection.PredefinedSplit": [[787, "sklearn-model-selection-predefinedsplit"]], "sklearn.metrics.pairwise.paired_distances": [[748, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.rbf_kernel": [[753, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.homogeneity_score": [[714, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[714, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.roc_curve": [[766, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[766, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.hamming_loss": [[711, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[711, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[746, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.label_ranking_loss": [[717, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[754, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise.haversine_distances": [[741, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.r2_score": [[762, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[762, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.pairwise_distances_argmin": [[756, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[756, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.model_selection.KFold": [[779, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[779, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[780, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[780, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[749, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.distance_metrics": [[739, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.polynomial_kernel": [[752, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.silhouette_score": [[768, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[768, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.pairwise_distances_chunked": [[758, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.recall_score": [[764, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[764, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.median_absolute_error": [[730, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[730, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.pairwise.cosine_distances": [[737, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.mean_absolute_error": [[722, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[722, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.model_selection.GroupKFold": [[775, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[775, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.metrics.pairwise.laplacian_kernel": [[743, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.get_scorer_names": [[710, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[735, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.mean_poisson_deviance": [[726, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[726, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.pairwise.euclidean_distances": [[740, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.mean_pinball_loss": [[725, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[725, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_squared_log_error": [[728, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mutual_info_score": [[732, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[732, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[747, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.v_measure_score": [[770, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[770, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.max_error": [[721, "sklearn-metrics-max-error"]], "sklearn.metrics.precision_score": [[761, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[761, "examples-using-sklearn-metrics-precision-score"]], "sklearn.model_selection.GroupShuffleSplit": [[776, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[776, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingRandomSearchCV": [[778, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[778, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.metrics.rand_score": [[763, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[763, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.log_loss": [[718, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[718, "examples-using-sklearn-metrics-log-loss"]], "sklearn.mixture.GaussianMixture": [[773, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[773, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.metrics.pairwise.cosine_similarity": [[738, "sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise_distances_argmin_min": [[757, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise.chi2_kernel": [[736, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.mixture.BayesianGaussianMixture": [[772, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[772, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.model_selection.HalvingGridSearchCV": [[777, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[777, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[750, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.multilabel_confusion_matrix": [[731, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mean_squared_error": [[727, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[727, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[723, "sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[724, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.ndcg_score": [[733, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.roc_auc_score": [[765, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[765, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[713, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.pairwise.linear_kernel": [[744, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.hinge_loss": [[712, "sklearn-metrics-hinge-loss"]], "sklearn.metrics.label_ranking_average_precision_score": [[716, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.silhouette_samples": [[767, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[767, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.make_scorer": [[719, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[719, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.normalized_mutual_info_score": [[734, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[734, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.top_k_accuracy_score": [[769, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.pairwise_distances": [[755, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[755, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.jaccard_score": [[715, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[715, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.matthews_corrcoef": [[720, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.pairwise.kernel_metrics": [[742, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.mean_tweedie_deviance": [[729, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[729, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.pairwise.manhattan_distances": [[745, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.precision_recall_curve": [[759, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[759, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.pairwise.pairwise_kernels": [[751, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.precision_recall_fscore_support": [[760, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.model_selection.GridSearchCV": [[774, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[774, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.metrics.zero_one_loss": [[771, "sklearn-metrics-zero-one-loss"]], "Examples using sklearn.metrics.zero_one_loss": [[771, "examples-using-sklearn-metrics-zero-one-loss"]], "sklearn.metrics.fowlkes_mallows_score": [[708, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.auc": [[684, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[684, "examples-using-sklearn-metrics-auc"]], "sklearn.linear_model.orthogonal_mp": [[663, "sklearn-linear-model-orthogonal-mp"]], "sklearn.manifold.Isomap": [[666, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[666, "examples-using-sklearn-manifold-isomap"]], "sklearn.metrics.f1_score": [[706, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[706, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.brier_score_loss": [[687, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[687, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.linear_model.RidgeClassifier": [[652, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[652, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.manifold.TSNE": [[670, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[670, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.trustworthiness": [[674, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.PredictionErrorDisplay": [[679, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[679, "examples-using-sklearn-metrics-predictionerrordisplay"]], "sklearn.linear_model.MultiTaskLassoCV": [[641, "sklearn-linear-model-multitasklassocv"]], "sklearn.metrics.d2_tweedie_score": [[701, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.calinski_harabasz_score": [[688, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.balanced_accuracy_score": [[686, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.coverage_error": [[698, "sklearn-metrics-coverage-error"]], "sklearn.linear_model.TweedieRegressor": [[658, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[658, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.RANSACRegressor": [[649, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[649, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.metrics.adjusted_mutual_info_score": [[682, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[682, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.average_precision_score": [[685, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[685, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.linear_model.SGDRegressor": [[656, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[656, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[639, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.QuantileRegressor": [[648, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[648, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[644, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[644, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.TheilSenRegressor": [[657, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[657, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.metrics.RocCurveDisplay": [[680, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[680, "examples-using-sklearn-metrics-roccurvedisplay"]], "sklearn.metrics.consensus_score": [[697, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[697, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.det_curve": [[704, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[704, "examples-using-sklearn-metrics-det-curve"]], "sklearn.linear_model.MultiTaskLasso": [[640, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[640, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.PoissonRegressor": [[647, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[647, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.metrics.DistanceMetric": [[677, "sklearn-metrics-distancemetric"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[642, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[642, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.lasso_path": [[662, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[662, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.manifold.LocallyLinearEmbedding": [[667, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[667, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.linear_model.RidgeCV": [[651, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[651, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.metrics.ConfusionMatrixDisplay": [[675, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[675, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "sklearn.metrics.check_scoring": [[689, "sklearn-metrics-check-scoring"]], "sklearn.linear_model.Ridge": [[650, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[650, "examples-using-sklearn-linear-model-ridge"]], "sklearn.metrics.d2_pinball_score": [[700, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.dcg_score": [[703, "sklearn-metrics-dcg-score"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[693, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[645, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.manifold.locally_linear_embedding": [[671, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[671, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.MDS": [[668, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[668, "examples-using-sklearn-manifold-mds"]], "sklearn.linear_model.RidgeClassifierCV": [[653, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.manifold.spectral_embedding": [[673, "sklearn-manifold-spectral-embedding"]], "sklearn.metrics.explained_variance_score": [[705, "sklearn-metrics-explained-variance-score"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[643, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[643, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.lars_path_gram": [[661, "sklearn-linear-model-lars-path-gram"]], "sklearn.metrics.classification_report": [[691, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[691, "examples-using-sklearn-metrics-classification-report"]], "sklearn.manifold.smacof": [[672, "sklearn-manifold-smacof"]], "sklearn.linear_model.orthogonal_mp_gram": [[664, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.metrics.adjusted_rand_score": [[683, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[683, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.linear_model.SGDClassifier": [[654, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[654, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.lars_path": [[660, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[660, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.metrics.completeness_score": [[695, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[695, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.class_likelihood_ratios": [[690, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[690, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.manifold.SpectralEmbedding": [[669, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[669, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.metrics.cohen_kappa_score": [[694, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.get_scorer": [[709, "sklearn-metrics-get-scorer"]], "sklearn.metrics.confusion_matrix": [[696, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[696, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.linear_model.SGDOneClassSVM": [[655, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[655, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.ridge_regression": [[665, "sklearn-linear-model-ridge-regression"]], "sklearn.metrics.cluster.contingency_matrix": [[692, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.linear_model.enet_path": [[659, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[659, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.metrics.davies_bouldin_score": [[702, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.fbeta_score": [[707, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.DetCurveDisplay": [[676, "sklearn-metrics-detcurvedisplay"]], "sklearn.linear_model.Perceptron": [[646, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[646, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.metrics.accuracy_score": [[681, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[681, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.d2_absolute_error_score": [[699, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.PrecisionRecallDisplay": [[678, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[678, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "sklearn.inspection.PartialDependenceDisplay": [[610, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[610, "examples-using-sklearn-inspection-partialdependencedisplay"]], "sklearn.feature_selection.f_classif": [[583, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[583, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.inspection.partial_dependence": [[611, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[611, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.feature_selection.r_regression": [[587, "sklearn-feature-selection-r-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[616, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.linear_model.BayesianRidge": [[623, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[623, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.LogisticRegression": [[636, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[636, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.feature_selection.mutual_info_regression": [[586, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[586, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_extraction.text.TfidfTransformer": [[568, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[568, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_selection.RFECV": [[572, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[572, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.VarianceThreshold": [[581, "sklearn-feature-selection-variancethreshold"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[601, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[601, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.kernel_ridge.KernelRidge": [[621, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[621, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.MultiTaskElasticNet": [[638, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[593, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[593, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.linear_model.ElasticNet": [[624, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[624, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.feature_selection.chi2": [[582, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[582, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[589, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[589, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.Kernel": [[596, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[596, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.feature_selection.SelectFdr": [[573, "sklearn-feature-selection-selectfdr"]], "sklearn.impute.KNNImputer": [[606, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[606, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[607, "sklearn-impute-missingindicator"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[588, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[588, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.kernels.Matern": [[597, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[597, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.feature_selection.SelectFwe": [[576, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectorMixin": [[579, "sklearn-feature-selection-selectormixin"]], "sklearn.gaussian_process.kernels.Product": [[599, "sklearn-gaussian-process-kernels-product"]], "sklearn.linear_model.GammaRegressor": [[626, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[626, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.LinearRegression": [[635, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[635, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.gaussian_process.kernels.RBF": [[600, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[600, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.isotonic.IsotonicRegression": [[613, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[613, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[598, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.impute.SimpleImputer": [[608, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[608, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.feature_selection.SelectPercentile": [[578, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[578, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.isotonic.check_increasing": [[614, "sklearn-isotonic-check-increasing"]], "sklearn.impute.IterativeImputer": [[605, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[605, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.linear_model.Lars": [[628, "sklearn-linear-model-lars"]], "sklearn.linear_model.ARDRegression": [[622, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[622, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.LarsCV": [[629, "sklearn-linear-model-larscv"]], "sklearn.feature_selection.GenericUnivariateSelect": [[570, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[595, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[595, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.linear_model.LassoCV": [[631, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[631, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[591, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[591, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.linear_model.LassoLars": [[632, "sklearn-linear-model-lassolars"]], "sklearn.gaussian_process.kernels.DotProduct": [[592, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[592, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.feature_selection.f_regression": [[584, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[584, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.gaussian_process.kernels.Exponentiation": [[594, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[618, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[618, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.Nystroem": [[617, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[617, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[620, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.inspection.permutation_importance": [[612, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[612, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.linear_model.Lasso": [[630, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[630, "examples-using-sklearn-linear-model-lasso"]], "sklearn.feature_selection.SelectKBest": [[577, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[577, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.gaussian_process.kernels.Sum": [[602, "sklearn-gaussian-process-kernels-sum"]], "sklearn.feature_selection.RFE": [[571, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[571, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.SelectFpr": [[574, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.mutual_info_classif": [[585, "sklearn-feature-selection-mutual-info-classif"]], "sklearn.isotonic.isotonic_regression": [[615, "sklearn-isotonic-isotonic-regression"]], "sklearn.linear_model.LogisticRegressionCV": [[637, "sklearn-linear-model-logisticregressioncv"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[569, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[569, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[590, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.linear_model.HuberRegressor": [[627, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[627, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[603, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[603, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[604, "sklearn-get-config"]], "sklearn.feature_selection.SelectFromModel": [[575, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[575, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.linear_model.ElasticNetCV": [[625, "sklearn-linear-model-elasticnetcv"]], "sklearn.inspection.DecisionBoundaryDisplay": [[609, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[609, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "sklearn.linear_model.LassoLarsCV": [[633, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[633, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[634, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[634, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.feature_selection.SequentialFeatureSelector": [[580, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[580, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.kernel_approximation.RBFSampler": [[619, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[619, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.decomposition.non_negative_factorization": [[525, "sklearn-decomposition-non-negative-factorization"]], "sklearn.ensemble.ExtraTreesRegressor": [[536, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[536, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.dummy.DummyClassifier": [[529, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[529, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[543, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[543, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[537, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[537, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.datasets.make_multilabel_classification": [[501, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[501, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[515, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[515, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.experimental.enable_halving_search_cv": [[556, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.datasets.make_hastie_10_2": [[498, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[498, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.ensemble.ExtraTreesClassifier": [[535, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[535, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[539, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[539, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.decomposition.FastICA": [[511, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[511, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.MiniBatchSparsePCA": [[517, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[517, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.ensemble.BaggingRegressor": [[534, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[534, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.decomposition.LatentDirichletAllocation": [[514, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[514, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.PCA": [[519, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[519, "examples-using-sklearn-decomposition-pca"]], "sklearn.ensemble.StackingRegressor": [[546, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[546, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[528, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[528, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.datasets.make_regression": [[502, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[502, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_sparse_coded_signal": [[504, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[504, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.ensemble.BaggingClassifier": [[533, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.VotingClassifier": [[547, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[547, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.exceptions.EfficiencyWarning": [[552, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.UndefinedMetricWarning": [[555, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[540, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[540, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.AdaBoostRegressor": [[532, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[532, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.datasets.make_moons": [[500, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[500, "examples-using-sklearn-datasets-make-moons"]], "sklearn.exceptions.FitFailedWarning": [[553, "sklearn-exceptions-fitfailedwarning"]], "sklearn.datasets.make_sparse_spd_matrix": [[505, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[505, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_low_rank_matrix": [[499, "sklearn-datasets-make-low-rank-matrix"]], "sklearn.exceptions.NotFittedError": [[554, "sklearn-exceptions-notfittederror"]], "sklearn.feature_extraction.image.grid_to_graph": [[563, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.text.HashingVectorizer": [[567, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[567, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.ensemble.GradientBoostingRegressor": [[538, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[538, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.VotingRegressor": [[548, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[548, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.decomposition.IncrementalPCA": [[512, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[512, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.TruncatedSVD": [[522, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[522, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.exceptions.ConvergenceWarning": [[549, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[549, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.feature_extraction.image.PatchExtractor": [[561, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.decomposition.DictionaryLearning": [[509, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.sparse_encode": [[526, "sklearn-decomposition-sparse-encode"]], "sklearn.experimental.enable_iterative_imputer": [[558, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.ensemble.IsolationForest": [[541, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[541, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.exceptions.DataDimensionalityWarning": [[551, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[527, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[527, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.ensemble.StackingClassifier": [[545, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[545, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.decomposition.dict_learning_online": [[524, "sklearn-decomposition-dict-learning-online"]], "sklearn.exceptions.DataConversionWarning": [[550, "sklearn-exceptions-dataconversionwarning"]], "sklearn.ensemble.RandomForestClassifier": [[542, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[542, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.feature_extraction.DictVectorizer": [[559, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[559, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.decomposition.SparsePCA": [[521, "sklearn-decomposition-sparsepca"]], "sklearn.datasets.make_spd_matrix": [[507, "sklearn-datasets-make-spd-matrix"]], "sklearn.decomposition.dict_learning": [[523, "sklearn-decomposition-dict-learning"]], "sklearn.feature_extraction.FeatureHasher": [[560, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[560, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.ensemble.RandomTreesEmbedding": [[544, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[544, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.feature_extraction.image.extract_patches_2d": [[562, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[562, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[565, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[565, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.decomposition.FactorAnalysis": [[510, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[510, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.SparseCoder": [[520, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[520, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.MiniBatchNMF": [[516, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[516, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.feature_extraction.image.img_to_graph": [[564, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.datasets.make_swiss_roll": [[508, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[508, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.KernelPCA": [[513, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[513, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.datasets.make_gaussian_quantiles": [[497, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[497, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.dummy.DummyRegressor": [[530, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[530, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.datasets.make_sparse_uncorrelated": [[506, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.decomposition.NMF": [[518, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[518, "examples-using-sklearn-decomposition-nmf"]], "sklearn.feature_extraction.text.CountVectorizer": [[566, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[566, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.experimental.enable_hist_gradient_boosting": [[557, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.ensemble.AdaBoostClassifier": [[531, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[531, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.datasets.make_s_curve": [[503, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[503, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.covariance.ShrunkCovariance": [[455, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[455, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.compose.make_column_transformer": [[446, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[446, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.cluster.compute_optics_graph": [[436, "sklearn-cluster-compute-optics-graph"]], "sklearn.covariance.ledoit_wolf": [[458, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[458, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.cluster.spectral_clustering": [[441, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[441, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.OPTICS": [[429, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[429, "examples-using-sklearn-cluster-optics"]], "sklearn.cross_decomposition.PLSCanonical": [[461, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[461, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[462, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[462, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.datasets.fetch_california_housing": [[468, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[468, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.cluster.SpectralBiclustering": [[430, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[430, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.datasets.get_data_home": [[477, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[477, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.cluster.MiniBatchKMeans": [[428, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[428, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.datasets.make_friedman3": [[496, "sklearn-datasets-make-friedman3"]], "sklearn.cluster.ward_tree": [[442, "sklearn-cluster-ward-tree"]], "sklearn.datasets.fetch_openml": [[474, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[474, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.make_friedman2": [[495, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_biclusters": [[489, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[489, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.fetch_covtype": [[469, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[469, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.covariance.GraphicalLasso": [[450, "sklearn-covariance-graphicallasso"]], "sklearn.cross_decomposition.CCA": [[460, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[460, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.datasets.load_iris": [[482, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[482, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_digits": [[480, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[480, "examples-using-sklearn-datasets-load-digits"]], "sklearn.compose.make_column_selector": [[445, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[445, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.cluster.MeanShift": [[427, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[427, "examples-using-sklearn-cluster-meanshift"]], "sklearn.datasets.load_svmlight_file": [[486, "sklearn-datasets-load-svmlight-file"]], "sklearn.cluster.SpectralClustering": [[431, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[431, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.k_means": [[438, "sklearn-cluster-k-means"]], "sklearn.covariance.shrunk_covariance": [[459, "sklearn-covariance-shrunk-covariance"]], "sklearn.datasets.load_sample_image": [[484, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[484, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_wine": [[488, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[488, "examples-using-sklearn-datasets-load-wine"]], "sklearn.covariance.GraphicalLassoCV": [[451, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[451, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.datasets.load_sample_images": [[485, "sklearn-datasets-load-sample-images"]], "sklearn.cluster.affinity_propagation": [[433, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[433, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.datasets.load_files": [[481, "sklearn-datasets-load-files"]], "sklearn.datasets.make_friedman1": [[494, "sklearn-datasets-make-friedman1"]], "sklearn.cluster.KMeans": [[426, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[426, "examples-using-sklearn-cluster-kmeans"]], "sklearn.covariance.MinCovDet": [[453, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[453, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.datasets.fetch_olivetti_faces": [[473, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[473, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.make_blobs": [[490, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[490, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.covariance.EllipticEnvelope": [[448, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[448, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.datasets.load_diabetes": [[479, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[479, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.clear_data_home": [[464, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.fetch_20newsgroups": [[466, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[466, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_species_distributions": [[476, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[476, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.make_circles": [[492, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[492, "examples-using-sklearn-datasets-make-circles"]], "sklearn.cross_decomposition.PLSSVD": [[463, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.fetch_kddcup99": [[470, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[470, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.covariance.empirical_covariance": [[456, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[456, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.datasets.load_linnerud": [[483, "sklearn-datasets-load-linnerud"]], "sklearn.config_context": [[447, "sklearn-config-context"]], "sklearn.datasets.make_classification": [[493, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[493, "examples-using-sklearn-datasets-make-classification"]], "sklearn.cluster.estimate_bandwidth": [[437, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[437, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.datasets.load_svmlight_files": [[487, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_breast_cancer": [[478, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[478, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.cluster.mean_shift": [[440, "sklearn-cluster-mean-shift"]], "sklearn.cluster.SpectralCoclustering": [[432, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[432, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.datasets.fetch_lfw_people": [[472, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[472, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.covariance.graphical_lasso": [[457, "sklearn-covariance-graphical-lasso"]], "sklearn.datasets.fetch_rcv1": [[475, "sklearn-datasets-fetch-rcv1"]], "sklearn.cluster.cluster_optics_dbscan": [[434, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[434, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[467, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[467, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_lfw_pairs": [[471, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.cluster.cluster_optics_xi": [[435, "sklearn-cluster-cluster-optics-xi"]], "sklearn.datasets.dump_svmlight_file": [[465, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[465, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.compose.TransformedTargetRegressor": [[444, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[444, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.covariance.LedoitWolf": [[452, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[452, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.EmpiricalCovariance": [[449, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[449, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.OAS": [[454, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[454, "examples-using-sklearn-covariance-oas"]], "sklearn.datasets.make_checkerboard": [[491, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[491, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.compose.ColumnTransformer": [[443, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[443, "examples-using-sklearn-compose-columntransformer"]], "sklearn.cluster.kmeans_plusplus": [[439, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[439, "examples-using-sklearn-cluster-kmeans-plusplus"]], "Neural Networks": [[291, "neural-networks"], [164, "neural-networks"]], "Plot the support vectors in LinearSVC": [[324, "plot-the-support-vectors-in-linearsvc"]], "Visualization of MLP weights on MNIST": [[294, "visualization-of-mlp-weights-on-mnist"]], "Release Highlights for scikit-learn 0.24": [[308, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[308, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[308, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[308, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[308, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[308, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[308, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[308, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[308, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[308, "new-documentation-improvements"], [309, "new-documentation-improvements"]], "Release Highlights": [[305, "release-highlights"], [164, "release-highlights"]], "Map data to a normal distribution": [[302, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[303, "importance-of-feature-scaling"]], "Clustering text documents using k-means": [[340, "clustering-text-documents-using-k-means"]], "Loading text data": [[340, "loading-text-data"]], "Quantifying the quality of clustering results": [[340, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[340, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[340, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[340, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[340, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[340, "top-terms-per-cluster"]], "HashingVectorizer": [[340, "hashingvectorizer"]], "Clustering evaluation summary": [[340, "clustering-evaluation-summary"]], "Varying regularization in Multi-layer Perceptron": [[292, "varying-regularization-in-multi-layer-perceptron"]], "Using KBinsDiscretizer to discretize continuous features": [[299, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Non-linear SVM": [[332, "non-linear-svm"]], "SVM-Kernels": [[330, "svm-kernels"]], "Release Highlights for scikit-learn 1.1": [[310, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[310, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[310, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[310, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[310, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[310, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[310, "bisectingkmeans-divide-and-cluster"]], "Working with text documents": [[338, "working-with-text-documents"], [164, "working-with-text-documents"]], "Neighborhood Components Analysis Illustration": [[286, "neighborhood-components-analysis-illustration"]], "Original points": [[286, "original-points"]], "Learning an embedding": [[286, "learning-an-embedding"]], "Label Propagation digits: Demonstrating performance": [[314, "label-propagation-digits-demonstrating-performance"]], "Plot the most uncertain predictions": [[314, "plot-the-most-uncertain-predictions"]], "Computing with scikit-learn": [[353, "computing-with-scikit-learn"]], "Effect of varying threshold for self-training": [[317, "effect-of-varying-threshold-for-self-training"]], "Release Highlights for scikit-learn 0.22": [[306, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[306, "new-plotting-api"]], "Stacking Classifier and Regressor": [[306, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[306, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[306, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[306, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[306, "knn-based-imputation"]], "Tree pruning": [[306, "tree-pruning"]], "Retrieve dataframes from OpenML": [[306, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[306, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[306, "roc-auc-now-supports-multiclass-classification"]], "Feature discretization": [[300, "feature-discretization"]], "Classification of text documents using sparse features": [[339, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[339, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[339, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[339, "model-without-metadata-stripping"]], "Model with metadata stripping": [[339, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[339, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[339, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Release Highlights for scikit-learn 0.23": [[307, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[307, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[307, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[307, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[307, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[307, "sample-weight-support-for-lasso-and-elasticnet"]], "SVM-Anova: SVM with univariate feature selection": [[329, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[329, "load-some-data-to-play-with"]], "Create the pipeline": [[329, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[329, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Decision Tree Regression": [[346, "decision-tree-regression"]], "FeatureHasher and DictVectorizer Comparison": [[341, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[341, "load-data"]], "Define preprocessing functions": [[341, "define-preprocessing-functions"]], "DictVectorizer": [[341, "dictvectorizer"]], "FeatureHasher": [[341, "featurehasher"]], "Comparison with special purpose text vectorizers": [[341, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[341, "tfidfvectorizer"]], "SVM with custom kernel": [[322, "svm-with-custom-kernel"]], "SVM: Separating hyperplane for unbalanced classes": [[328, "svm-separating-hyperplane-for-unbalanced-classes"]], "Common pitfalls and recommended practices": [[350, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[350, "inconsistent-preprocessing"]], "Data leakage": [[350, "data-leakage"]], "Data leakage during pre-processing": [[350, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[350, "how-to-avoid-data-leakage"]], "Controlling randomness": [[350, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[350, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Estimators": [[350, "estimators"], [350, "id2"], [368, "estimators"], [390, "estimators"]], "CV splitters": [[350, "cv-splitters"], [350, "id3"]], "Common pitfalls and subtleties": [[350, "common-pitfalls-and-subtleties"]], "General recommendations": [[350, "general-recommendations"]], "Getting reproducible results across multiple executions": [[350, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[350, "robustness-of-cross-validation-results"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[285, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Label Propagation learning a complex structure": [[316, "label-propagation-learning-a-complex-structure"]], "Compare Stochastic learning strategies for MLPClassifier": [[293, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "SVM Margins Example": [[331, "svm-margins-example"]], "Scaling the regularization parameter for SVCs": [[334, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[334, "l1-penalty-case"]], "L2-penalty case": [[334, "l2-penalty-case"]], "Preprocessing": [[297, "preprocessing"], [164, "preprocessing"]], "SVM: Maximum margin separating hyperplane": [[327, "svm-maximum-margin-separating-hyperplane"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[333, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Look at the results": [[333, "look-at-the-results"], [231, "look-at-the-results"]], "Semi-supervised Classification on a Text Dataset": [[318, "semi-supervised-classification-on-a-text-dataset"]], "SVM Tie Breaking Example": [[335, "svm-tie-breaking-example"]], "Understanding the decision tree structure": [[348, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[348, "train-tree-classifier"]], "Tree structure": [[348, "tree-structure"]], "Decision path": [[348, "decision-path"]], "Computational Performance": [[354, "computational-performance"]], "Bulk versus Atomic mode": [[354, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[354, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[354, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[354, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[354, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[354, "feature-extraction-latency"]], "Prediction Throughput": [[354, "prediction-throughput"]], "Tips and Tricks": [[354, "tips-and-tricks"]], "Linear algebra libraries": [[354, "linear-algebra-libraries"]], "Limiting Working Memory": [[354, "limiting-working-memory"]], "Model Compression": [[354, "model-compression"]], "Model Reshaping": [[354, "model-reshaping"]], "Links": [[354, "links"]], "Nearest Centroid Classification": [[287, "nearest-centroid-classification"]], "Multi-output Decision Tree Regression": [[347, "multi-output-decision-tree-regression"]], "Plot different SVM classifiers in the iris dataset": [[323, "plot-different-svm-classifiers-in-the-iris-dataset"]], "One-class SVM with non-linear kernel (RBF)": [[325, "one-class-svm-with-non-linear-kernel-rbf"]], "Nearest Neighbors regression": [[288, "nearest-neighbors-regression"]], "Release Highlights for scikit-learn 1.2": [[311, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[311, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[311, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[311, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[311, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[311, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[311, "improved-efficiency-of-many-estimators"]], "Plot the decision surface of decision trees trained on the iris dataset": [[345, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Demonstrating the different strategies of KBinsDiscretizer": [[301, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Post pruning decision trees with cost complexity pruning": [[344, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[344, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[344, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Semi Supervised Classification": [[313, "semi-supervised-classification"], [164, "semi-supervised-classification"]], "RBF SVM parameters": [[326, "rbf-svm-parameters"]], "Load and prepare data set": [[326, "load-and-prepare-data-set"]], "Train classifiers": [[326, "train-classifiers"]], "Release Highlights for scikit-learn 1.0": [[309, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[309, "keyword-and-positional-arguments"]], "Spline Transformers": [[309, "spline-transformers"]], "Quantile Regressor": [[309, "quantile-regressor"]], "Feature Names Support": [[309, "feature-names-support"]], "A more flexible plotting API": [[309, "a-more-flexible-plotting-api"]], "Histogram-based Gradient Boosting Models are now stable": [[309, "histogram-based-gradient-boosting-models-are-now-stable"]], "Label Propagation digits active learning": [[315, "label-propagation-digits-active-learning"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[319, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "Kernel Density Estimate of Species Distributions": [[289, "kernel-density-estimate-of-species-distributions"]], "SVM: Weighted samples": [[336, "svm-weighted-samples"]], "Compare the effect of different scalers on data with outliers": [[298, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "Original data": [[298, "original-data"], [262, "original-data"]], "StandardScaler": [[298, "standardscaler"]], "MinMaxScaler": [[298, "minmaxscaler"]], "MaxAbsScaler": [[298, "maxabsscaler"]], "RobustScaler": [[298, "robustscaler"]], "PowerTransformer": [[298, "powertransformer"]], "QuantileTransformer (uniform output)": [[298, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[298, "quantiletransformer-gaussian-output"]], "Normalizer": [[298, "normalizer"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[284, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Restricted Boltzmann Machine features for digit classification": [[295, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[295, "models-definition"]], "Plotting": [[295, "plotting"], [390, "plotting"], [390, "id5"], [390, "id7"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[218, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[218, "load-digits-dataset"]], "Helper function to plot embedding": [[218, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[218, "embedding-techniques-comparison"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[258, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[258, "learning-curve"]], "Complexity analysis": [[258, "complexity-analysis"]], "Plotting Validation Curves": [[271, "plotting-validation-curves"]], "Classifier Chain": [[274, "classifier-chain"]], "Multi-dimensional scaling": [[220, "multi-dimensional-scaling"]], "Density Estimation for a Gaussian mixture": [[245, "density-estimation-for-a-gaussian-mixture"]], "Precision-Recall": [[263, "precision-recall"]], "In binary classification settings": [[263, "in-binary-classification-settings"]], "Dataset and model": [[263, "dataset-and-model"]], "Plot the Precision-Recall curve": [[263, "plot-the-precision-recall-curve"]], "In multi-label settings": [[263, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[263, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[263, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[263, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[263, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Displaying estimators and complex pipelines": [[227, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[227, "compact-text-representation"]], "Rich HTML representation": [[227, "rich-html-representation"]], "Comparison of kernel ridge regression and SVR": [[231, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[231, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[231, "compare-times-of-svr-and-kernel-ridge-regression"]], "Visualize training and prediction times": [[231, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[231, "visualize-the-learning-curves"]], "Introducing the set_output API": [[238, "introducing-the-set-output-api"]], "Theil-Sen Regression": [[213, "theil-sen-regression"]], "Outliers only in the y direction": [[213, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[213, "outliers-in-the-x-direction"]], "Caching nearest neighbors": [[278, "caching-nearest-neighbors"]], "Swiss Roll And Swiss-Hole Reduction": [[221, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[221, "swiss-roll"]], "Swiss-Hole": [[221, "swiss-hole"]], "Approximate nearest neighbors in TSNE": [[276, "approximate-nearest-neighbors-in-tsne"]], "Face completion with a multi-output estimators": [[233, "face-completion-with-a-multi-output-estimators"]], "Isotonic Regression": [[228, "isotonic-regression"]], "Explicit feature map approximation for RBF kernels": [[230, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[230, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[230, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[230, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "t-SNE: The effect of various perplexity values on the shape": [[222, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Gaussian Mixture Model Ellipsoids": [[242, "gaussian-mixture-model-ellipsoids"]], "Comparison between grid search and successive halving": [[267, "comparison-between-grid-search-and-successive-halving"]], "Plotting Cross-Validated Predictions": [[252, "plotting-cross-validated-predictions"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[260, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[260, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[260, "plotting-the-result"]], "Sample pipeline for text feature extraction and evaluation": [[257, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[257, "data-loading"]], "Pipeline with hyperparameter tuning": [[257, "pipeline-with-hyperparameter-tuning"]], "Multioutput methods": [[273, "multioutput-methods"], [164, "multioutput-methods"]], "Comparing randomized search and grid search for hyperparameter estimation": [[264, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Receiver Operating Characteristic (ROC) with cross validation": [[266, "receiver-operating-characteristic-roc-with-cross-validation"]], "Load and prepare data": [[266, "load-and-prepare-data"], [265, "load-and-prepare-data"]], "Classification and ROC analysis": [[266, "classification-and-roc-analysis"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[229, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[229, "theoretical-bounds"]], "Empirical validation": [[229, "empirical-validation"]], "Remarks": [[229, "remarks"]], "Visualizations with Display Objects": [[226, "visualizations-with-display-objects"]], "Load Data and train model": [[226, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[226, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[226, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[226, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[226, "combining-the-display-objects-into-a-single-plot"]], "Statistical comparison of models using grid search": [[256, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[256, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[256, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[256, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[256, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[256, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[256, "take-home-messages"]], "Manifold Learning methods on a severed sphere": [[219, "manifold-learning-methods-on-a-severed-sphere"]], "Outlier detection with Local Outlier Factor (LOF)": [[283, "outlier-detection-with-local-outlier-factor-lof"]], "Visualizing cross-validation behavior in scikit-learn": [[251, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[251, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[251, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[251, "visualize-cross-validation-indices-for-many-cv-objects"]], "Balance model complexity and cross-validated score": [[255, "balance-model-complexity-and-cross-validated-score"]], "Gaussian Mixture Model Selection": [[246, "gaussian-mixture-model-selection"]], "Model training and selection": [[246, "model-training-and-selection"], [145, "model-training-and-selection"]], "Plot the BIC scores": [[246, "plot-the-bic-scores"]], "Plot the best model": [[246, "plot-the-best-model"]], "Custom refit strategy of a grid search with cross-validation": [[254, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[254, "the-dataset"]], "Define our grid-search strategy": [[254, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[254, "tuning-hyper-parameters"]], "Kernel Density Estimation": [[280, "kernel-density-estimation"], [397, "kernel-density-estimation"]], "Gaussian Mixture Models": [[240, "gaussian-mixture-models"], [164, "gaussian-mixture-models"]], "ROC Curve with Visualization API": [[237, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[237, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[237, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[237, "training-a-random-forest-and-plotting-the-roc-curve"]], "Displaying Pipelines": [[236, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[236, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[236, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[236, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[236, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[236, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "GMM Initialization Methods": [[244, "gmm-initialization-methods"]], "Successive Halving Iterations": [[268, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[268, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Simple 1D Kernel Density Estimation": [[281, "simple-1d-kernel-density-estimation"]], "Test with permutations the significance of a classification score": [[262, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[262, "permutation-test-score"], [395, "permutation-test-score"]], "Random data": [[262, "random-data"]], "Underfitting vs. Overfitting": [[270, "underfitting-vs-overfitting"]], "Detection error tradeoff (DET) curve": [[253, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[253, "generate-synthetic-data"]], "Define the classifiers": [[253, "define-the-classifiers"]], "Plot ROC and DET curves": [[253, "plot-roc-and-det-curves"]], "Novelty detection with Local Outlier Factor (LOF)": [[282, "novelty-detection-with-local-outlier-factor-lof"]], "Train error vs Test error": [[269, "train-error-vs-test-error"]], "Compute train and test errors": [[269, "compute-train-and-test-errors"]], "Plot results functions": [[269, "plot-results-functions"]], "Advanced Plotting With Partial Dependence": [[235, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[235, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[235, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[235, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[235, "plotting-partial-dependence-for-one-feature"]], "Multiclass Receiver Operating Characteristic (ROC)": [[265, "multiclass-receiver-operating-characteristic-roc"]], "One-vs-Rest multiclass ROC": [[265, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[265, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[265, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[265, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[265, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[265, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[265, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[265, "plot-all-ovo-roc-curves-together"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[225, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Tweedie regression on insurance claims": [[214, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[214, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[214, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[214, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[214, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Nested versus non-nested cross-validation": [[261, "nested-versus-non-nested-cross-validation"]], "See Also:": [[261, null], [392, null]], "GMM covariances": [[243, "gmm-covariances"]], "Model Selection": [[249, "model-selection"], [164, "model-selection"]], "Evaluation of outlier detection estimators": [[234, "evaluation-of-outlier-detection-estimators"]], "Define a data preprocessing function": [[234, "define-a-data-preprocessing-function"]], "Define an outlier prediction function": [[234, "define-an-outlier-prediction-function"]], "Plot and interpret results": [[234, "plot-and-interpret-results"]], "Gaussian Mixture Model Sine Curve": [[247, "gaussian-mixture-model-sine-curve"]], "Class Likelihood Ratios to measure classification performance": [[259, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[259, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[259, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[259, "invariance-with-respect-to-prevalence"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[241, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Comparison of Manifold Learning methods": [[217, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[217, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[217, "locally-linear-embeddings"]], "Isomap Embedding": [[217, "isomap-embedding"]], "Multidimensional scaling": [[217, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[217, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[217, "t-distributed-stochastic-neighbor-embedding"]], "Comparing various online solvers": [[203, "comparing-various-online-solvers"]], "Model-based and sequential feature selection": [[146, "model-based-and-sequential-feature-selection"]], "Loading the data": [[146, "loading-the-data"]], "Feature importance from coefficients": [[146, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[146, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[146, "selecting-features-with-sequential-feature-selection"]], "Discussion": [[146, "discussion"]], "L1 Penalty and Sparsity in Logistic Regression": [[187, "l1-penalty-and-sparsity-in-logistic-regression"]], "Recursive feature elimination": [[144, "recursive-feature-elimination"], [400, "recursive-feature-elimination"]], "Sparsity Example: Fitting only features 1  and 2": [[193, "sparsity-example-fitting-only-features-1-and-2"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[150, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[152, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[178, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Scalable learning with polynomial kernel approximation": [[172, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[172, "partitioning-the-data"]], "Feature normalization": [[172, "feature-normalization"]], "Establishing a baseline model": [[172, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[172, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[172, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[172, "comparing-the-results"]], "Lasso and Elastic Net for Sparse Signals": [[180, "lasso-and-elastic-net-for-sparse-signals"]], "Data Generation": [[180, "data-generation"]], "ElasticNet": [[180, "elasticnet"]], "Non-negative least squares": [[191, "non-negative-least-squares"]], "MNIST classification using multinomial logistic + L1": [[212, "mnist-classification-using-multinomial-logistic-l1"]], "Joint feature selection with multi-task Lasso": [[190, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[190, "fit-models"]], "Plot support and time series": [[190, "plot-support-and-time-series"]], "SGD: Weighted samples": [[209, "sgd-weighted-samples"]], "Lasso model selection: AIC-BIC / cross-validation": [[185, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[185, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[185, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[185, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[185, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[185, "summary-of-cross-validation-approach"]], "Missing Value Imputation": [[160, "missing-value-imputation"], [164, "missing-value-imputation"]], "SGD: Penalties": [[207, "sgd-penalties"]], "Poisson regression and non-normal loss": [[196, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[196, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[196, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[196, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[196, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[196, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[196, "evaluation-of-the-ranking-power"]], "Main takeaways": [[196, "main-takeaways"]], "Gaussian process regression (GPR) with noise-level estimation": [[155, "gaussian-process-regression-gpr-with-noise-level-estimation"]], "Optimisation of kernel hyperparameters in GPR": [[155, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[188, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Gaussian Process for Machine Learning": [[148, "gaussian-process-for-machine-learning"], [164, "gaussian-process-for-machine-learning"]], "Gaussian Processes regression: basic introductory example": [[156, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[156, "dataset-generation"], [198, "dataset-generation"]], "Example with noise-free target": [[156, "example-with-noise-free-target"]], "Example with noisy targets": [[156, "example-with-noisy-targets"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[177, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "Ordinary Least Squares and Ridge Regression Variance": [[194, "ordinary-least-squares-and-ridge-regression-variance"]], "Recursive feature elimination with cross-validation": [[145, "recursive-feature-elimination-with-cross-validation"]], "Plot number of features VS. cross-validation scores": [[145, "plot-number-of-features-vs-cross-validation-scores"]], "Plot multi-class SGD on the iris dataset": [[205, "plot-multi-class-sgd-on-the-iris-dataset"]], "Imputing missing values with variants of IterativeImputer": [[161, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Common pitfalls in the interpretation of coefficients of linear models": [[166, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[166, "the-dataset-wages"]], "The machine-learning pipeline": [[166, "the-machine-learning-pipeline"]], "Processing the dataset": [[166, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[166, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[166, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[166, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[166, "preprocessing-numerical-variables"]], "Linear models with regularization": [[166, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[166, "linear-models-with-sparse-coefficients"]], "Lessons learned": [[166, "lessons-learned"]], "Gaussian process classification (GPC) on iris dataset": [[151, "gaussian-process-classification-gpc-on-iris-dataset"], [401, "gaussian-process-classification-gpc-on-iris-dataset"]], "SGD: Maximum margin separating hyperplane": [[208, "sgd-maximum-margin-separating-hyperplane"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[210, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Gaussian process regression (GPR) on Mauna Loa CO2 data": [[154, "gaussian-process-regression-gpr-on-mauna-loa-co2-data"]], "Build the dataset": [[154, "build-the-dataset"]], "Design the proper kernel": [[154, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[154, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[154, "interpretation-of-kernel-hyperparameters"]], "Inspection": [[164, "inspection"], [165, "inspection"], [381, "inspection"]], "Permutation Importance with Multicollinear or Correlated Features": [[169, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[169, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[169, "handling-multicollinear-features"]], "Lasso on dense and sparse data": [[182, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[182, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[182, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Robust linear model estimation using RANSAC": [[199, "robust-linear-model-estimation-using-ransac"]], "SGD: convex loss functions": [[206, "sgd-convex-loss-functions"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[153, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Lasso path using LARS": [[183, "lasso-path-using-lars"]], "Polynomial and Spline interpolation": [[197, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[197, "periodic-splines"]], "Quantile regression": [[198, "quantile-regression"]], "Fitting a QuantileRegressor": [[198, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[198, "comparing-quantileregressor-and-linearregression"]], "Imputing missing values before building an estimator": [[162, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[162, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[162, "impute-the-missing-data-and-score"]], "Missing information": [[162, "missing-information"]], "Estimate the score": [[162, "estimate-the-score"]], "Replace missing values by 0": [[162, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[162, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[162, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[162, "iterative-imputation-of-the-missing-values"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[168, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[168, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[168, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[168, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Curve Fitting with Bayesian Ridge Regression": [[176, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[176, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[176, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[176, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Pipeline ANOVA SVM": [[143, "pipeline-anova-svm"]], "Gaussian processes on discrete data structures": [[157, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[157, "sequence-similarity-matrix-under-the-kernel"]], "Plot Ridge coefficients as a function of the regularization": [[201, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[201, "compute-paths"]], "Display results": [[201, "display-results"]], "Univariate Feature Selection": [[142, "univariate-feature-selection"]], "Univariate feature selection": [[142, "id1"], [400, "univariate-feature-selection"]], "Compare with SVMs": [[142, "compare-with-svms"]], "Orthogonal Matching Pursuit": [[195, "orthogonal-matching-pursuit"]], "Plot Ridge coefficients as a function of the L2 regularization": [[200, "plot-ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Logistic function": [[186, "logistic-function"]], "Lasso and Elastic Net": [[181, "lasso-and-elastic-net"]], "Logistic Regression 3-class Classifier": [[179, "logistic-regression-3-class-classifier"]], "Linear Regression Example": [[192, "linear-regression-example"]], "Comparing Linear Bayesian Regressors": [[175, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[175, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[175, "fit-the-regressors"], [175, "id2"]], "Plot the true and estimated coefficients": [[175, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[175, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[175, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[175, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Robust linear estimator fitting": [[202, "robust-linear-estimator-fitting"]], "Lasso model selection via information criteria": [[184, "lasso-model-selection-via-information-criteria"]], "Regularization path of L1- Logistic Regression": [[189, "regularization-path-of-l1-logistic-regression"]], "Load data": [[189, "load-data"]], "Compute regularization path": [[189, "compute-regularization-path"]], "Plot regularization path": [[189, "plot-regularization-path"]], "Early stopping of Stochastic Gradient Descent": [[204, "early-stopping-of-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[211, "multiclass-sparse-logistic-regression-on-20newgroups"]], "Illustration of prior and posterior Gaussian process for different kernels": [[158, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[158, "helper-function"]], "Dataset and Gaussian process generation": [[158, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[158, "kernel-cookbook"]], "Radial Basis Function kernel": [[158, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[158, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[158, "exp-sine-squared-kernel"], [401, "exp-sine-squared-kernel"]], "Dot-product kernel": [[158, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[158, "matern-kernel"], [401, "matern-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[167, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[167, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[167, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[167, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[167, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[167, "way-partial-dependence-with-different-models"]], "2D interaction plots": [[167, "d-interaction-plots"]], "Comparison of kernel ridge and Gaussian process regression": [[149, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[149, "generating-a-dataset"]], "Limitations of a simple linear model": [[149, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[149, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[149, "kernel-ridge"]], "Gaussian process regression": [[149, "gaussian-process-regression"]], "Final conclusion": [[149, "final-conclusion"]], "sklearn.base.BiclusterMixin": [[406, "sklearn-base-biclustermixin"]], "Table Of Contents": [[357, "table-of-contents"]], "Loading other datasets": [[361, "loading-other-datasets"]], "Sample images": [[361, "sample-images"]], "Datasets in svmlight / libsvm format": [[361, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[361, null]], "Downloading datasets from the openml.org repository": [[361, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[361, "dataset-versions"]], "ARFF parser": [[361, "arff-parser"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[407, "sklearn-base-classnameprefixfeaturesoutmixin"]], "Frequently Asked Questions": [[377, "frequently-asked-questions"]], "Table of Contents": [[377, "table-of-contents"]], "About the project": [[377, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[377, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[377, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[377, "why-scikit"]], "Do you support PyPy?": [[377, "do-you-support-pypy"]], "Implementation decisions": [[377, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[377, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[377, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[377, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[377, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[377, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[377, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[377, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[377, "why-are-there-so-many-different-estimators-for-linear-models"]], "Contributing": [[377, "contributing"], [367, "contributing"]], "How can I contribute to scikit-learn?": [[377, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[377, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[377, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[377, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[377, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[377, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[377, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[377, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[377, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[377, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[377, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[377, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[377, "how-do-i-set-a-random-state-for-an-entire-execution"]], "sklearn.cluster.AffinityPropagation": [[420, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[420, "examples-using-sklearn-cluster-affinitypropagation"]], "Decomposing signals in components (matrix factorization problems)": [[396, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[396, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[396, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[396, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[396, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[396, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[396, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[396, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[396, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[396, "dictionary-learning"]], "Generic dictionary learning": [[396, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[396, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[396, null]], "Factor Analysis": [[396, "factor-analysis"]], "Independent component analysis (ICA)": [[396, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[396, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[396, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[396, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[396, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[396, "latent-dirichlet-allocation-lda"]], "Toy datasets": [[364, "toy-datasets"]], "Iris plants dataset": [[364, "iris-plants-dataset"]], "Optical recognition of handwritten digits dataset": [[364, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[364, "linnerrud-dataset"]], "Wine recognition dataset": [[364, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[364, "breast-cancer-wisconsin-diagnostic-dataset"]], "Empirical covariance": [[393, "empirical-covariance"]], "Shrunk Covariance": [[393, "shrunk-covariance"]], "Basic shrinkage": [[393, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[393, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[393, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[393, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[393, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[393, "minimum-covariance-determinant"]], "sklearn.calibration.CalibratedClassifierCV": [[417, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[417, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.cluster.BisectingKMeans": [[423, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[423, "examples-using-sklearn-cluster-bisectingkmeans"]], "Glossary of Common Terms and API Elements": [[379, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[379, "general-concepts"]], "Class APIs and Estimator Types": [[379, "class-apis-and-estimator-types"]], "Target Types": [[379, "target-types"]], "Methods": [[379, "methods"]], "Parameters": [[379, "parameters"], [398, "parameters"]], "Attributes": [[379, "attributes"]], "Data and sample properties": [[379, "data-and-sample-properties"]], "sklearn.base.is_classifier": [[415, "sklearn-base-is-classifier"]], "Crafting a minimal reproducer for scikit-learn": [[371, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[371, "good-practices"]], "Provide a failing code example with minimal comments": [[371, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[371, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[371, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[371, "use-markdown-formatting"]], "Synthetic dataset": [[371, "synthetic-dataset"]], "NumPy": [[371, "numpy"]], "Pandas": [[371, "pandas"]], "make_regression": [[371, "make-regression"]], "make_classification": [[371, "make-classification"]], "make_blobs": [[371, "make-blobs"]], "Dataset loading utilities": [[371, "dataset-loading-utilities"], [360, "dataset-loading-utilities"]], "sklearn.base.clone": [[414, "sklearn-base-clone"]], "Strategies to scale computationally: bigger data": [[356, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[356, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[356, "streaming-instances"]], "Extracting features": [[356, "extracting-features"]], "Incremental learning": [[356, "incremental-learning"]], "Getting Started": [[378, "getting-started"]], "Fitting and predicting: estimator basics": [[378, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[378, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[378, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[378, "model-evaluation"]], "Automatic parameter searches": [[378, "automatic-parameter-searches"]], "Next steps": [[378, "next-steps"]], "Dataset transformations": [[359, "dataset-transformations"]], "Model selection and evaluation": [[386, "model-selection-and-evaluation"]], "How to optimize for speed": [[372, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[372, "python-cython-or-c-c"]], "Profiling Python code": [[372, "profiling-python-code"]], "Memory usage profiling": [[372, "memory-usage-profiling"]], "Performance tips for the Cython developer": [[372, "performance-tips-for-the-cython-developer"]], "Using OpenMP": [[372, "using-openmp"]], "Profiling compiled extensions": [[372, "profiling-compiled-extensions"]], "Using yep and gperftools": [[372, "using-yep-and-gperftools"]], "Using gprof": [[372, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[372, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[372, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[372, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[372, "a-simple-algorithmic-trick-warm-restarts"]], "Developers\u2019 Tips and Tricks": [[374, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[374, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[374, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[374, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[374, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[374, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[374, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[374, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[374, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Spectral Co-Clustering": [[388, "spectral-co-clustering"]], "Spectral Biclustering": [[388, "spectral-biclustering"]], "Biclustering evaluation": [[388, "biclustering-evaluation"]], "Developing with the Plotting API": [[373, "developing-with-the-plotting-api"]], "Plotting API Overview": [[373, "plotting-api-overview"]], "Plotting with Multiple Axes": [[373, "plotting-with-multiple-axes"]], "Pipeline: chaining estimators": [[392, "pipeline-chaining-estimators"]], "Construction": [[392, "construction"]], "Accessing steps": [[392, "accessing-steps"]], "Nested parameters": [[392, "nested-parameters"]], "Caching transformers: avoid repeated computation": [[392, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[392, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[392, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[392, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[392, "visualizing-composite-estimators"]], "Maintainer / core-developer information": [[370, "maintainer-core-developer-information"]], "Releasing": [[370, "releasing"]], "Before a release": [[370, "before-a-release"]], "Preparing a release PR": [[370, "preparing-a-release-pr"]], "Major version release": [[370, "major-version-release"]], "Minor version release": [[370, "minor-version-release"]], "Making a release": [[370, "making-a-release"]], "Release checklist": [[370, "release-checklist"]], "Merging Pull Requests": [[370, "merging-pull-requests"]], "The scikit-learn.org web site": [[370, "the-scikit-learn-org-web-site"]], "Travis Cron jobs": [[370, "travis-cron-jobs"]], "Experimental features": [[370, "experimental-features"]], "Installing the development version of scikit-learn": [[365, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[365, "installing-nightly-builds"]], "Building from source": [[365, "building-from-source"]], "Dependencies": [[365, "dependencies"]], "Runtime dependencies": [[365, "runtime-dependencies"]], "Build dependencies": [[365, "build-dependencies"]], "Test dependencies": [[365, "test-dependencies"]], "Building a specific version from a tag": [[365, "building-a-specific-version-from-a-tag"]], "Editable mode": [[365, "editable-mode"]], "Platform-specific instructions": [[365, "platform-specific-instructions"]], "Windows": [[365, "windows"]], "macOS": [[365, "macos"]], "macOS compilers from conda-forge": [[365, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[365, "macos-compilers-from-homebrew"]], "Linux": [[365, "linux"]], "Linux compilers from the system": [[365, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[365, "linux-compilers-from-conda-forge"]], "FreeBSD": [[365, "freebsd"]], "Parallel builds": [[365, "parallel-builds"]], "sklearn.cluster.DBSCAN": [[424, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[424, "examples-using-sklearn-cluster-dbscan"]], "Parallelism, resource management, and configuration": [[355, "parallelism-resource-management-and-configuration"]], "Higher-level parallelism with joblib": [[355, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[355, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[355, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[355, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[355, "configuration-switches"]], "Python API": [[355, "python-api"]], "Environment variables": [[355, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[355, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[355, "sklearn-working-memory"]], "SKLEARN_SEED": [[355, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[355, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[355, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[355, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[355, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[355, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[355, "sklearn-pairwise-dist-chunk-size"]], "Density Estimation": [[397, "density-estimation"]], "Density Estimation: Histograms": [[397, "density-estimation-histograms"]], "Probability calibration": [[389, "probability-calibration"]], "Calibrating a classifier": [[389, "calibrating-a-classifier"]], "Sigmoid": [[389, "sigmoid"]], "Isotonic": [[389, "isotonic"]], "Multiclass support": [[389, "multiclass-support"]], "sklearn.cluster.FeatureAgglomeration": [[425, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[425, "examples-using-sklearn-cluster-featureagglomeration"]], "Developer\u2019s Guide": [[369, "developer-s-guide"]], "Utilities for Developers": [[375, "utilities-for-developers"]], "Validation Tools": [[375, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[375, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[375, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[375, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[375, "graph-routines"]], "Testing Functions": [[375, "testing-functions"]], "Multiclass and multilabel utility function": [[375, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[375, "helper-functions"]], "Hash Functions": [[375, "hash-functions"]], "Warnings and Exceptions": [[375, "warnings-and-exceptions"]], "Input data": [[391, null]], "Overview of clustering methods": [[391, "overview-of-clustering-methods"]], "K-means": [[391, "k-means"]], "Low-level parallelism": [[391, "low-level-parallelism"], [398, "low-level-parallelism"]], "Mini Batch K-Means": [[391, "mini-batch-k-means"]], "Affinity Propagation": [[391, "affinity-propagation"]], "Mean Shift": [[391, "mean-shift"]], "Spectral clustering": [[391, "spectral-clustering"]], "Different label assignment strategies": [[391, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[391, "spectral-clustering-graphs"]], "Hierarchical clustering": [[391, "hierarchical-clustering"]], "FeatureAgglomeration": [[391, null]], "Different linkage type: Ward, complete, average, and single linkage": [[391, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[391, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[391, "adding-connectivity-constraints"]], "Varying the metric": [[391, "varying-the-metric"]], "Bisecting K-Means": [[391, "bisecting-k-means"]], "DBSCAN": [[391, "dbscan"]], "Memory consumption for large sample sizes": [[391, null]], "OPTICS": [[391, "optics"]], "Comparison with DBSCAN": [[391, null]], "Computational Complexity": [[391, null]], "BIRCH": [[391, "birch"]], "Clustering performance evaluation": [[391, "clustering-performance-evaluation"]], "Rand index": [[391, "rand-index"]], "Advantages": [[391, "advantages"], [391, "id10"], [391, "id17"], [391, "id21"], [391, "id24"], [391, "id27"], [391, "id31"], [391, "id35"]], "Drawbacks": [[391, "drawbacks"], [391, "id11"], [391, "id18"], [391, "id22"], [391, "id25"], [391, "id28"], [391, "id32"], [391, "id36"]], "Mutual Information based scores": [[391, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[391, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[391, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[391, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[391, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[391, "davies-bouldin-index"]], "Contingency Matrix": [[391, "contingency-matrix"]], "Pair Confusion Matrix": [[391, "pair-confusion-matrix"]], "sklearn.base.is_regressor": [[416, "sklearn-base-is-regressor"]], "sklearn.cluster.AgglomerativeClustering": [[421, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[421, "examples-using-sklearn-cluster-agglomerativeclustering"]], "Installing scikit-learn": [[382, "installing-scikit-learn"]], "Installing the latest release": [[382, "installing-the-latest-release"]], "Installing on Apple Silicon M1 hardware": [[382, "installing-on-apple-silicon-m1-hardware"]], "Third party distributions of scikit-learn": [[382, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[382, "alpine-linux"]], "Arch Linux": [[382, "arch-linux"]], "Debian/Ubuntu": [[382, "debian-ubuntu"]], "Fedora": [[382, "fedora"]], "NetBSD": [[382, "netbsd"]], "MacPorts for Mac OSX": [[382, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[382, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel conda channel": [[382, "intel-conda-channel"]], "WinPython for Windows": [[382, "winpython-for-windows"]], "Troubleshooting": [[382, "troubleshooting"]], "Error caused by file path length limit on Windows": [[382, "error-caused-by-file-path-length-limit-on-windows"]], "Gaussian Processes": [[401, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[401, "gaussian-process-regression-gpr"]], "GPR examples": [[401, "gpr-examples"]], "GPR with noise-level estimation": [[401, "gpr-with-noise-level-estimation"]], "Comparison of GPR and Kernel Ridge Regression": [[401, "comparison-of-gpr-and-kernel-ridge-regression"]], "GPR on Mauna Loa CO2 data": [[401, "gpr-on-mauna-loa-co2-data"]], "Gaussian Process Classification (GPC)": [[401, "gaussian-process-classification-gpc"]], "GPC examples": [[401, "gpc-examples"]], "Probabilistic predictions with GPC": [[401, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[401, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[401, "kernels-for-gaussian-processes"]], "Gaussian Process Kernel API": [[401, "gaussian-process-kernel-api"]], "Basic kernels": [[401, "basic-kernels"]], "Kernel operators": [[401, "kernel-operators"]], "Radial basis function (RBF) kernel": [[401, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[401, "rational-quadratic-kernel"]], "Dot-Product kernel": [[401, "dot-product-kernel"]], "sklearn.calibration.calibration_curve": [[419, "sklearn-calibration-calibration-curve"]], "Developing scikit-learn estimators": [[368, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[368, "apis-of-scikit-learn-objects"]], "Different objects": [[368, "different-objects"]], "Instantiation": [[368, "instantiation"]], "Fitting": [[368, "fitting"]], "Estimated Attributes": [[368, "estimated-attributes"]], "Optional Arguments": [[368, "optional-arguments"]], "Universal attributes": [[368, "universal-attributes"]], "Rolling your own estimator": [[368, "rolling-your-own-estimator"]], "Project template:": [[368, null]], "BaseEstimator and mixins:": [[368, null]], "get_params and set_params": [[368, "get-params-and-set-params"]], "Parameters and init": [[368, "parameters-and-init"]], "Cloning": [[368, "cloning"]], "Pipeline compatibility": [[368, "pipeline-compatibility"]], "Estimator types": [[368, "estimator-types"]], "Specific models": [[368, "specific-models"]], "Estimator Tags": [[368, "estimator-tags"]], "Developer API for set_output": [[368, "developer-api-for-set-output"]], "Coding guidelines": [[368, "coding-guidelines"]], "Input validation": [[368, "input-validation"]], "Random Numbers": [[368, "random-numbers"]], "Numerical assertions in tests": [[368, "numerical-assertions-in-tests"]], "Feature selection": [[400, "feature-selection"]], "Removing features with low variance": [[400, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[400, null]], "Feature selection using SelectFromModel": [[400, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[400, "l1-based-feature-selection"]], "L1-recovery and compressive sensing": [[400, "compressive-sensing"]], "Tree-based feature selection": [[400, "tree-based-feature-selection"]], "Sequential Feature Selection": [[400, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[400, "feature-selection-as-part-of-a-pipeline"]], "sklearn.base.RegressorMixin": [[412, "sklearn-base-regressormixin"]], "sklearn.base.OneToOneFeatureMixin": [[411, "sklearn-base-onetoonefeaturemixin"]], "sklearn.decomposition.fastica": [[403, "sklearn-decomposition-fastica"]], "API Reference": [[390, "api-reference"]], "sklearn.base: Base classes and utility functions": [[390, "module-sklearn.base"]], "Base classes": [[390, "base-classes"]], "Functions": [[390, "functions"], [390, "id1"]], "sklearn.calibration: Probability Calibration": [[390, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[390, "module-sklearn.cluster"]], "Classes": [[390, "classes"]], "sklearn.compose: Composite Estimators": [[390, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[390, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[390, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[390, "module-sklearn.datasets"]], "Loaders": [[390, "loaders"]], "Samples generator": [[390, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[390, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[390, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[390, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[390, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[390, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[390, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[390, "module-sklearn.feature_extraction"]], "From images": [[390, "module-sklearn.feature_extraction.image"]], "From text": [[390, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[390, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[390, "module-sklearn.gaussian_process"]], "sklearn.impute: Impute": [[390, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[390, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[390, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[390, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[390, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[390, "module-sklearn.linear_model"]], "Linear classifiers": [[390, "linear-classifiers"]], "Classical linear regressors": [[390, "classical-linear-regressors"]], "Regressors with variable selection": [[390, "regressors-with-variable-selection"]], "Bayesian regressors": [[390, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[390, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[390, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[390, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[390, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[390, "sklearn-metrics-metrics"]], "Model Selection Interface": [[390, "model-selection-interface"]], "Biclustering metrics": [[390, "biclustering-metrics"]], "Distance metrics": [[390, "distance-metrics"]], "Pairwise metrics": [[390, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[390, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[390, "module-sklearn.model_selection"]], "Splitter Classes": [[390, "splitter-classes"]], "Splitter Functions": [[390, "splitter-functions"]], "Hyper-parameter optimizers": [[390, "hyper-parameter-optimizers"]], "Model validation": [[390, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[390, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[390, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[390, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[390, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[390, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[390, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[390, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[390, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[390, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[390, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[390, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[390, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[390, "module-sklearn.utils"]], "Recently deprecated": [[390, "recently-deprecated"]], "To be removed in 1.3": [[390, "to-be-removed-in-1-3"]], "Feature extraction": [[399, "feature-extraction"]], "Loading features from dicts": [[399, "loading-features-from-dicts"]], "Feature hashing": [[399, "feature-hashing"]], "Text feature extraction": [[399, "text-feature-extraction"]], "The Bag of Words representation": [[399, "the-bag-of-words-representation"]], "Common Vectorizer usage": [[399, "common-vectorizer-usage"]], "Using stop words": [[399, "using-stop-words"]], "Tf\u2013idf term weighting": [[399, "tfidf-term-weighting"]], "Decoding text files": [[399, "decoding-text-files"]], "Applications and examples": [[399, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[399, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[399, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Performing out-of-core scaling with HashingVectorizer": [[399, "performing-out-of-core-scaling-with-hashingvectorizer"]], "Customizing the vectorizer classes": [[399, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[399, "image-feature-extraction"]], "Patch extraction": [[399, "patch-extraction"]], "Connectivity graph of an image": [[399, "connectivity-graph-of-an-image"]], "Scikit-learn governance and decision-making": [[380, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[380, "roles-and-responsibilities"]], "Contributors": [[380, "contributors"]], "Communication team": [[380, "communication-team"]], "Core developers": [[380, "core-developers"]], "Technical Committee": [[380, "technical-committee"]], "Decision Making Process": [[380, "decision-making-process"]], "Enhancement proposals (SLEPs)": [[380, "enhancement-proposals-sleps"]], "Array API support (experimental)": [[387, "array-api-support-experimental"]], "Example usage": [[387, "example-usage"]], "Estimators with support for Array API-compatible inputs": [[387, "estimators-with-support-for-array-api-compatible-inputs"]], "Cross-validation: evaluating estimator performance": [[395, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[395, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[395, null]], "The cross_validate function and multiple metric evaluation": [[395, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[395, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[395, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[395, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[395, "k-fold"]], "Repeated K-Fold": [[395, "repeated-k-fold"]], "Leave One Out (LOO)": [[395, "leave-one-out-loo"]], "Leave P Out (LPO)": [[395, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[395, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels.": [[395, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[395, "stratified-k-fold"]], "Stratified Shuffle Split": [[395, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[395, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[395, "group-k-fold"]], "StratifiedGroupKFold": [[395, "stratifiedgroupkfold"]], "Leave One Group Out": [[395, "leave-one-group-out"]], "Leave P Groups Out": [[395, "leave-p-groups-out"]], "Group Shuffle Split": [[395, "group-shuffle-split"]], "Predefined Fold-Splits / Validation-Sets": [[395, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[395, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[395, "cross-validation-of-time-series-data"]], "Time Series Split": [[395, "time-series-split"]], "A note on shuffling": [[395, "a-note-on-shuffling"]], "Cross validation and model selection": [[395, "cross-validation-and-model-selection"]], "sklearn.base.TransformerMixin": [[413, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[413, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.DensityMixin": [[410, "sklearn-base-densitymixin"]], "sklearn.base.ClusterMixin": [[409, "sklearn-base-clustermixin"]], "sklearn.covariance.oas": [[404, "sklearn-covariance-oas"]], "Dispatching": [[376, "dispatching"]], "Bagging meta-estimator": [[398, "bagging-meta-estimator"]], "Forests of randomized trees": [[398, "forests-of-randomized-trees"]], "Random Forests": [[398, "random-forests"]], "Extremely Randomized Trees": [[398, "extremely-randomized-trees"]], "Parallelization": [[398, "parallelization"]], "Feature importance evaluation": [[398, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[398, "totally-random-trees-embedding"]], "AdaBoost": [[398, "adaboost"]], "Gradient Tree Boosting": [[398, "gradient-tree-boosting"]], "Fitting additional weak-learners": [[398, "fitting-additional-weak-learners"]], "Controlling the tree size": [[398, "controlling-the-tree-size"]], "Loss Functions": [[398, "loss-functions"]], "Shrinkage via learning rate": [[398, "shrinkage-via-learning-rate"]], "Subsampling": [[398, "subsampling"]], "Interpretation with feature importance": [[398, "interpretation-with-feature-importance"]], "Histogram-Based Gradient Boosting": [[398, "histogram-based-gradient-boosting"]], "Missing values support": [[398, "missing-values-support"]], "Sample weight support": [[398, "sample-weight-support"]], "Categorical Features Support": [[398, "categorical-features-support"]], "Interaction constraints": [[398, "interaction-constraints"]], "Why it\u2019s faster": [[398, "why-it-s-faster"]], "Voting Classifier": [[398, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[398, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[398, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[398, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[398, "voting-regressor"]], "Stacked generalization": [[398, "stacked-generalization"]], "Bug triaging and issue curation": [[366, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[366, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[366, null]], "Working on PRs to help review": [[366, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[366, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[366, null]], "A typical workflow for triaging issues": [[366, "a-typical-workflow-for-triaging-issues"]], "sklearn.base.BaseEstimator": [[405, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[405, "examples-using-sklearn-base-baseestimator"]], "PLSCanonical": [[394, "plscanonical"]], "Transforming data": [[394, "transforming-data"]], "Predicting the targets Y": [[394, "predicting-the-targets-y"]], "PLSSVD": [[394, "plssvd"]], "PLSRegression": [[394, "plsregression"]], "Canonical Correlation Analysis": [[394, "canonical-correlation-analysis"]], "Reference:": [[394, null]], "sklearn.calibration.CalibrationDisplay": [[418, "sklearn-calibration-calibrationdisplay"]], "sklearn.cluster.Birch": [[422, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[422, "examples-using-sklearn-cluster-birch"]], "sklearn.base.ClassifierMixin": [[408, "sklearn-base-classifiermixin"]], "Generated datasets": [[363, "generated-datasets"]], "Generators for classification and clustering": [[363, "generators-for-classification-and-clustering"]], "Single label": [[363, "single-label"]], "Multilabel": [[363, "multilabel"]], "Generators for regression": [[363, "generators-for-regression"]], "Generators for manifold learning": [[363, "generators-for-manifold-learning"]], "Generators for decomposition": [[363, "generators-for-decomposition"]], "Real world datasets": [[362, "real-world-datasets"]], "The Olivetti faces dataset": [[362, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[362, "the-20-newsgroups-text-dataset"]], "Converting text to vectors": [[362, "converting-text-to-vectors"]], "Filtering text for more realistic training": [[362, "filtering-text-for-more-realistic-training"]], "Data Considerations": [[362, null]], "Recommendation": [[362, null]], "The Labeled Faces in the Wild face recognition dataset": [[362, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[362, "forest-covertypes"]], "RCV1 dataset": [[362, "rcv1-dataset"]], "Kddcup 99 dataset": [[362, "kddcup-99-dataset"]], "California Housing dataset": [[362, "california-housing-dataset"]], "Our community, our values": [[367, null]], "Ways to contribute": [[367, "ways-to-contribute"]], "Contributing to related projects": [[367, null]], "Submitting a bug report or a feature request": [[367, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[367, "how-to-make-a-good-bug-report"]], "Contributing code": [[367, "contributing-code"]], "Video resources": [[367, "video-resources"]], "How to contribute": [[367, "how-to-contribute"]], "Learning git:": [[367, null]], "Pull request checklist": [[367, "pull-request-checklist"]], "Continuous Integration (CI)": [[367, "continuous-integration-ci"]], "Stalled pull requests": [[367, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[367, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[367, "issues-for-new-contributors"]], "good first issue tag": [[367, null]], "Easy tag": [[367, null]], "help wanted tag": [[367, null]], "Building the documentation": [[367, "building-the-documentation"]], "Guidelines for writing documentation": [[367, "guidelines-for-writing-documentation"]], "Cross-referencing": [[367, "cross-referencing"]], "Generated documentation on GitHub Actions": [[367, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[367, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[367, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[367, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[367, "monitoring-performance"]], "Issue Tracker Tags": [[367, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[367, "maintaining-backwards-compatibility"]], "Deprecation": [[367, "deprecation"]], "Change the default value of a parameter": [[367, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[367, "code-review-guidelines"]], "Communication Guidelines": [[367, "communication-guidelines"]], "Reading the existing code base": [[367, "reading-the-existing-code-base"]], "Model persistence": [[385, "model-persistence"]], "Python specific serialization": [[385, "python-specific-serialization"]], "Security & maintainability limitations": [[385, "security-maintainability-limitations"]], "A more secure format: skops": [[385, "a-more-secure-format-skops"]], "Interoperable formats": [[385, "interoperable-formats"]], "sklearn.cluster.dbscan": [[402, "sklearn-cluster-dbscan"]]}, "indexentries": {"1d": [[379, "term-1d"]], "1d array": [[379, "term-1d-array"]], "2d": [[379, "term-2d"]], "2d array": [[379, "term-2d-array"]], "api": [[379, "term-API"]], "cv splitter": [[379, "term-CV-splitter"]], "slep": [[379, "term-SLEP"]], "sleps": [[379, "term-SLEPs"]], "x": [[379, "term-X"]], "xt": [[379, "term-Xt"]], "y": [[379, "term-Y"], [379, "term-y"]], "_estimator_type": [[379, "term-_estimator_type"]], "array-like": [[379, "term-array-like"]], "attribute": [[379, "term-attribute"]], "attributes": [[379, "term-attributes"]], "backwards compatibility": [[379, "term-backwards-compatibility"]], "binary": [[379, "term-binary"]], "callable": [[379, "term-callable"]], "categorical feature": [[379, "term-categorical-feature"]], "class_weight": [[379, "term-class_weight"]], "classes_": [[379, "term-classes_"]], "classifier": [[379, "term-classifier"]], "classifiers": [[379, "term-classifiers"]], "clone": [[379, "term-clone"]], "cloned": [[379, "term-cloned"]], "clusterer": [[379, "term-clusterer"]], "clusterers": [[379, "term-clusterers"]], "coef_": [[379, "term-coef_"]], "common tests": [[379, "term-common-tests"]], "components_": [[379, "term-components_"]], "continuous": [[379, "term-continuous"]], "continuous multi-output": [[379, "term-continuous-multi-output"]], "continuous multioutput": [[379, "term-continuous-multioutput"]], "cross-validation estimator": [[379, "term-cross-validation-estimator"]], "cross-validation generator": [[379, "term-cross-validation-generator"]], "cross-validation splitter": [[379, "term-cross-validation-splitter"]], "cv": [[379, "term-cv"]], "data leakage": [[379, "term-data-leakage"]], "data type": [[379, "term-data-type"]], "decision_function": [[379, "term-decision_function"]], "density estimator": [[379, "term-density-estimator"]], "deprecation": [[379, "term-deprecation"]], "dimensionality": [[379, "term-dimensionality"]], "docstring": [[379, "term-docstring"]], "double underscore": [[379, "term-double-underscore"]], "double underscore notation": [[379, "term-double-underscore-notation"]], "dtype": [[379, "term-dtype"]], "duck typing": [[379, "term-duck-typing"]], "early stopping": [[379, "term-early-stopping"]], "embedding_": [[379, "term-embedding_"]], "estimator": [[379, "term-estimator"]], "estimator instance": [[379, "term-estimator-instance"]], "estimator tags": [[379, "term-estimator-tags"]], "estimators": [[379, "term-estimators"]], "evaluation metric": [[379, "term-evaluation-metric"]], "evaluation metrics": [[379, "term-evaluation-metrics"]], "examples": [[379, "term-examples"]], "experimental": [[379, "term-experimental"]], "feature": [[379, "term-feature"]], "feature extractor": [[379, "term-feature-extractor"]], "feature extractors": [[379, "term-feature-extractors"]], "feature vector": [[379, "term-feature-vector"]], "feature_importances_": [[379, "term-feature_importances_"]], "features": [[379, "term-features"]], "fit": [[379, "term-fit"]], "fit_predict": [[379, "term-fit_predict"]], "fit_transform": [[379, "term-fit_transform"]], "fitted": [[379, "term-fitted"]], "fitting": [[379, "term-fitting"]], "function": [[379, "term-function"]], "gallery": [[379, "term-gallery"]], "get_feature_names_out": [[379, "term-get_feature_names_out"]], "get_n_splits": [[379, "term-get_n_splits"]], "get_params": [[379, "term-get_params"]], "groups": [[379, "term-groups"]], "hyper-parameter": [[379, "term-hyper-parameter"]], "hyperparameter": [[379, "term-hyperparameter"]], "imputation": [[379, "term-imputation"]], "impute": [[379, "term-impute"]], "indexable": [[379, "term-indexable"]], "induction": [[379, "term-induction"]], "inductive": [[379, "term-inductive"]], "joblib": [[379, "term-joblib"]], "kernel": [[379, "term-kernel"]], "label indicator matrix": [[379, "term-label-indicator-matrix"]], "labels_": [[379, "term-labels_"]], "leakage": [[379, "term-leakage"]], "max_iter": [[379, "term-max_iter"]], "memmapping": [[379, "term-memmapping"]], "memory": [[379, "term-memory"]], "memory map": [[379, "term-memory-map"]], "memory mapping": [[379, "term-memory-mapping"]], "meta-estimator": [[379, "term-meta-estimator"]], "meta-estimators": [[379, "term-meta-estimators"]], "metaestimator": [[379, "term-metaestimator"]], "metaestimators": [[379, "term-metaestimators"]], "metric": [[379, "term-metric"]], "missing values": [[379, "term-missing-values"]], "multi-class": [[379, "term-multi-class"]], "multi-class multi-output": [[379, "term-multi-class-multi-output"]], "multi-label": [[379, "term-multi-label"]], "multi-output": [[379, "term-multi-output"]], "multi-output continuous": [[379, "term-multi-output-continuous"]], "multi-output multi-class": [[379, "term-multi-output-multi-class"]], "multiclass": [[379, "term-multiclass"]], "multiclass multioutput": [[379, "term-multiclass-multioutput"]], "multilabel": [[379, "term-multilabel"]], "multilabel indicator matrices": [[379, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[379, "term-multilabel-indicator-matrix"]], "multioutput": [[379, "term-multioutput"]], "multioutput continuous": [[379, "term-multioutput-continuous"]], "multioutput multiclass": [[379, "term-multioutput-multiclass"]], "n_components": [[379, "term-n_components"]], "n_features": [[379, "term-n_features"]], "n_iter_": [[379, "term-n_iter_"]], "n_iter_no_change": [[379, "term-n_iter_no_change"]], "n_jobs": [[379, "term-n_jobs"]], "n_outputs": [[379, "term-n_outputs"]], "n_samples": [[379, "term-n_samples"]], "n_targets": [[379, "term-n_targets"]], "narrative docs": [[379, "term-narrative-docs"]], "narrative documentation": [[379, "term-narrative-documentation"]], "np": [[379, "term-np"]], "online learning": [[379, "term-online-learning"]], "out-of-core": [[379, "term-out-of-core"]], "outlier detector": [[379, "term-outlier-detector"]], "outlier detectors": [[379, "term-outlier-detectors"]], "outputs": [[379, "term-outputs"]], "pair": [[379, "term-pair"]], "pairwise metric": [[379, "term-pairwise-metric"]], "pairwise metrics": [[379, "term-pairwise-metrics"]], "param": [[379, "term-param"]], "parameter": [[379, "term-parameter"]], "parameters": [[379, "term-parameters"]], "params": [[379, "term-params"]], "partial_fit": [[379, "term-partial_fit"]], "pd": [[379, "term-pd"]], "pos_label": [[379, "term-pos_label"]], "precomputed": [[379, "term-precomputed"]], "predict": [[379, "term-predict"]], "predict_log_proba": [[379, "term-predict_log_proba"]], "predict_proba": [[379, "term-predict_proba"]], "predictor": [[379, "term-predictor"]], "predictors": [[379, "term-predictors"]], "random_state": [[379, "term-random_state"]], "rectangular": [[379, "term-rectangular"]], "regressor": [[379, "term-regressor"]], "regressors": [[379, "term-regressors"]], "sample": [[379, "term-sample"]], "sample properties": [[379, "term-sample-properties"]], "sample property": [[379, "term-sample-property"]], "sample_weight": [[379, "term-sample_weight"]], "samples": [[379, "term-samples"]], "scikit-learn enhancement proposals": [[379, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[379, "term-scikit-learn-contrib"]], "score": [[379, "term-score"]], "score_samples": [[379, "term-score_samples"]], "scorer": [[379, "term-scorer"]], "scoring": [[379, "term-scoring"]], "semi-supervised": [[379, "term-semi-supervised"]], "semi-supervised learning": [[379, "term-semi-supervised-learning"]], "semisupervised": [[379, "term-semisupervised"]], "set_params": [[379, "term-set_params"]], "sparse graph": [[379, "term-sparse-graph"]], "sparse matrix": [[379, "term-sparse-matrix"]], "split": [[379, "term-split"]], "supervised": [[379, "term-supervised"]], "supervised learning": [[379, "term-supervised-learning"]], "target": [[379, "term-target"]], "targets": [[379, "term-targets"]], "transduction": [[379, "term-transduction"]], "transductive": [[379, "term-transductive"]], "transform": [[379, "term-transform"]], "transformer": [[379, "term-transformer"]], "transformers": [[379, "term-transformers"]], "unlabeled": [[379, "term-unlabeled"]], "unlabeled data": [[379, "term-unlabeled-data"]], "unsupervised": [[379, "term-unsupervised"]], "unsupervised learning": [[379, "term-unsupervised-learning"]], "vectorizer": [[379, "term-vectorizer"]], "vectorizers": [[379, "term-vectorizers"]], "verbose": [[379, "term-verbose"]], "warm_start": [[379, "term-warm_start"]], "module": [[390, "module-sklearn.base"], [390, "module-sklearn.calibration"], [390, "module-sklearn.cluster"], [390, "module-sklearn.compose"], [390, "module-sklearn.covariance"], [390, "module-sklearn.cross_decomposition"], [390, "module-sklearn.datasets"], [390, "module-sklearn.decomposition"], [390, "module-sklearn.discriminant_analysis"], [390, "module-sklearn.dummy"], [390, "module-sklearn.ensemble"], [390, "module-sklearn.exceptions"], [390, "module-sklearn.experimental"], [390, "module-sklearn.feature_extraction"], [390, "module-sklearn.feature_extraction.image"], [390, "module-sklearn.feature_extraction.text"], [390, "module-sklearn.feature_selection"], [390, "module-sklearn.gaussian_process"], [390, "module-sklearn.impute"], [390, "module-sklearn.inspection"], [390, "module-sklearn.isotonic"], [390, "module-sklearn.kernel_approximation"], [390, "module-sklearn.kernel_ridge"], [390, "module-sklearn.linear_model"], [390, "module-sklearn.manifold"], [390, "module-sklearn.metrics"], [390, "module-sklearn.metrics.cluster"], [390, "module-sklearn.metrics.pairwise"], [390, "module-sklearn.mixture"], [390, "module-sklearn.model_selection"], [390, "module-sklearn.multiclass"], [390, "module-sklearn.multioutput"], [390, "module-sklearn.naive_bayes"], [390, "module-sklearn.neighbors"], [390, "module-sklearn.neural_network"], [390, "module-sklearn.pipeline"], [390, "module-sklearn.preprocessing"], [390, "module-sklearn.random_projection"], [390, "module-sklearn.semi_supervised"], [390, "module-sklearn.svm"], [390, "module-sklearn.tree"], [390, "module-sklearn.utils"], [556, "module-sklearn.experimental.enable_halving_search_cv"], [557, "module-sklearn.experimental.enable_hist_gradient_boosting"], [558, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.base": [[390, "module-sklearn.base"]], "sklearn.calibration": [[390, "module-sklearn.calibration"]], "sklearn.cluster": [[390, "module-sklearn.cluster"]], "sklearn.compose": [[390, "module-sklearn.compose"]], "sklearn.covariance": [[390, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[390, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[390, "module-sklearn.datasets"]], "sklearn.decomposition": [[390, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[390, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[390, "module-sklearn.dummy"]], "sklearn.ensemble": [[390, "module-sklearn.ensemble"]], "sklearn.exceptions": [[390, "module-sklearn.exceptions"]], "sklearn.experimental": [[390, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[390, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[390, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[390, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[390, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[390, "module-sklearn.gaussian_process"]], "sklearn.impute": [[390, "module-sklearn.impute"]], "sklearn.inspection": [[390, "module-sklearn.inspection"]], "sklearn.isotonic": [[390, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[390, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[390, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[390, "module-sklearn.linear_model"]], "sklearn.manifold": [[390, "module-sklearn.manifold"]], "sklearn.metrics": [[390, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[390, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[390, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[390, "module-sklearn.mixture"]], "sklearn.model_selection": [[390, "module-sklearn.model_selection"]], "sklearn.multiclass": [[390, "module-sklearn.multiclass"]], "sklearn.multioutput": [[390, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[390, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[390, "module-sklearn.neighbors"]], "sklearn.neural_network": [[390, "module-sklearn.neural_network"]], "sklearn.pipeline": [[390, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[390, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[390, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[390, "module-sklearn.semi_supervised"]], "sklearn.svm": [[390, "module-sklearn.svm"]], "sklearn.tree": [[390, "module-sklearn.tree"]], "sklearn.utils": [[390, "module-sklearn.utils"]], "dbscan() (in module sklearn.cluster)": [[402, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[403, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[404, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[405, "sklearn.base.BaseEstimator"]], "get_params() (sklearn.base.baseestimator method)": [[405, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[405, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[406, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[406, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[406, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[406, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[406, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[407, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[407, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[408, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[408, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[409, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[409, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[410, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[410, "sklearn.base.DensityMixin.score"]], "onetoonefeaturemixin (class in sklearn.base)": [[411, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[411, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "regressormixin (class in sklearn.base)": [[412, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[412, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[413, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[413, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[413, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[414, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[415, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[416, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[417, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[417, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[417, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[417, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[417, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[417, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[417, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "calibrationdisplay (class in sklearn.calibration)": [[418, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[418, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[418, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[418, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[419, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[420, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[420, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[420, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[420, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[420, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[420, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[421, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[421, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[421, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[421, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[421, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[422, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.get_feature_names_out"]], "get_params() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[422, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[423, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.score"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.set_params"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[423, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[424, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[424, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[424, "sklearn.cluster.DBSCAN.fit_predict"]], "get_params() (sklearn.cluster.dbscan method)": [[424, "sklearn.cluster.DBSCAN.get_params"]], "set_params() (sklearn.cluster.dbscan method)": [[424, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[425, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[425, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[425, "sklearn.cluster.FeatureAgglomeration.transform"]], "kmeans (class in sklearn.cluster)": [[426, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.score"]], "set_output() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.set_params"]], "transform() (sklearn.cluster.kmeans method)": [[426, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[427, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[427, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[427, "sklearn.cluster.MeanShift.fit_predict"]], "get_params() (sklearn.cluster.meanshift method)": [[427, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[427, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[427, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[428, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.score"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.set_params"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[428, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[429, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[429, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[429, "sklearn.cluster.OPTICS.fit_predict"]], "get_params() (sklearn.cluster.optics method)": [[429, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[429, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[430, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[430, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[430, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[430, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[430, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[430, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[430, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[430, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[431, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[431, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[431, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_params() (sklearn.cluster.spectralclustering method)": [[431, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[431, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[432, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[432, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[432, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[432, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[432, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[432, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[432, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[432, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[433, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[434, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[435, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[436, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[437, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[438, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[439, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[440, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[441, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[442, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[443, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_params() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[443, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[443, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[444, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[444, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[444, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[444, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[444, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[444, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[444, "sklearn.compose.TransformedTargetRegressor.set_params"]], "make_column_selector() (in module sklearn.compose)": [[445, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[446, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[447, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[448, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[448, "sklearn.covariance.EllipticEnvelope.set_params"]], "empiricalcovariance (class in sklearn.covariance)": [[449, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[449, "sklearn.covariance.EmpiricalCovariance.set_params"]], "graphicallasso (class in sklearn.covariance)": [[450, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.fit"]], "get_params() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[450, "sklearn.covariance.GraphicalLasso.set_params"]], "graphicallassocv (class in sklearn.covariance)": [[451, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[451, "sklearn.covariance.GraphicalLassoCV.set_params"]], "ledoitwolf (class in sklearn.covariance)": [[452, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.fit"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[452, "sklearn.covariance.LedoitWolf.set_params"]], "mincovdet (class in sklearn.covariance)": [[453, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.fit"]], "get_params() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[453, "sklearn.covariance.MinCovDet.set_params"]], "oas (class in sklearn.covariance)": [[454, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.fit"]], "get_params() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[454, "sklearn.covariance.OAS.set_params"]], "shrunkcovariance (class in sklearn.covariance)": [[455, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.fit"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[455, "sklearn.covariance.ShrunkCovariance.set_params"]], "empirical_covariance() (in module sklearn.covariance)": [[456, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[457, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[458, "sklearn.covariance.ledoit_wolf"]], "shrunk_covariance() (in module sklearn.covariance)": [[459, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[460, "sklearn.cross_decomposition.CCA"]], "coef_ (sklearn.cross_decomposition.cca property)": [[460, "sklearn.cross_decomposition.CCA.coef_"]], "fit() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.set_params"]], "transform() (sklearn.cross_decomposition.cca method)": [[460, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[461, "sklearn.cross_decomposition.PLSCanonical"]], "coef_ (sklearn.cross_decomposition.plscanonical property)": [[461, "sklearn.cross_decomposition.PLSCanonical.coef_"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[461, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[462, "sklearn.cross_decomposition.PLSRegression"]], "coef_ (sklearn.cross_decomposition.plsregression property)": [[462, "sklearn.cross_decomposition.PLSRegression.coef_"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.set_params"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[462, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[463, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[463, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[464, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[465, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[466, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[467, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[468, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[469, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[470, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[471, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[472, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[473, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[474, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[475, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[476, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[477, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[478, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[479, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[480, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[481, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[482, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[483, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[484, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[485, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[486, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[487, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[488, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[489, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[490, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[491, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[496, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[497, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[498, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[499, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[500, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[501, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[502, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[503, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[504, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[505, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[506, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[507, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[509, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[509, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[510, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[510, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[511, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_params() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.inverse_transform"]], "set_output() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.set_params"]], "transform() (sklearn.decomposition.fastica method)": [[511, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[512, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.set_params"]], "transform() (sklearn.decomposition.incrementalpca method)": [[512, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[513, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[513, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[514, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[514, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[515, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[516, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.set_params"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[516, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[517, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[517, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[518, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_params() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[518, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[519, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[519, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[520, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[520, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[520, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[520, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[521, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_params() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[521, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[522, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[522, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[523, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[524, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[525, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[526, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[527, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[528, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "dummyclassifier (class in sklearn.dummy)": [[529, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.fit"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.score"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[529, "sklearn.dummy.DummyClassifier.set_params"]], "dummyregressor (class in sklearn.dummy)": [[530, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[530, "sklearn.dummy.DummyRegressor.fit"]], "get_params() (sklearn.dummy.dummyregressor method)": [[530, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[530, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[530, "sklearn.dummy.DummyRegressor.score"]], "set_params() (sklearn.dummy.dummyregressor method)": [[530, "sklearn.dummy.DummyRegressor.set_params"]], "adaboostclassifier (class in sklearn.ensemble)": [[531, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[531, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "estimator_ (sklearn.ensemble.adaboostclassifier property)": [[531, "sklearn.ensemble.AdaBoostClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[531, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[531, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[532, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[532, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.adaboostregressor property)": [[532, "sklearn.ensemble.AdaBoostRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[532, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[532, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[533, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[533, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.baggingclassifier property)": [[533, "sklearn.ensemble.BaggingClassifier.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[533, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.fit"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.score"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[533, "sklearn.ensemble.BaggingClassifier.set_params"]], "baggingregressor (class in sklearn.ensemble)": [[534, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[534, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.baggingregressor property)": [[534, "sklearn.ensemble.BaggingRegressor.estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[534, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[534, "sklearn.ensemble.BaggingRegressor.fit"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[534, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[534, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[534, "sklearn.ensemble.BaggingRegressor.score"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[534, "sklearn.ensemble.BaggingRegressor.set_params"]], "extratreesclassifier (class in sklearn.ensemble)": [[535, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[535, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimator_ (sklearn.ensemble.extratreesclassifier property)": [[535, "sklearn.ensemble.ExtraTreesClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[535, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[535, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "extratreesregressor (class in sklearn.ensemble)": [[536, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[536, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimator_ (sklearn.ensemble.extratreesregressor property)": [[536, "sklearn.ensemble.ExtraTreesRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[536, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[536, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[537, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[537, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[537, "sklearn.ensemble.GradientBoostingClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[537, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[537, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[538, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[538, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[538, "sklearn.ensemble.GradientBoostingRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[538, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[538, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[539, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[540, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[541, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[541, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.decision_function"]], "estimator_ (sklearn.ensemble.isolationforest property)": [[541, "sklearn.ensemble.IsolationForest.estimator_"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[541, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_params() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.score_samples"]], "set_params() (sklearn.ensemble.isolationforest method)": [[541, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[542, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[542, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimator_ (sklearn.ensemble.randomforestclassifier property)": [[542, "sklearn.ensemble.RandomForestClassifier.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[542, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.score"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[542, "sklearn.ensemble.RandomForestClassifier.set_params"]], "randomforestregressor (class in sklearn.ensemble)": [[543, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[543, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimator_ (sklearn.ensemble.randomforestregressor property)": [[543, "sklearn.ensemble.RandomForestRegressor.estimator_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[543, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.score"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[543, "sklearn.ensemble.RandomForestRegressor.set_params"]], "randomtreesembedding (class in sklearn.ensemble)": [[544, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[544, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimator_ (sklearn.ensemble.randomtreesembedding property)": [[544, "sklearn.ensemble.RandomTreesEmbedding.estimator_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[544, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[544, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[545, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[545, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[545, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.score"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.set_params"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[545, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[546, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[546, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[546, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.score"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.set_params"]], "transform() (sklearn.ensemble.stackingregressor method)": [[546, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[547, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[547, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[547, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.score"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.set_params"]], "transform() (sklearn.ensemble.votingclassifier method)": [[547, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[548, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_params() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[548, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[548, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.score"]], "set_output() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.set_params"]], "transform() (sklearn.ensemble.votingregressor method)": [[548, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[549, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[549, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[550, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[550, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[551, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[551, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[552, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[552, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[553, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[553, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[554, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[554, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[555, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[555, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[556, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_hist_gradient_boosting": [[557, "module-sklearn.experimental.enable_hist_gradient_boosting"]], "sklearn.experimental.enable_iterative_imputer": [[558, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[559, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[559, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[560, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[560, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[560, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[560, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[560, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[560, "sklearn.feature_extraction.FeatureHasher.set_params"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[560, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[561, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[561, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[561, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[561, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[561, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[562, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[563, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[564, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[565, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[566, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[566, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[567, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[567, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[568, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[568, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[569, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[570, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[570, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[571, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[571, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[571, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[572, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[572, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_params() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.score"]], "set_output() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[572, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[573, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[573, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[574, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[574, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[575, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[575, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[575, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[575, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[576, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[576, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[577, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[577, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[578, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[578, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[579, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[579, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[579, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[579, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[579, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[579, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[579, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[580, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[580, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[581, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[581, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[582, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[583, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[584, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[585, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[586, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[587, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[588, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[589, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[590, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[591, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[592, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[592, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[592, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[592, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[592, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[592, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[592, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[592, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[592, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[592, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[592, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[592, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[593, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[594, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[594, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[595, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[596, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[596, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[596, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[596, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[596, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[596, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[596, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[596, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[596, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[596, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[596, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[596, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[597, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[597, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[597, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[597, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[597, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[597, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[597, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[597, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[597, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[597, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[597, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[597, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[598, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[599, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[599, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[599, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[599, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[599, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[599, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[599, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[599, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[599, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[599, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[599, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[599, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[600, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[600, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[600, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[600, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[600, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[600, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[600, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[600, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[600, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[600, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[600, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[600, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[601, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[602, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[602, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[602, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[602, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[602, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[602, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[602, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[602, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[602, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[602, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[602, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[602, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[603, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[604, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[605, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_params() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[605, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[606, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_params() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[606, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[607, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_params() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[607, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[608, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_params() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[608, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[609, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[609, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[609, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[610, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[610, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[610, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[611, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[612, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[613, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.score"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.set_params"]], "transform() (sklearn.isotonic.isotonicregression method)": [[613, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[614, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[615, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[616, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[617, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[617, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[618, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[619, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[619, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[620, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[621, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[621, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[621, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[621, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[621, "sklearn.kernel_ridge.KernelRidge.score"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[621, "sklearn.kernel_ridge.KernelRidge.set_params"]], "ardregression (class in sklearn.linear_model)": [[622, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[622, "sklearn.linear_model.ARDRegression.fit"]], "get_params() (sklearn.linear_model.ardregression method)": [[622, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[622, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[622, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[622, "sklearn.linear_model.ARDRegression.set_params"]], "bayesianridge (class in sklearn.linear_model)": [[623, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[623, "sklearn.linear_model.BayesianRidge.fit"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[623, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[623, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[623, "sklearn.linear_model.BayesianRidge.score"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[623, "sklearn.linear_model.BayesianRidge.set_params"]], "elasticnet (class in sklearn.linear_model)": [[624, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[624, "sklearn.linear_model.ElasticNet.fit"]], "get_params() (sklearn.linear_model.elasticnet method)": [[624, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[624, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[624, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[624, "sklearn.linear_model.ElasticNet.score"]], "set_params() (sklearn.linear_model.elasticnet method)": [[624, "sklearn.linear_model.ElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[624, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[625, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[625, "sklearn.linear_model.ElasticNetCV.fit"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[625, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[625, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[625, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[625, "sklearn.linear_model.ElasticNetCV.score"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[625, "sklearn.linear_model.ElasticNetCV.set_params"]], "gammaregressor (class in sklearn.linear_model)": [[626, "sklearn.linear_model.GammaRegressor"]], "family (sklearn.linear_model.gammaregressor property)": [[626, "sklearn.linear_model.GammaRegressor.family"]], "fit() (sklearn.linear_model.gammaregressor method)": [[626, "sklearn.linear_model.GammaRegressor.fit"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[626, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[626, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[626, "sklearn.linear_model.GammaRegressor.score"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[626, "sklearn.linear_model.GammaRegressor.set_params"]], "huberregressor (class in sklearn.linear_model)": [[627, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[627, "sklearn.linear_model.HuberRegressor.fit"]], "get_params() (sklearn.linear_model.huberregressor method)": [[627, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[627, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[627, "sklearn.linear_model.HuberRegressor.score"]], "set_params() (sklearn.linear_model.huberregressor method)": [[627, "sklearn.linear_model.HuberRegressor.set_params"]], "lars (class in sklearn.linear_model)": [[628, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[628, "sklearn.linear_model.Lars.fit"]], "get_params() (sklearn.linear_model.lars method)": [[628, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[628, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[628, "sklearn.linear_model.Lars.score"]], "set_params() (sklearn.linear_model.lars method)": [[628, "sklearn.linear_model.Lars.set_params"]], "larscv (class in sklearn.linear_model)": [[629, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[629, "sklearn.linear_model.LarsCV.fit"]], "get_params() (sklearn.linear_model.larscv method)": [[629, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[629, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[629, "sklearn.linear_model.LarsCV.score"]], "set_params() (sklearn.linear_model.larscv method)": [[629, "sklearn.linear_model.LarsCV.set_params"]], "lasso (class in sklearn.linear_model)": [[630, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[630, "sklearn.linear_model.Lasso.fit"]], "get_params() (sklearn.linear_model.lasso method)": [[630, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[630, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[630, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[630, "sklearn.linear_model.Lasso.score"]], "set_params() (sklearn.linear_model.lasso method)": [[630, "sklearn.linear_model.Lasso.set_params"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[630, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[631, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[631, "sklearn.linear_model.LassoCV.fit"]], "get_params() (sklearn.linear_model.lassocv method)": [[631, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[631, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[631, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[631, "sklearn.linear_model.LassoCV.score"]], "set_params() (sklearn.linear_model.lassocv method)": [[631, "sklearn.linear_model.LassoCV.set_params"]], "lassolars (class in sklearn.linear_model)": [[632, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[632, "sklearn.linear_model.LassoLars.fit"]], "get_params() (sklearn.linear_model.lassolars method)": [[632, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[632, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[632, "sklearn.linear_model.LassoLars.score"]], "set_params() (sklearn.linear_model.lassolars method)": [[632, "sklearn.linear_model.LassoLars.set_params"]], "lassolarscv (class in sklearn.linear_model)": [[633, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[633, "sklearn.linear_model.LassoLarsCV.fit"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[633, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[633, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[633, "sklearn.linear_model.LassoLarsCV.score"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[633, "sklearn.linear_model.LassoLarsCV.set_params"]], "lassolarsic (class in sklearn.linear_model)": [[634, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[634, "sklearn.linear_model.LassoLarsIC.fit"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[634, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[634, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[634, "sklearn.linear_model.LassoLarsIC.score"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[634, "sklearn.linear_model.LassoLarsIC.set_params"]], "linearregression (class in sklearn.linear_model)": [[635, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[635, "sklearn.linear_model.LinearRegression.fit"]], "get_params() (sklearn.linear_model.linearregression method)": [[635, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[635, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[635, "sklearn.linear_model.LinearRegression.score"]], "set_params() (sklearn.linear_model.linearregression method)": [[635, "sklearn.linear_model.LinearRegression.set_params"]], "logisticregression (class in sklearn.linear_model)": [[636, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.fit"]], "get_params() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.score"]], "set_params() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.set_params"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[636, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[637, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[637, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[638, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[638, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[638, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[638, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[638, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[638, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[638, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[638, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[639, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "multitasklasso (class in sklearn.linear_model)": [[640, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[640, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[640, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[640, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[640, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[640, "sklearn.linear_model.MultiTaskLasso.score"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[640, "sklearn.linear_model.MultiTaskLasso.set_params"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[640, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[641, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[641, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[641, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[641, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[641, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[641, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[641, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[642, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[643, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[643, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[643, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[643, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[643, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[643, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[644, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor() (in module sklearn.linear_model)": [[645, "sklearn.linear_model.PassiveAggressiveRegressor"]], "perceptron (class in sklearn.linear_model)": [[646, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.fit"]], "get_params() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.score"]], "set_params() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.set_params"]], "sparsify() (sklearn.linear_model.perceptron method)": [[646, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[647, "sklearn.linear_model.PoissonRegressor"]], "family (sklearn.linear_model.poissonregressor property)": [[647, "sklearn.linear_model.PoissonRegressor.family"]], "fit() (sklearn.linear_model.poissonregressor method)": [[647, "sklearn.linear_model.PoissonRegressor.fit"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[647, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[647, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[647, "sklearn.linear_model.PoissonRegressor.score"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[647, "sklearn.linear_model.PoissonRegressor.set_params"]], "quantileregressor (class in sklearn.linear_model)": [[648, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[648, "sklearn.linear_model.QuantileRegressor.fit"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[648, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[648, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[648, "sklearn.linear_model.QuantileRegressor.score"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[648, "sklearn.linear_model.QuantileRegressor.set_params"]], "ransacregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[649, "sklearn.linear_model.RANSACRegressor.fit"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[649, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[649, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[649, "sklearn.linear_model.RANSACRegressor.score"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[649, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[650, "sklearn.linear_model.Ridge.fit"]], "get_params() (sklearn.linear_model.ridge method)": [[650, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[650, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[650, "sklearn.linear_model.Ridge.score"]], "set_params() (sklearn.linear_model.ridge method)": [[650, "sklearn.linear_model.Ridge.set_params"]], "ridgecv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[651, "sklearn.linear_model.RidgeCV.fit"]], "get_params() (sklearn.linear_model.ridgecv method)": [[651, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[651, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[651, "sklearn.linear_model.RidgeCV.score"]], "set_params() (sklearn.linear_model.ridgecv method)": [[651, "sklearn.linear_model.RidgeCV.set_params"]], "ridgeclassifier (class in sklearn.linear_model)": [[652, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[652, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[652, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[652, "sklearn.linear_model.RidgeClassifier.fit"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[652, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[652, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[652, "sklearn.linear_model.RidgeClassifier.score"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[652, "sklearn.linear_model.RidgeClassifier.set_params"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[653, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[653, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[653, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[653, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[653, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[653, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[653, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "sgdclassifier (class in sklearn.linear_model)": [[654, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.fit"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.score"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.set_params"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[654, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[655, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[655, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[656, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.fit"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.score"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.set_params"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[656, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[657, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[657, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[657, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[657, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[657, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[657, "sklearn.linear_model.TheilSenRegressor.set_params"]], "tweedieregressor (class in sklearn.linear_model)": [[658, "sklearn.linear_model.TweedieRegressor"]], "family (sklearn.linear_model.tweedieregressor property)": [[658, "sklearn.linear_model.TweedieRegressor.family"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[658, "sklearn.linear_model.TweedieRegressor.fit"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[658, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[658, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[658, "sklearn.linear_model.TweedieRegressor.score"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[658, "sklearn.linear_model.TweedieRegressor.set_params"]], "enet_path() (in module sklearn.linear_model)": [[659, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[660, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[661, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[662, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[663, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[664, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[665, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[666, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_params() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[666, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[667, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[667, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[668, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[668, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[668, "sklearn.manifold.MDS.fit_transform"]], "get_params() (sklearn.manifold.mds method)": [[668, "sklearn.manifold.MDS.get_params"]], "set_params() (sklearn.manifold.mds method)": [[668, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[669, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[669, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[669, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_params() (sklearn.manifold.spectralembedding method)": [[669, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[669, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[670, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[670, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[670, "sklearn.manifold.TSNE.fit_transform"]], "get_params() (sklearn.manifold.tsne method)": [[670, "sklearn.manifold.TSNE.get_params"]], "set_params() (sklearn.manifold.tsne method)": [[670, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[671, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[672, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[673, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[674, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[675, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[675, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[675, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[675, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[676, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[676, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[676, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[676, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[677, "sklearn.metrics.DistanceMetric"]], "dist_to_rdist() (sklearn.metrics.distancemetric method)": [[677, "sklearn.metrics.DistanceMetric.dist_to_rdist"]], "get_metric() (sklearn.metrics.distancemetric method)": [[677, "sklearn.metrics.DistanceMetric.get_metric"]], "pairwise() (sklearn.metrics.distancemetric method)": [[677, "sklearn.metrics.DistanceMetric.pairwise"]], "rdist_to_dist() (sklearn.metrics.distancemetric method)": [[677, "sklearn.metrics.DistanceMetric.rdist_to_dist"]], "precisionrecalldisplay (class in sklearn.metrics)": [[678, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[678, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[678, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[678, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[679, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[679, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[679, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[679, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[680, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[680, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[680, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[680, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[681, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[682, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[683, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[684, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[685, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[687, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[689, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[690, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[691, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[692, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[693, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[694, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[695, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[696, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[697, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[698, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[699, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[704, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[709, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[710, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[711, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[712, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[713, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[717, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[718, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[719, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[720, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[721, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[722, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[723, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[724, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[725, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[726, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[727, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[728, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[729, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[730, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[731, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[735, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[736, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[737, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[742, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[743, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[744, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[745, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[746, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[747, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[748, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[749, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[750, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[751, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[752, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[753, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[755, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[756, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[757, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[758, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[759, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[760, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[761, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[762, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[763, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[765, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[766, "sklearn.metrics.roc_curve"]], "silhouette_samples() (in module sklearn.metrics)": [[767, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[768, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[769, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[770, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[771, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[772, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[772, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[773, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[773, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[774, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[774, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.fit"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[774, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[774, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[775, "sklearn.model_selection.GroupKFold"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[775, "sklearn.model_selection.GroupKFold.get_n_splits"]], "split() (sklearn.model_selection.groupkfold method)": [[775, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[776, "sklearn.model_selection.GroupShuffleSplit"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[776, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[776, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[777, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[777, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[777, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[777, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[778, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[778, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[779, "sklearn.model_selection.KFold"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[779, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[779, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[780, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[780, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[780, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[781, "sklearn.model_selection.LeaveOneGroupOut"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[781, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[781, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[782, "sklearn.model_selection.LeaveOneOut"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[782, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[782, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[783, "sklearn.model_selection.LeavePGroupsOut"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[783, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[783, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[784, "sklearn.model_selection.LeavePOut"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[784, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[784, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[785, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[786, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[787, "sklearn.model_selection.PredefinedSplit"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[787, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[787, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[788, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[788, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[788, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[788, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[789, "sklearn.model_selection.RepeatedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[789, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[789, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[790, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[790, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[790, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[791, "sklearn.model_selection.ShuffleSplit"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[791, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[791, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[792, "sklearn.model_selection.StratifiedGroupKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[792, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[792, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[793, "sklearn.model_selection.StratifiedKFold"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[793, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[793, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[794, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[794, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[794, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[795, "sklearn.model_selection.TimeSeriesSplit"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[795, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[795, "sklearn.model_selection.TimeSeriesSplit.split"]], "check_cv() (in module sklearn.model_selection)": [[796, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[797, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[798, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[799, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[800, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[801, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[802, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[803, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[804, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[804, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[804, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "onevsrestclassifier (class in sklearn.multiclass)": [[805, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[805, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[805, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[805, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "outputcodeclassifier (class in sklearn.multiclass)": [[806, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[806, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[806, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[806, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[806, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[806, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "classifierchain (class in sklearn.multioutput)": [[807, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.fit"]], "get_params() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[807, "sklearn.multioutput.ClassifierChain.set_params"]], "multioutputclassifier (class in sklearn.multioutput)": [[808, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[808, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "multioutputregressor (class in sklearn.multioutput)": [[809, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[809, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[809, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[809, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[809, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[809, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[809, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "regressorchain (class in sklearn.multioutput)": [[810, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[810, "sklearn.multioutput.RegressorChain.fit"]], "get_params() (sklearn.multioutput.regressorchain method)": [[810, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[810, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[810, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[810, "sklearn.multioutput.RegressorChain.set_params"]], "bernoullinb (class in sklearn.naive_bayes)": [[811, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.score"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[811, "sklearn.naive_bayes.BernoulliNB.set_params"]], "categoricalnb (class in sklearn.naive_bayes)": [[812, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.score"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[812, "sklearn.naive_bayes.CategoricalNB.set_params"]], "complementnb (class in sklearn.naive_bayes)": [[813, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.fit"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.score"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[813, "sklearn.naive_bayes.ComplementNB.set_params"]], "gaussiannb (class in sklearn.naive_bayes)": [[814, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.fit"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.score"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[814, "sklearn.naive_bayes.GaussianNB.set_params"]], "multinomialnb (class in sklearn.naive_bayes)": [[815, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.score"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[815, "sklearn.naive_bayes.MultinomialNB.set_params"]], "balltree (class in sklearn.neighbors)": [[816, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[816, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[817, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[817, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[818, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[818, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "kneighborsregressor (class in sklearn.neighbors)": [[819, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[819, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "kneighborstransformer (class in sklearn.neighbors)": [[820, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[820, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[821, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[821, "sklearn.neighbors.KernelDensity.fit"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[821, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[821, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[821, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[821, "sklearn.neighbors.KernelDensity.score_samples"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[821, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[822, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[822, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[823, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[823, "sklearn.neighbors.NearestCentroid.fit"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[823, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[823, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[823, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[823, "sklearn.neighbors.NearestCentroid.set_params"]], "nearestneighbors (class in sklearn.neighbors)": [[824, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.fit"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[824, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[825, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[826, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[827, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[828, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[829, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[830, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[831, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[832, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[832, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[833, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.fit"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[833, "sklearn.neural_network.MLPClassifier.set_params"]], "mlpregressor (class in sklearn.neural_network)": [[834, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[834, "sklearn.neural_network.MLPRegressor.fit"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[834, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[834, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[834, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[834, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[834, "sklearn.neural_network.MLPRegressor.set_params"]], "featureunion (class in sklearn.pipeline)": [[835, "sklearn.pipeline.FeatureUnion"]], "fit() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_params() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[835, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[835, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[836, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[836, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[836, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_params() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[836, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[836, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.set_params"]], "transform() (sklearn.pipeline.pipeline method)": [[836, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[837, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[838, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[839, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.set_params"]], "transform() (sklearn.preprocessing.binarizer method)": [[839, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[840, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[840, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[841, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[841, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.set_params"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[842, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[843, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[844, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[845, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[846, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[847, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[848, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.set_params"]], "transform() (sklearn.preprocessing.normalizer method)": [[848, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[849, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[849, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[849, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[850, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[850, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[851, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[851, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[851, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[852, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[852, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[853, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[853, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[854, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[854, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[855, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[855, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[856, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.set_params"]], "transform() (sklearn.preprocessing.standardscaler method)": [[856, "sklearn.preprocessing.StandardScaler.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[857, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[858, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[859, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[860, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[861, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[862, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[863, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[864, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[865, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[866, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[867, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[867, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[868, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[868, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[869, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[870, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[870, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[870, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[870, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[870, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[870, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[870, "sklearn.semi_supervised.LabelPropagation.set_params"]], "labelspreading (class in sklearn.semi_supervised)": [[871, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[871, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[871, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[871, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[871, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[871, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[871, "sklearn.semi_supervised.LabelSpreading.set_params"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[872, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[873, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[874, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[875, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.fit"]], "get_params() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.score"]], "set_params() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.set_params"]], "sparsify() (sklearn.svm.linearsvc method)": [[875, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[876, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[876, "sklearn.svm.LinearSVR.fit"]], "get_params() (sklearn.svm.linearsvr method)": [[876, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[876, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[876, "sklearn.svm.LinearSVR.score"]], "set_params() (sklearn.svm.linearsvr method)": [[876, "sklearn.svm.LinearSVR.set_params"]], "nusvc (class in sklearn.svm)": [[877, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[877, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.fit"]], "get_params() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[877, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[877, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[877, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.score"]], "set_params() (sklearn.svm.nusvc method)": [[877, "sklearn.svm.NuSVC.set_params"]], "nusvr (class in sklearn.svm)": [[878, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[878, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[878, "sklearn.svm.NuSVR.fit"]], "get_params() (sklearn.svm.nusvr method)": [[878, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[878, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[878, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[878, "sklearn.svm.NuSVR.score"]], "set_params() (sklearn.svm.nusvr method)": [[878, "sklearn.svm.NuSVR.set_params"]], "oneclasssvm (class in sklearn.svm)": [[879, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[879, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.fit_predict"]], "get_params() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[879, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.score_samples"]], "set_params() (sklearn.svm.oneclasssvm method)": [[879, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[880, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[880, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.fit"]], "get_params() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[880, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[880, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[880, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.score"]], "set_params() (sklearn.svm.svc method)": [[880, "sklearn.svm.SVC.set_params"]], "svr (class in sklearn.svm)": [[881, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[881, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[881, "sklearn.svm.SVR.fit"]], "get_params() (sklearn.svm.svr method)": [[881, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[881, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[881, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[881, "sklearn.svm.SVR.score"]], "set_params() (sklearn.svm.svr method)": [[881, "sklearn.svm.SVR.set_params"]], "l1_min_c() (in module sklearn.svm)": [[882, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[883, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[883, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.score"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[883, "sklearn.tree.DecisionTreeClassifier.set_params"]], "decisiontreeregressor (class in sklearn.tree)": [[884, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[884, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.score"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[884, "sklearn.tree.DecisionTreeRegressor.set_params"]], "extratreeclassifier (class in sklearn.tree)": [[885, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[885, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.score"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[885, "sklearn.tree.ExtraTreeClassifier.set_params"]], "extratreeregressor (class in sklearn.tree)": [[886, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[886, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.score"]], "set_params() (sklearn.tree.extratreeregressor method)": [[886, "sklearn.tree.ExtraTreeRegressor.set_params"]], "export_graphviz() (in module sklearn.tree)": [[887, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[888, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[889, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[890, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[890, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[891, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[892, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[893, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[894, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[895, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[896, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[897, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[898, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[899, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[900, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[901, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[902, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[903, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[904, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[905, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[906, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[907, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[908, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[909, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[910, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[911, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[912, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[913, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[914, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[915, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[916, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[917, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[918, "sklearn.utils.indexable"]], "available_if() (in module sklearn.utils.metaestimators)": [[919, "sklearn.utils.metaestimators.available_if"]], "if_delegate_has_method() (in module sklearn.utils.metaestimators)": [[920, "sklearn.utils.metaestimators.if_delegate_has_method"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[921, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[922, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[923, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[924, "sklearn.utils.murmurhash3_32"]], "parallel_backend() (in module sklearn.utils)": [[925, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[926, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[927, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[928, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[929, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[930, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[931, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[932, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[933, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[934, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[935, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[936, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[937, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[938, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[939, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[940, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[941, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[942, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[943, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[944, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[945, "sklearn.utils.validation.has_fit_parameter"]]}})